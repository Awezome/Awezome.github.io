{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"0673389a2c6ccf0bfbd57c7745284a570f40ce59","modified":1515820020439},{"_id":"themes/landscape/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1515820020499},{"_id":"themes/landscape/.gitignore","hash":"58d26d4b5f2f94c2d02a4e4a448088e4a2527c77","modified":1515820020536},{"_id":"source/CNAME","hash":"4315d3ce0794cea20c2e071e6c118211bcc46469","modified":1515820020439},{"_id":"themes/landscape/package.json","hash":"544f21a0b2c7034998b36ae94dba6e3e0f39f228","modified":1515820020536},{"_id":"themes/landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1515820020500},{"_id":"themes/landscape/README.md","hash":"37fae88639ef60d63bd0de22314d7cc4c5d94b07","modified":1515820020536},{"_id":"themes/landscape/_config.yml","hash":"79ac6b9ed6a4de5a21ea53fc3f5a3de92e2475ff","modified":1515820020537},{"_id":"source/_drafts/Qt-实现的拷贝文件夹的函数.md","hash":"d4f97a5c5648516c6a7b173b2c47a0b9825a4c5e","modified":1515820020499},{"_id":"source/_posts/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1515820020452},{"_id":"source/_posts/2444.md","hash":"1ded4a5dcc0af870fb6763a817cd354bab1abe96","modified":1515820020487},{"_id":"source/_posts/11-e4-b8-aa-e5-ae-9e-e7-94-a8-e7-9a-84apache-htaccess-e9-85-8d-e7-bd-ae.md","hash":"aa40aedeb3df01cf25eca313c51dfeab5a858ce7","modified":1515820020448},{"_id":"source/_posts/50-e7-82-b9-e6-8f-90-e9-ab-98php-e7-bc-96-e7-a8-8b-e6-95-88-e7-8e-87-e5-bc-95-e5-85-a5-e7-bc-93-e5-ad-98-e6-8f-90-e5-8d-87-e6-80-a7-e8-83-bd.md","hash":"869e933c6e0915adfa32bcf88fa7765f30828c80","modified":1515820020453},{"_id":"source/_posts/android-cpu-e8-b0-83-e8-8a-82-e6-a8-a1-e5-bc-8f-e5-92-8cio-e8-b0-83-e5-ba-a6-e6-a8-a1-e5-bc-8f-e8-af-a6-e8-a7-a3.md","hash":"10262ea0c9347e85c8e860ff80aba22eb0a7d843","modified":1515820020451},{"_id":"source/_posts/apache-e7-a6-81-e6-ad-a2-e6-98-be-e7-a4-ba-e7-9b-ae-e5-bd-95-e7-b4-a2-e5-bc-95.md","hash":"f121fcae288056581f54d67728cc8073adebf448","modified":1515820020487},{"_id":"source/_posts/apache-python-mod-wsgi-e7-9a-84-e7-bc-96-e8-af-91-e5-ae-89-e8-a3-85.md","hash":"2245d97c8f7e2e4aeab3da095175f3b183210298","modified":1515820020477},{"_id":"source/_posts/android-e7-b3-bb-e7-bb-9f-e4-bc-98-e5-8c-96-e7-ad-96-e7-95-a5.md","hash":"cb3fe966d279bd20ada4adbf07eade0655beac25","modified":1515820020486},{"_id":"source/_posts/bash-mysql-command-not-found-e8-a7-a3-e5-86-b3-e6-96-b9-e6-b3-95.md","hash":"859d785c82b833a25a89266f85b580176b44fe02","modified":1515820020476},{"_id":"source/_posts/bitmap-e7-ae-97-e6-b3-95.md","hash":"5af29da9db5273df637988b06241df8b6f4a4233","modified":1515820020468},{"_id":"source/_posts/bootstrap-e5-ae-9e-e7-8e-b0-ajax-model.md","hash":"272f2aa864e26b932fcb5b68ad42366be7dba224","modified":1515820020447},{"_id":"source/_posts/blogbak-v1-57-e5-8d-9a-e5-ae-a2-e6-95-b0-e6-8d-ae-e5-a4-87-e4-bb-bd-e6-90-ac-e5-ae-b6-e5-b7-a5-e5-85-b7-e4-b8-8b-e8-bd-bd.md","hash":"a0a1464c1f1d0124eb053082f47fa9f8e7e18c76","modified":1515820020476},{"_id":"source/_posts/c-e4-b8-adint-ef-bc-8cchar-ef-bc-8cstring-ef-bc-8ccstring-e7-b1-bb-e5-9e-8b-e8-bd-ac-e6-8d-a2.md","hash":"29e17d33abeb365b6ae9cb2bdc2a25d0e0c6887b","modified":1515820020449},{"_id":"source/_posts/cm-e8-ae-be-e7-bd-ae-e6-80-a7-e8-83-bd-e8-ae-be-e7-bd-ae-cpu-e8-ae-be-e7-bd-ae-e5-8f-af-e7-94-a8-e8-b0-83-e9-80-9f-e5-99-a8-e7-9a-84-e8-ae-be-e7-bd-ae.md","hash":"9c1b9f533534d8358fa837e58b3bbc6ff53d2adb","modified":1515820020444},{"_id":"source/_posts/dex2jar-e5-87-ba-e7-8e-b0error-occurred-during-initialization-of-vm-e8-a7-a3-e5-86-b3-e5-8a-9e-e6-b3-95.md","hash":"cf75a422f8bb6d278ca47fa60ac2d7fa1cf2b08f","modified":1515820020447},{"_id":"source/_posts/csv-e5-9c-a8-utf-8-e7-bc-96-e7-a0-81-e4-b8-8b-excel-2007-e6-89-93-e5-bc-80-e4-b9-b1-e7-a0-81-e7-9a-84-e8-a7-a3-e5-86-b3-e6-96-b9-e6-b3-95.md","hash":"c0460e59a4423bd971b5faa4b07d87ac6eab20c2","modified":1515820020484},{"_id":"source/_posts/directx-e4-bf-ae-e5-a4-8d-e5-b7-a5-e5-85-b7-ef-bc-8c-e8-a7-a3-e5-86-b3-e5-90-84-e7-a7-8d-e6-b8-b8-e6-88-8f-e5-90-84-e7-a7-8d-e9-97-ae-e9-a2-98.md","hash":"9b136d41a8f551f0b744becb9232e3ef60ca2626","modified":1515820020490},{"_id":"source/_posts/e3-80-8a-e6-98-9f-e9-99-85-e7-a9-bf-e8-b6-8a-e3-80-8b-e4-b8-8e-e7-9b-b8-e5-af-b9-e8-ae-ba-e4-b8-ad-e7-9a-84-e6-97-b6-e9-97-b4-e7-a9-ba-e9-97-b4.md","hash":"09e644d9844d8811961ad5e8aba04ffcfc740f04","modified":1515820020492},{"_id":"source/_posts/e3-80-90-e8-bd-ac-e3-80-91-e4-bd-bfqt-e7-a8-8b-e5-ba-8f-e5-8f-aa-e8-bf-90-e8-a1-8c-e4-b8-80-e4-b8-aa-e5-ae-9e-e4-be-8b.md","hash":"c58914deba26c5a51042330fe8618a595d003fce","modified":1515820020467},{"_id":"source/_posts/e4-b8-ad-e6-96-87-e4-b9-b1-e7-a0-81-e8-a7-a3-e5-86-b3-e6-96-b9-e6-b3-95phpword.md","hash":"5c0226a20e7c09935fe9596c6cf956cc23f66af0","modified":1515820020472},{"_id":"source/_posts/e5-85-b3-e4-ba-8e-e6-89-8b-e6-9c-ba-e4-bf-a1-e5-8f-b7-e5-bc-ba-e5-ba-a6-e5-8d-95-e4-bd-8ddbm-e5-92-8casu-ef-bc-81.md","hash":"5ef5cfdb422b1763bba93bb71a08401bc83c7272","modified":1515820020470},{"_id":"source/_posts/e5-85-b3-e9-97-adqmessagebox-e7-9a-84-e6-97-b6-e5-80-99-ef-bc-8c-e6-95-b4-e4-b8-aa-e7-a8-8b-e5-ba-8f-e4-b9-9f-e9-80-80-e5-87-ba.md","hash":"d4568293f8f952cafb38ab546811b0781c144bc3","modified":1515820020479},{"_id":"source/_posts/e5-85-b3-e4-ba-8e-redis-e6-96-87-e6-a1-a3-lrange-start-end-e6-83-85-e5-86-b5-e7-9a-84-e4-b8-80-e7-82-b9-e8-af-b4-e6-98-8e.md","hash":"be127863e292ff758d79a638a4cdd70ce5e5eae8","modified":1515820020453},{"_id":"source/_posts/e5-85-b3-e4-ba-8e-e6-95-b0-e7-bb-84-e7-9a-84-e5-87-a0-e9-81-93-e9-9d-a2-e8-af-95-e9-a2-98.md","hash":"e6a6e02ed403197075615ca7f70a4fc6f36765f2","modified":1515820020483},{"_id":"source/_posts/e5-86-8d-e5-ba-a6-e4-bd-bf-e7-94-a8-sublime-text-3-e5-8f-8a-e7-9b-b8-e5-85-b3-e6-8a-80-e5-b7-a7-e3-80-81-e6-8f-92-e4-bb-b6-e3-80-81-e7-be-8e-e5-8c-96.md","hash":"540b90bd4d292c5e51007fa6fbddb8e6e277579d","modified":1515820020472},{"_id":"source/_posts/e5-9b-9b-e7-ba-a7-e5-ae-8c-e6-af-95.md","hash":"6d7cb8aeb04bc169ec28ab43111e60117fbc2037","modified":1515820020497},{"_id":"source/_posts/e5-88-86-e7-b1-bb-e7-ae-97-e6-b3-95-e5-ad-a6-e4-b9-a0-e7-ac-94-e8-ae-b0-ef-bc-9a-e6-9c-b4-e7-b4-a0-e8-b4-9d-e5-8f-b6-e6-96-af-e5-8f-8a-e5-9e-83-e5-9c-be-e8-bf-87-e6-bb-a4.md","hash":"a2477133e07ea5c521eb8be2d87cd0d88a6513c3","modified":1515820020478},{"_id":"source/_posts/e5-87-a0-e7-a7-8d-e5-b8-b8-e8-a7-81-e7-9a-84-e6-8e-92-e5-ba-8f-e7-ae-97-e6-b3-95-e7-9a-84php-e5-ae-9e-e7-8e-b0.md","hash":"75653b1c9aa167dbf628219ecb5732f476583af4","modified":1515820020470},{"_id":"source/_posts/e5-8d-9a-e5-ae-a2-e4-bc-98-e5-8c-96-e8-ae-be-e7-bd-ae-e8-ae-b0-e5-bd-95.md","hash":"a11e04e33a081e5b40eaa4db9551e2cac4261fcb","modified":1515820020490},{"_id":"source/_posts/e5-9b-bd-e5-86-85-composer-e9-95-9c-e5-83-8f-e6-94-b6-e9-9b-86.md","hash":"99c78380e79bc9a32a508f4225cc248a58a6c3e0","modified":1515820020459},{"_id":"source/_posts/e5-9c-a8ui-widget-e4-b8-8a-e7-bb-98-e5-88-b6-e5-b8-a6-e5-9d-90-e6-a0-87-e8-bd-b4-e7-9a-84-e5-9b-be-e5-83-8f.md","hash":"459239cb8962f837593c44f8e0781f887f0dc189","modified":1515820020473},{"_id":"source/_posts/e5-ae-89-e8-a3-85mysql-python-ef-bc-9aenvironmenterror-mysql-config-not-found-e8-a7-a3-e5-86-b3-e6-96-b9-e6-b3-95.md","hash":"9374af3bd8a2556c1aa0de7a90d8c4a0f5bd1287","modified":1515820020480},{"_id":"source/_posts/e5-a4-a7-e6-95-b0-e6-8d-ae-e6-8e-92-e5-ba-8f-e6-88-96-e5-8f-96-e9-87-8d-e6-88-96-e5-8e-bb-e9-87-8d-e7-9b-b8-e5-85-b3-e9-97-ae-e9-a2-98.md","hash":"58b5af3acdab61f4c2310a462c388a96125a2bdb","modified":1515820020484},{"_id":"source/_posts/e5-ae-8c-e7-be-8e-e8-a7-a3-e5-86-b3-win8-1-win8-amd-e6-98-be-e5-8d-a1-e6-97-a0-e6-b3-95-e8-b0-83-e4-ba-ae-e5-ba-a6.md","hash":"1e321bf96f7c2f9ee3f42408d1900bed1661b43e","modified":1515820020489},{"_id":"source/_posts/e5-af-b9-e8-b1-a1-e5-9c-a8-e5-86-85-e5-ad-98-e4-b8-ad-e7-9a-84-e5-88-86-e9-85-8d-e8-af-b4-e6-98-8ephp.md","hash":"41b662676ca7f5a5f123e167de806030a1cbe5aa","modified":1515820020442},{"_id":"source/_posts/e5-b0-86-e6-9f-90-e4-b8-aaqt4-e9-a1-b9-e7-9b-ae-e5-8d-87-e7-ba-a7-e5-88-b0qt5-e9-81-87-e5-88-b0-e7-9a-84-e9-97-ae-e9-a2-98.md","hash":"d99432b0ddd7907e5373bf0ca8d715c737542323","modified":1515820020461},{"_id":"source/_posts/e5-bc-ba-e5-88-b6-ie-document-mode.md","hash":"611627229b088b66274124a8fd36f065c4c8df98","modified":1515820020477},{"_id":"source/_posts/e6-97-b6-e9-97-b4-e6-88-b3php.md","hash":"d80f800ea423e152bb521492f0adee91f737e620","modified":1515820020486},{"_id":"source/_posts/e6-95-b0-e7-bb-84php-e6-8e-92-e5-ba-8f-e5-87-bd-e6-95-b0-e6-80-bb-e7-bb-93.md","hash":"ee912d1009657340b0873b5050d219a7aa15ae9f","modified":1515820020478},{"_id":"source/_posts/e6-9b-b4-e6-94-b9-vagrant-e8-99-9a-e6-8b-9f-e7-a3-81-e7-9b-98-e7-9a-84-e9-bb-98-e8-ae-a4-e8-b7-af-e5-be-84.md","hash":"18e7163ff486a90171d6debf576f522e94403127","modified":1515820020480},{"_id":"source/_posts/e6-98-8e-e5-9f-ba-kx800-e9-94-ae-e7-9b-98-e5-85-a5-e6-89-8b.md","hash":"84737d36e22c68daf1df0443237cf15ecccc9baa","modified":1515820020493},{"_id":"source/_posts/e6-9c-ac-e5-9c-b0-e5-89-8d-e7-ab-af-e5-bc-80-e5-8f-91-document-mode-e4-b8-baie7-default-e9-97-ae-e9-a2-98.md","hash":"e2e0e36e53ab37f454c4e03e4e31a602a295d3e1","modified":1515820020495},{"_id":"source/_posts/e6-b8-85-e7-90-86win8-1-e6-88-91-e7-9a-84-e7-94-b5-e8-84-91-e9-87-8c-e5-85-ad-e4-b8-aa-e6-96-87-e4-bb-b6-e5-a4-b9-e6-96-b9-e6-b3-95.md","hash":"7eb5fc249780699818b0ab10ae8630893ca14ec5","modified":1515820020452},{"_id":"source/_posts/e6-9d-83-e9-99-90-e7-ae-a1-e7-90-86java-e5-ae-9e-e7-8e-b0-ef-bc-88-e6-ba-90-e4-ba-8elinux-e4-b8-ad-e7-9a-84-e6-9d-83-e9-99-90-e7-ae-a1-e7-90-86-e7-ae-97-e6-b3-95-ef-bc-89.md","hash":"edbab4709a5c1b3a375ab9e23c39cf50539ce881","modified":1515820020459},{"_id":"source/_posts/e6-ad-a3-e5-88-99-e8-a1-a8-e8-be-be-e5-bc-8f-e8-af-ad-e6-b3-95.md","hash":"f1b4b6641ef2fbb53801a4c8953707955dbd053d","modified":1515820020449},{"_id":"source/_posts/e7-ba-af-php-html-css-e5-ae-9e-e7-8e-b0-e7-bb-84-e7-bb-87-e7-bb-93-e6-9e-84-e5-9b-be.md","hash":"2fdb4237cde8349aa3aed999ebc7810c43c3b41f","modified":1515820020488},{"_id":"source/_posts/e8-a7-a3-e5-86-b3ssh-e8-bf-9c-e7-ab-afvim-e4-b8-ad-e6-96-87-e4-b9-b1-e7-a0-81-e7-9a-84-e9-97-ae-e9-a2-98.md","hash":"eaff13c7e304c18875a75ed643420d38e0b9e02f","modified":1515820020458},{"_id":"source/_posts/e8-ae-be-e8-ae-a1-e6-a8-a1-e5-bc-8f-e5-ad-a6-e4-b9-a0-e7-ae-80-e5-8d-95-e6-80-bb-e7-bb-93.md","hash":"64359723ab180da78fd21f330cd6e462bc0ce7dd","modified":1515820020490},{"_id":"source/_posts/e8-a7-a3-e6-9e-90-qt-e7-a8-8b-e5-ba-8f-e5-9c-a8windows-e4-b8-8b-e5-8f-91-e5-b8-83.md","hash":"2fc0a62686d43a11e95793a204e3f0fa26d41320","modified":1515820020491},{"_id":"source/_posts/e8-b7-b3-e8-a1-a8-skip-list-e7-9a-84-e5-9f-ba-e6-9c-ac-e6-a6-82-e5-bf-b5.md","hash":"5e2ec9d52cdca5549be86d2d3803b222c21787ad","modified":1515820020446},{"_id":"source/_posts/e8-bd-ac-e4-b8-80-e9-81-93-e6-b7-98-e6-b1-b085-e9-9d-a2-e8-af-95-e8-80-85-e7-9a-84-e7-99-be-e5-ba-a6-e5-bc-80-e5-8f-91-e8-80-85-e9-9d-a2-e8-af-95-e9-a2-98.md","hash":"079017054fb721d95a10dc0396b0c16310c2ea8c","modified":1515820020492},{"_id":"source/_posts/e8-bd-ac-e5-9b-be-e8-a7-a3https-e5-8d-8f-e8-ae-ae-e5-8a-a0-e5-af-86-e8-a7-a3-e5-af-86-e5-85-a8-e8-bf-87-e7-a8-8b.md","hash":"29a22f0215456ff617c8c3bf060d949015692139","modified":1515820020444},{"_id":"source/_posts/e8-bd-ac-e6-80-8e-e6-a0-b7-e7-90-86-e8-a7-a3-e9-98-bb-e5-a1-9e-e9-9d-9e-e9-98-bb-e5-a1-9e-e4-b8-8e-e5-90-8c-e6-ad-a5-e5-bc-82-e6-ad-a5-e7-9a-84-e5-8c-ba-e5-88-ab-ef-bc-9f.md","hash":"b774124037e4384a7f914e6478825e65ef9791fd","modified":1515820020494},{"_id":"source/_posts/e8-bd-ac-e7-a8-8b-e5-ba-8f-e8-ae-be-e8-ae-a1-e7-ab-9e-e8-b5-9bacm-e8-ae-ad-e7-bb-83-e6-89-8b-e5-86-8c.md","hash":"8ba959fdf57489e7bfa70e572b6b937825c83f4b","modified":1515820020441},{"_id":"source/_posts/e8-bf-81-e7-a7-bb-e7-bd-91-e7-ab-99-e5-88-b0-vultr-vps.md","hash":"90e3f717cc1b638e7d4f6568803eeaefb17b52e3","modified":1515820020459},{"_id":"source/_posts/e8-bd-ac-phpstorm-tips-and-tricks.md","hash":"9dc9eec565785d2308f348d38861854781507887","modified":1515820020493},{"_id":"source/_posts/e8-bd-ac-reactreact-native-e7-9a-84es5-es6-e5-86-99-e6-b3-95-e5-af-b9-e7-85-a7-e8-a1-a8.md","hash":"d11b506f9a6edc698ec42f9b7f5cd0f9a257100c","modified":1515820020496},{"_id":"source/_posts/e9-9b-b6-e7-a2-8e-e7-9f-a5-e8-af-86-e6-80-bb-e7-bb-93php.md","hash":"0ad137b9ed64d303a207aedc0cb3751f7ae09812","modified":1515820020455},{"_id":"source/_posts/e9-93-be-e6-8e-a5-e8-a1-a8-e7-9a-84-e9-99-84-e5-8a-a0-e5-8a-9f-e8-83-bd-e5-b0-9a-e6-9c-aa-e6-bf-80-e6-b4-bb-e7-9a-84-e8-a7-a3-e5-86-b3-e6-96-b9-e6-b3-95phpmyadmin.md","hash":"07be688c13cf41ada2b0c6df297515ff368e8c05","modified":1515820020481},{"_id":"source/_posts/easy-install-e5-87-a0-e4-b8-aa-e6-9c-89-e7-94-a8-e7-9a-84-e5-91-bd-e4-bb-a4.md","hash":"72467c7fc53c0d46205b7fb1368f647ee21b0fba","modified":1515820020479},{"_id":"source/_posts/fedora-e5-ae-89-e8-a3-85-rewiew-board.md","hash":"20d35201a13af99c2ad78d73f51d4809c429733b","modified":1515820020471},{"_id":"source/_posts/flash-e4-b8-ad-e8-83-8c-e6-99-af-e9-9f-b3-e4-b9-90-e5-a3-b0-e9-9f-b3-e5-8f-98-e5-b0-8f.md","hash":"1011da3c2c6a7bb4e2597f0ac7e1e5f3d934a6e8","modified":1515820020461},{"_id":"source/_posts/gentoo-apache2-e5-90-af-e5-8a-a8-e5-a4-b1-e8-b4-a5-e8-a7-a3-e5-86-b3-e5-8a-9e-e6-b3-95.md","hash":"70c56ddad9bcbd2c3d2049ea416e74bec431fa9e","modified":1515820020454},{"_id":"source/_posts/flash-e5-a3-b0-e9-9f-b3-e5-a4-84-e7-90-86-e5-9f-ba-e7-a1-80as-e4-bb-a3-e7-a0-81.md","hash":"66ed0deb3ce4d2c8abca61d66b134cb55088ae59","modified":1515820020482},{"_id":"source/_posts/gentoo-e5-9b-bd-e5-86-85-e6-ba-90.md","hash":"03094fd7139cfb0d3247ec25f09b3c96396f1534","modified":1515820020445},{"_id":"source/_posts/gentoo-apache-e5-8a-a0-e8-bd-bdmod-wsgi-invalid-command-wsgipassauthorization-e8-a7-a3-e5-86-b3-e5-8a-9e-e6-b3-95.md","hash":"f7c3b1db17f4bcefb42c1039995f988ee0703043","modified":1515820020497},{"_id":"source/_posts/hadoop-e4-b8-8ehive-e7-9a-84-e5-8d-95-e6-9c-ba-e9-85-8d-e7-bd-ae.md","hash":"8bbb7ecb041139d60192f0fb4c3841c4d634f2ef","modified":1515820020466},{"_id":"source/_posts/gentoo-e5-ae-89-e8-a3-85-e5-85-a8-e8-bf-87-e7-a8-8b-e8-ae-b0-e5-bd-95.md","hash":"43b4aa2bffed1a3a84a22d3c104264b34f37f23c","modified":1515820020466},{"_id":"source/_posts/getting-things-done-gtd-e7-9a-84-e7-90-86-e5-bf-b5.md","hash":"e171b9790a4f381fdd6b068596ae316685f00671","modified":1515820020475},{"_id":"source/_posts/git-bash-e4-b8-ad-e6-96-87-e6-94-af-e6-8c-81.md","hash":"f63c22002e927edebebfd099201693222bfc7b64","modified":1515820020485},{"_id":"source/_posts/htmlspecialchars-e5-92-8c-htmlentities-e7-9a-84-e5-8c-ba-e5-88-ab.md","hash":"bb5bee51f357f0c6d190c7cb3959d953429c574b","modified":1515820020465},{"_id":"source/_posts/hello-world.md","hash":"8a02477044e2b77f1b262da2c48c01429e4a32e4","modified":1515820020450},{"_id":"source/_posts/hive-hadoop-faq.md","hash":"ee6028b5aad246e26646ec59734d099b8b83633a","modified":1515820020491},{"_id":"source/_posts/htc-mytouch-4g-g-e9-94-ae-e6-94-b9-e4-b8-ba-e9-94-81-e5-b1-8f-e9-94-ae.md","hash":"984cc01a40cc12e358e024a4cd3817c7c3714d22","modified":1515820020463},{"_id":"source/_posts/ibus-e4-b8-8b-e5-ae-89-e8-a3-8598-e4-ba-94-e7-ac-94-e7-9a-84-e6-96-b9-e6-b3-95.md","hash":"ac1f1b659654e33c2bf496d45d408c75065359cc","modified":1515820020454},{"_id":"source/_posts/ie-positionfixed-e8-a7-a3-e5-86-b3-e5-8a-9e-e6-b3-95.md","hash":"0d545e20775b34396832ab4e29004902700df46c","modified":1515820020457},{"_id":"source/_posts/iframe-e9-ab-98-e5-ba-a6-e8-87-aa-e9-80-82-e5-ba-94-e5-86-85-e5-ae-b9.md","hash":"6d38d374344760c84fd1d6ed680f382e4c7bff0e","modified":1515820020468},{"_id":"source/_posts/index-e9-a1-b5-e9-9d-a2-e5-8f-aa-e6-98-be-e7-a4-bamysql-e8-bf-94-e5-9b-9e-ef-bc-9a-e6-97-a0-e6-b3-95-e8-bf-9e-e6-8e-a5-ef-bc-9a-e6-97-a0-e6-95-88-e7-9a-84-e8-ae-be-e7-bd-aephpmyadmin.md","hash":"9e7703649a59be118ade530fe68adb5c11afccd1","modified":1515820020445},{"_id":"source/_posts/java-substring-e4-b8-a4-e4-b8-aa-e5-8f-82-e6-95-b0-e7-9a-84-e5-9d-91.md","hash":"440c4ea495b61c08a9ba86b95885ee56d2defbaa","modified":1515820020454},{"_id":"source/_posts/java-e7-94-a8socket-e8-8e-b7-e5-8f-96-e7-bd-91-e9-a1-b5-e5-86-85-e5-ae-b9.md","hash":"d19afa60904d8e7c35fa915d529e09376dedea07","modified":1515820020455},{"_id":"source/_posts/java-e6-a0-88-e4-b8-8e-e5-a0-86.md","hash":"a5a2409404b1bd7d7178c9fc8be0cc7a706dd9fe","modified":1515820020462},{"_id":"source/_posts/jdk-path-classpath-e8-ae-b0-e5-bd-95.md","hash":"1c006a43a87ea4965076cc05274edd1d7b79fe09","modified":1515820020471},{"_id":"source/_posts/jquery-ready-load-e5-92-8cwindows-load-e7-9a-84-e5-85-b3-e7-b3-bb.md","hash":"e39e9abc5985b3c2085361b301439ccfd5d174e6","modified":1515820020486},{"_id":"source/_posts/js-e4-b8-addate-e5-af-b9-e8-b1-a1month-e8-a6-81-e6-af-94-e7-9c-9f-e5-ae-9e-e5-80-bc-e5-b0-8f1.md","hash":"31464bfb75b0d538126e79eb70c14185b874dfa0","modified":1515820020476},{"_id":"source/_posts/jquery-validate-e9-aa-8c-e8-af-81-e6-8f-92-e4-bb-b6-ef-bc-8c-e5-9c-a8ajax-e6-8f-90-e4-ba-a4-e6-96-b9-e5-bc-8f-e4-b8-8b-e7-9a-84-e9-aa-8c-e8-af-81.md","hash":"711abf6f3786c709502ccb9fd3ad6ca200bf107b","modified":1515820020457},{"_id":"source/_posts/jqueryphp-e4-b8-8d-e5-88-b7-e6-96-b0-e5-88-a0-e9-99-a4table-e7-9a-84tr.md","hash":"46df2742ac921df4788ad09a4088ed05f6fdb73a","modified":1515820020465},{"_id":"source/_posts/linux-e4-b8-8b-e6-9f-a5-e7-9c-8bpython-e5-ae-89-e8-a3-85-e8-b7-af-e5-be-84.md","hash":"f2fd1d6e241680f78191482a894779ab6bc7a91f","modified":1515820020482},{"_id":"source/_posts/lamp-e6-b5-81-e7-a8-8b-e4-b8-ad-e7-9a-84-e4-b9-b1-e7-a0-81-e9-97-ae-e9-a2-98-e6-80-bb-e7-bb-93.md","hash":"3f00a4ce6e7317bfea7001abb75cd6ea043b59a4","modified":1515820020443},{"_id":"source/_posts/lavarel-e5-a2-9e-e5-8a-a0-e5-85-a8-e5-b1-80-e5-87-bd-e6-95-b0-e6-96-87-e4-bb-b6.md","hash":"074daa357989481c51c5a8a7eb4abe88baf45708","modified":1515820020474},{"_id":"source/_posts/linux-e6-ba-90-e7-a0-81-e5-ae-89-e8-a3-85-memcached.md","hash":"798866a9dbf861aa6dec41a54850eef8969c66ba","modified":1515820020458},{"_id":"source/_posts/modern-php-e4-bc-a0-e5-80-bc-e3-80-81-e5-bc-95-e7-94-a8-e5-92-8c-e5-af-b9-e8-b1-a1-e6-a0-87-e8-af-86-e7-ac-a6.md","hash":"c7617dd65307229dfab1970d6cb2250fe4519568","modified":1515820020479},{"_id":"source/_posts/linux-pysvn-e6-ba-90-e7-a0-81-e5-ae-89-e8-a3-85.md","hash":"b9355dfe7f99bdd790232c7ed279d0f0a7aeaede","modified":1515820020441},{"_id":"source/_posts/modern-php-e6-88-90-e7-94-9f-e5-99-a8-e5-8f-8a-e5-ae-9e-e4-be-8b.md","hash":"bb8d7f4ae5fc3fa8db2011b7c35e64f44a8cf6de","modified":1515820020483},{"_id":"source/_posts/modern-php-e9-97-ad-e5-8c-85-e5-92-8c-e5-8c-bf-e5-90-8d-e5-87-bd-e6-95-b0.md","hash":"602378f4bf4f84828df7e3a2995abf85f46eb9fa","modified":1515820020498},{"_id":"source/_posts/mysql-1130-is-not-allowed-to-connect-to-this-mysql-server.md","hash":"b3d7b42ccc8f027efe28ae84a85e611a977077e8","modified":1515820020473},{"_id":"source/_posts/mysql-e5-a4-8d-e4-b9-a0-e7-ac-94-e8-ae-b0-ef-bc-9a-e9-94-81.md","hash":"6342754dbc29a896796c653f1bcb268d2f7af399","modified":1515820020494},{"_id":"source/_posts/mysql-e5-a4-8d-e4-b9-a0-e7-ac-94-e8-ae-b0-ef-bc-9a-e7-b4-a2-e5-bc-95.md","hash":"219b6f33b2f8cf9d023f2d5fa4ec0e9095953f29","modified":1515820020496},{"_id":"source/_posts/mysql-e5-a4-8d-e4-b9-a0-e7-ac-94-e8-ae-b0-ef-bc-9a-e8-bf-9e-e6-8e-a5.md","hash":"cd4f15f80d76d70ab2e14c374a2a2775d9441a29","modified":1515820020445},{"_id":"source/_posts/mysql-e5-ad-97-e6-ae-b5-e7-b1-bb-e5-9e-8b-e8-af-a6-e8-a7-a3.md","hash":"07b1ac913d5b4358f4ae382810f02daf7b0f4794","modified":1515820020468},{"_id":"source/_posts/mysql-e9-bb-98-e8-ae-a4-e5-ad-97-e7-ac-a6-e9-9b-86-e8-ae-be-e7-bd-ae.md","hash":"1db672790ec2273a5de101b077f0b40fa56361af","modified":1515820020464},{"_id":"source/_posts/netbeans-e4-b8-adjava-e4-b8-8emysql-e5-ad-a6-e4-b9-a0.md","hash":"b93e0161a3db46aed32b76179cda56578fa8f3be","modified":1515820020481},{"_id":"source/_posts/mysql5-5-30-e6-ba-90-e7-a0-81-e5-8c-85-e7-bc-96-e8-af-91-e5-ae-89-e8-a3-85-e6-96-b9-e6-b3-95.md","hash":"5409b847ce08195ca00c91b0f092e232e0e7128b","modified":1515820020464},{"_id":"source/_posts/netbeans-e5-87-ba-e7-8e-b0cannot-locate-java-installation-in-specified-jdkhome-e9-94-99-e8-af-af-e7-9a-84-e8-a7-a3-e5-86-b3-e5-8a-9e-e6-b3-95.md","hash":"5d5b629b306c09420b47686abe13325f4eb850ab","modified":1515820020495},{"_id":"source/_posts/on-the-unripe-grapes-ripe-grapes-grape-dead-issue-i-think-i-would-like-to.md","hash":"cb20abca69423a00583af2cdd1ebd9689b5d45ad","modified":1515820020465},{"_id":"source/_posts/oracle-11g-e5-a6-82-e4-bd-95-e5-ae-8c-e5-85-a8-e5-8d-b8-e8-bd-bd-e6-96-b9-e6-b3-95.md","hash":"ea6a02e862d4f22ae486d6cefe77ba759082b561","modified":1515820020469},{"_id":"source/_posts/php-e5-ad-97-e7-ac-a6-e4-b8-b2-e5-92-8c-e6-95-b0-e5-ad-97-e6-af-94-e8-be-83-e6-97-b6-e5-bc-ba-e5-88-b6-e8-bd-ac-e6-8d-a2-e7-9a-84-e9-97-ae-e9-a2-98.md","hash":"b570b17b4ae5a2e748b7ded1736621f5e9559f7b","modified":1515820020448},{"_id":"source/_posts/php-e5-af-bc-e5-87-ba-cvs-excel.md","hash":"93e25b8d3a588ba9eb977fa9ff6cef8088126314","modified":1515820020462},{"_id":"source/_posts/php-e8-af-bb-e5-8f-96-e5-a4-a7-e6-96-87-e4-bb-b6-e7-9a-84-e5-a4-9a-e7-a7-8d-e5-a4-84-e7-90-86-e6-96-b9-e5-bc-8f.md","hash":"bcbee401ca419712dd75ebade3b1c7cee46d97b6","modified":1515820020440},{"_id":"source/_posts/php-e8-be-93-e5-87-ba-e4-b8-8a-e4-b8-aa-e6-9c-88-e6-9c-80-e5-90-8e-e4-b8-80-e5-a4-a9.md","hash":"992a0a4a6cdc9880c216c63e949cdaf2b14664dc","modified":1515820020475},{"_id":"source/_posts/php-strstr-stristr-strpos.md","hash":"2f37b57e4724dabc466bb68f77de1bedc1a34922","modified":1515820020472},{"_id":"source/_posts/qq-e4-ba-94-e7-ac-94-e6-98-93-e6-83-b3-e6-93-8e-e5-a4-a998-e8-af-8d-e5-ba-93v1-100221-e4-b8-8b-e8-bd-bd.md","hash":"80f2e9d8ffc68c3ce91564f2202323e20025b5c3","modified":1515820020450},{"_id":"source/_posts/phpstorm-e5-b8-b8-e7-94-a8-e5-bf-ab-e6-8d-b7-e9-94-ae-e6-95-b4-e7-90-86.md","hash":"8728c26da7ef1eb76fc8ff721629eab21201ab41","modified":1515820020496},{"_id":"source/_posts/post-e6-8e-a5-e6-94-b6-e6-95-b0-e7-bb-84php.md","hash":"177ae626318e77cdcbc72354a579e22313346e9f","modified":1515820020446},{"_id":"source/_posts/qsqlquery-qt.md","hash":"5be2cddafacbaf212c9e956f13b0a2bd9bb817c2","modified":1515820020489},{"_id":"source/_posts/qt-e5-85-b3-e4-ba-8etoolbutton-e6-8e-a7-e4-bb-b6-e7-9a-84-e8-b4-b4-e5-9b-be.md","hash":"e4bb23c74c2991a1ee46f6ea29c79b2a03ade624","modified":1515820020493},{"_id":"source/_posts/qt-e3-80-80-e9-80-8f-e6-98-8e-e7-aa-97-e4-bd-93-e5-ae-9e-e7-8e-b0.md","hash":"cf3aa48e0c16c7bb95f95a3b054a8c3cd9bb4a87","modified":1515820020484},{"_id":"source/_posts/qt-e5-87-ba-e7-8e-b0undefined-reference-to-vtable-for-e5-8e-9f-e5-9b-a0-e6-80-bb-e7-bb-93.md","hash":"45b5edb480668013157191ff71e1e24af629958e","modified":1515820020442},{"_id":"source/_posts/qt-e5-a2-9e-e5-8a-a0-e7-a8-8b-e5-ba-8f-e5-9b-be-e6-a0-87.md","hash":"4423a4f4716e6b8f9bbca0d9710ff15bddb97da9","modified":1515820020485},{"_id":"source/_posts/qt-e5-bc-b9-e5-87-ba-e5-af-b9-e8-af-9d-e6-a1-86-e6-96-b9-e6-b3-95.md","hash":"ba6aa6448689218cfa9cbf6e6c529d995e2081f3","modified":1515820020463},{"_id":"source/_posts/qt-setwindowflags-e7-9a-84-e4-bd-bf-e7-94-a8.md","hash":"f77b5723f058974229bc36a7e08edb762c5235a0","modified":1515820020463},{"_id":"source/_posts/qt-e6-a8-a1-e6-80-81-e5-af-b9-e8-af-9d-e6-a1-86-e5-8f-8a-e9-9d-9e-e6-a8-a1-e6-80-81-e5-af-b9-e8-af-9d-e6-a1-86.md","hash":"ec7c106915e1c9e4133038b0235166afe9e86344","modified":1515820020469},{"_id":"source/_posts/react-native-mac-e4-b8-8b-android-e7-8e-af-e5-a2-83-e5-8f-8aide-e9-85-8d-e7-bd-ae.md","hash":"958851079b7079254cc39b48e44544fa88399ab4","modified":1515820020488},{"_id":"source/_posts/spring-security-e8-8e-b7-e5-8f-96-e5-bd-93-e5-89-8d-e7-94-a8-e6-88-b7-e4-bf-a1-e6-81-af.md","hash":"dd647e45ea9f2ffaea7ba29e901a85fefdc3a96c","modified":1515820020442},{"_id":"source/_posts/review-board-mysql-e4-b8-ad-e6-96-87-utf8-e6-94-af-e6-8c-81.md","hash":"35ae6aa8bd3e132f8c1803fc78df7069a4737de5","modified":1515820020475},{"_id":"source/_posts/rsync-e7-94-a8-e6-b3-95-e6-80-bb-e7-bb-93.md","hash":"9865dc2e5ef6f15581e3e5106ca1dc7733e0e159","modified":1515820020483},{"_id":"source/_posts/sql-joins-e5-9b-be-e8-a7-a3.md","hash":"00ea227eaa95c569c46a621eec8828e0ebae3828","modified":1515820020471},{"_id":"source/_posts/struts2-e9-aa-8c-e8-af-81-e5-a4-b1-e8-b4-a5-e5-90-8e-e8-bf-94-e5-9b-9einput-ef-bc-8cselect-e4-b8-adlist-e6-95-b0-e6-8d-ae-e4-b8-a2-e5-a4-b1-e9-97-ae-e9-a2-98.md","hash":"229d248e7ee493969219682b9ee8cf5c0ce04e39","modified":1515820020470},{"_id":"source/_posts/struts2-json-jquery-ajax-e5-ae-9e-e7-8e-b0-e7-94-a8-e6-88-b7-e7-99-bb-e9-99-86-e5-8f-8a-e4-b8-9a-e9-9d-a2-e8-b7-b3-e8-bd-ac.md","hash":"5f1dca7c6066746f0b70d1d902f8b5d7baae0107","modified":1515820020450},{"_id":"source/_posts/sqlite-e5-88-b0-mysql-e4-b8-80-e9-94-ae-e8-bf-81-e7-a7-bb.md","hash":"491ebf78cf53c691e2a8a52caa96ad79d90e098b","modified":1515820020488},{"_id":"source/_posts/ubuntu-11-10-e5-ae-89-e8-a3-85google-earth-e5-ad-97-e4-bd-93-e4-b8-8d-e6-b8-85-e8-a7-a3-e5-86-b3-e5-8a-9e-e6-b3-95.md","hash":"804a4cdc00f35b10ca5841b2b95958109e8982a8","modified":1515820020497},{"_id":"source/_posts/ubuntu-e4-b8-ad-e6-96-87-e8-be-93-e5-85-a5-e6-b3-95fcitx-e5-ae-89-e8-a3-85.md","hash":"4fba459dedad4fd298abcca20e9bb1ab24db0698","modified":1515820020460},{"_id":"source/_posts/ubuntu-e5-8d-87-e7-ba-a7-e5-af-bc-e8-87-b4-e6-98-be-e7-a4-ba-e6-b7-b7-e4-b9-b1-e5-8f-8aa-e5-8d-a1-e5-ae-89-e8-a3-85-e5-8d-b8-e8-bd-bd.md","hash":"08dc33e26a60475681da81894e87cc5f891e23de","modified":1515820020460},{"_id":"source/_posts/ubuntu-e5-bc-80-e6-9c-ba-e5-90-af-e5-8a-a8-e9-a1-b9.md","hash":"61f62c480646060d21b39abec0fb452c803ca06e","modified":1515820020451},{"_id":"source/_posts/ubuntu-e6-97-a0-e7-ba-bf-e5-af-86-e7-a0-81-e7-a0-b4-e8-a7-a3-e5-88-a9-e5-99-a8aircrack-ng.md","hash":"e2b0d07f189eacfd425b11cca71c63be6587800d","modified":1515820020456},{"_id":"source/_posts/ubuntu64-e4-bd-8d-e5-ae-89-e8-a3-85xampp-e5-8f-8a-e5-b8-b8-e8-a7-81-e9-97-ae-e9-a2-98.md","hash":"f9a3140bf42375c4b39621940e7793ee6cb97ddc","modified":1515820020461},{"_id":"source/_posts/utf-8-e4-b8-8eutf-8-e6-97-a0bom-e7-9a-84-e5-8c-ba-e5-88-ab.md","hash":"bdf6e539da12ebeab60be46e9925d972774a1fbf","modified":1515820020457},{"_id":"source/_posts/vagrant-e4-b8-8evmware-vitualbox-e7-9a-84-e9-85-8d-e7-bd-ae-e4-b8-8e-e5-ba-94-e7-94-a8.md","hash":"43d71ed85b79c6317652ce92743946fe1581bab8","modified":1515820020467},{"_id":"source/_posts/win8-e4-bd-bf-e7-94-a8-e5-88-86-e5-8c-ba-e5-8a-a9-e6-89-8b4k-e5-af-b9-e9-bd-90-e5-90-8e-ef-bc-8c-e5-bf-ab-e9-80-9f-e5-90-af-e5-8a-a8-e6-97-a0-e6-95-88-e8-a7-a3-e5-86-b3-e5-8a-9e-e6-b3-95.md","hash":"707bcb0ea22029b29d6751d34ead1503584da34b","modified":1515820020482},{"_id":"source/_posts/win8-e5-be-85-e6-9c-ba-e7-8a-b6-e6-80-81-e4-b8-8b-e9-a3-8e-e6-89-87-e7-8b-82-e8-bd-ac-e7-9a-84-e5-8f-af-e8-83-bd-e5-8e-9f-e5-9b-a0.md","hash":"5c27360851c8c6edfe115a0601e3f815595df9cb","modified":1515820020467},{"_id":"source/_posts/win8-e6-b7-bb-e5-8a-a0-e5-b1-80-e5-9f-9f-e7-bd-91-e6-89-93-e5-8d-b0-e6-9c-ba-e7-9a-84-e7-ae-80-e5-8d-95-e6-96-b9-e6-b3-95.md","hash":"0e68f8b884ceb77af03b63db17429084b7b026db","modified":1515820020474},{"_id":"source/_posts/windows-e4-b8-8b-nginx-php-e9-85-8d-e7-bd-ae-e6-96-87-e4-bb-b6.md","hash":"c5f2cadaa8c86bad91c9a4bc78cd1a0a819019bb","modified":1515820020447},{"_id":"source/_posts/wordpress-e4-bd-bf-e7-94-a8-e4-b8-83-e7-89-9bcdn.md","hash":"8de6d84c33d10ae067b17c8cbfefbf051cf72e5b","modified":1515820020443},{"_id":"source/_posts/wordpress-e7-bc-96-e8-af-91-e5-ae-89-e8-a3-85-php-7-0-4.md","hash":"4039aef051439f1eb441d072f63aa771fb93f1cc","modified":1515820020448},{"_id":"source/_posts/xampp-1-8-e6-89-93-e5-bc-80-e6-85-a2-e7-9a-84-e8-a7-a3-e5-86-b3-e6-96-b9-e6-b3-95.md","hash":"477183d71ef2612fd9df22c4e0fc63f1918d6d60","modified":1515820020456},{"_id":"source/_posts/xampp-e8-ae-bf-e9-97-ae-e5-87-ba-e7-8e-b0new-xampp-security-concept.md","hash":"e8e0deb3471049c68240aa952dd7502e4189cef5","modified":1515820020481},{"_id":"source/_posts/xshell-solarized-darkk-e9-85-8d-e8-89-b2.md","hash":"4f76d1c7379e5cbf50a04ac9150765b831c81a77","modified":1515820020474},{"_id":"themes/landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1515820020533},{"_id":"themes/landscape/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1515820020532},{"_id":"themes/landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1515820020532},{"_id":"themes/landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1515820020534},{"_id":"themes/landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1515820020532},{"_id":"themes/landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1515820020535},{"_id":"themes/landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1515820020533},{"_id":"themes/landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1515820020535},{"_id":"themes/landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1515820020534},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1515820020535},{"_id":"themes/landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1515820020533},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1515820020534},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1515820020502},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1515820020501},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1515820020501},{"_id":"themes/landscape/layout/layout.ejs","hash":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":1515820020502},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1515820020509},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1515820020501},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1515820020502},{"_id":"themes/landscape/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1515820020537},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1515820020505},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"d0d753d39038284d52b10e5075979cc97db9cd20","modified":1515820020508},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"c4c835615d96a950d51fa2c3b5d64d0596534fed","modified":1515820020509},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"950ddd91db8718153b329b96dc14439ab8463ba5","modified":1515820020506},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"93518893cf91287e797ebac543c560e2a63b8d0e","modified":1515820020508},{"_id":"themes/landscape/layout/_partial/gauges-analytics.ejs","hash":"aad6312ac197d6c5aaf2104ac863d7eba46b772a","modified":1515820020506},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"5abf77aec957d9445fc71a8310252f0013c84578","modified":1515820020507},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1515820020506},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1515820020508},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"7e749050be126eadbc42decfbea75124ae430413","modified":1515820020507},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1515820020509},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1515820020510},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1515820020511},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"0d4f064733f8b9e45c0ce131fe4a689d570c883a","modified":1515820020511},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1515820020511},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1515820020510},{"_id":"themes/landscape/source/css/_variables.styl","hash":"628e307579ea46b5928424313993f17b8d729e92","modified":1515820020523},{"_id":"themes/landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1515820020531},{"_id":"themes/landscape/source/css/style.styl","hash":"a70d9c44dac348d742702f6ba87e5bb3084d65db","modified":1515820020527},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1515820020515},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1515820020514},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1515820020513},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1515820020512},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1515820020515},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1515820020513},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1515820020514},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1515820020512},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1515820020514},{"_id":"themes/landscape/source/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1515820020531},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1515820020503},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1515820020504},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1515820020505},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1515820020504},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1515820020504},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1515820020505},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1515820020526},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1515820020520},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1515820020520},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"10685f8787a79f79c9a26c2f943253450c498e3e","modified":1515820020524},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1515820020527},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1515820020526},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1515820020525},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1515820020526},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":1515820020524},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1515820020527},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1515820020525},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1515820020525},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1515820020530},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1515820020529},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1515820020530},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1515820020519},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1515820020517},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1515820020519},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1515820020518},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1515820020518},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1515820020518},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1515820020529},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1515820020528},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1515820020523},{"_id":"public/2018/01/13/hello-world/index.html","hash":"28ba854eb9bde2a00b075c72241ca6199093c4fb","modified":1515820221273},{"_id":"public/2016/06/10/e8-bd-ac-reactreact-native-e7-9a-84es5-es6-e5-86-99-e6-b3-95-e5-af-b9-e7-85-a7-e8-a1-a8/index.html","hash":"59e4f5727e4366c874e4ae80146aecb77817b005","modified":1515820221273},{"_id":"public/2017/10/26/e8-a7-a3-e5-86-b3ssh-e8-bf-9c-e7-ab-afvim-e4-b8-ad-e6-96-87-e4-b9-b1-e7-a0-81-e7-9a-84-e9-97-ae-e9-a2-98/index.html","hash":"cb10b05c76ddf55165c4f4679f6e967a1de4faa1","modified":1515820221274},{"_id":"public/2016/06/09/react-native-mac-e4-b8-8b-android-e7-8e-af-e5-a2-83-e5-8f-8aide-e9-85-8d-e7-bd-ae/index.html","hash":"3e0400fcc6225ca2bab63d02c7590df2ddc4ad9a","modified":1515820221274},{"_id":"public/2016/06/05/modern-php-e4-bc-a0-e5-80-bc-e3-80-81-e5-bc-95-e7-94-a8-e5-92-8c-e5-af-b9-e8-b1-a1-e6-a0-87-e8-af-86-e7-ac-a6/index.html","hash":"f79677f821b9661653063919b5bd134cbe87eb59","modified":1515820221274},{"_id":"public/2016/06/02/modern-php-e6-88-90-e7-94-9f-e5-99-a8-e5-8f-8a-e5-ae-9e-e4-be-8b/index.html","hash":"3aa0bcbaa008e15560aec8e3984edaeae38504a9","modified":1515820221274},{"_id":"public/2016/05/29/modern-php-e9-97-ad-e5-8c-85-e5-92-8c-e5-8c-bf-e5-90-8d-e5-87-bd-e6-95-b0/index.html","hash":"a3f04e1f0bebbd60336d9d466c885ae6af9f894a","modified":1515820221274},{"_id":"public/2016/05/08/e5-88-86-e7-b1-bb-e7-ae-97-e6-b3-95-e5-ad-a6-e4-b9-a0-e7-ac-94-e8-ae-b0-ef-bc-9a-e6-9c-b4-e7-b4-a0-e8-b4-9d-e5-8f-b6-e6-96-af-e5-8f-8a-e5-9e-83-e5-9c-be-e8-bf-87-e6-bb-a4/index.html","hash":"21810cfa17fb2e4f88e2b0b89e5360d9f47f2d46","modified":1515820221274},{"_id":"public/2016/04/04/bitmap-e7-ae-97-e6-b3-95/index.html","hash":"8f53973e38f041f4658be01d6a0e71f4342c0056","modified":1515820221276},{"_id":"public/2016/03/20/wordpress-e7-bc-96-e8-af-91-e5-ae-89-e8-a3-85-php-7-0-4/index.html","hash":"1687f3aa93f190f32a29779bbc76ccc362f4ff51","modified":1515820221276},{"_id":"public/2015/09/03/lavarel-e5-a2-9e-e5-8a-a0-e5-85-a8-e5-b1-80-e5-87-bd-e6-95-b0-e6-96-87-e4-bb-b6/index.html","hash":"62c480940e0868c268bf6af769246377e8f7a163","modified":1515820221276},{"_id":"public/2015/08/26/e5-9b-bd-e5-86-85-composer-e9-95-9c-e5-83-8f-e6-94-b6-e9-9b-86/index.html","hash":"288043fdd7b10b5e133543f424facaaf050da6ad","modified":1515820221276},{"_id":"public/2015/05/15/mysql-e5-a4-8d-e4-b9-a0-e7-ac-94-e8-ae-b0-ef-bc-9a-e8-bf-9e-e6-8e-a5/index.html","hash":"fa066ae0e9a91370c3ba4368ff6cb3e1ba985bd9","modified":1515820221276},{"_id":"public/2015/05/15/mysql-e5-a4-8d-e4-b9-a0-e7-ac-94-e8-ae-b0-ef-bc-9a-e9-94-81/index.html","hash":"3a9b5dc42c36696e8b3fe12732da596e1b19c934","modified":1515820221276},{"_id":"public/2015/05/15/mysql-e5-a4-8d-e4-b9-a0-e7-ac-94-e8-ae-b0-ef-bc-9a-e7-b4-a2-e5-bc-95/index.html","hash":"5cf28c0761cc7bb7e5685b6ae08e8c37267dd5ad","modified":1515820221276},{"_id":"public/2015/03/08/csv-e5-9c-a8-utf-8-e7-bc-96-e7-a0-81-e4-b8-8b-excel-2007-e6-89-93-e5-bc-80-e4-b9-b1-e7-a0-81-e7-9a-84-e8-a7-a3-e5-86-b3-e6-96-b9-e6-b3-95/index.html","hash":"3c159140196b1fddbcec6bad2f037b2366a8f259","modified":1515820221276},{"_id":"public/2015/03/08/2444/index.html","hash":"53a2cb09670fc5b371b89663fa2565ec093199af","modified":1515820221276},{"_id":"public/2015/01/17/e8-bf-81-e7-a7-bb-e7-bd-91-e7-ab-99-e5-88-b0-vultr-vps/index.html","hash":"dc8ad6d67b03ea27ab759425daa559b4b390e7bb","modified":1515820221277},{"_id":"public/2014/11/23/e3-80-8a-e6-98-9f-e9-99-85-e7-a9-bf-e8-b6-8a-e3-80-8b-e4-b8-8e-e7-9b-b8-e5-af-b9-e8-ae-ba-e4-b8-ad-e7-9a-84-e6-97-b6-e9-97-b4-e7-a9-ba-e9-97-b4/index.html","hash":"d9f482f320c2f611326d75bb4e5de77460a1d841","modified":1515820221277},{"_id":"public/2014/10/16/iframe-e9-ab-98-e5-ba-a6-e8-87-aa-e9-80-82-e5-ba-94-e5-86-85-e5-ae-b9/index.html","hash":"84047b1b3974260ed6c82ef59d8e302ec8df3558","modified":1515820221277},{"_id":"public/2014/10/04/hive-hadoop-faq/index.html","hash":"3d31c366d19f9565c4c5042099886a3539a7c99b","modified":1515820221277},{"_id":"public/2014/10/04/hadoop-e4-b8-8ehive-e7-9a-84-e5-8d-95-e6-9c-ba-e9-85-8d-e7-bd-ae/index.html","hash":"6e1bbf155a812dc6cdc605b8b69fd0b8758df4a7","modified":1515820221277},{"_id":"public/2014/09/13/windows-e4-b8-8b-nginx-php-e9-85-8d-e7-bd-ae-e6-96-87-e4-bb-b6/index.html","hash":"e3123c39037b956d5496b7a41ed2f1d6bdfeaf03","modified":1515820221277},{"_id":"public/2014/08/25/e8-bd-ac-phpstorm-tips-and-tricks/index.html","hash":"3de78878c54cebc8374026eaf424f7665a611ab7","modified":1515820221277},{"_id":"public/2014/07/27/php-e8-af-bb-e5-8f-96-e5-a4-a7-e6-96-87-e4-bb-b6-e7-9a-84-e5-a4-9a-e7-a7-8d-e5-a4-84-e7-90-86-e6-96-b9-e5-bc-8f/index.html","hash":"0097fe8003c5aa326e51ced0507f669f3ad300f6","modified":1515820221277},{"_id":"public/2014/05/28/sql-joins-e5-9b-be-e8-a7-a3/index.html","hash":"a6a9fcc094cf236f3d72d7b98d0f8e7b13b04beb","modified":1515820221277},{"_id":"public/2014/06/07/java-substring-e4-b8-a4-e4-b8-aa-e5-8f-82-e6-95-b0-e7-9a-84-e5-9d-91/index.html","hash":"05b84efc7cdf1672f9dade85a35c410134f952f6","modified":1515820221277},{"_id":"public/2014/05/28/e8-bd-ac-e7-a8-8b-e5-ba-8f-e8-ae-be-e8-ae-a1-e7-ab-9e-e8-b5-9bacm-e8-ae-ad-e7-bb-83-e6-89-8b-e5-86-8c/index.html","hash":"943e26f34298099864443d028163547d762710e0","modified":1515820221277},{"_id":"public/2014/05/27/php-e5-af-bc-e5-87-ba-cvs-excel/index.html","hash":"621827b8d53e91a6ca76b75a6ca35745796164ca","modified":1515820221277},{"_id":"public/2014/05/22/js-e4-b8-addate-e5-af-b9-e8-b1-a1month-e8-a6-81-e6-af-94-e7-9c-9f-e5-ae-9e-e5-80-bc-e5-b0-8f1/index.html","hash":"c8579cd226a1b17eaab2094948c9bbbdecee0dab","modified":1515820221277},{"_id":"public/2014/05/21/php-e5-ad-97-e7-ac-a6-e4-b8-b2-e5-92-8c-e6-95-b0-e5-ad-97-e6-af-94-e8-be-83-e6-97-b6-e5-bc-ba-e5-88-b6-e8-bd-ac-e6-8d-a2-e7-9a-84-e9-97-ae-e9-a2-98/index.html","hash":"d2f51ba8e2e40b7889348bd6a87d76d2356739be","modified":1515820221277},{"_id":"public/2014/05/20/e5-85-b3-e4-ba-8e-e6-95-b0-e7-bb-84-e7-9a-84-e5-87-a0-e9-81-93-e9-9d-a2-e8-af-95-e9-a2-98/index.html","hash":"a27d6de9b8e00d4218e34962010d5a12a3416814","modified":1515820221278},{"_id":"public/2014/05/19/e5-87-a0-e7-a7-8d-e5-b8-b8-e8-a7-81-e7-9a-84-e6-8e-92-e5-ba-8f-e7-ae-97-e6-b3-95-e7-9a-84php-e5-ae-9e-e7-8e-b0/index.html","hash":"655f94757db74b4011887cad759cbe0f85495f5d","modified":1515820221278},{"_id":"public/2014/05/18/e5-a4-a7-e6-95-b0-e6-8d-ae-e6-8e-92-e5-ba-8f-e6-88-96-e5-8f-96-e9-87-8d-e6-88-96-e5-8e-bb-e9-87-8d-e7-9b-b8-e5-85-b3-e9-97-ae-e9-a2-98/index.html","hash":"37ae2a61c4f4931daf3c2fe50f8cf4d4210b6892","modified":1515820221278},{"_id":"public/2014/05/17/php-e8-be-93-e5-87-ba-e4-b8-8a-e4-b8-aa-e6-9c-88-e6-9c-80-e5-90-8e-e4-b8-80-e5-a4-a9/index.html","hash":"bb64ab155cac1f2da40976c375dba56b437ea9e9","modified":1515820221278},{"_id":"public/2014/05/13/sqlite-e5-88-b0-mysql-e4-b8-80-e9-94-ae-e8-bf-81-e7-a7-bb/index.html","hash":"c2bfdf880c357e30d981a1505ceef3b77b3ed5b7","modified":1515820221278},{"_id":"public/2014/05/13/e5-85-b3-e4-ba-8e-redis-e6-96-87-e6-a1-a3-lrange-start-end-e6-83-85-e5-86-b5-e7-9a-84-e4-b8-80-e7-82-b9-e8-af-b4-e6-98-8e/index.html","hash":"e63ab157294e17fb54d95e1d221f2c3e72b68b36","modified":1515820221278},{"_id":"public/2014/05/12/e8-b7-b3-e8-a1-a8-skip-list-e7-9a-84-e5-9f-ba-e6-9c-ac-e6-a6-82-e5-bf-b5/index.html","hash":"28dc487888afcdd0e4aa7e637d0ad5e8e6508f32","modified":1515820221278},{"_id":"public/2014/05/11/e6-9b-b4-e6-94-b9-vagrant-e8-99-9a-e6-8b-9f-e7-a3-81-e7-9b-98-e7-9a-84-e9-bb-98-e8-ae-a4-e8-b7-af-e5-be-84/index.html","hash":"b65288e25c5e0add2f44a76360ca4608ed56985b","modified":1515820221278},{"_id":"public/2014/05/09/e7-ba-af-php-html-css-e5-ae-9e-e7-8e-b0-e7-bb-84-e7-bb-87-e7-bb-93-e6-9e-84-e5-9b-be/index.html","hash":"ae371b6ef5386287870b4aa7dd0d628a68477730","modified":1515820221278},{"_id":"public/2014/05/07/e5-86-8d-e5-ba-a6-e4-bd-bf-e7-94-a8-sublime-text-3-e5-8f-8a-e7-9b-b8-e5-85-b3-e6-8a-80-e5-b7-a7-e3-80-81-e6-8f-92-e4-bb-b6-e3-80-81-e7-be-8e-e5-8c-96/index.html","hash":"09efa57d9b6c1c6631e2a7e9ba7339ef7892333d","modified":1515820221278},{"_id":"public/2014/05/05/e6-98-8e-e5-9f-ba-kx800-e9-94-ae-e7-9b-98-e5-85-a5-e6-89-8b/index.html","hash":"6b64caa725e34f32b8e3b9600e47e8c9fcf0cca1","modified":1515820221278},{"_id":"public/2014/05/05/e5-bc-ba-e5-88-b6-ie-document-mode/index.html","hash":"69b82b9eab8a27467b767531dafcfbf2dc6d0e3a","modified":1515820221278},{"_id":"public/2014/05/05/e6-9c-ac-e5-9c-b0-e5-89-8d-e7-ab-af-e5-bc-80-e5-8f-91-document-mode-e4-b8-baie7-default-e9-97-ae-e9-a2-98/index.html","hash":"88d35635c1843d03b933787535be02b79648ef00","modified":1515820221278},{"_id":"public/2014/05/05/e8-bd-ac-e4-b8-80-e9-81-93-e6-b7-98-e6-b1-b085-e9-9d-a2-e8-af-95-e8-80-85-e7-9a-84-e7-99-be-e5-ba-a6-e5-bc-80-e5-8f-91-e8-80-85-e9-9d-a2-e8-af-95-e9-a2-98/index.html","hash":"c2687532e9c15320fd628b7a1e3184d43f38d561","modified":1515820221278},{"_id":"public/2014/04/30/e6-ad-a3-e5-88-99-e8-a1-a8-e8-be-be-e5-bc-8f-e8-af-ad-e6-b3-95/index.html","hash":"a4e5800b49adc7dc9300f9a91283f028d7ee4a8f","modified":1515820221278},{"_id":"public/2014/04/29/e8-bd-ac-e5-9b-be-e8-a7-a3https-e5-8d-8f-e8-ae-ae-e5-8a-a0-e5-af-86-e8-a7-a3-e5-af-86-e5-85-a8-e8-bf-87-e7-a8-8b/index.html","hash":"82fd7da0ba8083f49ddad1c47536ec998d652777","modified":1515820221279},{"_id":"public/2014/04/27/bootstrap-e5-ae-9e-e7-8e-b0-ajax-model/index.html","hash":"3223bcb5995347d75ddf9440dc1f582a5f9c222d","modified":1515820221279},{"_id":"public/2014/04/21/git-bash-e4-b8-ad-e6-96-87-e6-94-af-e6-8c-81/index.html","hash":"ae81aedc17b14ce4da2e2ddf9ca67609c3247a2d","modified":1515820221279},{"_id":"public/2014/04/21/vagrant-e4-b8-8evmware-vitualbox-e7-9a-84-e9-85-8d-e7-bd-ae-e4-b8-8e-e5-ba-94-e7-94-a8/index.html","hash":"2b2568a5d5fb0fcaee8a4eebc56384bebca2e53a","modified":1515820221279},{"_id":"public/2014/04/18/e8-bd-ac-e6-80-8e-e6-a0-b7-e7-90-86-e8-a7-a3-e9-98-bb-e5-a1-9e-e9-9d-9e-e9-98-bb-e5-a1-9e-e4-b8-8e-e5-90-8c-e6-ad-a5-e5-bc-82-e6-ad-a5-e7-9a-84-e5-8c-ba-e5-88-ab-ef-bc-9f/index.html","hash":"96b1e4032cd9a5e68509e1f69b8473a8865ae5b2","modified":1515820221279},{"_id":"public/2014/04/16/php-strstr-stristr-strpos/index.html","hash":"5192d8fa4a30a6b3b1b2ada3e4811ca70b72f6d6","modified":1515820221279},{"_id":"public/2014/04/11/linux-e6-ba-90-e7-a0-81-e5-ae-89-e8-a3-85-memcached/index.html","hash":"43812686c108466cbbb84b98037a960a27e57b68","modified":1515820221279},{"_id":"public/2014/04/11/linux-e4-b8-8b-e6-9f-a5-e7-9c-8bpython-e5-ae-89-e8-a3-85-e8-b7-af-e5-be-84/index.html","hash":"ff24f29374612cf6fadfcdc9a07579e2ce99d5db","modified":1515820221279},{"_id":"public/2014/04/11/linux-pysvn-e6-ba-90-e7-a0-81-e5-ae-89-e8-a3-85/index.html","hash":"f6487473085249cdf70389501d42dfe6112f54e2","modified":1515820221279},{"_id":"public/2014/04/10/xshell-solarized-darkk-e9-85-8d-e8-89-b2/index.html","hash":"c9c2557307b7119ee26e3f4342c5f89ff24c325c","modified":1515820221279},{"_id":"public/2014/04/10/mysql-1130-is-not-allowed-to-connect-to-this-mysql-server/index.html","hash":"92c6d3d115823447ed9c9102e8629add99bd650c","modified":1515820221279},{"_id":"public/2014/04/10/gentoo-e5-9b-bd-e5-86-85-e6-ba-90/index.html","hash":"c729ea6083903815451bbcae02813373287d0c03","modified":1515820221279},{"_id":"public/2014/04/10/win8-e6-b7-bb-e5-8a-a0-e5-b1-80-e5-9f-9f-e7-bd-91-e6-89-93-e5-8d-b0-e6-9c-ba-e7-9a-84-e7-ae-80-e5-8d-95-e6-96-b9-e6-b3-95/index.html","hash":"3b919f1a85993154d663c73a62c914b27c927582","modified":1515820221279},{"_id":"public/2014/04/10/e5-ae-89-e8-a3-85mysql-python-ef-bc-9aenvironmenterror-mysql-config-not-found-e8-a7-a3-e5-86-b3-e6-96-b9-e6-b3-95/index.html","hash":"1c66a815a159e8a96b94813e51be392355f02c74","modified":1515820221279},{"_id":"public/2014/04/10/apache-python-mod-wsgi-e7-9a-84-e7-bc-96-e8-af-91-e5-ae-89-e8-a3-85/index.html","hash":"a06e00ef5621a7294d8c8fea764d296f74d0bedd","modified":1515820221280},{"_id":"public/2014/04/10/gentoo-apache-e5-8a-a0-e8-bd-bdmod-wsgi-invalid-command-wsgipassauthorization-e8-a7-a3-e5-86-b3-e5-8a-9e-e6-b3-95/index.html","hash":"a8c19851424c91ee925e8ad4b7a77878d71c5a12","modified":1515820221280},{"_id":"public/2014/04/09/gentoo-apache2-e5-90-af-e5-8a-a8-e5-a4-b1-e8-b4-a5-e8-a7-a3-e5-86-b3-e5-8a-9e-e6-b3-95/index.html","hash":"3f001f27868769f7209937d478fe3b7df50c45e8","modified":1515820221280},{"_id":"public/2014/04/09/bash-mysql-command-not-found-e8-a7-a3-e5-86-b3-e6-96-b9-e6-b3-95/index.html","hash":"b3ce0f1bc68519223729f9f890d3117460f104f1","modified":1515820221280},{"_id":"public/2014/04/09/mysql5-5-30-e6-ba-90-e7-a0-81-e5-8c-85-e7-bc-96-e8-af-91-e5-ae-89-e8-a3-85-e6-96-b9-e6-b3-95/index.html","hash":"1bb1a4b7ca95fa47c07be583f3b88e50734d9ec2","modified":1515820221280},{"_id":"public/2014/04/08/gentoo-e5-ae-89-e8-a3-85-e5-85-a8-e8-bf-87-e7-a8-8b-e8-ae-b0-e5-bd-95/index.html","hash":"79502acea74d4d6bc382642badca58e49497c7ed","modified":1515820221280},{"_id":"public/2014/04/07/mysql-e9-bb-98-e8-ae-a4-e5-ad-97-e7-ac-a6-e9-9b-86-e8-ae-be-e7-bd-ae/index.html","hash":"3c6511bf0d44b8d1320a66d5938e6b48a4c155fb","modified":1515820221280},{"_id":"public/2014/04/07/review-board-mysql-e4-b8-ad-e6-96-87-utf8-e6-94-af-e6-8c-81/index.html","hash":"2ad0851d38830a4d1429ac3b430c7c8f9f615497","modified":1515820221280},{"_id":"public/2014/04/07/easy-install-e5-87-a0-e4-b8-aa-e6-9c-89-e7-94-a8-e7-9a-84-e5-91-bd-e4-bb-a4/index.html","hash":"48eff90dcd2d7f116440522e0ba86467ca45d8b4","modified":1515820221280},{"_id":"public/2014/04/07/fedora-e5-ae-89-e8-a3-85-rewiew-board/index.html","hash":"ef4a67eb31d4bc915e9fcd8e6c0600586bdb593b","modified":1515820221280},{"_id":"public/2014/04/02/phpstorm-e5-b8-b8-e7-94-a8-e5-bf-ab-e6-8d-b7-e9-94-ae-e6-95-b4-e7-90-86/index.html","hash":"991ae81e1073846a1ee48fff628f5ce8fc13f7b2","modified":1515820221280},{"_id":"public/2014/03/27/dex2jar-e5-87-ba-e7-8e-b0error-occurred-during-initialization-of-vm-e8-a7-a3-e5-86-b3-e5-8a-9e-e6-b3-95/index.html","hash":"83e598aed3d4cfceede1e04cc33fc60d2b6a8eca","modified":1515820221280},{"_id":"public/2014/03/25/e6-95-b0-e7-bb-84php-e6-8e-92-e5-ba-8f-e5-87-bd-e6-95-b0-e6-80-bb-e7-bb-93/index.html","hash":"96e3c2734f3c4457bab0d51cc9262ef24273a6e6","modified":1515820221280},{"_id":"public/2014/03/25/e9-9b-b6-e7-a2-8e-e7-9f-a5-e8-af-86-e6-80-bb-e7-bb-93php/index.html","hash":"9b4fe60617904b81d0a2d4d0391414f612f4bc42","modified":1515820221280},{"_id":"public/2014/03/25/rsync-e7-94-a8-e6-b3-95-e6-80-bb-e7-bb-93/index.html","hash":"b8773a6c726d5d255dc4176b5491be69cd1efd1d","modified":1515820221280},{"_id":"public/2014/03/25/e8-ae-be-e8-ae-a1-e6-a8-a1-e5-bc-8f-e5-ad-a6-e4-b9-a0-e7-ae-80-e5-8d-95-e6-80-bb-e7-bb-93/index.html","hash":"770cd7ecbd4f275e90cef61aafa3b1008141aea3","modified":1515820221280},{"_id":"public/2014/03/21/e5-af-b9-e8-b1-a1-e5-9c-a8-e5-86-85-e5-ad-98-e4-b8-ad-e7-9a-84-e5-88-86-e9-85-8d-e8-af-b4-e6-98-8ephp/index.html","hash":"4f15fc7f8ac74b3d078c484f3d4e70dd36942308","modified":1515820221280},{"_id":"public/2014/03/20/e6-b8-85-e7-90-86win8-1-e6-88-91-e7-9a-84-e7-94-b5-e8-84-91-e9-87-8c-e5-85-ad-e4-b8-aa-e6-96-87-e4-bb-b6-e5-a4-b9-e6-96-b9-e6-b3-95/index.html","hash":"d25e95321d0e01456a451edeac1cd2230734ee2e","modified":1515820221280},{"_id":"public/2014/03/19/e5-8d-9a-e5-ae-a2-e4-bc-98-e5-8c-96-e8-ae-be-e7-bd-ae-e8-ae-b0-e5-bd-95/index.html","hash":"8aa5dcf81e36541a94e52b8adccb69d8b2907f15","modified":1515820221281},{"_id":"public/2014/03/17/ie-positionfixed-e8-a7-a3-e5-86-b3-e5-8a-9e-e6-b3-95/index.html","hash":"c4874dae924091f2b24d91fc416cc6bf920aa28c","modified":1515820221281},{"_id":"public/2014/03/17/jquery-ready-load-e5-92-8cwindows-load-e7-9a-84-e5-85-b3-e7-b3-bb/index.html","hash":"19cbb6205829aee182090c9d2f522b9cbdc14dab","modified":1515820221281},{"_id":"public/2014/03/15/11-e4-b8-aa-e5-ae-9e-e7-94-a8-e7-9a-84apache-htaccess-e9-85-8d-e7-bd-ae/index.html","hash":"94b04a5e6f0f0e5e21ff61063381ae4d14790516","modified":1515820221281},{"_id":"public/2014/03/15/wordpress-e4-bd-bf-e7-94-a8-e4-b8-83-e7-89-9bcdn/index.html","hash":"26dbf2cd3aca05fabce7a3c5367d2f46bf3b1e64","modified":1515820221281},{"_id":"public/2014/01/22/qt-e5-87-ba-e7-8e-b0undefined-reference-to-vtable-for-e5-8e-9f-e5-9b-a0-e6-80-bb-e7-bb-93/index.html","hash":"ea4b5d22dc469811b0395b3814de03689c0335ae","modified":1515820221281},{"_id":"public/2013/12/04/win8-e5-be-85-e6-9c-ba-e7-8a-b6-e6-80-81-e4-b8-8b-e9-a3-8e-e6-89-87-e7-8b-82-e8-bd-ac-e7-9a-84-e5-8f-af-e8-83-bd-e5-8e-9f-e5-9b-a0/index.html","hash":"716f8a89dcc86d11b002b969f8101f702294b2d6","modified":1515820221281},{"_id":"public/2013/12/03/jdk-path-classpath-e8-ae-b0-e5-bd-95/index.html","hash":"dd30d624e2829317e98365260f091cd480f9c3ba","modified":1515820221281},{"_id":"public/2013/10/08/e5-ae-8c-e7-be-8e-e8-a7-a3-e5-86-b3-win8-1-win8-amd-e6-98-be-e5-8d-a1-e6-97-a0-e6-b3-95-e8-b0-83-e4-ba-ae-e5-ba-a6/index.html","hash":"fe551512edbd58e3e68a3994637fea42d8fb2356","modified":1515820221281},{"_id":"public/2013/09/29/java-e6-a0-88-e4-b8-8e-e5-a0-86/index.html","hash":"64aa53a65508b30d1da5026d691a535a3d8a9c14","modified":1515820221281},{"_id":"public/2013/09/19/java-e7-94-a8socket-e8-8e-b7-e5-8f-96-e7-bd-91-e9-a1-b5-e5-86-85-e5-ae-b9/index.html","hash":"1b0dc92c32fdf91b96651e29714cc357656d4754","modified":1515820221281},{"_id":"public/2013/08/30/win8-e4-bd-bf-e7-94-a8-e5-88-86-e5-8c-ba-e5-8a-a9-e6-89-8b4k-e5-af-b9-e9-bd-90-e5-90-8e-ef-bc-8c-e5-bf-ab-e9-80-9f-e5-90-af-e5-8a-a8-e6-97-a0-e6-95-88-e8-a7-a3-e5-86-b3-e5-8a-9e-e6-b3-95/index.html","hash":"7ee8fa580c78a7f10350140f244992e70f6f7c8e","modified":1515820221281},{"_id":"public/2013/07/15/e5-b0-86-e6-9f-90-e4-b8-aaqt4-e9-a1-b9-e7-9b-ae-e5-8d-87-e7-ba-a7-e5-88-b0qt5-e9-81-87-e5-88-b0-e7-9a-84-e9-97-ae-e9-a2-98/index.html","hash":"40a6da83bf95d6b40ac71c4e4205bc67e5f6a4a0","modified":1515820221281},{"_id":"public/2013/03/30/e5-85-b3-e9-97-adqmessagebox-e7-9a-84-e6-97-b6-e5-80-99-ef-bc-8c-e6-95-b4-e4-b8-aa-e7-a8-8b-e5-ba-8f-e4-b9-9f-e9-80-80-e5-87-ba/index.html","hash":"2a90ffd94bcf4eda0ff9ba5021540e31dfe04325","modified":1515820221281},{"_id":"public/2013/03/10/spring-security-e8-8e-b7-e5-8f-96-e5-bd-93-e5-89-8d-e7-94-a8-e6-88-b7-e4-bf-a1-e6-81-af/index.html","hash":"363f1fd510b5107cef4d7b499b5367d44218516c","modified":1515820221281},{"_id":"public/2013/02/18/jquery-validate-e9-aa-8c-e8-af-81-e6-8f-92-e4-bb-b6-ef-bc-8c-e5-9c-a8ajax-e6-8f-90-e4-ba-a4-e6-96-b9-e5-bc-8f-e4-b8-8b-e7-9a-84-e9-aa-8c-e8-af-81/index.html","hash":"d2ed466d54b9cbc938574e4c3029397c4fa7f418","modified":1515820221281},{"_id":"public/2013/02/17/e6-9d-83-e9-99-90-e7-ae-a1-e7-90-86java-e5-ae-9e-e7-8e-b0-ef-bc-88-e6-ba-90-e4-ba-8elinux-e4-b8-ad-e7-9a-84-e6-9d-83-e9-99-90-e7-ae-a1-e7-90-86-e7-ae-97-e6-b3-95-ef-bc-89/index.html","hash":"4938e641c5fb7bfee19e5749ae1962f3986b4a47","modified":1515820221282},{"_id":"public/2013/02/15/struts2-json-jquery-ajax-e5-ae-9e-e7-8e-b0-e7-94-a8-e6-88-b7-e7-99-bb-e9-99-86-e5-8f-8a-e4-b8-9a-e9-9d-a2-e8-b7-b3-e8-bd-ac/index.html","hash":"d9507b8df2e9a862cce3321dc6bf3dbe9b7478f2","modified":1515820221282},{"_id":"public/2013/02/14/struts2-e9-aa-8c-e8-af-81-e5-a4-b1-e8-b4-a5-e5-90-8e-e8-bf-94-e5-9b-9einput-ef-bc-8cselect-e4-b8-adlist-e6-95-b0-e6-8d-ae-e4-b8-a2-e5-a4-b1-e9-97-ae-e9-a2-98/index.html","hash":"9c93fccd384dc601387a40b0caaaf8d7a46efd24","modified":1515820221282},{"_id":"public/2012/11/16/android-cpu-e8-b0-83-e8-8a-82-e6-a8-a1-e5-bc-8f-e5-92-8cio-e8-b0-83-e5-ba-a6-e6-a8-a1-e5-bc-8f-e8-af-a6-e8-a7-a3/index.html","hash":"2008ebea8cbae1c01ff041eaf600a218f67fabe3","modified":1515820221282},{"_id":"public/2012/11/06/e6-97-b6-e9-97-b4-e6-88-b3php/index.html","hash":"77f5da84104239f7eb8c3bb4446a38fc64e1778b","modified":1515820221282},{"_id":"public/2012/10/19/apache-e7-a6-81-e6-ad-a2-e6-98-be-e7-a4-ba-e7-9b-ae-e5-bd-95-e7-b4-a2-e5-bc-95/index.html","hash":"db2ba5d1570fe6ec61ed81b80703660a18f90b86","modified":1515820221282},{"_id":"public/2012/10/14/oracle-11g-e5-a6-82-e4-bd-95-e5-ae-8c-e5-85-a8-e5-8d-b8-e8-bd-bd-e6-96-b9-e6-b3-95/index.html","hash":"eebcb12f23f3112115bd51c8edbc7d09aeb7e422","modified":1515820221282},{"_id":"public/2012/10/11/netbeans-e4-b8-adjava-e4-b8-8emysql-e5-ad-a6-e4-b9-a0/index.html","hash":"255a417866ed4e2cf3aa739d5577207b6816cb59","modified":1515820221282},{"_id":"public/2012/09/29/post-e6-8e-a5-e6-94-b6-e6-95-b0-e7-bb-84php/index.html","hash":"a1f1c2bb0af3adc47450ca4c22747d43c50d0e1c","modified":1515820221282},{"_id":"public/2012/09/27/e4-b8-ad-e6-96-87-e4-b9-b1-e7-a0-81-e8-a7-a3-e5-86-b3-e6-96-b9-e6-b3-95phpword/index.html","hash":"88dea3da05621e9603b9bef94fce08ae2ee8ec57","modified":1515820221282},{"_id":"public/2012/09/12/netbeans-e5-87-ba-e7-8e-b0cannot-locate-java-installation-in-specified-jdkhome-e9-94-99-e8-af-af-e7-9a-84-e8-a7-a3-e5-86-b3-e5-8a-9e-e6-b3-95/index.html","hash":"23a5ff5298d125fa0647b0f9f92a9d48c86645c9","modified":1515820221282},{"_id":"public/2012/08/30/xampp-1-8-e6-89-93-e5-bc-80-e6-85-a2-e7-9a-84-e8-a7-a3-e5-86-b3-e6-96-b9-e6-b3-95/index.html","hash":"4a5d2f1400c7da1defdb025207cc40c95b06196c","modified":1515820221282},{"_id":"public/2012/08/05/e3-80-90-e8-bd-ac-e3-80-91-e4-bd-bfqt-e7-a8-8b-e5-ba-8f-e5-8f-aa-e8-bf-90-e8-a1-8c-e4-b8-80-e4-b8-aa-e5-ae-9e-e4-be-8b/index.html","hash":"38d277f70a57dd2bfce4528da028ff917c068a05","modified":1515820221282},{"_id":"public/2012/07/27/utf-8-e4-b8-8eutf-8-e6-97-a0bom-e7-9a-84-e5-8c-ba-e5-88-ab/index.html","hash":"a48c0f8db9fad3e21b4db44fbf6d258524bded8b","modified":1515820221282},{"_id":"public/2012/05/19/android-e7-b3-bb-e7-bb-9f-e4-bc-98-e5-8c-96-e7-ad-96-e7-95-a5/index.html","hash":"42ab2684d14d2e0e8efb07078f255108082cc615","modified":1515820221282},{"_id":"public/2012/05/19/cm-e8-ae-be-e7-bd-ae-e6-80-a7-e8-83-bd-e8-ae-be-e7-bd-ae-cpu-e8-ae-be-e7-bd-ae-e5-8f-af-e7-94-a8-e8-b0-83-e9-80-9f-e5-99-a8-e7-9a-84-e8-ae-be-e7-bd-ae/index.html","hash":"c29c065e0ec9abcd33c0868877feb59012556328","modified":1515820221283},{"_id":"public/2012/05/13/htc-mytouch-4g-g-e9-94-ae-e6-94-b9-e4-b8-ba-e9-94-81-e5-b1-8f-e9-94-ae/index.html","hash":"f92b37202c0879a007560f43cf39aaf01380885a","modified":1515820221283},{"_id":"public/2012/05/13/e5-85-b3-e4-ba-8e-e6-89-8b-e6-9c-ba-e4-bf-a1-e5-8f-b7-e5-bc-ba-e5-ba-a6-e5-8d-95-e4-bd-8ddbm-e5-92-8casu-ef-bc-81/index.html","hash":"795e594e0b736f832f6ab3ea28f92f1e2c61bff8","modified":1515820221283},{"_id":"public/2012/04/10/qt-e5-85-b3-e4-ba-8etoolbutton-e6-8e-a7-e4-bb-b6-e7-9a-84-e8-b4-b4-e5-9b-be/index.html","hash":"ab0dda84668c4c47eab3500cbc5eda8d33c7bb3c","modified":1515820221283},{"_id":"public/2012/04/07/e5-9c-a8ui-widget-e4-b8-8a-e7-bb-98-e5-88-b6-e5-b8-a6-e5-9d-90-e6-a0-87-e8-bd-b4-e7-9a-84-e5-9b-be-e5-83-8f/index.html","hash":"01c03f8ea72244ed53695885bcd49f7e09746176","modified":1515820221283},{"_id":"public/2012/04/04/qsqlquery-qt/index.html","hash":"fed3d0605b3d7d3bf11354a52fc4fb2ed99c29c5","modified":1515820221283},{"_id":"public/2012/03/25/qt-e3-80-80-e9-80-8f-e6-98-8e-e7-aa-97-e4-bd-93-e5-ae-9e-e7-8e-b0/index.html","hash":"c31937e02d2de210c2b92b85f8ffece372aa2322","modified":1515820221283},{"_id":"public/2012/03/24/e8-a7-a3-e6-9e-90-qt-e7-a8-8b-e5-ba-8f-e5-9c-a8windows-e4-b8-8b-e5-8f-91-e5-b8-83/index.html","hash":"ebee09e301b485c8b7d57abe92a7e15df0f27aa0","modified":1515820221284},{"_id":"public/2012/03/06/qt-e5-a2-9e-e5-8a-a0-e7-a8-8b-e5-ba-8f-e5-9b-be-e6-a0-87/index.html","hash":"e01cdec9c05ad4c0d1fbbfa8d7946d76e9ba8f28","modified":1515820221284},{"_id":"public/2012/03/05/qt-e6-a8-a1-e6-80-81-e5-af-b9-e8-af-9d-e6-a1-86-e5-8f-8a-e9-9d-9e-e6-a8-a1-e6-80-81-e5-af-b9-e8-af-9d-e6-a1-86/index.html","hash":"3f03c31d347c523a206611718bf4eaf2ccd8618c","modified":1515820221284},{"_id":"public/2012/03/01/qt-e5-bc-b9-e5-87-ba-e5-af-b9-e8-af-9d-e6-a1-86-e6-96-b9-e6-b3-95/index.html","hash":"377c447d4536e688b4ca1814c5c1c10c9688a51c","modified":1515820221284},{"_id":"public/2012/03/01/qt-setwindowflags-e7-9a-84-e4-bd-bf-e7-94-a8/index.html","hash":"f5971e32934ccfe377bcb5f856359de218954c47","modified":1515820221284},{"_id":"public/2012/02/24/flash-e5-a3-b0-e9-9f-b3-e5-a4-84-e7-90-86-e5-9f-ba-e7-a1-80as-e4-bb-a3-e7-a0-81/index.html","hash":"d655774e468e688b6872d983392b31ddec42a69e","modified":1515820221284},{"_id":"public/2012/02/24/flash-e4-b8-ad-e8-83-8c-e6-99-af-e9-9f-b3-e4-b9-90-e5-a3-b0-e9-9f-b3-e5-8f-98-e5-b0-8f/index.html","hash":"582a9eec35cbbc093526da88b2cae4702f84e837","modified":1515820221284},{"_id":"public/2012/02/21/e5-9b-9b-e7-ba-a7-e5-ae-8c-e6-af-95/index.html","hash":"034604507ab91dc1076d558819610a0b75c103a4","modified":1515820221284},{"_id":"public/2012/02/07/jqueryphp-e4-b8-8d-e5-88-b7-e6-96-b0-e5-88-a0-e9-99-a4table-e7-9a-84tr/index.html","hash":"1fc4f7a9bae90cbb50ba4a7b648970ab0067ae05","modified":1515820221284},{"_id":"public/2012/01/25/ubuntu-11-10-e5-ae-89-e8-a3-85google-earth-e5-ad-97-e4-bd-93-e4-b8-8d-e6-b8-85-e8-a7-a3-e5-86-b3-e5-8a-9e-e6-b3-95/index.html","hash":"f0f54623d5f1042ca22a6ef1183a0b8d2c637bbc","modified":1515820221284},{"_id":"public/2012/01/13/htmlspecialchars-e5-92-8c-htmlentities-e7-9a-84-e5-8c-ba-e5-88-ab/index.html","hash":"01f183505ee903e73df530fd6642ec7e490f0b0c","modified":1515820221284},{"_id":"public/2012/01/13/directx-e4-bf-ae-e5-a4-8d-e5-b7-a5-e5-85-b7-ef-bc-8c-e8-a7-a3-e5-86-b3-e5-90-84-e7-a7-8d-e6-b8-b8-e6-88-8f-e5-90-84-e7-a7-8d-e9-97-ae-e9-a2-98/index.html","hash":"eaf715bcc67eb80413e7186123d6cd040a25dcfc","modified":1515820221284},{"_id":"public/2012/01/08/ubuntu-e5-8d-87-e7-ba-a7-e5-af-bc-e8-87-b4-e6-98-be-e7-a4-ba-e6-b7-b7-e4-b9-b1-e5-8f-8aa-e5-8d-a1-e5-ae-89-e8-a3-85-e5-8d-b8-e8-bd-bd/index.html","hash":"254fa1f933f14536db4f17e242b8cb55190e262e","modified":1515820221284},{"_id":"public/2012/01/08/ubuntu-e6-97-a0-e7-ba-bf-e5-af-86-e7-a0-81-e7-a0-b4-e8-a7-a3-e5-88-a9-e5-99-a8aircrack-ng/index.html","hash":"ddf659f2a7c3ba01857d3c163bf6551c22e269cd","modified":1515820221284},{"_id":"public/2012/01/06/ubuntu-e4-b8-ad-e6-96-87-e8-be-93-e5-85-a5-e6-b3-95fcitx-e5-ae-89-e8-a3-85/index.html","hash":"6b1f31b457803dd0e1331d10a9ee34dd74bdfebe","modified":1515820221285},{"_id":"public/2012/01/06/ubuntu64-e4-bd-8d-e5-ae-89-e8-a3-85xampp-e5-8f-8a-e5-b8-b8-e8-a7-81-e9-97-ae-e9-a2-98/index.html","hash":"6d0aa25d12aaf28acdd6b04be40500b562f8b617","modified":1515820221285},{"_id":"public/2011/12/05/c-e4-b8-adint-ef-bc-8cchar-ef-bc-8cstring-ef-bc-8ccstring-e7-b1-bb-e5-9e-8b-e8-bd-ac-e6-8d-a2/index.html","hash":"0d844aa46ac11e7ada259078ff39c842f95db5cc","modified":1515820221285},{"_id":"public/2011/11/27/ubuntu-e5-bc-80-e6-9c-ba-e5-90-af-e5-8a-a8-e9-a1-b9/index.html","hash":"5bd97210c1e8e45375c46e892f1c824a968094ff","modified":1515820221285},{"_id":"public/2011/11/16/ibus-e4-b8-8b-e5-ae-89-e8-a3-8598-e4-ba-94-e7-ac-94-e7-9a-84-e6-96-b9-e6-b3-95/index.html","hash":"b5eb0ea4d0a62054e096931cb6278f1051a2cc75","modified":1515820221285},{"_id":"public/2011/11/09/mysql-e5-ad-97-e6-ae-b5-e7-b1-bb-e5-9e-8b-e8-af-a6-e8-a7-a3/index.html","hash":"c21a9f515d462ec29cbcd9c3863f8c1732bc37cc","modified":1515820221285},{"_id":"public/2011/10/04/lamp-e6-b5-81-e7-a8-8b-e4-b8-ad-e7-9a-84-e4-b9-b1-e7-a0-81-e9-97-ae-e9-a2-98-e6-80-bb-e7-bb-93/index.html","hash":"7662924f4ea81e0b4d7c091c6b1c9268e7b3a110","modified":1515820221285},{"_id":"public/2011/09/25/50-e7-82-b9-e6-8f-90-e9-ab-98php-e7-bc-96-e7-a8-8b-e6-95-88-e7-8e-87-e5-bc-95-e5-85-a5-e7-bc-93-e5-ad-98-e6-8f-90-e5-8d-87-e6-80-a7-e8-83-bd/index.html","hash":"7674c9b1821d1302eac425c2148cb709b5c37316","modified":1515820221285},{"_id":"public/2011/09/21/xampp-e8-ae-bf-e9-97-ae-e5-87-ba-e7-8e-b0new-xampp-security-concept/index.html","hash":"6b65fcc24ef7f0a1cf6b52004dc1a999fbb1a847","modified":1515820221285},{"_id":"public/2011/09/03/e9-93-be-e6-8e-a5-e8-a1-a8-e7-9a-84-e9-99-84-e5-8a-a0-e5-8a-9f-e8-83-bd-e5-b0-9a-e6-9c-aa-e6-bf-80-e6-b4-bb-e7-9a-84-e8-a7-a3-e5-86-b3-e6-96-b9-e6-b3-95phpmyadmin/index.html","hash":"2f98230edb275af4d5d0fb76af379ce318024127","modified":1515820221285},{"_id":"public/2011/09/03/index-e9-a1-b5-e9-9d-a2-e5-8f-aa-e6-98-be-e7-a4-bamysql-e8-bf-94-e5-9b-9e-ef-bc-9a-e6-97-a0-e6-b3-95-e8-bf-9e-e6-8e-a5-ef-bc-9a-e6-97-a0-e6-95-88-e7-9a-84-e8-ae-be-e7-bd-aephpmyadmin/index.html","hash":"3643191584d23d24ad4f2a6fde8eeca07d084c8d","modified":1515820221285},{"_id":"public/2011/08/11/on-the-unripe-grapes-ripe-grapes-grape-dead-issue-i-think-i-would-like-to/index.html","hash":"0995d8b1bbb7b633e3dca89c38d6c7194ee6dfa7","modified":1515820221285},{"_id":"public/2010/06/22/getting-things-done-gtd-e7-9a-84-e7-90-86-e5-bf-b5/index.html","hash":"826ca0c7dd10a39e1c54b6661c996ffb89878c33","modified":1515820221285},{"_id":"public/2010/02/21/qq-e4-ba-94-e7-ac-94-e6-98-93-e6-83-b3-e6-93-8e-e5-a4-a998-e8-af-8d-e5-ba-93v1-100221-e4-b8-8b-e8-bd-bd/index.html","hash":"0a4c6f52a103ca375cdb9fc05bd4e607a3d143c2","modified":1515820221285},{"_id":"public/2008/09/13/blogbak-v1-57-e5-8d-9a-e5-ae-a2-e6-95-b0-e6-8d-ae-e5-a4-87-e4-bb-bd-e6-90-ac-e5-ae-b6-e5-b7-a5-e5-85-b7-e4-b8-8b-e8-bd-bd/index.html","hash":"c71b83187799f2d09e0496b678b40fe69d0bd39b","modified":1515820221286},{"_id":"public/archives/index.html","hash":"d8d8543185f52fc69338886db425c39f4c2d67fa","modified":1515820221286},{"_id":"public/archives/page/2/index.html","hash":"45e181dd585242dc8ddd4d8424d3a13f7193e0c7","modified":1515820221286},{"_id":"public/archives/page/3/index.html","hash":"a024941dd857fdc7555407a4ef6abc6eea817dd1","modified":1515820221286},{"_id":"public/archives/page/4/index.html","hash":"77f0fd35955eb24daf87fe30faf918d7ba4c06b2","modified":1515820221286},{"_id":"public/archives/page/5/index.html","hash":"c6e1a754d77b87028f2cb756c5f7c098c9849707","modified":1515820221286},{"_id":"public/archives/page/6/index.html","hash":"3703dfc611f8e7e538262523189d20969eab62ff","modified":1515820221286},{"_id":"public/archives/page/7/index.html","hash":"312b13c5b8c96fb75ab7d1d8980e1183cdb672bc","modified":1515820221286},{"_id":"public/archives/page/8/index.html","hash":"b168c5ae46704cf100783f89cddfbeff805ec586","modified":1515820221286},{"_id":"public/archives/page/9/index.html","hash":"9aa8d0d9aeceb2c07a0921c26e85581775841ad5","modified":1515820221286},{"_id":"public/archives/page/10/index.html","hash":"239cd21bbea53a7c1c8aa62c90a2c9619db4710b","modified":1515820221286},{"_id":"public/archives/page/11/index.html","hash":"f910ffa43100ed0aeb22511a4c36a22c0d50b01e","modified":1515820221286},{"_id":"public/archives/page/12/index.html","hash":"050bfd50cdb1062ce50b66d7c93d8ea120e96c92","modified":1515820221286},{"_id":"public/archives/page/13/index.html","hash":"8c32ba770d1aa4871cc94a2d7d367a51f87a5710","modified":1515820221286},{"_id":"public/archives/page/14/index.html","hash":"862c6496906b4567c031046942dcc08046274fe0","modified":1515820221286},{"_id":"public/archives/page/15/index.html","hash":"d2e3fe34b51c3c04a1eba6a3b063db2a21389b92","modified":1515820221287},{"_id":"public/archives/2008/index.html","hash":"bf80c891d17aad48cbf237100d7837a292457050","modified":1515820221287},{"_id":"public/archives/2008/09/index.html","hash":"f23f34b71d9f9fdfc88eec2e5c4cc8cb0f209dcc","modified":1515820221287},{"_id":"public/archives/2010/index.html","hash":"0fd81dd9ec86251442ffc52a40f6779993951476","modified":1515820221287},{"_id":"public/archives/2010/02/index.html","hash":"14ef03b3dea1f1d84ebf88d1472317143f91d4a3","modified":1515820221287},{"_id":"public/archives/2010/06/index.html","hash":"371ff51347f9e1b87ca6a3e0d2464e9c977ec655","modified":1515820221287},{"_id":"public/archives/2011/index.html","hash":"7ff9800a9026c4544b8acb7a97fd84cabdddb984","modified":1515820221287},{"_id":"public/archives/2011/08/index.html","hash":"fb5e93f5e8cf0a2cfe83e94b4e8d4f9274ac0a0d","modified":1515820221287},{"_id":"public/archives/2011/09/index.html","hash":"ed73ba520b68a8eff9a136220ce484c12fc3f7dc","modified":1515820221287},{"_id":"public/archives/2011/10/index.html","hash":"fe6085745dd5e2d64ee1926978dfe4c3dfffe4d0","modified":1515820221287},{"_id":"public/archives/2011/11/index.html","hash":"4591443fe711c6c2eef7eb4591aa5d2f8a25c328","modified":1515820221287},{"_id":"public/archives/2011/12/index.html","hash":"242cfe8848818536b760759265f308d612f8e6df","modified":1515820221287},{"_id":"public/archives/2012/index.html","hash":"fb5b7e656274d85bdf0ba19eded037352a3d8f8a","modified":1515820221287},{"_id":"public/archives/2012/page/2/index.html","hash":"eee48c310b6c1c669f2fbb23d2368aada60243ad","modified":1515820221287},{"_id":"public/archives/2012/page/3/index.html","hash":"1dba0e929df226b6702fb1dea30911f42beb43bd","modified":1515820221287},{"_id":"public/archives/2012/page/4/index.html","hash":"06fa526271195bc85c4181726ff035664f894dbb","modified":1515820221287},{"_id":"public/archives/2012/01/index.html","hash":"2c150e0c4bbdaf703e8338cc39588fb54cb3877c","modified":1515820221287},{"_id":"public/archives/2012/02/index.html","hash":"dd687e7102977f98093c5d29721ad9827d84140e","modified":1515820221288},{"_id":"public/archives/2012/03/index.html","hash":"b4301818036f279534947a16f9366ec811620ade","modified":1515820221288},{"_id":"public/archives/2012/04/index.html","hash":"f8b0a47a513d41d3fa43eec0a07cecce4aea0ffa","modified":1515820221288},{"_id":"public/archives/2012/05/index.html","hash":"8f5cb936d5125974f14f7db947b6bc439e89da5d","modified":1515820221288},{"_id":"public/archives/2012/07/index.html","hash":"c43212918a64bba52f56bacd8f11208882897b16","modified":1515820221288},{"_id":"public/archives/2012/08/index.html","hash":"c3959682ede17dbd4992d15d18ba775e3b602c5b","modified":1515820221288},{"_id":"public/archives/2012/09/index.html","hash":"32749efe715ee9e653fec7f55126ee42e0bff065","modified":1515820221288},{"_id":"public/archives/2012/10/index.html","hash":"0d912c12c57e92ea035e8d6c01c2915596ae67f1","modified":1515820221288},{"_id":"public/archives/2012/11/index.html","hash":"4b0a6e6dc51a34a4b34373765f2c36f80214231a","modified":1515820221288},{"_id":"public/archives/2013/index.html","hash":"83d4fb12fab107ac03c7499e2d7ecfb6a2ffddf3","modified":1515820221288},{"_id":"public/archives/2013/page/2/index.html","hash":"56b30ad16b06f678215b4c22b0705d35d6e39481","modified":1515820221288},{"_id":"public/archives/2013/02/index.html","hash":"43ebfb4103bbfd6a740ea4053f867c17cc2561a7","modified":1515820221288},{"_id":"public/archives/2013/03/index.html","hash":"bb2579f5b10260970e35ca2017d8fabd7f4cacf6","modified":1515820221288},{"_id":"public/archives/2013/07/index.html","hash":"c394a765d6f15daae5e19076df26f470d0a4b93f","modified":1515820221288},{"_id":"public/archives/2013/08/index.html","hash":"f9a2e2b9fbbb4bc186fc60d9916b8289b1e41e57","modified":1515820221288},{"_id":"public/archives/2013/09/index.html","hash":"8c996b77aa46f1d6a52c9854c54c952bf9a62990","modified":1515820221288},{"_id":"public/archives/2013/10/index.html","hash":"d2762c54e4db69517ae55fc788407c13e56296d0","modified":1515820221289},{"_id":"public/archives/2013/12/index.html","hash":"d67d6f770d28d46cd5253d3d05527394f29f45c6","modified":1515820221289},{"_id":"public/archives/2014/index.html","hash":"596624ad5145cf8cf362efac9d8a7b208170290c","modified":1515820221289},{"_id":"public/archives/2014/page/2/index.html","hash":"b7c11c8678fb6666d131069a971ee463eb5b5156","modified":1515820221289},{"_id":"public/archives/2014/page/3/index.html","hash":"f2e9b9e84cb491328821a62b3aadfa5cc826da0a","modified":1515820221290},{"_id":"public/archives/2014/page/4/index.html","hash":"9d4bc7e12a871d5d7e2c37cb8f4fe4285ebbbc03","modified":1515820221290},{"_id":"public/archives/2014/page/5/index.html","hash":"7cc3cba52051c619c64897eaa5f7935cc493d940","modified":1515820221290},{"_id":"public/archives/2014/page/6/index.html","hash":"9adab50729f1ab122c2e53a5771f00ca67a0d9fd","modified":1515820221290},{"_id":"public/archives/2014/page/7/index.html","hash":"d07ca7f800e0a10ab125e6fed8767d99546d3c7d","modified":1515820221290},{"_id":"public/archives/2014/01/index.html","hash":"5ff2254991e36077f1a6fe92af5c876bdf261cfd","modified":1515820221290},{"_id":"public/archives/2014/03/index.html","hash":"c44e85c9c3ad2bebdd7f46da7dd686f67332d87a","modified":1515820221290},{"_id":"public/archives/2014/03/page/2/index.html","hash":"b1104e57024857c780080a2d85b495c40183b095","modified":1515820221290},{"_id":"public/archives/2014/04/index.html","hash":"5edfc6e46dccae6821acc704380c477d04ad006a","modified":1515820221290},{"_id":"public/archives/2014/04/page/2/index.html","hash":"4ca3211f34cf9a24886b3b204f56432bf8b1c4a8","modified":1515820221290},{"_id":"public/archives/2014/04/page/3/index.html","hash":"6c26d2ecb9cd7f305de0814659e009b580ad9662","modified":1515820221290},{"_id":"public/archives/2014/05/index.html","hash":"edfeb4242771b2b3eb979edc228b2e33b067cb6b","modified":1515820221290},{"_id":"public/archives/2014/05/page/2/index.html","hash":"a11b9f88b729c19cb18e934fdbc08824c6fc9880","modified":1515820221290},{"_id":"public/archives/2014/06/index.html","hash":"94518f5e970131032594680ca92d1520c58dc0c2","modified":1515820221291},{"_id":"public/archives/2014/07/index.html","hash":"6fbdf71e396ae156b483961ade99804ed296512d","modified":1515820221291},{"_id":"public/archives/2014/08/index.html","hash":"e5a7878fb35b6deb1d92ab29af6ebb631e4e41c5","modified":1515820221291},{"_id":"public/archives/2014/09/index.html","hash":"2b016d92035a3c2fe1991c4d264c86df27cdc6f7","modified":1515820221291},{"_id":"public/archives/2014/10/index.html","hash":"12405e067cf85edbfef748fbf6d93bdf02f3e06f","modified":1515820221291},{"_id":"public/archives/2014/11/index.html","hash":"18cf73ca3f240c9d05a5c204cd5c0b679dff1621","modified":1515820221291},{"_id":"public/archives/2015/index.html","hash":"43f6352f104757686245cd6e91c685c46a892804","modified":1515820221292},{"_id":"public/archives/2015/01/index.html","hash":"cd185c77d73510131942d3b1fc742a90b1c76ab7","modified":1515820221292},{"_id":"public/archives/2015/03/index.html","hash":"6ef8f069bc555d1bc06d6dda15f6554238cf3fd2","modified":1515820221292},{"_id":"public/archives/2015/05/index.html","hash":"ab7ab449d13231f679c6c4e0a4d24743feca86b3","modified":1515820221292},{"_id":"public/archives/2015/08/index.html","hash":"5bc2944aa287c7ed7611effb516194b9c6a90a85","modified":1515820221292},{"_id":"public/archives/2015/09/index.html","hash":"09443afe2310dc05e1abd4e62339af157f026692","modified":1515820221292},{"_id":"public/archives/2016/index.html","hash":"c15c9c37b7e01a5f03e85361476dcdca4e104632","modified":1515820221292},{"_id":"public/archives/2016/03/index.html","hash":"b42c0f97d883e95873d9d5932227bde1e08a95c4","modified":1515820221292},{"_id":"public/archives/2016/04/index.html","hash":"71b89a25c780bbbb6e6027a8bd74aa09d26bb023","modified":1515820221293},{"_id":"public/archives/2016/05/index.html","hash":"97bbc1f873abae2475a158871904d55f04bad799","modified":1515820221293},{"_id":"public/archives/2016/06/index.html","hash":"1e91568b574290339e578ec6132ed0d16be62768","modified":1515820221293},{"_id":"public/archives/2017/index.html","hash":"063eb6e3d6e17885c7277778a3dfc4be7c7caa35","modified":1515820221293},{"_id":"public/archives/2017/10/index.html","hash":"202b79df6ab2b968640e4667d9614a056a5c56ec","modified":1515820221293},{"_id":"public/archives/2018/index.html","hash":"938ab3ce9debaab52fc7b8cb3022c5abf91e1f82","modified":1515820221293},{"_id":"public/archives/2018/01/index.html","hash":"a50a84aa677a6e504f8dfddbd79d90680c93a5e3","modified":1515820221293},{"_id":"public/categories/Algorithm/index.html","hash":"d84ceed58b75fcb717141443b3d8a262473b0d4e","modified":1515820221293},{"_id":"public/categories/Other/index.html","hash":"47787c4dd97d2aec7a33d686cdb225013939c2f4","modified":1515820221293},{"_id":"public/categories/Other/page/2/index.html","hash":"1d03674a821de8e6c1acb50b8b1e8ec8e447e275","modified":1515820221293},{"_id":"public/categories/Other/page/3/index.html","hash":"5fa7b6f49e851d3b69298fbc73ccd53062572fb6","modified":1515820221293},{"_id":"public/categories/PHP/index.html","hash":"34b321d10e42477f110bcedd2c9179bf0e06a751","modified":1515820221293},{"_id":"public/categories/PHP/page/2/index.html","hash":"9261081fcecbd1ba8816fbdcd4017c1b09064ac1","modified":1515820221293},{"_id":"public/categories/PHP/page/3/index.html","hash":"ac1e0c5d094ad8f59ed1550a74e2d06ef0fc99f6","modified":1515820221293},{"_id":"public/categories/PHP/page/4/index.html","hash":"8267150e1b1fddc79b4e06fd7ca7c05e888994f1","modified":1515820221293},{"_id":"public/categories/Linux/index.html","hash":"e4178734a282b7eb4357f6dfaeb9da8300cfa95d","modified":1515820221293},{"_id":"public/categories/Linux/page/2/index.html","hash":"7d74101836dfeb4e5f519967fd1997615f135137","modified":1515820221294},{"_id":"public/categories/Linux/page/3/index.html","hash":"bdb16cd48fcd0944eca5ffbbd5c9d2aa9e43fd26","modified":1515820221294},{"_id":"public/categories/JQuery/index.html","hash":"f85502e7b0277fb5d6d58b03d6acd7f4aa6e1d37","modified":1515820221294},{"_id":"public/categories/Java/index.html","hash":"e1c94e3d8abc912561a416fc12bfcee1c85d056e","modified":1515820221294},{"_id":"public/categories/Java/page/2/index.html","hash":"551068d0d04b8b71077806aa71f22902be474d5f","modified":1515820221294},{"_id":"public/categories/Windows/index.html","hash":"f849d9397228d7b0308beb1e93e5ea825d0a8e69","modified":1515820221294},{"_id":"public/categories/Qt/index.html","hash":"bf145750c6b3eb3f48b0dd0d5bdc7a44b0ff90bd","modified":1515820221294},{"_id":"public/categories/Qt/page/2/index.html","hash":"4f21e43d3c1a92297b9998430f81dcac3db13a8b","modified":1515820221294},{"_id":"public/categories/MySQL/index.html","hash":"f653efe07ddf6a5f0d486b396551e5013a7470db","modified":1515820221294},{"_id":"public/categories/Html/index.html","hash":"7549f469c6a946f0df015c130459251c30ccfea4","modified":1515820221294},{"_id":"public/categories/React/index.html","hash":"4d03f33ed56ec6b05e6dea2f31dfd24327683244","modified":1515820221294},{"_id":"public/categories/Hadoop/index.html","hash":"8b1ec3488c13b5e44df7007f75a39496e65a93e8","modified":1515820221294},{"_id":"public/categories/Linux/Windows/index.html","hash":"ddd2430ef3a8346dd0133201c2c16f417240caa3","modified":1515820221294},{"_id":"public/index.html","hash":"4fd8aeebf25fe6c335ebebefa53579355d7c53e1","modified":1515820221294},{"_id":"public/page/2/index.html","hash":"1983d5fd878acf7ec026e5adfb91d0384ee2c496","modified":1515820221294},{"_id":"public/page/3/index.html","hash":"5f6341ab2069c4d12562dbea744a208122a52471","modified":1515820221295},{"_id":"public/page/4/index.html","hash":"1e2bfa0036bcf683e3ec316a040a4092ebc09a82","modified":1515820221295},{"_id":"public/page/5/index.html","hash":"af313ff7ca3f36b49f19e96906a1ad2132671a8d","modified":1515820221295},{"_id":"public/page/6/index.html","hash":"fbda744b4492a277df23320e826bc74f2e2a3bc9","modified":1515820221295},{"_id":"public/page/7/index.html","hash":"dcdffe9205c7864c86e0605922055109a3306e4f","modified":1515820221295},{"_id":"public/page/8/index.html","hash":"c4bd7e02201bffb89f27db80bac4cf5e4780c894","modified":1515820221295},{"_id":"public/page/9/index.html","hash":"c2f66457b3f1637324f5538798e956c191484e40","modified":1515820221295},{"_id":"public/page/10/index.html","hash":"b18e33ccabbd6129e14da961f5a26872ea486f27","modified":1515820221295},{"_id":"public/page/11/index.html","hash":"9a2215c64e73418bb9fa33eaab4a394299421ff2","modified":1515820221295},{"_id":"public/page/12/index.html","hash":"d1be2214d978b19b609b25a816001efbee7d6567","modified":1515820221295},{"_id":"public/page/13/index.html","hash":"b4c565e0dbd3f99afb0bc2cfb15bbcaad4bec36c","modified":1515820221295},{"_id":"public/page/14/index.html","hash":"b76aa7fcc26ecebdae63c2da070dcd256a143b56","modified":1515820221295},{"_id":"public/page/15/index.html","hash":"52ea75876f2515246f1e91837e39cfb6aabf5000","modified":1515820221295},{"_id":"public/tags/apache/index.html","hash":"35e5b7ba69c15fa56fbcbc11e6f05bf201a25d33","modified":1515820221295},{"_id":"public/tags/mod-wsgi/index.html","hash":"44cd17f7834cb70527b2e5522e4276b47ee08cba","modified":1515820221296},{"_id":"public/tags/算法/index.html","hash":"e694442956a728f46d8a35433c5e7a9bff5b4ed2","modified":1515820221296},{"_id":"public/tags/ajax/index.html","hash":"30dc2c835d88784e156ff95d996c38f9f6e22703","modified":1515820221296},{"_id":"public/tags/bootstrap/index.html","hash":"1c9915608c2dda1a78b026d94bcb1d3c9109ff69","modified":1515820221296},{"_id":"public/tags/C-C/index.html","hash":"27370f0d09df2a1bdd8c993eae10b4116621a3aa","modified":1515820221296},{"_id":"public/tags/dex2jar/index.html","hash":"266203765845d77e6ba4abe7878a552117f8e13d","modified":1515820221296},{"_id":"public/tags/java/index.html","hash":"aa037c15752359f7ad86767f7bd0119150d57e79","modified":1515820221296},{"_id":"public/tags/redis/index.html","hash":"2ae5c60d162d8054a3c62a67cc485e0dae06e63d","modified":1515820221296},{"_id":"public/tags/sublime/index.html","hash":"70ce3a81182a5da2c36b9eddd4038bac7cb6c8ec","modified":1515820221296},{"_id":"public/tags/composer/index.html","hash":"00ae11e69ee08721c0b4d5fd0773c4c32cfc054e","modified":1515820221296},{"_id":"public/tags/MySQL/index.html","hash":"857e022c36759644c65b4735c0e0887113e78813","modified":1515820221296},{"_id":"public/tags/MySQL/page/2/index.html","hash":"2167ab4e1ddf03f3b312d265317a75f76deafbbb","modified":1515820221296},{"_id":"public/tags/Python/index.html","hash":"16b8c47f542f963544e6f0d4fe75dba3d537f063","modified":1515820221296},{"_id":"public/tags/内存/index.html","hash":"da62afaf91e3cea6b5328c87a0eda2973a4c091c","modified":1515820221296},{"_id":"public/tags/大数据/index.html","hash":"ea54b705d9d9c771f926fdfd422c8578eb76f15e","modified":1515820221296},{"_id":"public/tags/大文件/index.html","hash":"f2fc64e2ec8f098ecf64856761b492744470fd4e","modified":1515820221296},{"_id":"public/tags/ie/index.html","hash":"e68289bcd1cea8b9350d07dabb7bcf74b394d9f8","modified":1515820221297},{"_id":"public/tags/排序/index.html","hash":"1fecc7be0726f70d2fbc1698d9a59d6b209efca0","modified":1515820221297},{"_id":"public/tags/键盘/index.html","hash":"0098a540f2ee9e61fad28bd2beac2d7a9ea49913","modified":1515820221297},{"_id":"public/tags/vagrant/index.html","hash":"1eea3c38161d2b3df9526b32a2395f48985924a1","modified":1515820221297},{"_id":"public/tags/正则表达式/index.html","hash":"72a2168a54a1c47d9ac6480e518bf415bce84222","modified":1515820221297},{"_id":"public/tags/css/index.html","hash":"9a1842d80cd3c17d8d57f7ce28e3864674fb4500","modified":1515820221297},{"_id":"public/tags/html/index.html","hash":"041698e80d2037e10300bbaeb84d2400b0281ff3","modified":1515820221297},{"_id":"public/tags/php/index.html","hash":"3b4dffccf27597126d4ba6cc8867e9978f6a8b98","modified":1515820221297},{"_id":"public/tags/php/page/2/index.html","hash":"a7042769fa77f67f6430c2473e4c390cf7bf3e3f","modified":1515820221297},{"_id":"public/tags/设计模式/index.html","hash":"186d15ebbefe0fb98610aeb1afbbdcadf949601e","modified":1515820221297},{"_id":"public/tags/Qt/index.html","hash":"c580afa7233acb4c50df5c985b8bb4fce50055cd","modified":1515820221297},{"_id":"public/tags/https/index.html","hash":"964c98b9b89cc79a6d75b6f5bdf9483bfddd4ac5","modified":1515820221297},{"_id":"public/tags/vps/index.html","hash":"14cb949a3db6ab1b6cd73d382baeb89bb69facdc","modified":1515820221297},{"_id":"public/tags/phpstorm/index.html","hash":"856c13fe4656a988a92780ce8e0b7ca20ead9ce3","modified":1515820221297},{"_id":"public/tags/react/index.html","hash":"47bae125ab53abeb5b65111733a3d08d1d5d9108","modified":1515820221297},{"_id":"public/tags/react-native/index.html","hash":"a85b729e012aba5b8e06917e20a49f32ce97fe2b","modified":1515820221297},{"_id":"public/tags/phpmyadmin/index.html","hash":"87fa30694ce1e1834b1f8b83e5351ddde7122689","modified":1515820221298},{"_id":"public/tags/fedora/index.html","hash":"6db2c0ab65833ddf6c8025fb75c4057cdd57140e","modified":1515820221298},{"_id":"public/tags/Linux-amp-Fedora/index.html","hash":"0b1c66f94a3c1c558bd4a2fe958ee5d105579760","modified":1515820221298},{"_id":"public/tags/reviewboard/index.html","hash":"008c4d8c79e37e9ab57470bc21c7e54cf6b4c58e","modified":1515820221298},{"_id":"public/tags/easy-install/index.html","hash":"055b73b3dce9bb275af35931c8aed0b64ba4a8f8","modified":1515820221298},{"_id":"public/tags/gentoo/index.html","hash":"a534b513ce574a9ea4d20fa3db651903863acab7","modified":1515820221298},{"_id":"public/tags/hadoop/index.html","hash":"8e8bf923e8df0881bf8febc6185013c25693ef4a","modified":1515820221298},{"_id":"public/tags/hive/index.html","hash":"02004a197b04b5d424a53caf3c1ef8e73022832c","modified":1515820221298},{"_id":"public/tags/git/index.html","hash":"65ceef594c5612633b6cb3e4c250776c51e4faab","modified":1515820221298},{"_id":"public/tags/Linux/index.html","hash":"4ad5d9bc2aea8768e34d29f93e36f55db14e9bf4","modified":1515820221298},{"_id":"public/tags/js/index.html","hash":"71b1f19303c10f1baba2666a8c7466d47261bae8","modified":1515820221298},{"_id":"public/tags/lavarel/index.html","hash":"c5f5b149de38479ff504936427466bab2bd175dd","modified":1515820221298},{"_id":"public/tags/memcached/index.html","hash":"e8beac1bd31be99570ecaa44bd1b94091cc63105","modified":1515820221298},{"_id":"public/tags/pysvn/index.html","hash":"e7f74219394f5783fa42a5e43da0fcbd810a8b42","modified":1515820221298},{"_id":"public/tags/rsync/index.html","hash":"8c98b9ff1a94faa44fc3be091e7fb0a6d3d76f86","modified":1515820221298},{"_id":"public/tags/windows8/index.html","hash":"7d46c7df159a46a109936f57d3806742d30c82e5","modified":1515820221298},{"_id":"public/tags/局域网/index.html","hash":"eb4d77a7a25763fbd9db7c03d815289e11e4ec07","modified":1515820221298},{"_id":"public/tags/打印机/index.html","hash":"5c977712b4f83aab3803f7faaa4f59bfa10ec864","modified":1515820221299},{"_id":"public/tags/nginx/index.html","hash":"4ce5677671d4c19d7273b0f423f72b54b8022ff5","modified":1515820221299},{"_id":"public/tags/xshell/index.html","hash":"dfe175ae233f0c3b2ada3d8a7a0b8bdaa141135a","modified":1515820221299},{"_id":"public/CNAME","hash":"4315d3ce0794cea20c2e071e6c118211bcc46469","modified":1515820221311},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1515820221311},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1515820221312},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1515820221312},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1515820221312},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1515820221312},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1515820221312},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1515820221312},{"_id":"public/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1515820221312},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1515820221312},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1515820221312},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1515820221977},{"_id":"public/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1515820221987},{"_id":"public/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1515820221988},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1515820221988},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1515820221988},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1515820221989},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1515820221989},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1515820221989},{"_id":"public/css/style.css","hash":"5f8dadd37d0052c557061018fe6f568f64fced9b","modified":1515820221989},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1515820221990},{"_id":"public/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1515820221990},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1515820222002},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1515820222003}],"Category":[{"name":"Algorithm","_id":"cjccw7x6w0002aqcr5ukdbupe"},{"name":"Other","_id":"cjccw7x740006aqcrjqxpdp3l"},{"name":"PHP","_id":"cjccw7x7a000aaqcr8ngxtdo6"},{"name":"Linux","_id":"cjccw7x7e000faqcrivy2l9dv"},{"name":"JQuery","_id":"cjccw7x7x0015aqcrlrnwp8ot"},{"name":"Java","_id":"cjccw7x81001daqcranhddtuc"},{"name":"Windows","_id":"cjccw7x86001laqcrex1xxtni"},{"name":"Qt","_id":"cjccw7x89001saqcrhdja3b5x"},{"name":"MySQL","_id":"cjccw7x8r002jaqcr32j6xehr"},{"name":"Html","_id":"cjccw7x92002xaqcradokyk92"},{"name":"React","_id":"cjccw7xaf004saqcr7mwmjiyy"},{"name":"Hadoop","_id":"cjccw7xar005jaqcrd9wlll31"},{"name":"Windows","parent":"cjccw7x7e000faqcrivy2l9dv","_id":"cjccw7xdu00bdaqcrinyb0kqr"}],"Data":[],"Page":[],"Post":[{"title":"快速幂取模算法 A^B Mod C","id":"2444","date":"2015-03-08T07:27:28.000Z","_content":"\n先说题目：\n给出3个正整数A B C，求A^B Mod C。(1 <= A,B,C <= 10^9)。例如，3 5 8，3^5 Mod 8 = 3。\n\n立马想到的解决方法是\n`int ans=1;\nfor(int i=1;i<b;i++){\n    ans=ans*a;\n}\nans = ans % c;\n`\n但是这里有个很明显的问题，如果a和b过大，就很容易溢出。\n\n这里我们可以对mod进行优化，因子取余相乘后取余最终余数不变，即公式：\na^b mod c = (a mod c)^b mod c\n\n那么上面算法可优化为\n`int ans=1;\na = a % c;\nfor(int i=1;i<b;i++){\n    ans=ans*a%c; //这里再取了一次余\n}\nans = ans % c;`\n<!--more-->\nmod优化完后再看一下幂的优化：\n> A^8 = A * A * A * A * A * A * A * A\r> \n> 总共需要7次乘法运算；\r> \n> 将其平均分解：\r> \n> A^8 = (A * A * A * A) * (A * A * A * A) = (A * A * A * A) ^ 2\r> \n> 这样我们就只需要4次乘法运算了；\r> \n> 再分解：\r> \n> A^8 = [(A * A) * (A * A)] ^ 2 = [(A * A) ^ 2] ^ 2\r> \n> 那么现在计算次数为 (A * A) 一次，两个平方两次共3次。\n\n以上过程可以得出以下公式：\n> a^b=(a^2)^(b/2); b为偶\r> \n> a^b=(a^2)^(b/2)*a; b为奇\n\n最终公式为：\n> a^b mod c=(a^2)^(b/2) mod c; b为偶\r> \n> a^b mod c=(a^2)^(b/2)*a mod c; b为奇\n\n快速幂算法\n`int quickPowerMod(int a, int b, int c){\n    int ans = 1;\n    a = a % c;\n    while(b>0) {\n        if(b % 2 == 1){  //可优化为 if((b&1)>0) 若幂为奇数\n            ans = (ans * a) % c;\n        }        \n        b = b/2;  //可优化为 b>>=1 b除于2\n        a = (a * a) % c;\n    }\n    return ans;\n}`\n\n最后，题中讲1 <= A,B,C <= 10^9，所以用int没问题，如果数再大，就以使用java 里的 BigInteger\n`    static BigInteger bigint(BigInteger a,BigInteger b,BigInteger m){\n        BigInteger ans = new BigInteger(\"1\");\n        while (b.compareTo(BigInteger.valueOf(0)) > 0) {\n            if (b.mod(BigInteger.valueOf(2)).compareTo(BigInteger.valueOf(1)) == 0){ // if(n%2==1),b是奇数\n                ans = ans.multiply(a).mod(m); // sq=(sq*p)%m;\n            }\n            a = a.multiply(a).mod(m); // p=(p*p)%m;\n            b = b.divide(BigInteger.valueOf(2));\n        }\n        return ans;\n    }`","source":"_posts/2444.md","raw":"---\ntitle: 快速幂取模算法 A^B Mod C\nid: 2444\ncategories:\n  - Algorithm\ndate: 2015-03-08 15:27:28\ntags:\n---\n\n先说题目：\n给出3个正整数A B C，求A^B Mod C。(1 <= A,B,C <= 10^9)。例如，3 5 8，3^5 Mod 8 = 3。\n\n立马想到的解决方法是\n`int ans=1;\nfor(int i=1;i<b;i++){\n    ans=ans*a;\n}\nans = ans % c;\n`\n但是这里有个很明显的问题，如果a和b过大，就很容易溢出。\n\n这里我们可以对mod进行优化，因子取余相乘后取余最终余数不变，即公式：\na^b mod c = (a mod c)^b mod c\n\n那么上面算法可优化为\n`int ans=1;\na = a % c;\nfor(int i=1;i<b;i++){\n    ans=ans*a%c; //这里再取了一次余\n}\nans = ans % c;`\n<!--more-->\nmod优化完后再看一下幂的优化：\n> A^8 = A * A * A * A * A * A * A * A\r> \n> 总共需要7次乘法运算；\r> \n> 将其平均分解：\r> \n> A^8 = (A * A * A * A) * (A * A * A * A) = (A * A * A * A) ^ 2\r> \n> 这样我们就只需要4次乘法运算了；\r> \n> 再分解：\r> \n> A^8 = [(A * A) * (A * A)] ^ 2 = [(A * A) ^ 2] ^ 2\r> \n> 那么现在计算次数为 (A * A) 一次，两个平方两次共3次。\n\n以上过程可以得出以下公式：\n> a^b=(a^2)^(b/2); b为偶\r> \n> a^b=(a^2)^(b/2)*a; b为奇\n\n最终公式为：\n> a^b mod c=(a^2)^(b/2) mod c; b为偶\r> \n> a^b mod c=(a^2)^(b/2)*a mod c; b为奇\n\n快速幂算法\n`int quickPowerMod(int a, int b, int c){\n    int ans = 1;\n    a = a % c;\n    while(b>0) {\n        if(b % 2 == 1){  //可优化为 if((b&1)>0) 若幂为奇数\n            ans = (ans * a) % c;\n        }        \n        b = b/2;  //可优化为 b>>=1 b除于2\n        a = (a * a) % c;\n    }\n    return ans;\n}`\n\n最后，题中讲1 <= A,B,C <= 10^9，所以用int没问题，如果数再大，就以使用java 里的 BigInteger\n`    static BigInteger bigint(BigInteger a,BigInteger b,BigInteger m){\n        BigInteger ans = new BigInteger(\"1\");\n        while (b.compareTo(BigInteger.valueOf(0)) > 0) {\n            if (b.mod(BigInteger.valueOf(2)).compareTo(BigInteger.valueOf(1)) == 0){ // if(n%2==1),b是奇数\n                ans = ans.multiply(a).mod(m); // sq=(sq*p)%m;\n            }\n            a = a.multiply(a).mod(m); // p=(p*p)%m;\n            b = b.divide(BigInteger.valueOf(2));\n        }\n        return ans;\n    }`","slug":"2444","published":1,"updated":"2018-01-13T05:07:00.487Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjccw7x6o0000aqcr65w0yoh5","content":"<p>先说题目：<br>给出3个正整数A B C，求A^B Mod C。(1 &lt;= A,B,C &lt;= 10^9)。例如，3 5 8，3^5 Mod 8 = 3。</p>\n<p>立马想到的解决方法是<br><code>int ans=1;\nfor(int i=1;i&lt;b;i++){\n    ans=ans*a;\n}\nans = ans % c;</code><br>但是这里有个很明显的问题，如果a和b过大，就很容易溢出。</p>\n<p>这里我们可以对mod进行优化，因子取余相乘后取余最终余数不变，即公式：<br>a^b mod c = (a mod c)^b mod c</p>\n<p>那么上面算法可优化为<br><code>int ans=1;\na = a % c;\nfor(int i=1;i&lt;b;i++){\n    ans=ans*a%c; //这里再取了一次余\n}\nans = ans % c;</code><br><a id=\"more\"></a><br>mod优化完后再看一下幂的优化：</p>\n<blockquote>\n<p>A^8 = A <em> A </em> A <em> A </em> A <em> A </em> A * A</p>\n<p>总共需要7次乘法运算；</p>\n<p>将其平均分解：</p>\n<p>A^8 = (A <em> A </em> A <em> A) </em> (A <em> A </em> A <em> A) = (A </em> A <em> A </em> A) ^ 2</p>\n<p>这样我们就只需要4次乘法运算了；</p>\n<p>再分解：</p>\n<p>A^8 = [(A <em> A) </em> (A <em> A)] ^ 2 = [(A </em> A) ^ 2] ^ 2</p>\n<p>那么现在计算次数为 (A * A) 一次，两个平方两次共3次。</p>\n</blockquote>\n<p>以上过程可以得出以下公式：</p>\n<blockquote>\n<p>a^b=(a^2)^(b/2); b为偶</p>\n<p>a^b=(a^2)^(b/2)*a; b为奇</p>\n</blockquote>\n<p>最终公式为：</p>\n<blockquote>\n<p>a^b mod c=(a^2)^(b/2) mod c; b为偶</p>\n<p>a^b mod c=(a^2)^(b/2)*a mod c; b为奇</p>\n</blockquote>\n<p>快速幂算法<br><code>int quickPowerMod(int a, int b, int c){\n    int ans = 1;\n    a = a % c;\n    while(b&gt;0) {\n        if(b % 2 == 1){  //可优化为 if((b&amp;1)&gt;0) 若幂为奇数\n            ans = (ans * a) % c;\n        }        \n        b = b/2;  //可优化为 b&gt;&gt;=1 b除于2\n        a = (a * a) % c;\n    }\n    return ans;\n}</code></p>\n<p>最后，题中讲1 &lt;= A,B,C &lt;= 10^9，所以用int没问题，如果数再大，就以使用java 里的 BigInteger<br><code>static BigInteger bigint(BigInteger a,BigInteger b,BigInteger m){\n        BigInteger ans = new BigInteger(&quot;1&quot;);\n        while (b.compareTo(BigInteger.valueOf(0)) &gt; 0) {\n            if (b.mod(BigInteger.valueOf(2)).compareTo(BigInteger.valueOf(1)) == 0){ // if(n%2==1),b是奇数\n                ans = ans.multiply(a).mod(m); // sq=(sq*p)%m;\n            }\n            a = a.multiply(a).mod(m); // p=(p*p)%m;\n            b = b.divide(BigInteger.valueOf(2));\n        }\n        return ans;\n    }</code></p>\n","site":{"data":{}},"excerpt":"<p>先说题目：<br>给出3个正整数A B C，求A^B Mod C。(1 &lt;= A,B,C &lt;= 10^9)。例如，3 5 8，3^5 Mod 8 = 3。</p>\n<p>立马想到的解决方法是<br><code>int ans=1;\nfor(int i=1;i&lt;b;i++){\n    ans=ans*a;\n}\nans = ans % c;</code><br>但是这里有个很明显的问题，如果a和b过大，就很容易溢出。</p>\n<p>这里我们可以对mod进行优化，因子取余相乘后取余最终余数不变，即公式：<br>a^b mod c = (a mod c)^b mod c</p>\n<p>那么上面算法可优化为<br><code>int ans=1;\na = a % c;\nfor(int i=1;i&lt;b;i++){\n    ans=ans*a%c; //这里再取了一次余\n}\nans = ans % c;</code><br>","more":"<br>mod优化完后再看一下幂的优化：</p>\n<blockquote>\n<p>A^8 = A <em> A </em> A <em> A </em> A <em> A </em> A * A</p>\n<p>总共需要7次乘法运算；</p>\n<p>将其平均分解：</p>\n<p>A^8 = (A <em> A </em> A <em> A) </em> (A <em> A </em> A <em> A) = (A </em> A <em> A </em> A) ^ 2</p>\n<p>这样我们就只需要4次乘法运算了；</p>\n<p>再分解：</p>\n<p>A^8 = [(A <em> A) </em> (A <em> A)] ^ 2 = [(A </em> A) ^ 2] ^ 2</p>\n<p>那么现在计算次数为 (A * A) 一次，两个平方两次共3次。</p>\n</blockquote>\n<p>以上过程可以得出以下公式：</p>\n<blockquote>\n<p>a^b=(a^2)^(b/2); b为偶</p>\n<p>a^b=(a^2)^(b/2)*a; b为奇</p>\n</blockquote>\n<p>最终公式为：</p>\n<blockquote>\n<p>a^b mod c=(a^2)^(b/2) mod c; b为偶</p>\n<p>a^b mod c=(a^2)^(b/2)*a mod c; b为奇</p>\n</blockquote>\n<p>快速幂算法<br><code>int quickPowerMod(int a, int b, int c){\n    int ans = 1;\n    a = a % c;\n    while(b&gt;0) {\n        if(b % 2 == 1){  //可优化为 if((b&amp;1)&gt;0) 若幂为奇数\n            ans = (ans * a) % c;\n        }        \n        b = b/2;  //可优化为 b&gt;&gt;=1 b除于2\n        a = (a * a) % c;\n    }\n    return ans;\n}</code></p>\n<p>最后，题中讲1 &lt;= A,B,C &lt;= 10^9，所以用int没问题，如果数再大，就以使用java 里的 BigInteger<br><code>static BigInteger bigint(BigInteger a,BigInteger b,BigInteger m){\n        BigInteger ans = new BigInteger(&quot;1&quot;);\n        while (b.compareTo(BigInteger.valueOf(0)) &gt; 0) {\n            if (b.mod(BigInteger.valueOf(2)).compareTo(BigInteger.valueOf(1)) == 0){ // if(n%2==1),b是奇数\n                ans = ans.multiply(a).mod(m); // sq=(sq*p)%m;\n            }\n            a = a.multiply(a).mod(m); // p=(p*p)%m;\n            b = b.divide(BigInteger.valueOf(2));\n        }\n        return ans;\n    }</code></p>"},{"title":"Qt 实现的拷贝文件夹的函数","id":"920","_content":"\n#include <qdir>\n02\t#include <qfileInfoList>\n03\n04\t/**\n05\t  qCopyDirectory -- 拷贝目录\n06\t  fromDir : 源目录\n07\t  toDir   : 目标目录\n08\t  bCoverIfFileExists : ture:同名时覆盖  false:同名时返回false,终止拷贝\n09\t  返回: ture拷贝成功 false:拷贝未完成\n10\t*/\n11\tbool qCopyDirectory(const QDir& fromDir, const QDir& toDir, bool bCoverIfFileExists)\n12\t{\n13\t    QDir formDir_ = fromDir;\n14\t    QDir toDir_ = toDir;\n15\n16\t    if(!toDir_.exists())\n17\t    {\n18\t        if(!toDir_.mkdir(toDir.absolutePath()))\n19\t            return false;\n20\t    }\n21\n22\t    QFileInfoList fileInfoList = formDir_.entryInfoList();\n23\t    foreach(QFileInfo fileInfo, fileInfoList)\n24\t    {\n25\t        if(fileInfo.fileName() == \".\" || fileInfo.fileName() == \"..\")\n26\t            continue;\n27\n28\t        //拷贝子目录\n29\t        if(fileInfo.isDir())\n30\t        {\n31\t            //递归调用拷贝\n32\t            if(!qCopyDirectory(fileInfo.filePath(), toDir_.filePath(fileInfo.fileName())))\n33\t                return false;\n34\t        }\n35\t        //拷贝子文件\n36\t        else\n37\t        {\n38\t            if(bCoverIfFileExists && toDir_.exists(fileInfo.fileName()))\n39\t            {\n40\t                toDir_.remove(fileInfo.fileName());\n41\t            }\n42\t            if(!QFile::copy(fileInfo.filePath(), toDir_.filePath(fileInfo.fileName())))\n43\t            {\n44\t                return false;\n45\t            }\n46\t        }\n47\t    }\n48\t    return true;\n49\t}","source":"_drafts/Qt-实现的拷贝文件夹的函数.md","raw":"---\ntitle: Qt 实现的拷贝文件夹的函数\nid: 920\ncategories:\n  - Other\ntags:\n---\n\n#include <qdir>\n02\t#include <qfileInfoList>\n03\n04\t/**\n05\t  qCopyDirectory -- 拷贝目录\n06\t  fromDir : 源目录\n07\t  toDir   : 目标目录\n08\t  bCoverIfFileExists : ture:同名时覆盖  false:同名时返回false,终止拷贝\n09\t  返回: ture拷贝成功 false:拷贝未完成\n10\t*/\n11\tbool qCopyDirectory(const QDir& fromDir, const QDir& toDir, bool bCoverIfFileExists)\n12\t{\n13\t    QDir formDir_ = fromDir;\n14\t    QDir toDir_ = toDir;\n15\n16\t    if(!toDir_.exists())\n17\t    {\n18\t        if(!toDir_.mkdir(toDir.absolutePath()))\n19\t            return false;\n20\t    }\n21\n22\t    QFileInfoList fileInfoList = formDir_.entryInfoList();\n23\t    foreach(QFileInfo fileInfo, fileInfoList)\n24\t    {\n25\t        if(fileInfo.fileName() == \".\" || fileInfo.fileName() == \"..\")\n26\t            continue;\n27\n28\t        //拷贝子目录\n29\t        if(fileInfo.isDir())\n30\t        {\n31\t            //递归调用拷贝\n32\t            if(!qCopyDirectory(fileInfo.filePath(), toDir_.filePath(fileInfo.fileName())))\n33\t                return false;\n34\t        }\n35\t        //拷贝子文件\n36\t        else\n37\t        {\n38\t            if(bCoverIfFileExists && toDir_.exists(fileInfo.fileName()))\n39\t            {\n40\t                toDir_.remove(fileInfo.fileName());\n41\t            }\n42\t            if(!QFile::copy(fileInfo.filePath(), toDir_.filePath(fileInfo.fileName())))\n43\t            {\n44\t                return false;\n45\t            }\n46\t        }\n47\t    }\n48\t    return true;\n49\t}","slug":"Qt-实现的拷贝文件夹的函数","published":0,"date":"2018-01-13T05:07:00.498Z","updated":"2018-01-13T05:07:00.499Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjccw7x6u0001aqcrjf4v7imx","content":"<p>#include <qdir><br>02    #include <qfileinfolist><br>03<br>04    /<em>*<br>05      qCopyDirectory – 拷贝目录<br>06      fromDir : 源目录<br>07      toDir   : 目标目录<br>08      bCoverIfFileExists : ture:同名时覆盖  false:同名时返回false,终止拷贝<br>09      返回: ture拷贝成功 false:拷贝未完成<br>10    </em>/<br>11    bool qCopyDirectory(const QDir&amp; fromDir, const QDir&amp; toDir, bool bCoverIfFileExists)<br>12    {<br>13        QDir formDir<em> = fromDir;<br>14        QDir toDir</em> = toDir;<br>15<br>16        if(!toDir<em>.exists())<br>17        {<br>18            if(!toDir</em>.mkdir(toDir.absolutePath()))<br>19                return false;<br>20        }<br>21<br>22        QFileInfoList fileInfoList = formDir<em>.entryInfoList();<br>23        foreach(QFileInfo fileInfo, fileInfoList)<br>24        {<br>25            if(fileInfo.fileName() == “.” || fileInfo.fileName() == “..”)<br>26                continue;<br>27<br>28            //拷贝子目录<br>29            if(fileInfo.isDir())<br>30            {<br>31                //递归调用拷贝<br>32                if(!qCopyDirectory(fileInfo.filePath(), toDir</em>.filePath(fileInfo.fileName())))<br>33                    return false;<br>34            }<br>35            //拷贝子文件<br>36            else<br>37            {<br>38                if(bCoverIfFileExists &amp;&amp; toDir<em>.exists(fileInfo.fileName()))<br>39                {<br>40                    toDir</em>.remove(fileInfo.fileName());<br>41                }<br>42                if(!QFile::copy(fileInfo.filePath(), toDir_.filePath(fileInfo.fileName())))<br>43                {<br>44                    return false;<br>45                }<br>46            }<br>47        }<br>48        return true;<br>49    }</qfileinfolist></qdir></p>\n","site":{"data":{}},"excerpt":"","more":"<p>#include <qdir><br>02    #include <qfileinfolist><br>03<br>04    /<em>*<br>05      qCopyDirectory – 拷贝目录<br>06      fromDir : 源目录<br>07      toDir   : 目标目录<br>08      bCoverIfFileExists : ture:同名时覆盖  false:同名时返回false,终止拷贝<br>09      返回: ture拷贝成功 false:拷贝未完成<br>10    </em>/<br>11    bool qCopyDirectory(const QDir&amp; fromDir, const QDir&amp; toDir, bool bCoverIfFileExists)<br>12    {<br>13        QDir formDir<em> = fromDir;<br>14        QDir toDir</em> = toDir;<br>15<br>16        if(!toDir<em>.exists())<br>17        {<br>18            if(!toDir</em>.mkdir(toDir.absolutePath()))<br>19                return false;<br>20        }<br>21<br>22        QFileInfoList fileInfoList = formDir<em>.entryInfoList();<br>23        foreach(QFileInfo fileInfo, fileInfoList)<br>24        {<br>25            if(fileInfo.fileName() == “.” || fileInfo.fileName() == “..”)<br>26                continue;<br>27<br>28            //拷贝子目录<br>29            if(fileInfo.isDir())<br>30            {<br>31                //递归调用拷贝<br>32                if(!qCopyDirectory(fileInfo.filePath(), toDir</em>.filePath(fileInfo.fileName())))<br>33                    return false;<br>34            }<br>35            //拷贝子文件<br>36            else<br>37            {<br>38                if(bCoverIfFileExists &amp;&amp; toDir<em>.exists(fileInfo.fileName()))<br>39                {<br>40                    toDir</em>.remove(fileInfo.fileName());<br>41                }<br>42                if(!QFile::copy(fileInfo.filePath(), toDir_.filePath(fileInfo.fileName())))<br>43                {<br>44                    return false;<br>45                }<br>46            }<br>47        }<br>48        return true;<br>49    }</qfileinfolist></qdir></p>\n"},{"title":"50点提高PHP编程效率 引入缓存提升性能","id":"306","date":"2011-09-25T01:34:29.000Z","_content":"\n0、用单引号代替双引号来包含字符串，这样做会更快一些。因为PHP会在双引号包围的字符串中搜寻变量，单引号则不会，注意：只有echo能这么做，它是一种可以把多个字符串当作参数的“函数”(译注：PHP手册中说echo是语言结构，不是真正的函数，故把函数加上了双引号)。\n\n1、如果能将类的方法定义成static，就尽量定义成static，它的速度会提升将近4倍。\n\n2、$row[’id’] 的速度是$row[id]的7倍。\n\n3、echo 比 print 快，并且使用echo的多重参数(译注：指用逗号而不是句点)代替字符串连接，比如echo $str1,$str2。\n\n4、在执行for循环之前确定最大循环数，不要每循环一次都计算最大值，最好运用foreach代替。\n\n5、注销那些不用的变量尤其是大数组，以便释放内存。\n\n6、尽量避免使用__get，__set，__autoload。\n\n7、require_once()代价昂贵。\n<!--more-->\n8、include文件时尽量使用绝对路径，因为它避免了PHP去include_path里查找文件的速度，解析操作系统路径所需的时间会更少。\n\n9、如果你想知道脚本开始执行(译注：即服务器端收到客户端请求)的时刻，使用\n$_SERVER['REQUEST_TIME']\n\n要好于\ntime()\n\n10、函数代替正则表达式完成相同功能。\n\n11、str_replace函数比preg_replace函数快，但strtr函数的效率是str_replace函数的四倍。\n\n12、如果一个字符串替换函数，可接受数组或字符作为参数，并且参数长度不太长，那么可以考虑额外写一段替换代码，使得每次传递参数是一个字符，而不是只写一行代码接受数组作为查询和替换的参数。\n\n13、使用选择分支语句(译注：即switch case)好于使用多个if，else if语句。\n\n14、用@屏蔽错误消息的做法非常低效，极其低效。\n\n15、打开apache的mod_deflate模块，可以提高网页的浏览速度。\n\n16、数据库连接当使用完毕时应关掉，不要用长连接。\n\n17、错误消息代价昂贵。\n\n18、在方法中递增局部变量，速度是最快的。几乎与在函数中调用局部变量的速度相当。\n\n19、递增一个全局变量要比递增一个局部变量慢2倍。\n\n20、递增一个对象属性(如：$this-&gt;prop++)要比递增一个局部变量慢3倍。\n\n21、递增一个未预定义的局部变量要比递增一个预定义的局部变量慢9至10倍。\n\n22、仅定义一个局部变量而没在函数中调用它，同样会减慢速度(其程度相当于递增一个局部变量)。PHP大概会检查看是否存在全局变量。\n\n23、方法调用看来与类中定义的方法的数量无关，因为我(在测试方法之前和之后都)添加了10个方法，但性能上没有变化。\n\n24、派生类中的方法运行起来要快于在基类中定义的同样的方法。\n\n25、调用带有一个参数的空函数，其花费的时间相当于执行7至8次的局部变量递增操作。类似的方法调用所花费的时间接近于15次的局部变量递增操作。\n\n26、Apache解析一个PHP脚本的时间要比解析一个静态HTML页面慢2至10倍。尽量多用静态HTML页面，少用脚本。\n\n27、除非脚本可以缓存，否则每次调用时都会重新编译一次。引入一套PHP缓存机制通常可以提升25%至100%的性能，以免除编译开销。\n\n28、尽量做缓存，可使用memcached。memcached是一款高性能的内存对象缓存系统，可用来加速动态Web应用程序，减轻数据库负载。对运算码 (OP code)的缓存很有用，使得脚本不必为每个请求做重新编译。\n\n29、当操作字符串并需要检验其长度是否满足某种要求时，你想当然地会使用strlen()函数。此函数执行起来相当快，因为它不做任何计算，只返回在zval 结构(C的内置数据结构，用于存储PHP变量)中存储的已知字符串长度。但是，由于strlen()是函数，多多少少会有些慢，因为函数调用会经过诸多步骤，如字母小写化(译注：指函数名小写化，PHP不区分函数名大小写)、哈希查找，会跟随被调用的函数一起执行。在某些情况下，你可以使用isset() 技巧加速执行你的代码。\n\n(举例如下)\n\nif (strlen($foo) &lt; 5) { echo “Foo is too short”$$ }\n\n(与下面的技巧做比较)\n\nif (!isset($foo{5})) { echo “Foo is too short”$$ }\n\n调用isset()恰巧比strlen()快，因为与后者不同的是，isset()作为一种语言结构，意味着它的执行不需要函数查找和字母小写化。也就是说，实际上在检验字符串长度的顶层代码中你没有花太多开销。\n\n30、当执行变量$i的递增或递减时，$i++会比++$i慢一些。这种差异是PHP特有的，并不适用于其他语言，所以请不要修改你的C或Java代码并指望它们能立即变快，没用的。++$i更快是因为它只需要3条指令(opcodes)，$i++则需要4条指令。后置递增实际上会产生一个临时变量，这个临时变量随后被递增。而前置递增直接在原值上递增。这是最优化处理的一种，正如Zend的PHP优化器所作的那样。牢记这个优化处理不失为一个好主意，因为并不是所有的指令优化器都会做同样的优化处理，并且存在大量没有装配指令优化器的互联网服务提供商(ISPs)和服务器。\n\n31、并不是事必面向对象(OOP)，面向对象往往开销很大，每个方法和对象调用都会消耗很多内存。\n\n32、并非要用类实现所有的数据结构，数组也很有用。\n\n33、不要把方法细分得过多，仔细想想你真正打算重用的是哪些代码?\n\n34、当你需要时，你总能把代码分解成方法。\n\n35、尽量采用大量的PHP内置函数。\n\n36、如果在代码中存在大量耗时的函数，你可以考虑用C扩展的方式实现它们。\n\n37、评估检验(profile)你的代码。检验器会告诉你，代码的哪些部分消耗了多少时间。Xdebug调试器包含了检验程序，评估检验总体上可以显示出代码的瓶颈。\n\n38、mod_zip可作为Apache模块，用来即时压缩你的数据，并可让数据传输量降低80%。\n\n39、在可以用file_get_contents替代file、fopen、feof、fgets等系列方法的情况下，尽量用file_get_contents，因为他的效率高得多!但是要注意file_get_contents在打开一个URL文件时候的PHP版本问题;\n\n40、尽量的少进行文件操作，虽然PHP的文件操作效率也不低的;\n\n41、优化Select SQL语句，在可能的情况下尽量少的进行Insert、Update操作(在update上，我被恶批过);\n\n42、尽可能的使用PHP内部函数(但是我却为了找个PHP里面不存在的函数，浪费了本可以写出一个自定义函数的时间，经验问题啊!);\n\n43、循环内部不要声明变量，尤其是大变量：对象(这好像不只是PHP里面要注意的问题吧?);\n\n44、多维数组尽量不要循环嵌套赋值;\n\n45、在可以用PHP内部字符串操作函数的情况下，不要用正则表达式;\n\n46、foreach效率更高，尽量用foreach代替while和for循环;\n\n47、用单引号替代双引号引用字符串;\n\n48、“用i+=1代替i=i+1。符合c/c++的习惯，效率还高”;\n\n49、对global变量，应该用完就unset()掉;","source":"_posts/50-e7-82-b9-e6-8f-90-e9-ab-98php-e7-bc-96-e7-a8-8b-e6-95-88-e7-8e-87-e5-bc-95-e5-85-a5-e7-bc-93-e5-ad-98-e6-8f-90-e5-8d-87-e6-80-a7-e8-83-bd.md","raw":"---\ntitle: 50点提高PHP编程效率 引入缓存提升性能\nid: 306\ncategories:\n  - PHP\ndate: 2011-09-25 09:34:29\ntags:\n---\n\n0、用单引号代替双引号来包含字符串，这样做会更快一些。因为PHP会在双引号包围的字符串中搜寻变量，单引号则不会，注意：只有echo能这么做，它是一种可以把多个字符串当作参数的“函数”(译注：PHP手册中说echo是语言结构，不是真正的函数，故把函数加上了双引号)。\n\n1、如果能将类的方法定义成static，就尽量定义成static，它的速度会提升将近4倍。\n\n2、$row[’id’] 的速度是$row[id]的7倍。\n\n3、echo 比 print 快，并且使用echo的多重参数(译注：指用逗号而不是句点)代替字符串连接，比如echo $str1,$str2。\n\n4、在执行for循环之前确定最大循环数，不要每循环一次都计算最大值，最好运用foreach代替。\n\n5、注销那些不用的变量尤其是大数组，以便释放内存。\n\n6、尽量避免使用__get，__set，__autoload。\n\n7、require_once()代价昂贵。\n<!--more-->\n8、include文件时尽量使用绝对路径，因为它避免了PHP去include_path里查找文件的速度，解析操作系统路径所需的时间会更少。\n\n9、如果你想知道脚本开始执行(译注：即服务器端收到客户端请求)的时刻，使用\n$_SERVER['REQUEST_TIME']\n\n要好于\ntime()\n\n10、函数代替正则表达式完成相同功能。\n\n11、str_replace函数比preg_replace函数快，但strtr函数的效率是str_replace函数的四倍。\n\n12、如果一个字符串替换函数，可接受数组或字符作为参数，并且参数长度不太长，那么可以考虑额外写一段替换代码，使得每次传递参数是一个字符，而不是只写一行代码接受数组作为查询和替换的参数。\n\n13、使用选择分支语句(译注：即switch case)好于使用多个if，else if语句。\n\n14、用@屏蔽错误消息的做法非常低效，极其低效。\n\n15、打开apache的mod_deflate模块，可以提高网页的浏览速度。\n\n16、数据库连接当使用完毕时应关掉，不要用长连接。\n\n17、错误消息代价昂贵。\n\n18、在方法中递增局部变量，速度是最快的。几乎与在函数中调用局部变量的速度相当。\n\n19、递增一个全局变量要比递增一个局部变量慢2倍。\n\n20、递增一个对象属性(如：$this-&gt;prop++)要比递增一个局部变量慢3倍。\n\n21、递增一个未预定义的局部变量要比递增一个预定义的局部变量慢9至10倍。\n\n22、仅定义一个局部变量而没在函数中调用它，同样会减慢速度(其程度相当于递增一个局部变量)。PHP大概会检查看是否存在全局变量。\n\n23、方法调用看来与类中定义的方法的数量无关，因为我(在测试方法之前和之后都)添加了10个方法，但性能上没有变化。\n\n24、派生类中的方法运行起来要快于在基类中定义的同样的方法。\n\n25、调用带有一个参数的空函数，其花费的时间相当于执行7至8次的局部变量递增操作。类似的方法调用所花费的时间接近于15次的局部变量递增操作。\n\n26、Apache解析一个PHP脚本的时间要比解析一个静态HTML页面慢2至10倍。尽量多用静态HTML页面，少用脚本。\n\n27、除非脚本可以缓存，否则每次调用时都会重新编译一次。引入一套PHP缓存机制通常可以提升25%至100%的性能，以免除编译开销。\n\n28、尽量做缓存，可使用memcached。memcached是一款高性能的内存对象缓存系统，可用来加速动态Web应用程序，减轻数据库负载。对运算码 (OP code)的缓存很有用，使得脚本不必为每个请求做重新编译。\n\n29、当操作字符串并需要检验其长度是否满足某种要求时，你想当然地会使用strlen()函数。此函数执行起来相当快，因为它不做任何计算，只返回在zval 结构(C的内置数据结构，用于存储PHP变量)中存储的已知字符串长度。但是，由于strlen()是函数，多多少少会有些慢，因为函数调用会经过诸多步骤，如字母小写化(译注：指函数名小写化，PHP不区分函数名大小写)、哈希查找，会跟随被调用的函数一起执行。在某些情况下，你可以使用isset() 技巧加速执行你的代码。\n\n(举例如下)\n\nif (strlen($foo) &lt; 5) { echo “Foo is too short”$$ }\n\n(与下面的技巧做比较)\n\nif (!isset($foo{5})) { echo “Foo is too short”$$ }\n\n调用isset()恰巧比strlen()快，因为与后者不同的是，isset()作为一种语言结构，意味着它的执行不需要函数查找和字母小写化。也就是说，实际上在检验字符串长度的顶层代码中你没有花太多开销。\n\n30、当执行变量$i的递增或递减时，$i++会比++$i慢一些。这种差异是PHP特有的，并不适用于其他语言，所以请不要修改你的C或Java代码并指望它们能立即变快，没用的。++$i更快是因为它只需要3条指令(opcodes)，$i++则需要4条指令。后置递增实际上会产生一个临时变量，这个临时变量随后被递增。而前置递增直接在原值上递增。这是最优化处理的一种，正如Zend的PHP优化器所作的那样。牢记这个优化处理不失为一个好主意，因为并不是所有的指令优化器都会做同样的优化处理，并且存在大量没有装配指令优化器的互联网服务提供商(ISPs)和服务器。\n\n31、并不是事必面向对象(OOP)，面向对象往往开销很大，每个方法和对象调用都会消耗很多内存。\n\n32、并非要用类实现所有的数据结构，数组也很有用。\n\n33、不要把方法细分得过多，仔细想想你真正打算重用的是哪些代码?\n\n34、当你需要时，你总能把代码分解成方法。\n\n35、尽量采用大量的PHP内置函数。\n\n36、如果在代码中存在大量耗时的函数，你可以考虑用C扩展的方式实现它们。\n\n37、评估检验(profile)你的代码。检验器会告诉你，代码的哪些部分消耗了多少时间。Xdebug调试器包含了检验程序，评估检验总体上可以显示出代码的瓶颈。\n\n38、mod_zip可作为Apache模块，用来即时压缩你的数据，并可让数据传输量降低80%。\n\n39、在可以用file_get_contents替代file、fopen、feof、fgets等系列方法的情况下，尽量用file_get_contents，因为他的效率高得多!但是要注意file_get_contents在打开一个URL文件时候的PHP版本问题;\n\n40、尽量的少进行文件操作，虽然PHP的文件操作效率也不低的;\n\n41、优化Select SQL语句，在可能的情况下尽量少的进行Insert、Update操作(在update上，我被恶批过);\n\n42、尽可能的使用PHP内部函数(但是我却为了找个PHP里面不存在的函数，浪费了本可以写出一个自定义函数的时间，经验问题啊!);\n\n43、循环内部不要声明变量，尤其是大变量：对象(这好像不只是PHP里面要注意的问题吧?);\n\n44、多维数组尽量不要循环嵌套赋值;\n\n45、在可以用PHP内部字符串操作函数的情况下，不要用正则表达式;\n\n46、foreach效率更高，尽量用foreach代替while和for循环;\n\n47、用单引号替代双引号引用字符串;\n\n48、“用i+=1代替i=i+1。符合c/c++的习惯，效率还高”;\n\n49、对global变量，应该用完就unset()掉;","slug":"50-e7-82-b9-e6-8f-90-e9-ab-98php-e7-bc-96-e7-a8-8b-e6-95-88-e7-8e-87-e5-bc-95-e5-85-a5-e7-bc-93-e5-ad-98-e6-8f-90-e5-8d-87-e6-80-a7-e8-83-bd","published":1,"updated":"2018-01-13T05:07:00.453Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjccw7x6z0003aqcrtqdwgqoc","content":"<p>0、用单引号代替双引号来包含字符串，这样做会更快一些。因为PHP会在双引号包围的字符串中搜寻变量，单引号则不会，注意：只有echo能这么做，它是一种可以把多个字符串当作参数的“函数”(译注：PHP手册中说echo是语言结构，不是真正的函数，故把函数加上了双引号)。</p>\n<p>1、如果能将类的方法定义成static，就尽量定义成static，它的速度会提升将近4倍。</p>\n<p>2、$row[’id’] 的速度是$row[id]的7倍。</p>\n<p>3、echo 比 print 快，并且使用echo的多重参数(译注：指用逗号而不是句点)代替字符串连接，比如echo $str1,$str2。</p>\n<p>4、在执行for循环之前确定最大循环数，不要每循环一次都计算最大值，最好运用foreach代替。</p>\n<p>5、注销那些不用的变量尤其是大数组，以便释放内存。</p>\n<p>6、尽量避免使用<strong>get，</strong>set，__autoload。</p>\n<p>7、require_once()代价昂贵。<br><a id=\"more\"></a><br>8、include文件时尽量使用绝对路径，因为它避免了PHP去include_path里查找文件的速度，解析操作系统路径所需的时间会更少。</p>\n<p>9、如果你想知道脚本开始执行(译注：即服务器端收到客户端请求)的时刻，使用<br>$_SERVER[‘REQUEST_TIME’]</p>\n<p>要好于<br>time()</p>\n<p>10、函数代替正则表达式完成相同功能。</p>\n<p>11、str_replace函数比preg_replace函数快，但strtr函数的效率是str_replace函数的四倍。</p>\n<p>12、如果一个字符串替换函数，可接受数组或字符作为参数，并且参数长度不太长，那么可以考虑额外写一段替换代码，使得每次传递参数是一个字符，而不是只写一行代码接受数组作为查询和替换的参数。</p>\n<p>13、使用选择分支语句(译注：即switch case)好于使用多个if，else if语句。</p>\n<p>14、用@屏蔽错误消息的做法非常低效，极其低效。</p>\n<p>15、打开apache的mod_deflate模块，可以提高网页的浏览速度。</p>\n<p>16、数据库连接当使用完毕时应关掉，不要用长连接。</p>\n<p>17、错误消息代价昂贵。</p>\n<p>18、在方法中递增局部变量，速度是最快的。几乎与在函数中调用局部变量的速度相当。</p>\n<p>19、递增一个全局变量要比递增一个局部变量慢2倍。</p>\n<p>20、递增一个对象属性(如：$this-&gt;prop++)要比递增一个局部变量慢3倍。</p>\n<p>21、递增一个未预定义的局部变量要比递增一个预定义的局部变量慢9至10倍。</p>\n<p>22、仅定义一个局部变量而没在函数中调用它，同样会减慢速度(其程度相当于递增一个局部变量)。PHP大概会检查看是否存在全局变量。</p>\n<p>23、方法调用看来与类中定义的方法的数量无关，因为我(在测试方法之前和之后都)添加了10个方法，但性能上没有变化。</p>\n<p>24、派生类中的方法运行起来要快于在基类中定义的同样的方法。</p>\n<p>25、调用带有一个参数的空函数，其花费的时间相当于执行7至8次的局部变量递增操作。类似的方法调用所花费的时间接近于15次的局部变量递增操作。</p>\n<p>26、Apache解析一个PHP脚本的时间要比解析一个静态HTML页面慢2至10倍。尽量多用静态HTML页面，少用脚本。</p>\n<p>27、除非脚本可以缓存，否则每次调用时都会重新编译一次。引入一套PHP缓存机制通常可以提升25%至100%的性能，以免除编译开销。</p>\n<p>28、尽量做缓存，可使用memcached。memcached是一款高性能的内存对象缓存系统，可用来加速动态Web应用程序，减轻数据库负载。对运算码 (OP code)的缓存很有用，使得脚本不必为每个请求做重新编译。</p>\n<p>29、当操作字符串并需要检验其长度是否满足某种要求时，你想当然地会使用strlen()函数。此函数执行起来相当快，因为它不做任何计算，只返回在zval 结构(C的内置数据结构，用于存储PHP变量)中存储的已知字符串长度。但是，由于strlen()是函数，多多少少会有些慢，因为函数调用会经过诸多步骤，如字母小写化(译注：指函数名小写化，PHP不区分函数名大小写)、哈希查找，会跟随被调用的函数一起执行。在某些情况下，你可以使用isset() 技巧加速执行你的代码。</p>\n<p>(举例如下)</p>\n<p>if (strlen($foo) &lt; 5) { echo “Foo is too short”$$ }</p>\n<p>(与下面的技巧做比较)</p>\n<p>if (!isset($foo{5})) { echo “Foo is too short”$$ }</p>\n<p>调用isset()恰巧比strlen()快，因为与后者不同的是，isset()作为一种语言结构，意味着它的执行不需要函数查找和字母小写化。也就是说，实际上在检验字符串长度的顶层代码中你没有花太多开销。</p>\n<p>30、当执行变量$i的递增或递减时，$i++会比++$i慢一些。这种差异是PHP特有的，并不适用于其他语言，所以请不要修改你的C或Java代码并指望它们能立即变快，没用的。++$i更快是因为它只需要3条指令(opcodes)，$i++则需要4条指令。后置递增实际上会产生一个临时变量，这个临时变量随后被递增。而前置递增直接在原值上递增。这是最优化处理的一种，正如Zend的PHP优化器所作的那样。牢记这个优化处理不失为一个好主意，因为并不是所有的指令优化器都会做同样的优化处理，并且存在大量没有装配指令优化器的互联网服务提供商(ISPs)和服务器。</p>\n<p>31、并不是事必面向对象(OOP)，面向对象往往开销很大，每个方法和对象调用都会消耗很多内存。</p>\n<p>32、并非要用类实现所有的数据结构，数组也很有用。</p>\n<p>33、不要把方法细分得过多，仔细想想你真正打算重用的是哪些代码?</p>\n<p>34、当你需要时，你总能把代码分解成方法。</p>\n<p>35、尽量采用大量的PHP内置函数。</p>\n<p>36、如果在代码中存在大量耗时的函数，你可以考虑用C扩展的方式实现它们。</p>\n<p>37、评估检验(profile)你的代码。检验器会告诉你，代码的哪些部分消耗了多少时间。Xdebug调试器包含了检验程序，评估检验总体上可以显示出代码的瓶颈。</p>\n<p>38、mod_zip可作为Apache模块，用来即时压缩你的数据，并可让数据传输量降低80%。</p>\n<p>39、在可以用file_get_contents替代file、fopen、feof、fgets等系列方法的情况下，尽量用file_get_contents，因为他的效率高得多!但是要注意file_get_contents在打开一个URL文件时候的PHP版本问题;</p>\n<p>40、尽量的少进行文件操作，虽然PHP的文件操作效率也不低的;</p>\n<p>41、优化Select SQL语句，在可能的情况下尽量少的进行Insert、Update操作(在update上，我被恶批过);</p>\n<p>42、尽可能的使用PHP内部函数(但是我却为了找个PHP里面不存在的函数，浪费了本可以写出一个自定义函数的时间，经验问题啊!);</p>\n<p>43、循环内部不要声明变量，尤其是大变量：对象(这好像不只是PHP里面要注意的问题吧?);</p>\n<p>44、多维数组尽量不要循环嵌套赋值;</p>\n<p>45、在可以用PHP内部字符串操作函数的情况下，不要用正则表达式;</p>\n<p>46、foreach效率更高，尽量用foreach代替while和for循环;</p>\n<p>47、用单引号替代双引号引用字符串;</p>\n<p>48、“用i+=1代替i=i+1。符合c/c++的习惯，效率还高”;</p>\n<p>49、对global变量，应该用完就unset()掉;</p>\n","site":{"data":{}},"excerpt":"<p>0、用单引号代替双引号来包含字符串，这样做会更快一些。因为PHP会在双引号包围的字符串中搜寻变量，单引号则不会，注意：只有echo能这么做，它是一种可以把多个字符串当作参数的“函数”(译注：PHP手册中说echo是语言结构，不是真正的函数，故把函数加上了双引号)。</p>\n<p>1、如果能将类的方法定义成static，就尽量定义成static，它的速度会提升将近4倍。</p>\n<p>2、$row[’id’] 的速度是$row[id]的7倍。</p>\n<p>3、echo 比 print 快，并且使用echo的多重参数(译注：指用逗号而不是句点)代替字符串连接，比如echo $str1,$str2。</p>\n<p>4、在执行for循环之前确定最大循环数，不要每循环一次都计算最大值，最好运用foreach代替。</p>\n<p>5、注销那些不用的变量尤其是大数组，以便释放内存。</p>\n<p>6、尽量避免使用<strong>get，</strong>set，__autoload。</p>\n<p>7、require_once()代价昂贵。<br>","more":"<br>8、include文件时尽量使用绝对路径，因为它避免了PHP去include_path里查找文件的速度，解析操作系统路径所需的时间会更少。</p>\n<p>9、如果你想知道脚本开始执行(译注：即服务器端收到客户端请求)的时刻，使用<br>$_SERVER[‘REQUEST_TIME’]</p>\n<p>要好于<br>time()</p>\n<p>10、函数代替正则表达式完成相同功能。</p>\n<p>11、str_replace函数比preg_replace函数快，但strtr函数的效率是str_replace函数的四倍。</p>\n<p>12、如果一个字符串替换函数，可接受数组或字符作为参数，并且参数长度不太长，那么可以考虑额外写一段替换代码，使得每次传递参数是一个字符，而不是只写一行代码接受数组作为查询和替换的参数。</p>\n<p>13、使用选择分支语句(译注：即switch case)好于使用多个if，else if语句。</p>\n<p>14、用@屏蔽错误消息的做法非常低效，极其低效。</p>\n<p>15、打开apache的mod_deflate模块，可以提高网页的浏览速度。</p>\n<p>16、数据库连接当使用完毕时应关掉，不要用长连接。</p>\n<p>17、错误消息代价昂贵。</p>\n<p>18、在方法中递增局部变量，速度是最快的。几乎与在函数中调用局部变量的速度相当。</p>\n<p>19、递增一个全局变量要比递增一个局部变量慢2倍。</p>\n<p>20、递增一个对象属性(如：$this-&gt;prop++)要比递增一个局部变量慢3倍。</p>\n<p>21、递增一个未预定义的局部变量要比递增一个预定义的局部变量慢9至10倍。</p>\n<p>22、仅定义一个局部变量而没在函数中调用它，同样会减慢速度(其程度相当于递增一个局部变量)。PHP大概会检查看是否存在全局变量。</p>\n<p>23、方法调用看来与类中定义的方法的数量无关，因为我(在测试方法之前和之后都)添加了10个方法，但性能上没有变化。</p>\n<p>24、派生类中的方法运行起来要快于在基类中定义的同样的方法。</p>\n<p>25、调用带有一个参数的空函数，其花费的时间相当于执行7至8次的局部变量递增操作。类似的方法调用所花费的时间接近于15次的局部变量递增操作。</p>\n<p>26、Apache解析一个PHP脚本的时间要比解析一个静态HTML页面慢2至10倍。尽量多用静态HTML页面，少用脚本。</p>\n<p>27、除非脚本可以缓存，否则每次调用时都会重新编译一次。引入一套PHP缓存机制通常可以提升25%至100%的性能，以免除编译开销。</p>\n<p>28、尽量做缓存，可使用memcached。memcached是一款高性能的内存对象缓存系统，可用来加速动态Web应用程序，减轻数据库负载。对运算码 (OP code)的缓存很有用，使得脚本不必为每个请求做重新编译。</p>\n<p>29、当操作字符串并需要检验其长度是否满足某种要求时，你想当然地会使用strlen()函数。此函数执行起来相当快，因为它不做任何计算，只返回在zval 结构(C的内置数据结构，用于存储PHP变量)中存储的已知字符串长度。但是，由于strlen()是函数，多多少少会有些慢，因为函数调用会经过诸多步骤，如字母小写化(译注：指函数名小写化，PHP不区分函数名大小写)、哈希查找，会跟随被调用的函数一起执行。在某些情况下，你可以使用isset() 技巧加速执行你的代码。</p>\n<p>(举例如下)</p>\n<p>if (strlen($foo) &lt; 5) { echo “Foo is too short”$$ }</p>\n<p>(与下面的技巧做比较)</p>\n<p>if (!isset($foo{5})) { echo “Foo is too short”$$ }</p>\n<p>调用isset()恰巧比strlen()快，因为与后者不同的是，isset()作为一种语言结构，意味着它的执行不需要函数查找和字母小写化。也就是说，实际上在检验字符串长度的顶层代码中你没有花太多开销。</p>\n<p>30、当执行变量$i的递增或递减时，$i++会比++$i慢一些。这种差异是PHP特有的，并不适用于其他语言，所以请不要修改你的C或Java代码并指望它们能立即变快，没用的。++$i更快是因为它只需要3条指令(opcodes)，$i++则需要4条指令。后置递增实际上会产生一个临时变量，这个临时变量随后被递增。而前置递增直接在原值上递增。这是最优化处理的一种，正如Zend的PHP优化器所作的那样。牢记这个优化处理不失为一个好主意，因为并不是所有的指令优化器都会做同样的优化处理，并且存在大量没有装配指令优化器的互联网服务提供商(ISPs)和服务器。</p>\n<p>31、并不是事必面向对象(OOP)，面向对象往往开销很大，每个方法和对象调用都会消耗很多内存。</p>\n<p>32、并非要用类实现所有的数据结构，数组也很有用。</p>\n<p>33、不要把方法细分得过多，仔细想想你真正打算重用的是哪些代码?</p>\n<p>34、当你需要时，你总能把代码分解成方法。</p>\n<p>35、尽量采用大量的PHP内置函数。</p>\n<p>36、如果在代码中存在大量耗时的函数，你可以考虑用C扩展的方式实现它们。</p>\n<p>37、评估检验(profile)你的代码。检验器会告诉你，代码的哪些部分消耗了多少时间。Xdebug调试器包含了检验程序，评估检验总体上可以显示出代码的瓶颈。</p>\n<p>38、mod_zip可作为Apache模块，用来即时压缩你的数据，并可让数据传输量降低80%。</p>\n<p>39、在可以用file_get_contents替代file、fopen、feof、fgets等系列方法的情况下，尽量用file_get_contents，因为他的效率高得多!但是要注意file_get_contents在打开一个URL文件时候的PHP版本问题;</p>\n<p>40、尽量的少进行文件操作，虽然PHP的文件操作效率也不低的;</p>\n<p>41、优化Select SQL语句，在可能的情况下尽量少的进行Insert、Update操作(在update上，我被恶批过);</p>\n<p>42、尽可能的使用PHP内部函数(但是我却为了找个PHP里面不存在的函数，浪费了本可以写出一个自定义函数的时间，经验问题啊!);</p>\n<p>43、循环内部不要声明变量，尤其是大变量：对象(这好像不只是PHP里面要注意的问题吧?);</p>\n<p>44、多维数组尽量不要循环嵌套赋值;</p>\n<p>45、在可以用PHP内部字符串操作函数的情况下，不要用正则表达式;</p>\n<p>46、foreach效率更高，尽量用foreach代替while和for循环;</p>\n<p>47、用单引号替代双引号引用字符串;</p>\n<p>48、“用i+=1代替i=i+1。符合c/c++的习惯，效率还高”;</p>\n<p>49、对global变量，应该用完就unset()掉;</p>"},{"title":"11个实用的Apache .htaccess配置","id":"1220","date":"2014-03-15T04:00:12.000Z","_content":"\n> 用阿里测时发现网站设置静态内容缓存时间有问题，搜了一下看.htaccess可以配置，顺便整理一下其它功能。\n1\\. 强制后缀反斜杠\n在URL的尾部加上反斜杠似乎对SEO有利 ：）\n&lt;IfModule mod_rewrite.c&gt;\nRewriteCond %{REQUEST_URI} /+[^\\.]+$\nRewriteRule ^(.+[^/])$ %{REQUEST_URI}/ [R=301,L]\n&lt;/IfModule&gt;\n2\\. 防盗链\n节省你宝贵的带宽吧！\nRewriteEngine On\n#Replace ?mysite\\.com/ with your blog url\nRewriteCond %{HTTP_REFERER} !^http://(.+\\.)?mysite\\.com/ [NC]\nRewriteCond %{HTTP_REFERER} !^$\n#Replace /images/nohotlink.jpg with your \"don't hotlink\" image url\nRewriteRule .*\\.(jpe?g|gif|bmp|png)$ /images/nohotlink.jpg [L]\n3\\. 重定向移动设备<!--more-->\n加入你的网站支持移动设备访问的话，最好还是重定向移动设备的访问到专门定制的页面\n\nRewriteEngine On\nRewriteCond %{REQUEST_URI} !^/m/.*$\nRewriteCond %{HTTP_ACCEPT} \"text/vnd.wap.wml|application/vnd.wap.xhtml+xml\" [NC,OR]\nRewriteCond %{HTTP_USER_AGENT} \"acs|alav|alca|amoi|audi|aste|avan|benq|bird|blac|blaz|brew|cell|cldc|cmd-\" [NC,OR]\nRewriteCond %{HTTP_USER_AGENT} \"dang|doco|eric|hipt|inno|ipaq|java|jigs|kddi|keji|leno|lg-c|lg-d|lg-g|lge-\" [NC,OR]\nRewriteCond %{HTTP_USER_AGENT} \"maui|maxo|midp|mits|mmef|mobi|mot-|moto|mwbp|nec-|newt|noki|opwv\" [NC,OR]\nRewriteCond %{HTTP_USER_AGENT} \"palm|pana|pant|pdxg|phil|play|pluc|port|prox|qtek|qwap|sage|sams|sany\" [NC,OR]\nRewriteCond %{HTTP_USER_AGENT} \"sch-|sec-|send|seri|sgh-|shar|sie-|siem|smal|smar|sony|sph-|symb|t-mo\" [NC,OR]\nRewriteCond %{HTTP_USER_AGENT} \"teli|tim-|tosh|tsm-|upg1|upsi|vk-v|voda|w3cs|wap-|wapa|wapi\" [NC,OR]\nRewriteCond %{HTTP_USER_AGENT} \"wapp|wapr|webc|winw|winw|xda|xda-\" [NC,OR]\nRewriteCond %{HTTP_USER_AGENT} \"up.browser|up.link|windowssce|iemobile|mini|mmp\" [NC,OR]\nRewriteCond %{HTTP_USER_AGENT} \"symbian|midp|wap|phone|pocket|mobile|pda|psp\" [NC]\n#------------- The line below excludes the iPad\nRewriteCond %{HTTP_USER_AGENT} !^.*iPad.*$\n#-------------\nRewriteCond %{HTTP_USER_AGENT} !macintosh [NC] #*SEE NOTE BELOW\nRewriteRule ^(.*)$ /m/ [L,R=302]\n4\\. 强制浏览器下载指定的文件类型\n你可以强制浏览器下载某些类型的文件，而不是读取并打开这些文件，例如MP3、XLS。\n&lt;Files *.xls&gt;\nForceType application/octet-stream\nHeader set Content-Disposition attachment\n&lt;/Files&gt;\n&lt;Files *.eps&gt;\nForceType application/octet-stream\nHeader set Content-Disposition attachment\n&lt;/Files&gt;\n5\\. 火狐的跨域名字体嵌入\n火狐不允许嵌入一个外站的字体，下面的.htaccess片段可以绕过这个限制\n&lt;FilesMatch \"\\.(ttf|otf|eot|woff)$\"&gt;\n&lt;IfModule mod_headers.c&gt;\nHeader set Access-Control-Allow-Origin \"http://yourdomain.com\"\n&lt;/IfModule&gt;\n&lt;/FilesMatch&gt;\n6\\. 使用.htaccess缓存 给网站提速\n恐怕这个是最有用的代码片段了。这段代码能帮你极大的提高网站的速度！\n# 1 YEAR\n&lt;FilesMatch \"\\.(ico|pdf|flv)$\"&gt;\nHeader set Cache-Control \"max-age=29030400, public\"\n&lt;/FilesMatch&gt;\n# 1 WEEK\n&lt;FilesMatch \"\\.(jpg|jpeg|png|gif|swf)$\"&gt;\nHeader set Cache-Control \"max-age=604800, public\"\n&lt;/FilesMatch&gt;\n# 2 DAYS\n&lt;FilesMatch \"\\.(xml|txt|css|js)$\"&gt;\nHeader set Cache-Control \"max-age=172800, proxy-revalidate\"\n&lt;/FilesMatch&gt;\n# 1 MIN\n&lt;FilesMatch \"\\.(html|htm|php)$\"&gt;\nHeader set Cache-Control \"max-age=60, private, proxy-revalidate\"\n&lt;/FilesMatch&gt;\n7\\. 阻止WordPress博客的垃圾评论\n还在为垃圾评论头疼吗？你可以用Akismet插件来解决这个问题，但是.htaccess文件来的更直接：阻止垃圾评论机器人访问wp-comments-post.php文件。\n&lt;IfModule mod_rewrite.c&gt;\nRewriteEngine On\nRewriteCond %{REQUEST_METHOD} POST\nRewriteCond %{REQUEST_URI} .wp-comments-post\\.php*\nRewriteCond %{HTTP_REFERER} !.*yourdomainname.* [OR]\nRewriteCond %{HTTP_USER_AGENT} ^$\nRewriteRule (.*) ^http://%{REMOTE_ADDR}/$ [R=301,L]\n&lt;/IfModule&gt;\n8.重定向不同的feed格式到统一的格式\n很多年前，有很多不同的feed格式，例如RSS、Atom、RDF等等。但是现在RSS已经占了绝对的主导地位。下面这段代码可以让你重定向不同的feed格式到同一个feed。这段代码可以直接在WordPress博客上使用。\n&lt;IfModule mod_alias.c&gt;\nRedirectMatch 301 /feed/(atom|rdf|rss|rss2)/?$ http://example.com/feed/\nRedirectMatch 301 /comments/feed/(atom|rdf|rss|rss2)/?$ http://example.com/comments/feed/\n&lt;/IfModule&gt;\n9\\. 配置网站的HTML5视频\nHTML5为我们带来了不用Flash的视频播放功能，但是你必须配置你的服务器来提供最新的HTML5视频播放功能。\nRewriteCond %{REQUEST_FILENAME} !-f\nRewriteCond %{REQUEST_FILENAME} !-d\nRewriteCond %{REQUEST_URI} !=/favicon.ico\nAddType video/ogg .ogv\nAddType video/ogg .ogg\nAddType video/mp4 .mp4\nAddType video/webm .webm\nAddType application/x-shockwave-flash swf\n10\\. 记录PHP错误\n在页面上显示PHP错误是很尴尬的事情，也不安全，下面这段代码可以把PHP错误记录到.log文件中而不在页面显示。\n# display no errs to user\nphp_flag display_startup_errors off\nphp_flag display_errors off\nphp_flag html_errors off\n# log to file\nphp_flag log_errors on\nphp_value error_log /location/to/php_error.log\n11\\. 在JavaScript代码中运行PHP\n在JS中插入PHP代码有时候是很有用的，例如读取数据库。下面这段代码可以让你在JS中运行PHP。\nAddType application/x-httpd-php .js\nAddHandler x-httpd-php5 .js\n&lt;FilesMatch \"\\.(js|php)$\"&gt;\nSetHandler application/x-httpd-php\n&lt;/FilesMatch&gt;\n\nfrom:http://www.open-open.com/bbs/view/1319588511749","source":"_posts/11-e4-b8-aa-e5-ae-9e-e7-94-a8-e7-9a-84apache-htaccess-e9-85-8d-e7-bd-ae.md","raw":"---\ntitle: 11个实用的Apache .htaccess配置\nid: 1220\ncategories:\n  - Linux\ndate: 2014-03-15 12:00:12\ntags:\n---\n\n> 用阿里测时发现网站设置静态内容缓存时间有问题，搜了一下看.htaccess可以配置，顺便整理一下其它功能。\n1\\. 强制后缀反斜杠\n在URL的尾部加上反斜杠似乎对SEO有利 ：）\n&lt;IfModule mod_rewrite.c&gt;\nRewriteCond %{REQUEST_URI} /+[^\\.]+$\nRewriteRule ^(.+[^/])$ %{REQUEST_URI}/ [R=301,L]\n&lt;/IfModule&gt;\n2\\. 防盗链\n节省你宝贵的带宽吧！\nRewriteEngine On\n#Replace ?mysite\\.com/ with your blog url\nRewriteCond %{HTTP_REFERER} !^http://(.+\\.)?mysite\\.com/ [NC]\nRewriteCond %{HTTP_REFERER} !^$\n#Replace /images/nohotlink.jpg with your \"don't hotlink\" image url\nRewriteRule .*\\.(jpe?g|gif|bmp|png)$ /images/nohotlink.jpg [L]\n3\\. 重定向移动设备<!--more-->\n加入你的网站支持移动设备访问的话，最好还是重定向移动设备的访问到专门定制的页面\n\nRewriteEngine On\nRewriteCond %{REQUEST_URI} !^/m/.*$\nRewriteCond %{HTTP_ACCEPT} \"text/vnd.wap.wml|application/vnd.wap.xhtml+xml\" [NC,OR]\nRewriteCond %{HTTP_USER_AGENT} \"acs|alav|alca|amoi|audi|aste|avan|benq|bird|blac|blaz|brew|cell|cldc|cmd-\" [NC,OR]\nRewriteCond %{HTTP_USER_AGENT} \"dang|doco|eric|hipt|inno|ipaq|java|jigs|kddi|keji|leno|lg-c|lg-d|lg-g|lge-\" [NC,OR]\nRewriteCond %{HTTP_USER_AGENT} \"maui|maxo|midp|mits|mmef|mobi|mot-|moto|mwbp|nec-|newt|noki|opwv\" [NC,OR]\nRewriteCond %{HTTP_USER_AGENT} \"palm|pana|pant|pdxg|phil|play|pluc|port|prox|qtek|qwap|sage|sams|sany\" [NC,OR]\nRewriteCond %{HTTP_USER_AGENT} \"sch-|sec-|send|seri|sgh-|shar|sie-|siem|smal|smar|sony|sph-|symb|t-mo\" [NC,OR]\nRewriteCond %{HTTP_USER_AGENT} \"teli|tim-|tosh|tsm-|upg1|upsi|vk-v|voda|w3cs|wap-|wapa|wapi\" [NC,OR]\nRewriteCond %{HTTP_USER_AGENT} \"wapp|wapr|webc|winw|winw|xda|xda-\" [NC,OR]\nRewriteCond %{HTTP_USER_AGENT} \"up.browser|up.link|windowssce|iemobile|mini|mmp\" [NC,OR]\nRewriteCond %{HTTP_USER_AGENT} \"symbian|midp|wap|phone|pocket|mobile|pda|psp\" [NC]\n#------------- The line below excludes the iPad\nRewriteCond %{HTTP_USER_AGENT} !^.*iPad.*$\n#-------------\nRewriteCond %{HTTP_USER_AGENT} !macintosh [NC] #*SEE NOTE BELOW\nRewriteRule ^(.*)$ /m/ [L,R=302]\n4\\. 强制浏览器下载指定的文件类型\n你可以强制浏览器下载某些类型的文件，而不是读取并打开这些文件，例如MP3、XLS。\n&lt;Files *.xls&gt;\nForceType application/octet-stream\nHeader set Content-Disposition attachment\n&lt;/Files&gt;\n&lt;Files *.eps&gt;\nForceType application/octet-stream\nHeader set Content-Disposition attachment\n&lt;/Files&gt;\n5\\. 火狐的跨域名字体嵌入\n火狐不允许嵌入一个外站的字体，下面的.htaccess片段可以绕过这个限制\n&lt;FilesMatch \"\\.(ttf|otf|eot|woff)$\"&gt;\n&lt;IfModule mod_headers.c&gt;\nHeader set Access-Control-Allow-Origin \"http://yourdomain.com\"\n&lt;/IfModule&gt;\n&lt;/FilesMatch&gt;\n6\\. 使用.htaccess缓存 给网站提速\n恐怕这个是最有用的代码片段了。这段代码能帮你极大的提高网站的速度！\n# 1 YEAR\n&lt;FilesMatch \"\\.(ico|pdf|flv)$\"&gt;\nHeader set Cache-Control \"max-age=29030400, public\"\n&lt;/FilesMatch&gt;\n# 1 WEEK\n&lt;FilesMatch \"\\.(jpg|jpeg|png|gif|swf)$\"&gt;\nHeader set Cache-Control \"max-age=604800, public\"\n&lt;/FilesMatch&gt;\n# 2 DAYS\n&lt;FilesMatch \"\\.(xml|txt|css|js)$\"&gt;\nHeader set Cache-Control \"max-age=172800, proxy-revalidate\"\n&lt;/FilesMatch&gt;\n# 1 MIN\n&lt;FilesMatch \"\\.(html|htm|php)$\"&gt;\nHeader set Cache-Control \"max-age=60, private, proxy-revalidate\"\n&lt;/FilesMatch&gt;\n7\\. 阻止WordPress博客的垃圾评论\n还在为垃圾评论头疼吗？你可以用Akismet插件来解决这个问题，但是.htaccess文件来的更直接：阻止垃圾评论机器人访问wp-comments-post.php文件。\n&lt;IfModule mod_rewrite.c&gt;\nRewriteEngine On\nRewriteCond %{REQUEST_METHOD} POST\nRewriteCond %{REQUEST_URI} .wp-comments-post\\.php*\nRewriteCond %{HTTP_REFERER} !.*yourdomainname.* [OR]\nRewriteCond %{HTTP_USER_AGENT} ^$\nRewriteRule (.*) ^http://%{REMOTE_ADDR}/$ [R=301,L]\n&lt;/IfModule&gt;\n8.重定向不同的feed格式到统一的格式\n很多年前，有很多不同的feed格式，例如RSS、Atom、RDF等等。但是现在RSS已经占了绝对的主导地位。下面这段代码可以让你重定向不同的feed格式到同一个feed。这段代码可以直接在WordPress博客上使用。\n&lt;IfModule mod_alias.c&gt;\nRedirectMatch 301 /feed/(atom|rdf|rss|rss2)/?$ http://example.com/feed/\nRedirectMatch 301 /comments/feed/(atom|rdf|rss|rss2)/?$ http://example.com/comments/feed/\n&lt;/IfModule&gt;\n9\\. 配置网站的HTML5视频\nHTML5为我们带来了不用Flash的视频播放功能，但是你必须配置你的服务器来提供最新的HTML5视频播放功能。\nRewriteCond %{REQUEST_FILENAME} !-f\nRewriteCond %{REQUEST_FILENAME} !-d\nRewriteCond %{REQUEST_URI} !=/favicon.ico\nAddType video/ogg .ogv\nAddType video/ogg .ogg\nAddType video/mp4 .mp4\nAddType video/webm .webm\nAddType application/x-shockwave-flash swf\n10\\. 记录PHP错误\n在页面上显示PHP错误是很尴尬的事情，也不安全，下面这段代码可以把PHP错误记录到.log文件中而不在页面显示。\n# display no errs to user\nphp_flag display_startup_errors off\nphp_flag display_errors off\nphp_flag html_errors off\n# log to file\nphp_flag log_errors on\nphp_value error_log /location/to/php_error.log\n11\\. 在JavaScript代码中运行PHP\n在JS中插入PHP代码有时候是很有用的，例如读取数据库。下面这段代码可以让你在JS中运行PHP。\nAddType application/x-httpd-php .js\nAddHandler x-httpd-php5 .js\n&lt;FilesMatch \"\\.(js|php)$\"&gt;\nSetHandler application/x-httpd-php\n&lt;/FilesMatch&gt;\n\nfrom:http://www.open-open.com/bbs/view/1319588511749","slug":"11-e4-b8-aa-e5-ae-9e-e7-94-a8-e7-9a-84apache-htaccess-e9-85-8d-e7-bd-ae","published":1,"updated":"2018-01-13T05:07:00.448Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjccw7x720004aqcr5023gkib","content":"<blockquote>\n<p>用阿里测时发现网站设置静态内容缓存时间有问题，搜了一下看.htaccess可以配置，顺便整理一下其它功能。<br>1. 强制后缀反斜杠<br>在URL的尾部加上反斜杠似乎对SEO有利 ：）<br>&lt;IfModule mod_rewrite.c&gt;<br>RewriteCond %{REQUEST_URI} /+[^.]+$<br>RewriteRule ^(.+[^/])$ %{REQUEST_URI}/ [R=301,L]<br>&lt;/IfModule&gt;<br>2. 防盗链<br>节省你宝贵的带宽吧！<br>RewriteEngine On</p>\n<p>#Replace ?mysite.com/ with your blog url<br>RewriteCond %{HTTP_REFERER} !^<a href=\"http://(.+\\.)?mysite\\.com/\" target=\"_blank\" rel=\"noopener\">http://(.+\\.)?mysite\\.com/</a> [NC]<br>RewriteCond %{HTTP_REFERER} !^$</p>\n<p>#Replace /images/nohotlink.jpg with your “don’t hotlink” image url<br>RewriteRule .*.(jpe?g|gif|bmp|png)$ /images/nohotlink.jpg [L]<br>3. 重定向移动设备<a id=\"more\"></a><br>加入你的网站支持移动设备访问的话，最好还是重定向移动设备的访问到专门定制的页面</p>\n</blockquote>\n<p>RewriteEngine On<br>RewriteCond %{REQUEST_URI} !^/m/.*$<br>RewriteCond %{HTTP_ACCEPT} “text/vnd.wap.wml|application/vnd.wap.xhtml+xml” [NC,OR]<br>RewriteCond %{HTTP_USER_AGENT} “acs|alav|alca|amoi|audi|aste|avan|benq|bird|blac|blaz|brew|cell|cldc|cmd-“ [NC,OR]<br>RewriteCond %{HTTP_USER_AGENT} “dang|doco|eric|hipt|inno|ipaq|java|jigs|kddi|keji|leno|lg-c|lg-d|lg-g|lge-“ [NC,OR]<br>RewriteCond %{HTTP_USER_AGENT} “maui|maxo|midp|mits|mmef|mobi|mot-|moto|mwbp|nec-|newt|noki|opwv” [NC,OR]<br>RewriteCond %{HTTP_USER_AGENT} “palm|pana|pant|pdxg|phil|play|pluc|port|prox|qtek|qwap|sage|sams|sany” [NC,OR]<br>RewriteCond %{HTTP_USER_AGENT} “sch-|sec-|send|seri|sgh-|shar|sie-|siem|smal|smar|sony|sph-|symb|t-mo” [NC,OR]<br>RewriteCond %{HTTP_USER_AGENT} “teli|tim-|tosh|tsm-|upg1|upsi|vk-v|voda|w3cs|wap-|wapa|wapi” [NC,OR]<br>RewriteCond %{HTTP_USER_AGENT} “wapp|wapr|webc|winw|winw|xda|xda-“ [NC,OR]<br>RewriteCond %{HTTP_USER_AGENT} “up.browser|up.link|windowssce|iemobile|mini|mmp” [NC,OR]<br>RewriteCond %{HTTP_USER_AGENT} “symbian|midp|wap|phone|pocket|mobile|pda|psp” [NC]</p>\n<p>#————- The line below excludes the iPad<br>RewriteCond %{HTTP_USER_AGENT} !^.<em>iPad.</em>$</p>\n<p>#————-<br>RewriteCond %{HTTP_USER_AGENT} !macintosh [NC] #<em>SEE NOTE BELOW<br>RewriteRule ^(.</em>)$ /m/ [L,R=302]<br>4. 强制浏览器下载指定的文件类型<br>你可以强制浏览器下载某些类型的文件，而不是读取并打开这些文件，例如MP3、XLS。<br>&lt;Files <em>.xls&gt;<br>ForceType application/octet-stream<br>Header set Content-Disposition attachment<br>&lt;/Files&gt;<br>&lt;Files </em>.eps&gt;<br>ForceType application/octet-stream<br>Header set Content-Disposition attachment<br>&lt;/Files&gt;<br>5. 火狐的跨域名字体嵌入<br>火狐不允许嵌入一个外站的字体，下面的.htaccess片段可以绕过这个限制<br>&lt;FilesMatch “.(ttf|otf|eot|woff)$”&gt;<br>&lt;IfModule mod_headers.c&gt;<br>Header set Access-Control-Allow-Origin “<a href=\"http://yourdomain.com\" target=\"_blank\" rel=\"noopener\">http://yourdomain.com</a>“<br>&lt;/IfModule&gt;<br>&lt;/FilesMatch&gt;<br>6. 使用.htaccess缓存 给网站提速<br>恐怕这个是最有用的代码片段了。这段代码能帮你极大的提高网站的速度！</p>\n<h1 id=\"1-YEAR\"><a href=\"#1-YEAR\" class=\"headerlink\" title=\"1 YEAR\"></a>1 YEAR</h1><p>&lt;FilesMatch “.(ico|pdf|flv)$”&gt;<br>Header set Cache-Control “max-age=29030400, public”<br>&lt;/FilesMatch&gt;</p>\n<h1 id=\"1-WEEK\"><a href=\"#1-WEEK\" class=\"headerlink\" title=\"1 WEEK\"></a>1 WEEK</h1><p>&lt;FilesMatch “.(jpg|jpeg|png|gif|swf)$”&gt;<br>Header set Cache-Control “max-age=604800, public”<br>&lt;/FilesMatch&gt;</p>\n<h1 id=\"2-DAYS\"><a href=\"#2-DAYS\" class=\"headerlink\" title=\"2 DAYS\"></a>2 DAYS</h1><p>&lt;FilesMatch “.(xml|txt|css|js)$”&gt;<br>Header set Cache-Control “max-age=172800, proxy-revalidate”<br>&lt;/FilesMatch&gt;</p>\n<h1 id=\"1-MIN\"><a href=\"#1-MIN\" class=\"headerlink\" title=\"1 MIN\"></a>1 MIN</h1><p>&lt;FilesMatch “.(html|htm|php)$”&gt;<br>Header set Cache-Control “max-age=60, private, proxy-revalidate”<br>&lt;/FilesMatch&gt;<br>7. 阻止WordPress博客的垃圾评论<br>还在为垃圾评论头疼吗？你可以用Akismet插件来解决这个问题，但是.htaccess文件来的更直接：阻止垃圾评论机器人访问wp-comments-post.php文件。<br>&lt;IfModule mod_rewrite.c&gt;<br>RewriteEngine On<br>RewriteCond %{REQUEST_METHOD} POST<br>RewriteCond %{REQUEST_URI} .wp-comments-post.php<em><br>RewriteCond %{HTTP_REFERER} !.</em>yourdomainname.<em> [OR]<br>RewriteCond %{HTTP_USER_AGENT} ^$<br>RewriteRule (.</em>) ^<a href=\"http://%{REMOTE_ADDR}/$\" target=\"_blank\" rel=\"noopener\">http://%{REMOTE_ADDR}/$</a> [R=301,L]<br>&lt;/IfModule&gt;<br>8.重定向不同的feed格式到统一的格式<br>很多年前，有很多不同的feed格式，例如RSS、Atom、RDF等等。但是现在RSS已经占了绝对的主导地位。下面这段代码可以让你重定向不同的feed格式到同一个feed。这段代码可以直接在WordPress博客上使用。<br>&lt;IfModule mod_alias.c&gt;<br>RedirectMatch 301 /feed/(atom|rdf|rss|rss2)/?$ <a href=\"http://example.com/feed/\" target=\"_blank\" rel=\"noopener\">http://example.com/feed/</a><br>RedirectMatch 301 /comments/feed/(atom|rdf|rss|rss2)/?$ <a href=\"http://example.com/comments/feed/\" target=\"_blank\" rel=\"noopener\">http://example.com/comments/feed/</a><br>&lt;/IfModule&gt;<br>9. 配置网站的HTML5视频<br>HTML5为我们带来了不用Flash的视频播放功能，但是你必须配置你的服务器来提供最新的HTML5视频播放功能。<br>RewriteCond %{REQUEST_FILENAME} !-f<br>RewriteCond %{REQUEST_FILENAME} !-d<br>RewriteCond %{REQUEST_URI} !=/favicon.ico<br>AddType video/ogg .ogv<br>AddType video/ogg .ogg<br>AddType video/mp4 .mp4<br>AddType video/webm .webm<br>AddType application/x-shockwave-flash swf<br>10. 记录PHP错误<br>在页面上显示PHP错误是很尴尬的事情，也不安全，下面这段代码可以把PHP错误记录到.log文件中而不在页面显示。</p>\n<h1 id=\"display-no-errs-to-user\"><a href=\"#display-no-errs-to-user\" class=\"headerlink\" title=\"display no errs to user\"></a>display no errs to user</h1><p>php_flag display_startup_errors off<br>php_flag display_errors off<br>php_flag html_errors off</p>\n<h1 id=\"log-to-file\"><a href=\"#log-to-file\" class=\"headerlink\" title=\"log to file\"></a>log to file</h1><p>php_flag log_errors on<br>php_value error_log /location/to/php_error.log<br>11. 在JavaScript代码中运行PHP<br>在JS中插入PHP代码有时候是很有用的，例如读取数据库。下面这段代码可以让你在JS中运行PHP。<br>AddType application/x-httpd-php .js<br>AddHandler x-httpd-php5 .js<br>&lt;FilesMatch “.(js|php)$”&gt;<br>SetHandler application/x-httpd-php<br>&lt;/FilesMatch&gt;</p>\n<p>from:<a href=\"http://www.open-open.com/bbs/view/1319588511749\" target=\"_blank\" rel=\"noopener\">http://www.open-open.com/bbs/view/1319588511749</a></p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>用阿里测时发现网站设置静态内容缓存时间有问题，搜了一下看.htaccess可以配置，顺便整理一下其它功能。<br>1. 强制后缀反斜杠<br>在URL的尾部加上反斜杠似乎对SEO有利 ：）<br>&lt;IfModule mod_rewrite.c&gt;<br>RewriteCond %{REQUEST_URI} /+[^.]+$<br>RewriteRule ^(.+[^/])$ %{REQUEST_URI}/ [R=301,L]<br>&lt;/IfModule&gt;<br>2. 防盗链<br>节省你宝贵的带宽吧！<br>RewriteEngine On</p>\n<p>#Replace ?mysite.com/ with your blog url<br>RewriteCond %{HTTP_REFERER} !^<a href=\"http://(.+\\.)?mysite\\.com/\" target=\"_blank\" rel=\"noopener\">http://(.+\\.)?mysite\\.com/</a> [NC]<br>RewriteCond %{HTTP_REFERER} !^$</p>\n<p>#Replace /images/nohotlink.jpg with your “don’t hotlink” image url<br>RewriteRule .*.(jpe?g|gif|bmp|png)$ /images/nohotlink.jpg [L]<br>3. 重定向移动设备","more":"<br>加入你的网站支持移动设备访问的话，最好还是重定向移动设备的访问到专门定制的页面</p>\n</blockquote>\n<p>RewriteEngine On<br>RewriteCond %{REQUEST_URI} !^/m/.*$<br>RewriteCond %{HTTP_ACCEPT} “text/vnd.wap.wml|application/vnd.wap.xhtml+xml” [NC,OR]<br>RewriteCond %{HTTP_USER_AGENT} “acs|alav|alca|amoi|audi|aste|avan|benq|bird|blac|blaz|brew|cell|cldc|cmd-“ [NC,OR]<br>RewriteCond %{HTTP_USER_AGENT} “dang|doco|eric|hipt|inno|ipaq|java|jigs|kddi|keji|leno|lg-c|lg-d|lg-g|lge-“ [NC,OR]<br>RewriteCond %{HTTP_USER_AGENT} “maui|maxo|midp|mits|mmef|mobi|mot-|moto|mwbp|nec-|newt|noki|opwv” [NC,OR]<br>RewriteCond %{HTTP_USER_AGENT} “palm|pana|pant|pdxg|phil|play|pluc|port|prox|qtek|qwap|sage|sams|sany” [NC,OR]<br>RewriteCond %{HTTP_USER_AGENT} “sch-|sec-|send|seri|sgh-|shar|sie-|siem|smal|smar|sony|sph-|symb|t-mo” [NC,OR]<br>RewriteCond %{HTTP_USER_AGENT} “teli|tim-|tosh|tsm-|upg1|upsi|vk-v|voda|w3cs|wap-|wapa|wapi” [NC,OR]<br>RewriteCond %{HTTP_USER_AGENT} “wapp|wapr|webc|winw|winw|xda|xda-“ [NC,OR]<br>RewriteCond %{HTTP_USER_AGENT} “up.browser|up.link|windowssce|iemobile|mini|mmp” [NC,OR]<br>RewriteCond %{HTTP_USER_AGENT} “symbian|midp|wap|phone|pocket|mobile|pda|psp” [NC]</p>\n<p>#————- The line below excludes the iPad<br>RewriteCond %{HTTP_USER_AGENT} !^.<em>iPad.</em>$</p>\n<p>#————-<br>RewriteCond %{HTTP_USER_AGENT} !macintosh [NC] #<em>SEE NOTE BELOW<br>RewriteRule ^(.</em>)$ /m/ [L,R=302]<br>4. 强制浏览器下载指定的文件类型<br>你可以强制浏览器下载某些类型的文件，而不是读取并打开这些文件，例如MP3、XLS。<br>&lt;Files <em>.xls&gt;<br>ForceType application/octet-stream<br>Header set Content-Disposition attachment<br>&lt;/Files&gt;<br>&lt;Files </em>.eps&gt;<br>ForceType application/octet-stream<br>Header set Content-Disposition attachment<br>&lt;/Files&gt;<br>5. 火狐的跨域名字体嵌入<br>火狐不允许嵌入一个外站的字体，下面的.htaccess片段可以绕过这个限制<br>&lt;FilesMatch “.(ttf|otf|eot|woff)$”&gt;<br>&lt;IfModule mod_headers.c&gt;<br>Header set Access-Control-Allow-Origin “<a href=\"http://yourdomain.com\" target=\"_blank\" rel=\"noopener\">http://yourdomain.com</a>“<br>&lt;/IfModule&gt;<br>&lt;/FilesMatch&gt;<br>6. 使用.htaccess缓存 给网站提速<br>恐怕这个是最有用的代码片段了。这段代码能帮你极大的提高网站的速度！</p>\n<h1 id=\"1-YEAR\"><a href=\"#1-YEAR\" class=\"headerlink\" title=\"1 YEAR\"></a>1 YEAR</h1><p>&lt;FilesMatch “.(ico|pdf|flv)$”&gt;<br>Header set Cache-Control “max-age=29030400, public”<br>&lt;/FilesMatch&gt;</p>\n<h1 id=\"1-WEEK\"><a href=\"#1-WEEK\" class=\"headerlink\" title=\"1 WEEK\"></a>1 WEEK</h1><p>&lt;FilesMatch “.(jpg|jpeg|png|gif|swf)$”&gt;<br>Header set Cache-Control “max-age=604800, public”<br>&lt;/FilesMatch&gt;</p>\n<h1 id=\"2-DAYS\"><a href=\"#2-DAYS\" class=\"headerlink\" title=\"2 DAYS\"></a>2 DAYS</h1><p>&lt;FilesMatch “.(xml|txt|css|js)$”&gt;<br>Header set Cache-Control “max-age=172800, proxy-revalidate”<br>&lt;/FilesMatch&gt;</p>\n<h1 id=\"1-MIN\"><a href=\"#1-MIN\" class=\"headerlink\" title=\"1 MIN\"></a>1 MIN</h1><p>&lt;FilesMatch “.(html|htm|php)$”&gt;<br>Header set Cache-Control “max-age=60, private, proxy-revalidate”<br>&lt;/FilesMatch&gt;<br>7. 阻止WordPress博客的垃圾评论<br>还在为垃圾评论头疼吗？你可以用Akismet插件来解决这个问题，但是.htaccess文件来的更直接：阻止垃圾评论机器人访问wp-comments-post.php文件。<br>&lt;IfModule mod_rewrite.c&gt;<br>RewriteEngine On<br>RewriteCond %{REQUEST_METHOD} POST<br>RewriteCond %{REQUEST_URI} .wp-comments-post.php<em><br>RewriteCond %{HTTP_REFERER} !.</em>yourdomainname.<em> [OR]<br>RewriteCond %{HTTP_USER_AGENT} ^$<br>RewriteRule (.</em>) ^<a href=\"http://%{REMOTE_ADDR}/$\" target=\"_blank\" rel=\"noopener\">http://%{REMOTE_ADDR}/$</a> [R=301,L]<br>&lt;/IfModule&gt;<br>8.重定向不同的feed格式到统一的格式<br>很多年前，有很多不同的feed格式，例如RSS、Atom、RDF等等。但是现在RSS已经占了绝对的主导地位。下面这段代码可以让你重定向不同的feed格式到同一个feed。这段代码可以直接在WordPress博客上使用。<br>&lt;IfModule mod_alias.c&gt;<br>RedirectMatch 301 /feed/(atom|rdf|rss|rss2)/?$ <a href=\"http://example.com/feed/\" target=\"_blank\" rel=\"noopener\">http://example.com/feed/</a><br>RedirectMatch 301 /comments/feed/(atom|rdf|rss|rss2)/?$ <a href=\"http://example.com/comments/feed/\" target=\"_blank\" rel=\"noopener\">http://example.com/comments/feed/</a><br>&lt;/IfModule&gt;<br>9. 配置网站的HTML5视频<br>HTML5为我们带来了不用Flash的视频播放功能，但是你必须配置你的服务器来提供最新的HTML5视频播放功能。<br>RewriteCond %{REQUEST_FILENAME} !-f<br>RewriteCond %{REQUEST_FILENAME} !-d<br>RewriteCond %{REQUEST_URI} !=/favicon.ico<br>AddType video/ogg .ogv<br>AddType video/ogg .ogg<br>AddType video/mp4 .mp4<br>AddType video/webm .webm<br>AddType application/x-shockwave-flash swf<br>10. 记录PHP错误<br>在页面上显示PHP错误是很尴尬的事情，也不安全，下面这段代码可以把PHP错误记录到.log文件中而不在页面显示。</p>\n<h1 id=\"display-no-errs-to-user\"><a href=\"#display-no-errs-to-user\" class=\"headerlink\" title=\"display no errs to user\"></a>display no errs to user</h1><p>php_flag display_startup_errors off<br>php_flag display_errors off<br>php_flag html_errors off</p>\n<h1 id=\"log-to-file\"><a href=\"#log-to-file\" class=\"headerlink\" title=\"log to file\"></a>log to file</h1><p>php_flag log_errors on<br>php_value error_log /location/to/php_error.log<br>11. 在JavaScript代码中运行PHP<br>在JS中插入PHP代码有时候是很有用的，例如读取数据库。下面这段代码可以让你在JS中运行PHP。<br>AddType application/x-httpd-php .js<br>AddHandler x-httpd-php5 .js<br>&lt;FilesMatch “.(js|php)$”&gt;<br>SetHandler application/x-httpd-php<br>&lt;/FilesMatch&gt;</p>\n<p>from:<a href=\"http://www.open-open.com/bbs/view/1319588511749\" target=\"_blank\" rel=\"noopener\">http://www.open-open.com/bbs/view/1319588511749</a></p>"},{"title":"android cpu调节模式和io调度模式详解","id":"1094","date":"2012-11-16T12:47:18.000Z","_content":"\nCPU模式:\n\nondemand\n【按需模式】\n官方及xray内核默认为此项调节模式，顾名思义，按需调节cpu频率，不操作手机的时候控制在最低频率，滑屏或进入应用后会迅速提升至最高频率，当空闲时迅速降低频率，性能较稳定，但因频率变化幅度过大，省电方面只有一般的水平。\n\npowersave\n【省电模式】\n按设定最低频率运行，日常没有使用价值，除非配合setcpu情景模式，关屏睡眠时使用此调节模式\n\nperformance\n【高性能模式】\n和省电模式相反，始终按设定最高频率运行，此模式亦无任何日常使用价值，果断pass\n\nuserspace\n【用户隔离】\n严格来说它并不是一个模式，是允许非内核进程控制cpu频率的设置，现在已经不需要它了，setcpu官方的建议是，“不要使用此选项”。\n\nconservative\n【保守模式】\n和ondemand模式的调频设定类似，不过有操作时提升cpu频率的速度较慢，空闲时迅速降频，所以名字叫保守模式，性能较低，省电程度略好于ondemand，总体不推荐\n\ninteractive\n【交互模式】\n相对于保守模式，这个模式算是高性能版的ondemand，开始操作手机后，频率升至最高，可以带来更好的响应速度，空闲时缓慢降至设定最低频率。电量自然也是要多费一点。\n\ninteractivex\n交互模式的修改优化版，开屏后进入更好的频率管理方式，比交互模式略省电。\n\nhotplug\nray没有此模式，多核机型上可用，在不需要的时候关闭多余核心，其他部分调节方式与ondemand相同。\n<!--more-->\nsmartass\n【智能调节模式】\n相当于是一个预置的profile，交互模式的另一个修改版，更加省电。根据资源使用智能提供一个适中的频率，空闲时自动降频，锁屏时自动固定频率。特色是锁屏后非常省电。缺点是部分机型锁屏一段时间后容易睡死。\n\nsmartassv2\n【智能调节模式v2】\naire内核默认，smartass的升级版，最近很流行的模式。能利用cpu设定的所有频率值。算是对cpu利用充分的条件下最省电的一个模式。同系列的优缺点依旧存在。\n\nsmoothass\n介绍是比smartass“更有活力的渐进式频率调节”，没用过不太清楚。\n\nbrazilianwax\n与smoothass相同的模式。\n\nsavagedzen\n基于smartass的另一模式，在耗电和性能间取得更佳的均衡点。\n\nminmax\n保守模式的优化配置版，耗电略高于smartassv2，性能较好。\n\nscary\n基于保守模式，同时具有smartass的特点。看介绍是很奇怪的一个模式，有人说不错，不过自己没有试过。\n\nlagfree\n【无延迟模式】\n基本基于保守模式的频率调节机制，频率上升缓慢，不同之处在于唤醒屏幕后会直接跳跃到一个合适的频率，减少亮起以后的延迟现象。但日常使用性能不高。\n\nintellidemand\n【智能按需调节模式】\n这个模式有点意思，可根据GPU使用情况来针对性调节cpu频率，GPU负载高时，比如运行游戏和测试的时候，cpu频率会迅速升至最高，这时的调节模式类似于ondemand；当GPU空闲时则会自动限制cpu最高频率，更加省电。要游戏性能好，又要省电的可以用下试试。\n\nI/O调度模式：\n（i/o即input/output的缩写，关于数据的读写操作，不同进程请求数据的优先顺序等等。io调度模式比较复杂，我没有具体测试，这里仅对ray上出现的几个模式做说明，部分参考xda、androidforums、wik1pedia、linuxarchive资料）\n\nnoop\n这个调度模式会把所有的数据请求直接合并到一个简单的队列里。不适合有机械结构的存储器，因为没有优化顺序，会增加额外的寻道时间。属于最简单的一个调度模式，无视io操作优先级和复杂性，执行完一个再执行一个，如果读写操作繁多的话，就会造成效率降低。\n\nanticipatory\n其实这个有点类似于pc硬盘的NCQ功能，执行有预测性的调度，看起来似乎可以提高效率，不过因为它的预测机制会在进程将要结束一个读写操作时时开始准备下一个的预处理，所以会打乱系统正常的连续io调度，降低随机存取效率。用的人很少，不推荐。\n\ndeadline\n顾名思义，用过期时间来排序io操作顺序，保证先出现的io请求有最短的延迟时间，相对于写操作，给读操作更优先的级别。是比较好的一个调度模式。\n\ncfq\n完全公平队列，是anticipatory模式的替代品，没有过多的做预测性调度，而是根据给定的进程io优先级，直接来分配操作的顺序。这个模式在linux上表现良好，但也许并不是最适合android的io调度模式，太强调均衡，而降低了连续读写数据的性能。\n\nvr\n具有和deadline相似的操作排序机制，有着最高的峰值读写速度，但是性能比较不稳定，也就是说可能跑出最高的分数，但是也会出现最低值。\n\nsio\n虽然基于deadline，但是它和noop一样，不会对io操作进行排序，所以有着noop那样快速的存取速度，但并没有过多优化io操作。如果不喜欢noop完全不参与调度，也可以选择这个。\n\n总体而言，推荐指数依次为sio=deadline(两种趋向，一种少干预，一种多干预)>vr(性能可以达到最高峰值)>cfq=noop>anticipatory\n\n有不同或补充意见欢迎探讨，原创首发ray吧，转载请注明。","source":"_posts/android-cpu-e8-b0-83-e8-8a-82-e6-a8-a1-e5-bc-8f-e5-92-8cio-e8-b0-83-e5-ba-a6-e6-a8-a1-e5-bc-8f-e8-af-a6-e8-a7-a3.md","raw":"---\ntitle: android cpu调节模式和io调度模式详解\nid: 1094\ncategories:\n  - Other\ndate: 2012-11-16 20:47:18\ntags:\n---\n\nCPU模式:\n\nondemand\n【按需模式】\n官方及xray内核默认为此项调节模式，顾名思义，按需调节cpu频率，不操作手机的时候控制在最低频率，滑屏或进入应用后会迅速提升至最高频率，当空闲时迅速降低频率，性能较稳定，但因频率变化幅度过大，省电方面只有一般的水平。\n\npowersave\n【省电模式】\n按设定最低频率运行，日常没有使用价值，除非配合setcpu情景模式，关屏睡眠时使用此调节模式\n\nperformance\n【高性能模式】\n和省电模式相反，始终按设定最高频率运行，此模式亦无任何日常使用价值，果断pass\n\nuserspace\n【用户隔离】\n严格来说它并不是一个模式，是允许非内核进程控制cpu频率的设置，现在已经不需要它了，setcpu官方的建议是，“不要使用此选项”。\n\nconservative\n【保守模式】\n和ondemand模式的调频设定类似，不过有操作时提升cpu频率的速度较慢，空闲时迅速降频，所以名字叫保守模式，性能较低，省电程度略好于ondemand，总体不推荐\n\ninteractive\n【交互模式】\n相对于保守模式，这个模式算是高性能版的ondemand，开始操作手机后，频率升至最高，可以带来更好的响应速度，空闲时缓慢降至设定最低频率。电量自然也是要多费一点。\n\ninteractivex\n交互模式的修改优化版，开屏后进入更好的频率管理方式，比交互模式略省电。\n\nhotplug\nray没有此模式，多核机型上可用，在不需要的时候关闭多余核心，其他部分调节方式与ondemand相同。\n<!--more-->\nsmartass\n【智能调节模式】\n相当于是一个预置的profile，交互模式的另一个修改版，更加省电。根据资源使用智能提供一个适中的频率，空闲时自动降频，锁屏时自动固定频率。特色是锁屏后非常省电。缺点是部分机型锁屏一段时间后容易睡死。\n\nsmartassv2\n【智能调节模式v2】\naire内核默认，smartass的升级版，最近很流行的模式。能利用cpu设定的所有频率值。算是对cpu利用充分的条件下最省电的一个模式。同系列的优缺点依旧存在。\n\nsmoothass\n介绍是比smartass“更有活力的渐进式频率调节”，没用过不太清楚。\n\nbrazilianwax\n与smoothass相同的模式。\n\nsavagedzen\n基于smartass的另一模式，在耗电和性能间取得更佳的均衡点。\n\nminmax\n保守模式的优化配置版，耗电略高于smartassv2，性能较好。\n\nscary\n基于保守模式，同时具有smartass的特点。看介绍是很奇怪的一个模式，有人说不错，不过自己没有试过。\n\nlagfree\n【无延迟模式】\n基本基于保守模式的频率调节机制，频率上升缓慢，不同之处在于唤醒屏幕后会直接跳跃到一个合适的频率，减少亮起以后的延迟现象。但日常使用性能不高。\n\nintellidemand\n【智能按需调节模式】\n这个模式有点意思，可根据GPU使用情况来针对性调节cpu频率，GPU负载高时，比如运行游戏和测试的时候，cpu频率会迅速升至最高，这时的调节模式类似于ondemand；当GPU空闲时则会自动限制cpu最高频率，更加省电。要游戏性能好，又要省电的可以用下试试。\n\nI/O调度模式：\n（i/o即input/output的缩写，关于数据的读写操作，不同进程请求数据的优先顺序等等。io调度模式比较复杂，我没有具体测试，这里仅对ray上出现的几个模式做说明，部分参考xda、androidforums、wik1pedia、linuxarchive资料）\n\nnoop\n这个调度模式会把所有的数据请求直接合并到一个简单的队列里。不适合有机械结构的存储器，因为没有优化顺序，会增加额外的寻道时间。属于最简单的一个调度模式，无视io操作优先级和复杂性，执行完一个再执行一个，如果读写操作繁多的话，就会造成效率降低。\n\nanticipatory\n其实这个有点类似于pc硬盘的NCQ功能，执行有预测性的调度，看起来似乎可以提高效率，不过因为它的预测机制会在进程将要结束一个读写操作时时开始准备下一个的预处理，所以会打乱系统正常的连续io调度，降低随机存取效率。用的人很少，不推荐。\n\ndeadline\n顾名思义，用过期时间来排序io操作顺序，保证先出现的io请求有最短的延迟时间，相对于写操作，给读操作更优先的级别。是比较好的一个调度模式。\n\ncfq\n完全公平队列，是anticipatory模式的替代品，没有过多的做预测性调度，而是根据给定的进程io优先级，直接来分配操作的顺序。这个模式在linux上表现良好，但也许并不是最适合android的io调度模式，太强调均衡，而降低了连续读写数据的性能。\n\nvr\n具有和deadline相似的操作排序机制，有着最高的峰值读写速度，但是性能比较不稳定，也就是说可能跑出最高的分数，但是也会出现最低值。\n\nsio\n虽然基于deadline，但是它和noop一样，不会对io操作进行排序，所以有着noop那样快速的存取速度，但并没有过多优化io操作。如果不喜欢noop完全不参与调度，也可以选择这个。\n\n总体而言，推荐指数依次为sio=deadline(两种趋向，一种少干预，一种多干预)>vr(性能可以达到最高峰值)>cfq=noop>anticipatory\n\n有不同或补充意见欢迎探讨，原创首发ray吧，转载请注明。","slug":"android-cpu-e8-b0-83-e8-8a-82-e6-a8-a1-e5-bc-8f-e5-92-8cio-e8-b0-83-e5-ba-a6-e6-a8-a1-e5-bc-8f-e8-af-a6-e8-a7-a3","published":1,"updated":"2018-01-13T05:07:00.451Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjccw7x730005aqcrwlc8f1ub","content":"<p>CPU模式:</p>\n<p>ondemand<br>【按需模式】<br>官方及xray内核默认为此项调节模式，顾名思义，按需调节cpu频率，不操作手机的时候控制在最低频率，滑屏或进入应用后会迅速提升至最高频率，当空闲时迅速降低频率，性能较稳定，但因频率变化幅度过大，省电方面只有一般的水平。</p>\n<p>powersave<br>【省电模式】<br>按设定最低频率运行，日常没有使用价值，除非配合setcpu情景模式，关屏睡眠时使用此调节模式</p>\n<p>performance<br>【高性能模式】<br>和省电模式相反，始终按设定最高频率运行，此模式亦无任何日常使用价值，果断pass</p>\n<p>userspace<br>【用户隔离】<br>严格来说它并不是一个模式，是允许非内核进程控制cpu频率的设置，现在已经不需要它了，setcpu官方的建议是，“不要使用此选项”。</p>\n<p>conservative<br>【保守模式】<br>和ondemand模式的调频设定类似，不过有操作时提升cpu频率的速度较慢，空闲时迅速降频，所以名字叫保守模式，性能较低，省电程度略好于ondemand，总体不推荐</p>\n<p>interactive<br>【交互模式】<br>相对于保守模式，这个模式算是高性能版的ondemand，开始操作手机后，频率升至最高，可以带来更好的响应速度，空闲时缓慢降至设定最低频率。电量自然也是要多费一点。</p>\n<p>interactivex<br>交互模式的修改优化版，开屏后进入更好的频率管理方式，比交互模式略省电。</p>\n<p>hotplug<br>ray没有此模式，多核机型上可用，在不需要的时候关闭多余核心，其他部分调节方式与ondemand相同。<br><a id=\"more\"></a><br>smartass<br>【智能调节模式】<br>相当于是一个预置的profile，交互模式的另一个修改版，更加省电。根据资源使用智能提供一个适中的频率，空闲时自动降频，锁屏时自动固定频率。特色是锁屏后非常省电。缺点是部分机型锁屏一段时间后容易睡死。</p>\n<p>smartassv2<br>【智能调节模式v2】<br>aire内核默认，smartass的升级版，最近很流行的模式。能利用cpu设定的所有频率值。算是对cpu利用充分的条件下最省电的一个模式。同系列的优缺点依旧存在。</p>\n<p>smoothass<br>介绍是比smartass“更有活力的渐进式频率调节”，没用过不太清楚。</p>\n<p>brazilianwax<br>与smoothass相同的模式。</p>\n<p>savagedzen<br>基于smartass的另一模式，在耗电和性能间取得更佳的均衡点。</p>\n<p>minmax<br>保守模式的优化配置版，耗电略高于smartassv2，性能较好。</p>\n<p>scary<br>基于保守模式，同时具有smartass的特点。看介绍是很奇怪的一个模式，有人说不错，不过自己没有试过。</p>\n<p>lagfree<br>【无延迟模式】<br>基本基于保守模式的频率调节机制，频率上升缓慢，不同之处在于唤醒屏幕后会直接跳跃到一个合适的频率，减少亮起以后的延迟现象。但日常使用性能不高。</p>\n<p>intellidemand<br>【智能按需调节模式】<br>这个模式有点意思，可根据GPU使用情况来针对性调节cpu频率，GPU负载高时，比如运行游戏和测试的时候，cpu频率会迅速升至最高，这时的调节模式类似于ondemand；当GPU空闲时则会自动限制cpu最高频率，更加省电。要游戏性能好，又要省电的可以用下试试。</p>\n<p>I/O调度模式：<br>（i/o即input/output的缩写，关于数据的读写操作，不同进程请求数据的优先顺序等等。io调度模式比较复杂，我没有具体测试，这里仅对ray上出现的几个模式做说明，部分参考xda、androidforums、wik1pedia、linuxarchive资料）</p>\n<p>noop<br>这个调度模式会把所有的数据请求直接合并到一个简单的队列里。不适合有机械结构的存储器，因为没有优化顺序，会增加额外的寻道时间。属于最简单的一个调度模式，无视io操作优先级和复杂性，执行完一个再执行一个，如果读写操作繁多的话，就会造成效率降低。</p>\n<p>anticipatory<br>其实这个有点类似于pc硬盘的NCQ功能，执行有预测性的调度，看起来似乎可以提高效率，不过因为它的预测机制会在进程将要结束一个读写操作时时开始准备下一个的预处理，所以会打乱系统正常的连续io调度，降低随机存取效率。用的人很少，不推荐。</p>\n<p>deadline<br>顾名思义，用过期时间来排序io操作顺序，保证先出现的io请求有最短的延迟时间，相对于写操作，给读操作更优先的级别。是比较好的一个调度模式。</p>\n<p>cfq<br>完全公平队列，是anticipatory模式的替代品，没有过多的做预测性调度，而是根据给定的进程io优先级，直接来分配操作的顺序。这个模式在linux上表现良好，但也许并不是最适合android的io调度模式，太强调均衡，而降低了连续读写数据的性能。</p>\n<p>vr<br>具有和deadline相似的操作排序机制，有着最高的峰值读写速度，但是性能比较不稳定，也就是说可能跑出最高的分数，但是也会出现最低值。</p>\n<p>sio<br>虽然基于deadline，但是它和noop一样，不会对io操作进行排序，所以有着noop那样快速的存取速度，但并没有过多优化io操作。如果不喜欢noop完全不参与调度，也可以选择这个。</p>\n<p>总体而言，推荐指数依次为sio=deadline(两种趋向，一种少干预，一种多干预)&gt;vr(性能可以达到最高峰值)&gt;cfq=noop&gt;anticipatory</p>\n<p>有不同或补充意见欢迎探讨，原创首发ray吧，转载请注明。</p>\n","site":{"data":{}},"excerpt":"<p>CPU模式:</p>\n<p>ondemand<br>【按需模式】<br>官方及xray内核默认为此项调节模式，顾名思义，按需调节cpu频率，不操作手机的时候控制在最低频率，滑屏或进入应用后会迅速提升至最高频率，当空闲时迅速降低频率，性能较稳定，但因频率变化幅度过大，省电方面只有一般的水平。</p>\n<p>powersave<br>【省电模式】<br>按设定最低频率运行，日常没有使用价值，除非配合setcpu情景模式，关屏睡眠时使用此调节模式</p>\n<p>performance<br>【高性能模式】<br>和省电模式相反，始终按设定最高频率运行，此模式亦无任何日常使用价值，果断pass</p>\n<p>userspace<br>【用户隔离】<br>严格来说它并不是一个模式，是允许非内核进程控制cpu频率的设置，现在已经不需要它了，setcpu官方的建议是，“不要使用此选项”。</p>\n<p>conservative<br>【保守模式】<br>和ondemand模式的调频设定类似，不过有操作时提升cpu频率的速度较慢，空闲时迅速降频，所以名字叫保守模式，性能较低，省电程度略好于ondemand，总体不推荐</p>\n<p>interactive<br>【交互模式】<br>相对于保守模式，这个模式算是高性能版的ondemand，开始操作手机后，频率升至最高，可以带来更好的响应速度，空闲时缓慢降至设定最低频率。电量自然也是要多费一点。</p>\n<p>interactivex<br>交互模式的修改优化版，开屏后进入更好的频率管理方式，比交互模式略省电。</p>\n<p>hotplug<br>ray没有此模式，多核机型上可用，在不需要的时候关闭多余核心，其他部分调节方式与ondemand相同。<br>","more":"<br>smartass<br>【智能调节模式】<br>相当于是一个预置的profile，交互模式的另一个修改版，更加省电。根据资源使用智能提供一个适中的频率，空闲时自动降频，锁屏时自动固定频率。特色是锁屏后非常省电。缺点是部分机型锁屏一段时间后容易睡死。</p>\n<p>smartassv2<br>【智能调节模式v2】<br>aire内核默认，smartass的升级版，最近很流行的模式。能利用cpu设定的所有频率值。算是对cpu利用充分的条件下最省电的一个模式。同系列的优缺点依旧存在。</p>\n<p>smoothass<br>介绍是比smartass“更有活力的渐进式频率调节”，没用过不太清楚。</p>\n<p>brazilianwax<br>与smoothass相同的模式。</p>\n<p>savagedzen<br>基于smartass的另一模式，在耗电和性能间取得更佳的均衡点。</p>\n<p>minmax<br>保守模式的优化配置版，耗电略高于smartassv2，性能较好。</p>\n<p>scary<br>基于保守模式，同时具有smartass的特点。看介绍是很奇怪的一个模式，有人说不错，不过自己没有试过。</p>\n<p>lagfree<br>【无延迟模式】<br>基本基于保守模式的频率调节机制，频率上升缓慢，不同之处在于唤醒屏幕后会直接跳跃到一个合适的频率，减少亮起以后的延迟现象。但日常使用性能不高。</p>\n<p>intellidemand<br>【智能按需调节模式】<br>这个模式有点意思，可根据GPU使用情况来针对性调节cpu频率，GPU负载高时，比如运行游戏和测试的时候，cpu频率会迅速升至最高，这时的调节模式类似于ondemand；当GPU空闲时则会自动限制cpu最高频率，更加省电。要游戏性能好，又要省电的可以用下试试。</p>\n<p>I/O调度模式：<br>（i/o即input/output的缩写，关于数据的读写操作，不同进程请求数据的优先顺序等等。io调度模式比较复杂，我没有具体测试，这里仅对ray上出现的几个模式做说明，部分参考xda、androidforums、wik1pedia、linuxarchive资料）</p>\n<p>noop<br>这个调度模式会把所有的数据请求直接合并到一个简单的队列里。不适合有机械结构的存储器，因为没有优化顺序，会增加额外的寻道时间。属于最简单的一个调度模式，无视io操作优先级和复杂性，执行完一个再执行一个，如果读写操作繁多的话，就会造成效率降低。</p>\n<p>anticipatory<br>其实这个有点类似于pc硬盘的NCQ功能，执行有预测性的调度，看起来似乎可以提高效率，不过因为它的预测机制会在进程将要结束一个读写操作时时开始准备下一个的预处理，所以会打乱系统正常的连续io调度，降低随机存取效率。用的人很少，不推荐。</p>\n<p>deadline<br>顾名思义，用过期时间来排序io操作顺序，保证先出现的io请求有最短的延迟时间，相对于写操作，给读操作更优先的级别。是比较好的一个调度模式。</p>\n<p>cfq<br>完全公平队列，是anticipatory模式的替代品，没有过多的做预测性调度，而是根据给定的进程io优先级，直接来分配操作的顺序。这个模式在linux上表现良好，但也许并不是最适合android的io调度模式，太强调均衡，而降低了连续读写数据的性能。</p>\n<p>vr<br>具有和deadline相似的操作排序机制，有着最高的峰值读写速度，但是性能比较不稳定，也就是说可能跑出最高的分数，但是也会出现最低值。</p>\n<p>sio<br>虽然基于deadline，但是它和noop一样，不会对io操作进行排序，所以有着noop那样快速的存取速度，但并没有过多优化io操作。如果不喜欢noop完全不参与调度，也可以选择这个。</p>\n<p>总体而言，推荐指数依次为sio=deadline(两种趋向，一种少干预，一种多干预)&gt;vr(性能可以达到最高峰值)&gt;cfq=noop&gt;anticipatory</p>\n<p>有不同或补充意见欢迎探讨，原创首发ray吧，转载请注明。</p>"},{"title":"apache禁止显示目录索引","id":"1090","date":"2012-10-19T09:04:04.000Z","_content":"\npache禁止显示目录索引\n\napache显示目录索引很不安全，下面是操作方法。\n\n在httpd.conf文件搜索关键字\"Indexes \"。\n<directory \"/var/www/html\">\n    Options Indexes FollowSymLinks\n    AllowOverride None\n    Order allow,deny\n    Allow from all\n</directory>\n\n出掉Indexes关键字，修改如下：\n<directory \"/var/www/html\">\n    Options  FollowSymLinks MultiViews\n    AllowOverride None\n    Order allow,deny\n    Allow from all\n</directory>","source":"_posts/apache-e7-a6-81-e6-ad-a2-e6-98-be-e7-a4-ba-e7-9b-ae-e5-bd-95-e7-b4-a2-e5-bc-95.md","raw":"---\ntitle: apache禁止显示目录索引\nid: 1090\ncategories:\n  - PHP\ndate: 2012-10-19 17:04:04\ntags:\n---\n\npache禁止显示目录索引\n\napache显示目录索引很不安全，下面是操作方法。\n\n在httpd.conf文件搜索关键字\"Indexes \"。\n<directory \"/var/www/html\">\n    Options Indexes FollowSymLinks\n    AllowOverride None\n    Order allow,deny\n    Allow from all\n</directory>\n\n出掉Indexes关键字，修改如下：\n<directory \"/var/www/html\">\n    Options  FollowSymLinks MultiViews\n    AllowOverride None\n    Order allow,deny\n    Allow from all\n</directory>","slug":"apache-e7-a6-81-e6-ad-a2-e6-98-be-e7-a4-ba-e7-9b-ae-e5-bd-95-e7-b4-a2-e5-bc-95","published":1,"updated":"2018-01-13T05:07:00.487Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjccw7x750007aqcre8mznrys","content":"<p>pache禁止显示目录索引</p>\n<p>apache显示目录索引很不安全，下面是操作方法。</p>\n<p>在httpd.conf文件搜索关键字”Indexes “。</p>\n<directory \"=\"\" var=\"\" www=\"\" html\"=\"\"><br>    Options Indexes FollowSymLinks<br>    AllowOverride None<br>    Order allow,deny<br>    Allow from all<br></directory>\n\n<p>出掉Indexes关键字，修改如下：</p>\n<directory \"=\"\" var=\"\" www=\"\" html\"=\"\"><br>    Options  FollowSymLinks MultiViews<br>    AllowOverride None<br>    Order allow,deny<br>    Allow from all<br></directory>","site":{"data":{}},"excerpt":"","more":"<p>pache禁止显示目录索引</p>\n<p>apache显示目录索引很不安全，下面是操作方法。</p>\n<p>在httpd.conf文件搜索关键字”Indexes “。</p>\n<directory \"=\"\" var=\"\" www=\"\" html\"=\"\"><br>    Options Indexes FollowSymLinks<br>    AllowOverride None<br>    Order allow,deny<br>    Allow from all<br></directory>\n\n<p>出掉Indexes关键字，修改如下：</p>\n<directory \"=\"\" var=\"\" www=\"\" html\"=\"\"><br>    Options  FollowSymLinks MultiViews<br>    AllowOverride None<br>    Order allow,deny<br>    Allow from all<br></directory>"},{"title":"Apache Python mod_wsgi的编译安装","id":"1660","date":"2014-04-10T01:03:04.000Z","_content":"\n说明一下，装完apache后，再装mod_wsgi提示没有apxs,然后网上找，说是直接yum个 httpd-devel就可以了。但我的是gentoo , 源码安装的apache,然后就去找httpd-devel的源码包，怎么也没找着。原来源码安装时就包含了apxs，在/usr/local/apache2/bin/apxs。这样就不用./configure --enable-shared 配置而是直接定义好就可以了。\n`# wget https://modwsgi.googlecode.com/files/\n#./configure --with-apxs=/usr/local/apache2/bin/apxs --with-python=/usr/bin/python\n# make && make install\n# chmod 755 /usr/local/apache2/modules.d/mod_wsgi.so //不同Linux可能不同`\n\n修改httpd.conf (gentoo 在这里 /etc/apache2/httpd.conf) 配置,增加\nLoadModule wsgi_module modules/mod_wsgi.so","source":"_posts/apache-python-mod-wsgi-e7-9a-84-e7-bc-96-e8-af-91-e5-ae-89-e8-a3-85.md","raw":"---\ntitle: Apache Python mod_wsgi的编译安装\ntags:\n  - apache\n  - mod_wsgi\nid: 1660\ncategories:\n  - Linux\ndate: 2014-04-10 09:03:04\n---\n\n说明一下，装完apache后，再装mod_wsgi提示没有apxs,然后网上找，说是直接yum个 httpd-devel就可以了。但我的是gentoo , 源码安装的apache,然后就去找httpd-devel的源码包，怎么也没找着。原来源码安装时就包含了apxs，在/usr/local/apache2/bin/apxs。这样就不用./configure --enable-shared 配置而是直接定义好就可以了。\n`# wget https://modwsgi.googlecode.com/files/\n#./configure --with-apxs=/usr/local/apache2/bin/apxs --with-python=/usr/bin/python\n# make && make install\n# chmod 755 /usr/local/apache2/modules.d/mod_wsgi.so //不同Linux可能不同`\n\n修改httpd.conf (gentoo 在这里 /etc/apache2/httpd.conf) 配置,增加\nLoadModule wsgi_module modules/mod_wsgi.so","slug":"apache-python-mod-wsgi-e7-9a-84-e7-bc-96-e8-af-91-e5-ae-89-e8-a3-85","published":1,"updated":"2018-01-13T05:07:00.477Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjccw7x780008aqcrbt7asjma","content":"<p>说明一下，装完apache后，再装mod_wsgi提示没有apxs,然后网上找，说是直接yum个 httpd-devel就可以了。但我的是gentoo , 源码安装的apache,然后就去找httpd-devel的源码包，怎么也没找着。原来源码安装时就包含了apxs，在/usr/local/apache2/bin/apxs。这样就不用./configure –enable-shared 配置而是直接定义好就可以了。<br>`# wget <a href=\"https://modwsgi.googlecode.com/files/\" target=\"_blank\" rel=\"noopener\">https://modwsgi.googlecode.com/files/</a></p>\n<p>#./configure –with-apxs=/usr/local/apache2/bin/apxs –with-python=/usr/bin/python</p>\n<h1 id=\"make-amp-amp-make-install\"><a href=\"#make-amp-amp-make-install\" class=\"headerlink\" title=\"make &amp;&amp; make install\"></a>make &amp;&amp; make install</h1><h1 id=\"chmod-755-usr-local-apache2-modules-d-mod-wsgi-so-不同Linux可能不同\"><a href=\"#chmod-755-usr-local-apache2-modules-d-mod-wsgi-so-不同Linux可能不同\" class=\"headerlink\" title=\"chmod 755 /usr/local/apache2/modules.d/mod_wsgi.so //不同Linux可能不同`\"></a>chmod 755 /usr/local/apache2/modules.d/mod_wsgi.so //不同Linux可能不同`</h1><p>修改httpd.conf (gentoo 在这里 /etc/apache2/httpd.conf) 配置,增加<br>LoadModule wsgi_module modules/mod_wsgi.so</p>\n","site":{"data":{}},"excerpt":"","more":"<p>说明一下，装完apache后，再装mod_wsgi提示没有apxs,然后网上找，说是直接yum个 httpd-devel就可以了。但我的是gentoo , 源码安装的apache,然后就去找httpd-devel的源码包，怎么也没找着。原来源码安装时就包含了apxs，在/usr/local/apache2/bin/apxs。这样就不用./configure –enable-shared 配置而是直接定义好就可以了。<br>`# wget <a href=\"https://modwsgi.googlecode.com/files/\" target=\"_blank\" rel=\"noopener\">https://modwsgi.googlecode.com/files/</a></p>\n<p>#./configure –with-apxs=/usr/local/apache2/bin/apxs –with-python=/usr/bin/python</p>\n<h1 id=\"make-amp-amp-make-install\"><a href=\"#make-amp-amp-make-install\" class=\"headerlink\" title=\"make &amp;&amp; make install\"></a>make &amp;&amp; make install</h1><h1 id=\"chmod-755-usr-local-apache2-modules-d-mod-wsgi-so-不同Linux可能不同\"><a href=\"#chmod-755-usr-local-apache2-modules-d-mod-wsgi-so-不同Linux可能不同\" class=\"headerlink\" title=\"chmod 755 /usr/local/apache2/modules.d/mod_wsgi.so //不同Linux可能不同`\"></a>chmod 755 /usr/local/apache2/modules.d/mod_wsgi.so //不同Linux可能不同`</h1><p>修改httpd.conf (gentoo 在这里 /etc/apache2/httpd.conf) 配置,增加<br>LoadModule wsgi_module modules/mod_wsgi.so</p>\n"},{"title":"Android系统优化策略","id":"1034","date":"2012-05-19T08:27:58.000Z","_content":"\n智能手机的两大阵营iOS和Android已经逐渐显现出优势，并且已经形成了对立的阵营，Android用户并不理会iOS用户所谓的体验好 应用好是怎么个好法，而iOS用户则更不理解Android用户刷机重启抠电池的乐趣。在iOS用户眼中，Android的形象几乎可以用一个“卡”字来 代替。其实Android经过了这几年的发展，硬件水平已经有了很大的提高，再加上目前的优化，Android卡的情况已经有了很大程度的缓解，目前的双 核机型硬件配置十分强大，如果还要说卡，也就是因为厂商定制ROM的优化原因。\n\n浅谈Android系统优化策略\n\n　　其实Android的“卡”，可以得到彻底的解决，这就关系到了Android的优化问题，而今天我们就探讨下如何优化我们手中的 Android机型。在这里笔者也要提醒大家，选购Android机型一定要选择热门机型，只有热门机型才有足够丰富的优化资源供我们选择，切忌为了个性 选择偏门机型，Android热门机型再是街机，也不会比iPhone还街吧？\n\n　　刷机重启抠电池\n<!--more-->\n　　刷机是Android用户的一大乐趣，部分用户刷机是为了得到更好的易用性，比如小米的MIUI ROM，非常符合中国人的使用习惯，也有着足够丰富的个性化设定，是图省事的朋友刷机的好选择，不过对于追求高性能的朋友来说，MIUI的优化还有很大提 升空间，人们纷纷选择了对于ROM优化更加出色的CyanogenMod作为刷机的第一选择。\n\nMIUI ROM特色\n\n　　CyanogenMod系列目前主打的ROM有CM 7.2和CM 9两个，CM 7.2基于Android 2.3.7，而CM 9则基于Android 4.0.4，其中CM 7.2已经基本成熟，完美支持的机型很多，是大部分机友刷机的第一选择，CM 9官方的ROM支持机型并不多，民间高手也都进行了各个机型的移植，官方支持的机型兼容性相当不错，而移植情况并不乐观。\n\nCyanogenMod的LOGO\n\n　　CM系列ROM忠实于AOSP，在底层驱动方面做了很多努力，刷入之后就会感觉手机流畅了许多，同时也支持了更多的美化和手机自定义能力，比如 我们可以对手机的震动回馈做细致的调整，包括按下震动的强度，抬起震动的强度等，让手机虚拟按键给我们更为真实的回馈，在CM ROM中，类似的设定非常多。\n\nCM9 ROM截图\n\n　　目前大部分的ROM都是使用CM进行定制的，还有一部分是对官方原版ROM进行修改，仅有少部分的ROM是修改的AOSP的源码，这些ROM指 向都是谷歌Nexus系列的机型，比如GALAXY Nexus和Nexus S上的Codename和AOKP，就针对源码做了很多修改，让手机变得更流畅。\n\n刷内核效果很好\n\n　　仅仅刷手机的ROM是不够的，虽然多了很多自定义的功能，流畅度已经高于官方的ROM，但依旧有很大提升的空间，这时候我们就需要通过刷内核来进一步优化，刷内核所能带来的提升是相当明显的，但是对于刷内核大家还是要谨慎。\n\n国外著名论坛的内核发布区\n\n　　刷内核相比刷ROM，是一个很小的工程，你的手机不必要Wipe，也就是说不用删除手机内部的数据，刷一下也就几分钟的功夫，所以刷内核的时 候，大家完全可以多下几个内核，逐个进行测试，看看哪个内核更适合自己，就保留哪个内核。同时刷内核时我们要注意，内核需对应自己的手机版本，对应自己所 刷的ROM，否则会造成手机无法启动的现象，如果遇到无法启动的现象，再刷其他可用内核就可以恢复。\n\nAndroid机器人\n\n　　大家会问了，说了这么半天，刷内核到底都有什么作用呢？首先就是超频，大部分内核会默认提供降压超频，并拥有多种超频策略，来保证超频的情况下 更省电。其次，还提供更多调整，比如内存虚拟机的大小，颜色管理等等，甚至一个内核可以包括一些新的Linux的补丁，比如最新的Linux 3.3所集成的CPU频率补丁等等。\n\n刷内核工具\n\n　　事实上，一般的第三方ROM已经修改了手机的内核，达到了更流畅的目的，但ROM的制作速度远远比不上内核的调整速度，有时候一个ROM适用的 内核在一天之内可能多次更新，所以我们可以尝试不同的新内核，看看他们的超频是不是能给我们带来性能上质的提升，是不是能更省电，是不是能通过颜色调整让 我们看到更棒的画面等等。\n\n　　精简内置应用\n\n　　我相信Android用户通过不断的更换ROM和刷内核已经在流畅度上有了质的飞跃了，如果这时候你的手机已经比iPhone更流畅、更省电， 那么我们就可以收手了，如果你还不满意，我们还有其他的路可选，精简内置应用，就是一个可以大幅度提升流畅度的方法。像Google的服务就是大部分人精 简的对象。\n\n跑分是性能的体现\n\n　　Android系统和iOS与Windows Phone不同，这个系统拥有真正的后台运行能力，虽然iOS在推送方面做得很好，弥补了后台方面的不足，但是仍然无法与Android的真后台相比，但 是由于Android的程序优先级并不像iOS和Windows Phone那样，为了流畅让当前界面拥有最高优先级，所以我们就要把Android手机后台不必要的进程关掉，以获得最佳的性能。\n\nRE管理器截图\n\n　　那么精简内部应用就是很好的选择，因为在我们使用过程中，有许多Android内部应用程序是不必要的，而这些程序会在我们不用的时候悄悄的后台打开，对我们的使用造成影响。在精简时，我们需要用到root文件管理器，同时需要保证手机已经开启root权限。\n\nRE管理器截图\n\n　　进入system/app就可以进行精简了，我们需要把root管理器的当前权限设置成读写，并且修改需要删除的软件权限，打开软件执行操作的 权限，就可以对删除内置软件了，在精简前，大家需要对软件进行备份，或者备份整个ROM，如果你精简掉系统程序，可能会造成无法开机的情况，重刷ROM可 以解决，所以大家最好找到该机型、该ROM的精简列表，以避免重复劳动。\n\n还有其他优化\n\n　　经过以上多方面的优化，我相信大家都已经得到了一个较为干净、运行流畅的Android了，不过在很多程序中，我们还是会遇到卡顿的情况，对于一个极端追求流畅度的玩家来说，这样的情况是绝对不允许发生的，因为我们还有进一步优化的空间。\n\nCM超频选项\n\n　　之前我们介绍了CM系列ROM，而CM的ROM中有两个选项的勾选可以进一步的提高流畅度，但是会损失一些画面这些选项是贴图差值抖动和16位 透明度，贴图差值抖动这个选项需要关闭，这个选项关闭后可以提高流畅度，但是在滑动菜单时会有不容易被发现的画面损失，而16位透明度这个选项开启会大幅 度提高流畅度，但是一些纯色的透明效果画质会下降，比如Android滑动到边缘的越界效果。\n\nCM性能设置选项\n\n　　在Android 4.0的ROM中，也有不少选项可以提高程序的流畅度，比如程序的GPU加速，使用GPU对2D程序的界面进行渲染，有效减轻界面滑动对于CPU的负担， 同时还能让界面得到更好地渲染效果，不过这个选项会让有些程序出现兼容性问题，而Android也不能单独为某个程序开关GPU加速，所以GPU加速这个 功能让人又爱又恨。\n\nAndroid 4.0强制GPU加速\n\n　　在提到刷内核时，我们也提到了超频内核，超频内核在刷完后，会在ROM设置中提供给你多种内核超频策略选择，在大部分机型中，超频不会增加 CPU的耗电，因为厂商在CPU出厂前，为了保证CPU的稳定，为CPU设置了很安全的电压和频率，这显得过于保守，而在同等的电压下，CPU根据体质不 同或多或少还有可以压榨的空间，所以我们在保证稳定运行的情况下，还可以继续对CPU进行超频。\n\n　　优化策略总结\n\n　　本文我们从刷ROM开始提到了一些Android系统的优化，对于Android系统来说，流畅度是它相比其他系统最大的短板，其实 Android的大部分手机有着相当好的硬件，所以流畅度大幅度提升完全不是难事，而各个厂商在Android手机出厂前给手机定制的ROM并没有达到最 优的优化效果，或多或少都有可提升的空间。\n\n三星 GALAXY Nexus\n\n　　所以我们也可以根据自己用手机的需要对手机进行彻头彻尾的优化，从ROM开始让手机变得彻底流畅起来，这里要跟大家嘱咐的，也是我们多次重申的 一点：一定要选择普及率较高的Android机型，尤其是在国外的高普及度，像谷歌的Nexus系列手机被誉为亲儿子，也是因为它开放了源代码，在其他手 机为第三方ROM挠头的时候，Nexus系列已经早早的开始各种优化了。\n\nClockworkMod的LOGO\n\n　　其次，除了ROM资源，我们也要考虑到其他资源，比如内核，各大手机厂商的热门机型，内核资源也是不一样的，早期摩托罗拉的里程碑很开放，所以 有着大量可刷的内核，而到了后来摩托罗拉机型很封闭，可刷的内核资源就相当匮乏，虽然ROM很多，但刷来刷去都大同小异，刷机的乐趣锐减。这里谷歌的 Nexus系列再一次做了表率。\n\nAOSP网页截图\n\n　　再加上一些精简和设置操作，你会发现，你的手机流畅度完全可以翻几番，即使是官方有新的升级你可能都懒得去理，因为你知道，官方的升级不可能带 来刷机所给你的流畅度。这也是iOS玩家所不理解的刷机重启扣电池的乐趣。他们更不理解的是Android的流畅度怎么能超越iOS呢？实际上，这样的事 已经悄悄的发生le.","source":"_posts/android-e7-b3-bb-e7-bb-9f-e4-bc-98-e5-8c-96-e7-ad-96-e7-95-a5.md","raw":"---\ntitle: Android系统优化策略\nid: 1034\ncategories:\n  - Other\ndate: 2012-05-19 16:27:58\ntags:\n---\n\n智能手机的两大阵营iOS和Android已经逐渐显现出优势，并且已经形成了对立的阵营，Android用户并不理会iOS用户所谓的体验好 应用好是怎么个好法，而iOS用户则更不理解Android用户刷机重启抠电池的乐趣。在iOS用户眼中，Android的形象几乎可以用一个“卡”字来 代替。其实Android经过了这几年的发展，硬件水平已经有了很大的提高，再加上目前的优化，Android卡的情况已经有了很大程度的缓解，目前的双 核机型硬件配置十分强大，如果还要说卡，也就是因为厂商定制ROM的优化原因。\n\n浅谈Android系统优化策略\n\n　　其实Android的“卡”，可以得到彻底的解决，这就关系到了Android的优化问题，而今天我们就探讨下如何优化我们手中的 Android机型。在这里笔者也要提醒大家，选购Android机型一定要选择热门机型，只有热门机型才有足够丰富的优化资源供我们选择，切忌为了个性 选择偏门机型，Android热门机型再是街机，也不会比iPhone还街吧？\n\n　　刷机重启抠电池\n<!--more-->\n　　刷机是Android用户的一大乐趣，部分用户刷机是为了得到更好的易用性，比如小米的MIUI ROM，非常符合中国人的使用习惯，也有着足够丰富的个性化设定，是图省事的朋友刷机的好选择，不过对于追求高性能的朋友来说，MIUI的优化还有很大提 升空间，人们纷纷选择了对于ROM优化更加出色的CyanogenMod作为刷机的第一选择。\n\nMIUI ROM特色\n\n　　CyanogenMod系列目前主打的ROM有CM 7.2和CM 9两个，CM 7.2基于Android 2.3.7，而CM 9则基于Android 4.0.4，其中CM 7.2已经基本成熟，完美支持的机型很多，是大部分机友刷机的第一选择，CM 9官方的ROM支持机型并不多，民间高手也都进行了各个机型的移植，官方支持的机型兼容性相当不错，而移植情况并不乐观。\n\nCyanogenMod的LOGO\n\n　　CM系列ROM忠实于AOSP，在底层驱动方面做了很多努力，刷入之后就会感觉手机流畅了许多，同时也支持了更多的美化和手机自定义能力，比如 我们可以对手机的震动回馈做细致的调整，包括按下震动的强度，抬起震动的强度等，让手机虚拟按键给我们更为真实的回馈，在CM ROM中，类似的设定非常多。\n\nCM9 ROM截图\n\n　　目前大部分的ROM都是使用CM进行定制的，还有一部分是对官方原版ROM进行修改，仅有少部分的ROM是修改的AOSP的源码，这些ROM指 向都是谷歌Nexus系列的机型，比如GALAXY Nexus和Nexus S上的Codename和AOKP，就针对源码做了很多修改，让手机变得更流畅。\n\n刷内核效果很好\n\n　　仅仅刷手机的ROM是不够的，虽然多了很多自定义的功能，流畅度已经高于官方的ROM，但依旧有很大提升的空间，这时候我们就需要通过刷内核来进一步优化，刷内核所能带来的提升是相当明显的，但是对于刷内核大家还是要谨慎。\n\n国外著名论坛的内核发布区\n\n　　刷内核相比刷ROM，是一个很小的工程，你的手机不必要Wipe，也就是说不用删除手机内部的数据，刷一下也就几分钟的功夫，所以刷内核的时 候，大家完全可以多下几个内核，逐个进行测试，看看哪个内核更适合自己，就保留哪个内核。同时刷内核时我们要注意，内核需对应自己的手机版本，对应自己所 刷的ROM，否则会造成手机无法启动的现象，如果遇到无法启动的现象，再刷其他可用内核就可以恢复。\n\nAndroid机器人\n\n　　大家会问了，说了这么半天，刷内核到底都有什么作用呢？首先就是超频，大部分内核会默认提供降压超频，并拥有多种超频策略，来保证超频的情况下 更省电。其次，还提供更多调整，比如内存虚拟机的大小，颜色管理等等，甚至一个内核可以包括一些新的Linux的补丁，比如最新的Linux 3.3所集成的CPU频率补丁等等。\n\n刷内核工具\n\n　　事实上，一般的第三方ROM已经修改了手机的内核，达到了更流畅的目的，但ROM的制作速度远远比不上内核的调整速度，有时候一个ROM适用的 内核在一天之内可能多次更新，所以我们可以尝试不同的新内核，看看他们的超频是不是能给我们带来性能上质的提升，是不是能更省电，是不是能通过颜色调整让 我们看到更棒的画面等等。\n\n　　精简内置应用\n\n　　我相信Android用户通过不断的更换ROM和刷内核已经在流畅度上有了质的飞跃了，如果这时候你的手机已经比iPhone更流畅、更省电， 那么我们就可以收手了，如果你还不满意，我们还有其他的路可选，精简内置应用，就是一个可以大幅度提升流畅度的方法。像Google的服务就是大部分人精 简的对象。\n\n跑分是性能的体现\n\n　　Android系统和iOS与Windows Phone不同，这个系统拥有真正的后台运行能力，虽然iOS在推送方面做得很好，弥补了后台方面的不足，但是仍然无法与Android的真后台相比，但 是由于Android的程序优先级并不像iOS和Windows Phone那样，为了流畅让当前界面拥有最高优先级，所以我们就要把Android手机后台不必要的进程关掉，以获得最佳的性能。\n\nRE管理器截图\n\n　　那么精简内部应用就是很好的选择，因为在我们使用过程中，有许多Android内部应用程序是不必要的，而这些程序会在我们不用的时候悄悄的后台打开，对我们的使用造成影响。在精简时，我们需要用到root文件管理器，同时需要保证手机已经开启root权限。\n\nRE管理器截图\n\n　　进入system/app就可以进行精简了，我们需要把root管理器的当前权限设置成读写，并且修改需要删除的软件权限，打开软件执行操作的 权限，就可以对删除内置软件了，在精简前，大家需要对软件进行备份，或者备份整个ROM，如果你精简掉系统程序，可能会造成无法开机的情况，重刷ROM可 以解决，所以大家最好找到该机型、该ROM的精简列表，以避免重复劳动。\n\n还有其他优化\n\n　　经过以上多方面的优化，我相信大家都已经得到了一个较为干净、运行流畅的Android了，不过在很多程序中，我们还是会遇到卡顿的情况，对于一个极端追求流畅度的玩家来说，这样的情况是绝对不允许发生的，因为我们还有进一步优化的空间。\n\nCM超频选项\n\n　　之前我们介绍了CM系列ROM，而CM的ROM中有两个选项的勾选可以进一步的提高流畅度，但是会损失一些画面这些选项是贴图差值抖动和16位 透明度，贴图差值抖动这个选项需要关闭，这个选项关闭后可以提高流畅度，但是在滑动菜单时会有不容易被发现的画面损失，而16位透明度这个选项开启会大幅 度提高流畅度，但是一些纯色的透明效果画质会下降，比如Android滑动到边缘的越界效果。\n\nCM性能设置选项\n\n　　在Android 4.0的ROM中，也有不少选项可以提高程序的流畅度，比如程序的GPU加速，使用GPU对2D程序的界面进行渲染，有效减轻界面滑动对于CPU的负担， 同时还能让界面得到更好地渲染效果，不过这个选项会让有些程序出现兼容性问题，而Android也不能单独为某个程序开关GPU加速，所以GPU加速这个 功能让人又爱又恨。\n\nAndroid 4.0强制GPU加速\n\n　　在提到刷内核时，我们也提到了超频内核，超频内核在刷完后，会在ROM设置中提供给你多种内核超频策略选择，在大部分机型中，超频不会增加 CPU的耗电，因为厂商在CPU出厂前，为了保证CPU的稳定，为CPU设置了很安全的电压和频率，这显得过于保守，而在同等的电压下，CPU根据体质不 同或多或少还有可以压榨的空间，所以我们在保证稳定运行的情况下，还可以继续对CPU进行超频。\n\n　　优化策略总结\n\n　　本文我们从刷ROM开始提到了一些Android系统的优化，对于Android系统来说，流畅度是它相比其他系统最大的短板，其实 Android的大部分手机有着相当好的硬件，所以流畅度大幅度提升完全不是难事，而各个厂商在Android手机出厂前给手机定制的ROM并没有达到最 优的优化效果，或多或少都有可提升的空间。\n\n三星 GALAXY Nexus\n\n　　所以我们也可以根据自己用手机的需要对手机进行彻头彻尾的优化，从ROM开始让手机变得彻底流畅起来，这里要跟大家嘱咐的，也是我们多次重申的 一点：一定要选择普及率较高的Android机型，尤其是在国外的高普及度，像谷歌的Nexus系列手机被誉为亲儿子，也是因为它开放了源代码，在其他手 机为第三方ROM挠头的时候，Nexus系列已经早早的开始各种优化了。\n\nClockworkMod的LOGO\n\n　　其次，除了ROM资源，我们也要考虑到其他资源，比如内核，各大手机厂商的热门机型，内核资源也是不一样的，早期摩托罗拉的里程碑很开放，所以 有着大量可刷的内核，而到了后来摩托罗拉机型很封闭，可刷的内核资源就相当匮乏，虽然ROM很多，但刷来刷去都大同小异，刷机的乐趣锐减。这里谷歌的 Nexus系列再一次做了表率。\n\nAOSP网页截图\n\n　　再加上一些精简和设置操作，你会发现，你的手机流畅度完全可以翻几番，即使是官方有新的升级你可能都懒得去理，因为你知道，官方的升级不可能带 来刷机所给你的流畅度。这也是iOS玩家所不理解的刷机重启扣电池的乐趣。他们更不理解的是Android的流畅度怎么能超越iOS呢？实际上，这样的事 已经悄悄的发生le.","slug":"android-e7-b3-bb-e7-bb-9f-e4-bc-98-e5-8c-96-e7-ad-96-e7-95-a5","published":1,"updated":"2018-01-13T05:07:00.486Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjccw7x7a000baqcrxg0x4osh","content":"<p>智能手机的两大阵营iOS和Android已经逐渐显现出优势，并且已经形成了对立的阵营，Android用户并不理会iOS用户所谓的体验好 应用好是怎么个好法，而iOS用户则更不理解Android用户刷机重启抠电池的乐趣。在iOS用户眼中，Android的形象几乎可以用一个“卡”字来 代替。其实Android经过了这几年的发展，硬件水平已经有了很大的提高，再加上目前的优化，Android卡的情况已经有了很大程度的缓解，目前的双 核机型硬件配置十分强大，如果还要说卡，也就是因为厂商定制ROM的优化原因。</p>\n<p>浅谈Android系统优化策略</p>\n<p>　　其实Android的“卡”，可以得到彻底的解决，这就关系到了Android的优化问题，而今天我们就探讨下如何优化我们手中的 Android机型。在这里笔者也要提醒大家，选购Android机型一定要选择热门机型，只有热门机型才有足够丰富的优化资源供我们选择，切忌为了个性 选择偏门机型，Android热门机型再是街机，也不会比iPhone还街吧？</p>\n<p>　　刷机重启抠电池<br><a id=\"more\"></a><br>　　刷机是Android用户的一大乐趣，部分用户刷机是为了得到更好的易用性，比如小米的MIUI ROM，非常符合中国人的使用习惯，也有着足够丰富的个性化设定，是图省事的朋友刷机的好选择，不过对于追求高性能的朋友来说，MIUI的优化还有很大提 升空间，人们纷纷选择了对于ROM优化更加出色的CyanogenMod作为刷机的第一选择。</p>\n<p>MIUI ROM特色</p>\n<p>　　CyanogenMod系列目前主打的ROM有CM 7.2和CM 9两个，CM 7.2基于Android 2.3.7，而CM 9则基于Android 4.0.4，其中CM 7.2已经基本成熟，完美支持的机型很多，是大部分机友刷机的第一选择，CM 9官方的ROM支持机型并不多，民间高手也都进行了各个机型的移植，官方支持的机型兼容性相当不错，而移植情况并不乐观。</p>\n<p>CyanogenMod的LOGO</p>\n<p>　　CM系列ROM忠实于AOSP，在底层驱动方面做了很多努力，刷入之后就会感觉手机流畅了许多，同时也支持了更多的美化和手机自定义能力，比如 我们可以对手机的震动回馈做细致的调整，包括按下震动的强度，抬起震动的强度等，让手机虚拟按键给我们更为真实的回馈，在CM ROM中，类似的设定非常多。</p>\n<p>CM9 ROM截图</p>\n<p>　　目前大部分的ROM都是使用CM进行定制的，还有一部分是对官方原版ROM进行修改，仅有少部分的ROM是修改的AOSP的源码，这些ROM指 向都是谷歌Nexus系列的机型，比如GALAXY Nexus和Nexus S上的Codename和AOKP，就针对源码做了很多修改，让手机变得更流畅。</p>\n<p>刷内核效果很好</p>\n<p>　　仅仅刷手机的ROM是不够的，虽然多了很多自定义的功能，流畅度已经高于官方的ROM，但依旧有很大提升的空间，这时候我们就需要通过刷内核来进一步优化，刷内核所能带来的提升是相当明显的，但是对于刷内核大家还是要谨慎。</p>\n<p>国外著名论坛的内核发布区</p>\n<p>　　刷内核相比刷ROM，是一个很小的工程，你的手机不必要Wipe，也就是说不用删除手机内部的数据，刷一下也就几分钟的功夫，所以刷内核的时 候，大家完全可以多下几个内核，逐个进行测试，看看哪个内核更适合自己，就保留哪个内核。同时刷内核时我们要注意，内核需对应自己的手机版本，对应自己所 刷的ROM，否则会造成手机无法启动的现象，如果遇到无法启动的现象，再刷其他可用内核就可以恢复。</p>\n<p>Android机器人</p>\n<p>　　大家会问了，说了这么半天，刷内核到底都有什么作用呢？首先就是超频，大部分内核会默认提供降压超频，并拥有多种超频策略，来保证超频的情况下 更省电。其次，还提供更多调整，比如内存虚拟机的大小，颜色管理等等，甚至一个内核可以包括一些新的Linux的补丁，比如最新的Linux 3.3所集成的CPU频率补丁等等。</p>\n<p>刷内核工具</p>\n<p>　　事实上，一般的第三方ROM已经修改了手机的内核，达到了更流畅的目的，但ROM的制作速度远远比不上内核的调整速度，有时候一个ROM适用的 内核在一天之内可能多次更新，所以我们可以尝试不同的新内核，看看他们的超频是不是能给我们带来性能上质的提升，是不是能更省电，是不是能通过颜色调整让 我们看到更棒的画面等等。</p>\n<p>　　精简内置应用</p>\n<p>　　我相信Android用户通过不断的更换ROM和刷内核已经在流畅度上有了质的飞跃了，如果这时候你的手机已经比iPhone更流畅、更省电， 那么我们就可以收手了，如果你还不满意，我们还有其他的路可选，精简内置应用，就是一个可以大幅度提升流畅度的方法。像Google的服务就是大部分人精 简的对象。</p>\n<p>跑分是性能的体现</p>\n<p>　　Android系统和iOS与Windows Phone不同，这个系统拥有真正的后台运行能力，虽然iOS在推送方面做得很好，弥补了后台方面的不足，但是仍然无法与Android的真后台相比，但 是由于Android的程序优先级并不像iOS和Windows Phone那样，为了流畅让当前界面拥有最高优先级，所以我们就要把Android手机后台不必要的进程关掉，以获得最佳的性能。</p>\n<p>RE管理器截图</p>\n<p>　　那么精简内部应用就是很好的选择，因为在我们使用过程中，有许多Android内部应用程序是不必要的，而这些程序会在我们不用的时候悄悄的后台打开，对我们的使用造成影响。在精简时，我们需要用到root文件管理器，同时需要保证手机已经开启root权限。</p>\n<p>RE管理器截图</p>\n<p>　　进入system/app就可以进行精简了，我们需要把root管理器的当前权限设置成读写，并且修改需要删除的软件权限，打开软件执行操作的 权限，就可以对删除内置软件了，在精简前，大家需要对软件进行备份，或者备份整个ROM，如果你精简掉系统程序，可能会造成无法开机的情况，重刷ROM可 以解决，所以大家最好找到该机型、该ROM的精简列表，以避免重复劳动。</p>\n<p>还有其他优化</p>\n<p>　　经过以上多方面的优化，我相信大家都已经得到了一个较为干净、运行流畅的Android了，不过在很多程序中，我们还是会遇到卡顿的情况，对于一个极端追求流畅度的玩家来说，这样的情况是绝对不允许发生的，因为我们还有进一步优化的空间。</p>\n<p>CM超频选项</p>\n<p>　　之前我们介绍了CM系列ROM，而CM的ROM中有两个选项的勾选可以进一步的提高流畅度，但是会损失一些画面这些选项是贴图差值抖动和16位 透明度，贴图差值抖动这个选项需要关闭，这个选项关闭后可以提高流畅度，但是在滑动菜单时会有不容易被发现的画面损失，而16位透明度这个选项开启会大幅 度提高流畅度，但是一些纯色的透明效果画质会下降，比如Android滑动到边缘的越界效果。</p>\n<p>CM性能设置选项</p>\n<p>　　在Android 4.0的ROM中，也有不少选项可以提高程序的流畅度，比如程序的GPU加速，使用GPU对2D程序的界面进行渲染，有效减轻界面滑动对于CPU的负担， 同时还能让界面得到更好地渲染效果，不过这个选项会让有些程序出现兼容性问题，而Android也不能单独为某个程序开关GPU加速，所以GPU加速这个 功能让人又爱又恨。</p>\n<p>Android 4.0强制GPU加速</p>\n<p>　　在提到刷内核时，我们也提到了超频内核，超频内核在刷完后，会在ROM设置中提供给你多种内核超频策略选择，在大部分机型中，超频不会增加 CPU的耗电，因为厂商在CPU出厂前，为了保证CPU的稳定，为CPU设置了很安全的电压和频率，这显得过于保守，而在同等的电压下，CPU根据体质不 同或多或少还有可以压榨的空间，所以我们在保证稳定运行的情况下，还可以继续对CPU进行超频。</p>\n<p>　　优化策略总结</p>\n<p>　　本文我们从刷ROM开始提到了一些Android系统的优化，对于Android系统来说，流畅度是它相比其他系统最大的短板，其实 Android的大部分手机有着相当好的硬件，所以流畅度大幅度提升完全不是难事，而各个厂商在Android手机出厂前给手机定制的ROM并没有达到最 优的优化效果，或多或少都有可提升的空间。</p>\n<p>三星 GALAXY Nexus</p>\n<p>　　所以我们也可以根据自己用手机的需要对手机进行彻头彻尾的优化，从ROM开始让手机变得彻底流畅起来，这里要跟大家嘱咐的，也是我们多次重申的 一点：一定要选择普及率较高的Android机型，尤其是在国外的高普及度，像谷歌的Nexus系列手机被誉为亲儿子，也是因为它开放了源代码，在其他手 机为第三方ROM挠头的时候，Nexus系列已经早早的开始各种优化了。</p>\n<p>ClockworkMod的LOGO</p>\n<p>　　其次，除了ROM资源，我们也要考虑到其他资源，比如内核，各大手机厂商的热门机型，内核资源也是不一样的，早期摩托罗拉的里程碑很开放，所以 有着大量可刷的内核，而到了后来摩托罗拉机型很封闭，可刷的内核资源就相当匮乏，虽然ROM很多，但刷来刷去都大同小异，刷机的乐趣锐减。这里谷歌的 Nexus系列再一次做了表率。</p>\n<p>AOSP网页截图</p>\n<p>　　再加上一些精简和设置操作，你会发现，你的手机流畅度完全可以翻几番，即使是官方有新的升级你可能都懒得去理，因为你知道，官方的升级不可能带 来刷机所给你的流畅度。这也是iOS玩家所不理解的刷机重启扣电池的乐趣。他们更不理解的是Android的流畅度怎么能超越iOS呢？实际上，这样的事 已经悄悄的发生le.</p>\n","site":{"data":{}},"excerpt":"<p>智能手机的两大阵营iOS和Android已经逐渐显现出优势，并且已经形成了对立的阵营，Android用户并不理会iOS用户所谓的体验好 应用好是怎么个好法，而iOS用户则更不理解Android用户刷机重启抠电池的乐趣。在iOS用户眼中，Android的形象几乎可以用一个“卡”字来 代替。其实Android经过了这几年的发展，硬件水平已经有了很大的提高，再加上目前的优化，Android卡的情况已经有了很大程度的缓解，目前的双 核机型硬件配置十分强大，如果还要说卡，也就是因为厂商定制ROM的优化原因。</p>\n<p>浅谈Android系统优化策略</p>\n<p>　　其实Android的“卡”，可以得到彻底的解决，这就关系到了Android的优化问题，而今天我们就探讨下如何优化我们手中的 Android机型。在这里笔者也要提醒大家，选购Android机型一定要选择热门机型，只有热门机型才有足够丰富的优化资源供我们选择，切忌为了个性 选择偏门机型，Android热门机型再是街机，也不会比iPhone还街吧？</p>\n<p>　　刷机重启抠电池<br>","more":"<br>　　刷机是Android用户的一大乐趣，部分用户刷机是为了得到更好的易用性，比如小米的MIUI ROM，非常符合中国人的使用习惯，也有着足够丰富的个性化设定，是图省事的朋友刷机的好选择，不过对于追求高性能的朋友来说，MIUI的优化还有很大提 升空间，人们纷纷选择了对于ROM优化更加出色的CyanogenMod作为刷机的第一选择。</p>\n<p>MIUI ROM特色</p>\n<p>　　CyanogenMod系列目前主打的ROM有CM 7.2和CM 9两个，CM 7.2基于Android 2.3.7，而CM 9则基于Android 4.0.4，其中CM 7.2已经基本成熟，完美支持的机型很多，是大部分机友刷机的第一选择，CM 9官方的ROM支持机型并不多，民间高手也都进行了各个机型的移植，官方支持的机型兼容性相当不错，而移植情况并不乐观。</p>\n<p>CyanogenMod的LOGO</p>\n<p>　　CM系列ROM忠实于AOSP，在底层驱动方面做了很多努力，刷入之后就会感觉手机流畅了许多，同时也支持了更多的美化和手机自定义能力，比如 我们可以对手机的震动回馈做细致的调整，包括按下震动的强度，抬起震动的强度等，让手机虚拟按键给我们更为真实的回馈，在CM ROM中，类似的设定非常多。</p>\n<p>CM9 ROM截图</p>\n<p>　　目前大部分的ROM都是使用CM进行定制的，还有一部分是对官方原版ROM进行修改，仅有少部分的ROM是修改的AOSP的源码，这些ROM指 向都是谷歌Nexus系列的机型，比如GALAXY Nexus和Nexus S上的Codename和AOKP，就针对源码做了很多修改，让手机变得更流畅。</p>\n<p>刷内核效果很好</p>\n<p>　　仅仅刷手机的ROM是不够的，虽然多了很多自定义的功能，流畅度已经高于官方的ROM，但依旧有很大提升的空间，这时候我们就需要通过刷内核来进一步优化，刷内核所能带来的提升是相当明显的，但是对于刷内核大家还是要谨慎。</p>\n<p>国外著名论坛的内核发布区</p>\n<p>　　刷内核相比刷ROM，是一个很小的工程，你的手机不必要Wipe，也就是说不用删除手机内部的数据，刷一下也就几分钟的功夫，所以刷内核的时 候，大家完全可以多下几个内核，逐个进行测试，看看哪个内核更适合自己，就保留哪个内核。同时刷内核时我们要注意，内核需对应自己的手机版本，对应自己所 刷的ROM，否则会造成手机无法启动的现象，如果遇到无法启动的现象，再刷其他可用内核就可以恢复。</p>\n<p>Android机器人</p>\n<p>　　大家会问了，说了这么半天，刷内核到底都有什么作用呢？首先就是超频，大部分内核会默认提供降压超频，并拥有多种超频策略，来保证超频的情况下 更省电。其次，还提供更多调整，比如内存虚拟机的大小，颜色管理等等，甚至一个内核可以包括一些新的Linux的补丁，比如最新的Linux 3.3所集成的CPU频率补丁等等。</p>\n<p>刷内核工具</p>\n<p>　　事实上，一般的第三方ROM已经修改了手机的内核，达到了更流畅的目的，但ROM的制作速度远远比不上内核的调整速度，有时候一个ROM适用的 内核在一天之内可能多次更新，所以我们可以尝试不同的新内核，看看他们的超频是不是能给我们带来性能上质的提升，是不是能更省电，是不是能通过颜色调整让 我们看到更棒的画面等等。</p>\n<p>　　精简内置应用</p>\n<p>　　我相信Android用户通过不断的更换ROM和刷内核已经在流畅度上有了质的飞跃了，如果这时候你的手机已经比iPhone更流畅、更省电， 那么我们就可以收手了，如果你还不满意，我们还有其他的路可选，精简内置应用，就是一个可以大幅度提升流畅度的方法。像Google的服务就是大部分人精 简的对象。</p>\n<p>跑分是性能的体现</p>\n<p>　　Android系统和iOS与Windows Phone不同，这个系统拥有真正的后台运行能力，虽然iOS在推送方面做得很好，弥补了后台方面的不足，但是仍然无法与Android的真后台相比，但 是由于Android的程序优先级并不像iOS和Windows Phone那样，为了流畅让当前界面拥有最高优先级，所以我们就要把Android手机后台不必要的进程关掉，以获得最佳的性能。</p>\n<p>RE管理器截图</p>\n<p>　　那么精简内部应用就是很好的选择，因为在我们使用过程中，有许多Android内部应用程序是不必要的，而这些程序会在我们不用的时候悄悄的后台打开，对我们的使用造成影响。在精简时，我们需要用到root文件管理器，同时需要保证手机已经开启root权限。</p>\n<p>RE管理器截图</p>\n<p>　　进入system/app就可以进行精简了，我们需要把root管理器的当前权限设置成读写，并且修改需要删除的软件权限，打开软件执行操作的 权限，就可以对删除内置软件了，在精简前，大家需要对软件进行备份，或者备份整个ROM，如果你精简掉系统程序，可能会造成无法开机的情况，重刷ROM可 以解决，所以大家最好找到该机型、该ROM的精简列表，以避免重复劳动。</p>\n<p>还有其他优化</p>\n<p>　　经过以上多方面的优化，我相信大家都已经得到了一个较为干净、运行流畅的Android了，不过在很多程序中，我们还是会遇到卡顿的情况，对于一个极端追求流畅度的玩家来说，这样的情况是绝对不允许发生的，因为我们还有进一步优化的空间。</p>\n<p>CM超频选项</p>\n<p>　　之前我们介绍了CM系列ROM，而CM的ROM中有两个选项的勾选可以进一步的提高流畅度，但是会损失一些画面这些选项是贴图差值抖动和16位 透明度，贴图差值抖动这个选项需要关闭，这个选项关闭后可以提高流畅度，但是在滑动菜单时会有不容易被发现的画面损失，而16位透明度这个选项开启会大幅 度提高流畅度，但是一些纯色的透明效果画质会下降，比如Android滑动到边缘的越界效果。</p>\n<p>CM性能设置选项</p>\n<p>　　在Android 4.0的ROM中，也有不少选项可以提高程序的流畅度，比如程序的GPU加速，使用GPU对2D程序的界面进行渲染，有效减轻界面滑动对于CPU的负担， 同时还能让界面得到更好地渲染效果，不过这个选项会让有些程序出现兼容性问题，而Android也不能单独为某个程序开关GPU加速，所以GPU加速这个 功能让人又爱又恨。</p>\n<p>Android 4.0强制GPU加速</p>\n<p>　　在提到刷内核时，我们也提到了超频内核，超频内核在刷完后，会在ROM设置中提供给你多种内核超频策略选择，在大部分机型中，超频不会增加 CPU的耗电，因为厂商在CPU出厂前，为了保证CPU的稳定，为CPU设置了很安全的电压和频率，这显得过于保守，而在同等的电压下，CPU根据体质不 同或多或少还有可以压榨的空间，所以我们在保证稳定运行的情况下，还可以继续对CPU进行超频。</p>\n<p>　　优化策略总结</p>\n<p>　　本文我们从刷ROM开始提到了一些Android系统的优化，对于Android系统来说，流畅度是它相比其他系统最大的短板，其实 Android的大部分手机有着相当好的硬件，所以流畅度大幅度提升完全不是难事，而各个厂商在Android手机出厂前给手机定制的ROM并没有达到最 优的优化效果，或多或少都有可提升的空间。</p>\n<p>三星 GALAXY Nexus</p>\n<p>　　所以我们也可以根据自己用手机的需要对手机进行彻头彻尾的优化，从ROM开始让手机变得彻底流畅起来，这里要跟大家嘱咐的，也是我们多次重申的 一点：一定要选择普及率较高的Android机型，尤其是在国外的高普及度，像谷歌的Nexus系列手机被誉为亲儿子，也是因为它开放了源代码，在其他手 机为第三方ROM挠头的时候，Nexus系列已经早早的开始各种优化了。</p>\n<p>ClockworkMod的LOGO</p>\n<p>　　其次，除了ROM资源，我们也要考虑到其他资源，比如内核，各大手机厂商的热门机型，内核资源也是不一样的，早期摩托罗拉的里程碑很开放，所以 有着大量可刷的内核，而到了后来摩托罗拉机型很封闭，可刷的内核资源就相当匮乏，虽然ROM很多，但刷来刷去都大同小异，刷机的乐趣锐减。这里谷歌的 Nexus系列再一次做了表率。</p>\n<p>AOSP网页截图</p>\n<p>　　再加上一些精简和设置操作，你会发现，你的手机流畅度完全可以翻几番，即使是官方有新的升级你可能都懒得去理，因为你知道，官方的升级不可能带 来刷机所给你的流畅度。这也是iOS玩家所不理解的刷机重启扣电池的乐趣。他们更不理解的是Android的流畅度怎么能超越iOS呢？实际上，这样的事 已经悄悄的发生le.</p>"},{"title":"Bitmap 算法解释与应用","id":"2514","date":"2016-04-04T09:38:23.000Z","_content":"\n有这样一个问题：给40亿个不重复的unsigned int的整数，没排序。再给一个数，快速判断这个数是否存在40亿个整数中？内存限制2G。\n\n40亿个数，我们先看内存占用：（40亿*4）/1024/1024/1024=14.9G （int 占4字节32bit）,所以用传统的内存排序肯定不可以。\n\n> 这里要用到Bitmap算法，Bitmap就是用一个bit位来映射某个元素的value值，key则是该元素值\n\n就是用一个bit位来标识一个int整数，这样需要的内存空间为：40亿/8/1024/1024=476M。\n\n假设我们要对5个不重复的数（4，7，2，5，3）排序。确定最大值是7，数值范围是0~7，共8个数，需要8bit，即1byte。\n\n从0计数，从右往左，即 \n00000000  -->  76543210\n\n给这5个数赋值：\n00010000 (第一个数4)\n10010000 (第二个数7)\n10010100 (第三个数2)\n10110100 (第四个数5)\n10111100 (第五个数3)\n\n最终结果为10111100，遍历这8个bit位，将值为1输出，排序结果为 （7，5，4，3，2）\n\nJava中对应的实现是BitSet类，非线程安全\n\n`public static void main(String[] args) { \n    int[] intArray = { 4, 7, 2, 5, 3 };\n    BitSet bitSet = new BitSet(8);\n\n    for (int i = 0; i < intArray.length; i++) {\n        bitSet.set(intArray[i], true);\n    }\n\n    System.out.println(bitSet);\n}`\n\n其它说明：\nBitmap排序需要的时间复杂度和空间复杂度依赖于数据中最大的数字比如7，因此空间上需要1个字节大小的内存，时间上需要遍历完整个数组。当数据类似（1，1000，10万）只有3个数据的时候，用bitmap时间复杂度和空间复杂度相当大，只有当数据比较密集时才有优势。\n\n同类问题：\n【1】已知某个文件内包含一些电话号码，每个号码为8个数字，统计不同号码的个数。<!--more-->\n解决方法： 8位最多99999999,占用100,000,000个bit,大小为12MB，这样用12M内存就表示来所有8位数的电话。\n\n【2】2.5亿个整数中找出不重复的整数的个数，内存空间不足以同时容纳这2.5亿个整数。\n解决方法： 将bitmap扩展一下，用2bit表示一个数即可，0表示未出现，1表示出现一次，2表示出现2次及以上，在遍历这些数的时候，如果对应位置的值是0，则将其置为1；如果是1，将其置为2；如果是2，则保持不变。或者我们不用2bit来进行表示，我们用两个bit-map即可模拟实现这个2bit-map，都是一样的道理。\n\n【3】对10亿个不重复的整数进行排序。\n【4】找出10亿个数字中重复的数字。\n解决方法：bitmap初始化数据，当发现数组中的值是1，则判断出该数字是重复出现的。\n\n【5】一个序列里除了一个元素，其他元素都会重复出现3次，设计一个时间复杂度与空间复杂度最低的算法，找出这个不重复的元素。\n`\n    public static void main(String[] args) {  \n        int[] list = {2, 3, 6, 3, 2, 5, 3, 2, 6, 6, 9, 9, 7, 7}; \n        int len = list.length * 2;  \n        BitSet bs = new BitSet(len);  \n\n        for (int i = 0; i < list.length; i++) {  \n            int n = 2 * list[i];  \n            boolean b1 = bs.get(n);  \n            boolean b2 = bs.get(n + 1);  \n            if (!b1 && !b2) { // 00  \n                bs.set(n, true);  \n                bs.set(n + 1, false);  \n            }  \n            else if (b1 && !b2) { // 01  \n                bs.set(n + 1, true);  \n                bs.set(n, false);  \n            }  \n            else if (!b1 && b2) { // 10  \n                bs.set(n, n + 1, true);  \n            }  \n        }  \n        for (int i = 0; i < bs.length(); i += 2) {  \n            boolean b1 = bs.get(i);  \n            boolean b2 = bs.get(i + 1);  \n            if (!b1 && !b2) { // 00  \n                // 0次  \n            }  \n            else if (b1 && !b2) { // 01  \n                System.out.println(i / 2 + \"一次\");  \n            }  \n            else if (!b1 && b2) { // 10  \n                System.out.println(i / 2 + \"两次\");  \n            }  \n            else if (b1 && b2) { // 10  \n                System.out.println(i / 2 + \"三次\");  \n            }  \n        }  \n    } `","source":"_posts/bitmap-e7-ae-97-e6-b3-95.md","raw":"---\ntitle: Bitmap 算法解释与应用\ntags:\n  - 算法\nid: 2514\ncategories:\n  - Algorithm\ndate: 2016-04-04 17:38:23\n---\n\n有这样一个问题：给40亿个不重复的unsigned int的整数，没排序。再给一个数，快速判断这个数是否存在40亿个整数中？内存限制2G。\n\n40亿个数，我们先看内存占用：（40亿*4）/1024/1024/1024=14.9G （int 占4字节32bit）,所以用传统的内存排序肯定不可以。\n\n> 这里要用到Bitmap算法，Bitmap就是用一个bit位来映射某个元素的value值，key则是该元素值\n\n就是用一个bit位来标识一个int整数，这样需要的内存空间为：40亿/8/1024/1024=476M。\n\n假设我们要对5个不重复的数（4，7，2，5，3）排序。确定最大值是7，数值范围是0~7，共8个数，需要8bit，即1byte。\n\n从0计数，从右往左，即 \n00000000  -->  76543210\n\n给这5个数赋值：\n00010000 (第一个数4)\n10010000 (第二个数7)\n10010100 (第三个数2)\n10110100 (第四个数5)\n10111100 (第五个数3)\n\n最终结果为10111100，遍历这8个bit位，将值为1输出，排序结果为 （7，5，4，3，2）\n\nJava中对应的实现是BitSet类，非线程安全\n\n`public static void main(String[] args) { \n    int[] intArray = { 4, 7, 2, 5, 3 };\n    BitSet bitSet = new BitSet(8);\n\n    for (int i = 0; i < intArray.length; i++) {\n        bitSet.set(intArray[i], true);\n    }\n\n    System.out.println(bitSet);\n}`\n\n其它说明：\nBitmap排序需要的时间复杂度和空间复杂度依赖于数据中最大的数字比如7，因此空间上需要1个字节大小的内存，时间上需要遍历完整个数组。当数据类似（1，1000，10万）只有3个数据的时候，用bitmap时间复杂度和空间复杂度相当大，只有当数据比较密集时才有优势。\n\n同类问题：\n【1】已知某个文件内包含一些电话号码，每个号码为8个数字，统计不同号码的个数。<!--more-->\n解决方法： 8位最多99999999,占用100,000,000个bit,大小为12MB，这样用12M内存就表示来所有8位数的电话。\n\n【2】2.5亿个整数中找出不重复的整数的个数，内存空间不足以同时容纳这2.5亿个整数。\n解决方法： 将bitmap扩展一下，用2bit表示一个数即可，0表示未出现，1表示出现一次，2表示出现2次及以上，在遍历这些数的时候，如果对应位置的值是0，则将其置为1；如果是1，将其置为2；如果是2，则保持不变。或者我们不用2bit来进行表示，我们用两个bit-map即可模拟实现这个2bit-map，都是一样的道理。\n\n【3】对10亿个不重复的整数进行排序。\n【4】找出10亿个数字中重复的数字。\n解决方法：bitmap初始化数据，当发现数组中的值是1，则判断出该数字是重复出现的。\n\n【5】一个序列里除了一个元素，其他元素都会重复出现3次，设计一个时间复杂度与空间复杂度最低的算法，找出这个不重复的元素。\n`\n    public static void main(String[] args) {  \n        int[] list = {2, 3, 6, 3, 2, 5, 3, 2, 6, 6, 9, 9, 7, 7}; \n        int len = list.length * 2;  \n        BitSet bs = new BitSet(len);  \n\n        for (int i = 0; i < list.length; i++) {  \n            int n = 2 * list[i];  \n            boolean b1 = bs.get(n);  \n            boolean b2 = bs.get(n + 1);  \n            if (!b1 && !b2) { // 00  \n                bs.set(n, true);  \n                bs.set(n + 1, false);  \n            }  \n            else if (b1 && !b2) { // 01  \n                bs.set(n + 1, true);  \n                bs.set(n, false);  \n            }  \n            else if (!b1 && b2) { // 10  \n                bs.set(n, n + 1, true);  \n            }  \n        }  \n        for (int i = 0; i < bs.length(); i += 2) {  \n            boolean b1 = bs.get(i);  \n            boolean b2 = bs.get(i + 1);  \n            if (!b1 && !b2) { // 00  \n                // 0次  \n            }  \n            else if (b1 && !b2) { // 01  \n                System.out.println(i / 2 + \"一次\");  \n            }  \n            else if (!b1 && b2) { // 10  \n                System.out.println(i / 2 + \"两次\");  \n            }  \n            else if (b1 && b2) { // 10  \n                System.out.println(i / 2 + \"三次\");  \n            }  \n        }  \n    } `","slug":"bitmap-e7-ae-97-e6-b3-95","published":1,"updated":"2018-01-13T05:07:00.468Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjccw7x7d000daqcrbciywkqy","content":"<p>有这样一个问题：给40亿个不重复的unsigned int的整数，没排序。再给一个数，快速判断这个数是否存在40亿个整数中？内存限制2G。</p>\n<p>40亿个数，我们先看内存占用：（40亿*4）/1024/1024/1024=14.9G （int 占4字节32bit）,所以用传统的内存排序肯定不可以。</p>\n<blockquote>\n<p>这里要用到Bitmap算法，Bitmap就是用一个bit位来映射某个元素的value值，key则是该元素值</p>\n</blockquote>\n<p>就是用一个bit位来标识一个int整数，这样需要的内存空间为：40亿/8/1024/1024=476M。</p>\n<p>假设我们要对5个不重复的数（4，7，2，5，3）排序。确定最大值是7，数值范围是0~7，共8个数，需要8bit，即1byte。</p>\n<p>从0计数，从右往左，即<br>00000000  –&gt;  76543210</p>\n<p>给这5个数赋值：<br>00010000 (第一个数4)<br>10010000 (第二个数7)<br>10010100 (第三个数2)<br>10110100 (第四个数5)<br>10111100 (第五个数3)</p>\n<p>最终结果为10111100，遍历这8个bit位，将值为1输出，排序结果为 （7，5，4，3，2）</p>\n<p>Java中对应的实现是BitSet类，非线程安全</p>\n<p>`public static void main(String[] args) {<br>    int[] intArray = { 4, 7, 2, 5, 3 };<br>    BitSet bitSet = new BitSet(8);</p>\n<pre><code>for (int i = 0; i &lt; intArray.length; i++) {\n    bitSet.set(intArray[i], true);\n}\n\nSystem.out.println(bitSet);\n</code></pre><p>}`</p>\n<p>其它说明：<br>Bitmap排序需要的时间复杂度和空间复杂度依赖于数据中最大的数字比如7，因此空间上需要1个字节大小的内存，时间上需要遍历完整个数组。当数据类似（1，1000，10万）只有3个数据的时候，用bitmap时间复杂度和空间复杂度相当大，只有当数据比较密集时才有优势。</p>\n<p>同类问题：<br>【1】已知某个文件内包含一些电话号码，每个号码为8个数字，统计不同号码的个数。<a id=\"more\"></a><br>解决方法： 8位最多99999999,占用100,000,000个bit,大小为12MB，这样用12M内存就表示来所有8位数的电话。</p>\n<p>【2】2.5亿个整数中找出不重复的整数的个数，内存空间不足以同时容纳这2.5亿个整数。<br>解决方法： 将bitmap扩展一下，用2bit表示一个数即可，0表示未出现，1表示出现一次，2表示出现2次及以上，在遍历这些数的时候，如果对应位置的值是0，则将其置为1；如果是1，将其置为2；如果是2，则保持不变。或者我们不用2bit来进行表示，我们用两个bit-map即可模拟实现这个2bit-map，都是一样的道理。</p>\n<p>【3】对10亿个不重复的整数进行排序。<br>【4】找出10亿个数字中重复的数字。<br>解决方法：bitmap初始化数据，当发现数组中的值是1，则判断出该数字是重复出现的。</p>\n<p>【5】一个序列里除了一个元素，其他元素都会重复出现3次，设计一个时间复杂度与空间复杂度最低的算法，找出这个不重复的元素。<br>`<br>    public static void main(String[] args) {<br>        int[] list = {2, 3, 6, 3, 2, 5, 3, 2, 6, 6, 9, 9, 7, 7};<br>        int len = list.length * 2;<br>        BitSet bs = new BitSet(len);  </p>\n<pre><code>    for (int i = 0; i &lt; list.length; i++) {  \n        int n = 2 * list[i];  \n        boolean b1 = bs.get(n);  \n        boolean b2 = bs.get(n + 1);  \n        if (!b1 &amp;&amp; !b2) { // 00  \n            bs.set(n, true);  \n            bs.set(n + 1, false);  \n        }  \n        else if (b1 &amp;&amp; !b2) { // 01  \n            bs.set(n + 1, true);  \n            bs.set(n, false);  \n        }  \n        else if (!b1 &amp;&amp; b2) { // 10  \n            bs.set(n, n + 1, true);  \n        }  \n    }  \n    for (int i = 0; i &lt; bs.length(); i += 2) {  \n        boolean b1 = bs.get(i);  \n        boolean b2 = bs.get(i + 1);  \n        if (!b1 &amp;&amp; !b2) { // 00  \n            // 0次  \n        }  \n        else if (b1 &amp;&amp; !b2) { // 01  \n            System.out.println(i / 2 + &quot;一次&quot;);  \n        }  \n        else if (!b1 &amp;&amp; b2) { // 10  \n            System.out.println(i / 2 + &quot;两次&quot;);  \n        }  \n        else if (b1 &amp;&amp; b2) { // 10  \n            System.out.println(i / 2 + &quot;三次&quot;);  \n        }  \n    }  \n} `\n</code></pre>","site":{"data":{}},"excerpt":"<p>有这样一个问题：给40亿个不重复的unsigned int的整数，没排序。再给一个数，快速判断这个数是否存在40亿个整数中？内存限制2G。</p>\n<p>40亿个数，我们先看内存占用：（40亿*4）/1024/1024/1024=14.9G （int 占4字节32bit）,所以用传统的内存排序肯定不可以。</p>\n<blockquote>\n<p>这里要用到Bitmap算法，Bitmap就是用一个bit位来映射某个元素的value值，key则是该元素值</p>\n</blockquote>\n<p>就是用一个bit位来标识一个int整数，这样需要的内存空间为：40亿/8/1024/1024=476M。</p>\n<p>假设我们要对5个不重复的数（4，7，2，5，3）排序。确定最大值是7，数值范围是0~7，共8个数，需要8bit，即1byte。</p>\n<p>从0计数，从右往左，即<br>00000000  –&gt;  76543210</p>\n<p>给这5个数赋值：<br>00010000 (第一个数4)<br>10010000 (第二个数7)<br>10010100 (第三个数2)<br>10110100 (第四个数5)<br>10111100 (第五个数3)</p>\n<p>最终结果为10111100，遍历这8个bit位，将值为1输出，排序结果为 （7，5，4，3，2）</p>\n<p>Java中对应的实现是BitSet类，非线程安全</p>\n<p>`public static void main(String[] args) {<br>    int[] intArray = { 4, 7, 2, 5, 3 };<br>    BitSet bitSet = new BitSet(8);</p>\n<pre><code>for (int i = 0; i &lt; intArray.length; i++) {\n    bitSet.set(intArray[i], true);\n}\n\nSystem.out.println(bitSet);\n</code></pre><p>}`</p>\n<p>其它说明：<br>Bitmap排序需要的时间复杂度和空间复杂度依赖于数据中最大的数字比如7，因此空间上需要1个字节大小的内存，时间上需要遍历完整个数组。当数据类似（1，1000，10万）只有3个数据的时候，用bitmap时间复杂度和空间复杂度相当大，只有当数据比较密集时才有优势。</p>\n<p>同类问题：<br>【1】已知某个文件内包含一些电话号码，每个号码为8个数字，统计不同号码的个数。","more":"<br>解决方法： 8位最多99999999,占用100,000,000个bit,大小为12MB，这样用12M内存就表示来所有8位数的电话。</p>\n<p>【2】2.5亿个整数中找出不重复的整数的个数，内存空间不足以同时容纳这2.5亿个整数。<br>解决方法： 将bitmap扩展一下，用2bit表示一个数即可，0表示未出现，1表示出现一次，2表示出现2次及以上，在遍历这些数的时候，如果对应位置的值是0，则将其置为1；如果是1，将其置为2；如果是2，则保持不变。或者我们不用2bit来进行表示，我们用两个bit-map即可模拟实现这个2bit-map，都是一样的道理。</p>\n<p>【3】对10亿个不重复的整数进行排序。<br>【4】找出10亿个数字中重复的数字。<br>解决方法：bitmap初始化数据，当发现数组中的值是1，则判断出该数字是重复出现的。</p>\n<p>【5】一个序列里除了一个元素，其他元素都会重复出现3次，设计一个时间复杂度与空间复杂度最低的算法，找出这个不重复的元素。<br>`<br>    public static void main(String[] args) {<br>        int[] list = {2, 3, 6, 3, 2, 5, 3, 2, 6, 6, 9, 9, 7, 7};<br>        int len = list.length * 2;<br>        BitSet bs = new BitSet(len);  </p>\n<pre><code>    for (int i = 0; i &lt; list.length; i++) {  \n        int n = 2 * list[i];  \n        boolean b1 = bs.get(n);  \n        boolean b2 = bs.get(n + 1);  \n        if (!b1 &amp;&amp; !b2) { // 00  \n            bs.set(n, true);  \n            bs.set(n + 1, false);  \n        }  \n        else if (b1 &amp;&amp; !b2) { // 01  \n            bs.set(n + 1, true);  \n            bs.set(n, false);  \n        }  \n        else if (!b1 &amp;&amp; b2) { // 10  \n            bs.set(n, n + 1, true);  \n        }  \n    }  \n    for (int i = 0; i &lt; bs.length(); i += 2) {  \n        boolean b1 = bs.get(i);  \n        boolean b2 = bs.get(i + 1);  \n        if (!b1 &amp;&amp; !b2) { // 00  \n            // 0次  \n        }  \n        else if (b1 &amp;&amp; !b2) { // 01  \n            System.out.println(i / 2 + &quot;一次&quot;);  \n        }  \n        else if (!b1 &amp;&amp; b2) { // 10  \n            System.out.println(i / 2 + &quot;两次&quot;);  \n        }  \n        else if (b1 &amp;&amp; b2) { // 10  \n            System.out.println(i / 2 + &quot;三次&quot;);  \n        }  \n    }  \n} `\n</code></pre>"},{"title":"Bootstrap 实现 ajax model","id":"1758","date":"2014-04-27T09:16:46.000Z","_content":"\n默认的 Bootstrap 只能用当前页面的数据，没有ajax的功能，可以通过一点变通就可以实现。\n\n`<button class=\"btn btn-primary\" id=\"showDialog\" >Add New Post Type</button>\n` \n\n<!--more-->\n\n`<script>\n    $(function(){\n        $('#showDialog').click(function(){\n            $('.modal-body').load('../posttype/edit/',function(result){\n                $('#myModal').modal({\n                    keyboard: false,\n                    backdrop:false\n                });\n            });\n        });\n    });\n</script>`\n\n`<div class=\"modal fade\" id=\"myModal\" role=\"dialog\" aria-labelledby=\"myModalLabel\" aria-hidden=\"true\">\n    <div class=\"modal-dialog\">\n        <div class=\"modal-content\">\n            <div class=\"modal-header\">\n                <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\">&times;</button>\n\n#### Add New Post Type\n\n            </div>\n            <div class=\"modal-body\">\n                Loading...\n            </div>\n        </div>\n        <!-- /.modal-content -->\n    </div>\n    <!-- /.modal-dialog -->\n</div>`","source":"_posts/bootstrap-e5-ae-9e-e7-8e-b0-ajax-model.md","raw":"---\ntitle: Bootstrap 实现 ajax model\ntags:\n  - ajax\n  - bootstrap\nid: 1758\ncategories:\n  - JQuery\ndate: 2014-04-27 17:16:46\n---\n\n默认的 Bootstrap 只能用当前页面的数据，没有ajax的功能，可以通过一点变通就可以实现。\n\n`<button class=\"btn btn-primary\" id=\"showDialog\" >Add New Post Type</button>\n` \n\n<!--more-->\n\n`<script>\n    $(function(){\n        $('#showDialog').click(function(){\n            $('.modal-body').load('../posttype/edit/',function(result){\n                $('#myModal').modal({\n                    keyboard: false,\n                    backdrop:false\n                });\n            });\n        });\n    });\n</script>`\n\n`<div class=\"modal fade\" id=\"myModal\" role=\"dialog\" aria-labelledby=\"myModalLabel\" aria-hidden=\"true\">\n    <div class=\"modal-dialog\">\n        <div class=\"modal-content\">\n            <div class=\"modal-header\">\n                <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\">&times;</button>\n\n#### Add New Post Type\n\n            </div>\n            <div class=\"modal-body\">\n                Loading...\n            </div>\n        </div>\n        <!-- /.modal-content -->\n    </div>\n    <!-- /.modal-dialog -->\n</div>`","slug":"bootstrap-e5-ae-9e-e7-8e-b0-ajax-model","published":1,"updated":"2018-01-13T05:07:00.447Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjccw7x7e000gaqcrfthpcxra","content":"<p>默认的 Bootstrap 只能用当前页面的数据，没有ajax的功能，可以通过一点变通就可以实现。</p>\n<p><code>&lt;button class=&quot;btn btn-primary&quot; id=&quot;showDialog&quot; &gt;Add New Post Type&lt;/button&gt;</code> </p>\n<a id=\"more\"></a>\n<p><code>&lt;script&gt;\n    $(function(){\n        $(&#39;#showDialog&#39;).click(function(){\n            $(&#39;.modal-body&#39;).load(&#39;../posttype/edit/&#39;,function(result){\n                $(&#39;#myModal&#39;).modal({\n                    keyboard: false,\n                    backdrop:false\n                });\n            });\n        });\n    });\n&lt;/script&gt;</code></p>\n<p>`<div class=\"modal fade\" id=\"myModal\" role=\"dialog\" aria-labelledby=\"myModalLabel\" aria-hidden=\"true\"><br>    <div class=\"modal-dialog\"><br>        <div class=\"modal-content\"><br>            <div class=\"modal-header\"><br>                <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\">&times;</button></div></div></div></div></p>\n<h4 id=\"Add-New-Post-Type\"><a href=\"#Add-New-Post-Type\" class=\"headerlink\" title=\"Add New Post Type\"></a>Add New Post Type</h4><pre><code>        &lt;/div&gt;\n        &lt;div class=&quot;modal-body&quot;&gt;\n            Loading...\n        &lt;/div&gt;\n    &lt;/div&gt;\n    &lt;!-- /.modal-content --&gt;\n&lt;/div&gt;\n&lt;!-- /.modal-dialog --&gt;\n</code></pre><p>`</p>\n","site":{"data":{}},"excerpt":"<p>默认的 Bootstrap 只能用当前页面的数据，没有ajax的功能，可以通过一点变通就可以实现。</p>\n<p><code>&lt;button class=&quot;btn btn-primary&quot; id=&quot;showDialog&quot; &gt;Add New Post Type&lt;/button&gt;</code> </p>","more":"<p><code>&lt;script&gt;\n    $(function(){\n        $(&#39;#showDialog&#39;).click(function(){\n            $(&#39;.modal-body&#39;).load(&#39;../posttype/edit/&#39;,function(result){\n                $(&#39;#myModal&#39;).modal({\n                    keyboard: false,\n                    backdrop:false\n                });\n            });\n        });\n    });\n&lt;/script&gt;</code></p>\n<p>`<div class=\"modal fade\" id=\"myModal\" role=\"dialog\" aria-labelledby=\"myModalLabel\" aria-hidden=\"true\"><br>    <div class=\"modal-dialog\"><br>        <div class=\"modal-content\"><br>            <div class=\"modal-header\"><br>                <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\">&times;</button></div></div></div></div></p>\n<h4 id=\"Add-New-Post-Type\"><a href=\"#Add-New-Post-Type\" class=\"headerlink\" title=\"Add New Post Type\"></a>Add New Post Type</h4><pre><code>        &lt;/div&gt;\n        &lt;div class=&quot;modal-body&quot;&gt;\n            Loading...\n        &lt;/div&gt;\n    &lt;/div&gt;\n    &lt;!-- /.modal-content --&gt;\n&lt;/div&gt;\n&lt;!-- /.modal-dialog --&gt;\n</code></pre><p>`</p>"},{"title":"BlogBak v1.57 – 博客数据备份搬家工具下载","id":"79","date":"2008-09-13T01:46:23.000Z","_content":"\nBlogBak是一个帮助blog用户，备份自己文章、搬家的工具。最大的特点是支持众多blog运营商搬家！无论你是使用什么blog系统，都可以轻松完成数据导出/备份／搬家！\n\n支持搬家服务商：\n中国博客网blogcn \n博客动力blogdriver \n博客公社老版bokee \n博客中国新版bokee \n歪酷ycul \n博客大巴blogBus\n和讯hexun \n天涯tianya \n猫扑mop \nLive spaces(MSN) \nCSDN\n网易163 \n搜狐sohu \n新浪sina \nTom \n百度baidu \n腾讯qqzone\nblogger.com \nXuite/xuite \nOpera\noblog3、oblog4，使用oblog平台的所有站点。shineblog,blogchinese,活力博客&hellip;\n如何简单判断一个站点是否使用oblog平台 \nBo-blog,所有Bo-blog平台 \n博客园，所有cnblogs子站点：\n　　BlogJava(blogjava.net),博客生活(cnweblog.com),IT博客网(cnitblog.com),\n　　C++博客(cppblog.com),管理博客(manageblog.net),教师博客(teachblog.net),PHP博客(phpweblog.net) \nWordPress，所有WordPress站点。my.donews&hellip; \nx-space，使用x-space的站点。谷逸&hellip;\n起点博客cmfu \n丫丫网日记/笔记iyaya \n育儿博客ci123/育儿宝宝主页成长记录ci123baobao \n博客蓝bokeland \n教育人博客blog.edu.cn \n优友uuzone \n敏思blogms \n强国rmblog \n都快dukuai \n阿里巴巴博客alibaba \n365ren(包括日志与杂志，已经于2007/6/30日永久关闭) \nblogBus,无名小站wretch(在[我的QQ/我的blog/导入导出]中直接支持原站XML备份文件导入) \n\n简要操作说明：\n将下载压缩文件解开到一个目录下即可，无需安装纯绿色软件 \n运行blogbak.exe \n选择您当前使用的blog服务商 \n点[去登录],左侧浏览器会转到对应服务商站点的入口，输入你自己的用户口令正常登录 \n登录成功后，点［开始备份],然后请耐心等待 \n全部完成后，左侧会有提示，备份数据文件保存在安装目录下 \n可以马上将数据导入搬家到5ilog中 \n\n其他提示\n文章标题如果重复，是无法导入的，建议先修改 \n如果要导入文章分类(书架)，请先在5ilog[blog管理/基本设置/其他设置]中设置好名称一样的书架名 \n对于软件的建议／意见／bug以及增加支持的其他服务商业，可以反馈到［blog搬家］\n\n官方下载：[http://www.5ilog.com/qq/qlog/banjia.htm&nbsp;](http://www.5ilog.com/qq/qlog/banjia.htm)","source":"_posts/blogbak-v1-57-e5-8d-9a-e5-ae-a2-e6-95-b0-e6-8d-ae-e5-a4-87-e4-bb-bd-e6-90-ac-e5-ae-b6-e5-b7-a5-e5-85-b7-e4-b8-8b-e8-bd-bd.md","raw":"---\ntitle: BlogBak v1.57 – 博客数据备份搬家工具下载\nid: 79\ncategories:\n  - Other\ndate: 2008-09-13 09:46:23\ntags:\n---\n\nBlogBak是一个帮助blog用户，备份自己文章、搬家的工具。最大的特点是支持众多blog运营商搬家！无论你是使用什么blog系统，都可以轻松完成数据导出/备份／搬家！\n\n支持搬家服务商：\n中国博客网blogcn \n博客动力blogdriver \n博客公社老版bokee \n博客中国新版bokee \n歪酷ycul \n博客大巴blogBus\n和讯hexun \n天涯tianya \n猫扑mop \nLive spaces(MSN) \nCSDN\n网易163 \n搜狐sohu \n新浪sina \nTom \n百度baidu \n腾讯qqzone\nblogger.com \nXuite/xuite \nOpera\noblog3、oblog4，使用oblog平台的所有站点。shineblog,blogchinese,活力博客&hellip;\n如何简单判断一个站点是否使用oblog平台 \nBo-blog,所有Bo-blog平台 \n博客园，所有cnblogs子站点：\n　　BlogJava(blogjava.net),博客生活(cnweblog.com),IT博客网(cnitblog.com),\n　　C++博客(cppblog.com),管理博客(manageblog.net),教师博客(teachblog.net),PHP博客(phpweblog.net) \nWordPress，所有WordPress站点。my.donews&hellip; \nx-space，使用x-space的站点。谷逸&hellip;\n起点博客cmfu \n丫丫网日记/笔记iyaya \n育儿博客ci123/育儿宝宝主页成长记录ci123baobao \n博客蓝bokeland \n教育人博客blog.edu.cn \n优友uuzone \n敏思blogms \n强国rmblog \n都快dukuai \n阿里巴巴博客alibaba \n365ren(包括日志与杂志，已经于2007/6/30日永久关闭) \nblogBus,无名小站wretch(在[我的QQ/我的blog/导入导出]中直接支持原站XML备份文件导入) \n\n简要操作说明：\n将下载压缩文件解开到一个目录下即可，无需安装纯绿色软件 \n运行blogbak.exe \n选择您当前使用的blog服务商 \n点[去登录],左侧浏览器会转到对应服务商站点的入口，输入你自己的用户口令正常登录 \n登录成功后，点［开始备份],然后请耐心等待 \n全部完成后，左侧会有提示，备份数据文件保存在安装目录下 \n可以马上将数据导入搬家到5ilog中 \n\n其他提示\n文章标题如果重复，是无法导入的，建议先修改 \n如果要导入文章分类(书架)，请先在5ilog[blog管理/基本设置/其他设置]中设置好名称一样的书架名 \n对于软件的建议／意见／bug以及增加支持的其他服务商业，可以反馈到［blog搬家］\n\n官方下载：[http://www.5ilog.com/qq/qlog/banjia.htm&nbsp;](http://www.5ilog.com/qq/qlog/banjia.htm)","slug":"blogbak-v1-57-e5-8d-9a-e5-ae-a2-e6-95-b0-e6-8d-ae-e5-a4-87-e4-bb-bd-e6-90-ac-e5-ae-b6-e5-b7-a5-e5-85-b7-e4-b8-8b-e8-bd-bd","published":1,"updated":"2018-01-13T05:07:00.476Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjccw7x7h000haqcrn55f5okq","content":"<p>BlogBak是一个帮助blog用户，备份自己文章、搬家的工具。最大的特点是支持众多blog运营商搬家！无论你是使用什么blog系统，都可以轻松完成数据导出/备份／搬家！</p>\n<p>支持搬家服务商：<br>中国博客网blogcn<br>博客动力blogdriver<br>博客公社老版bokee<br>博客中国新版bokee<br>歪酷ycul<br>博客大巴blogBus<br>和讯hexun<br>天涯tianya<br>猫扑mop<br>Live spaces(MSN)<br>CSDN<br>网易163<br>搜狐sohu<br>新浪sina<br>Tom<br>百度baidu<br>腾讯qqzone<br>blogger.com<br>Xuite/xuite<br>Opera<br>oblog3、oblog4，使用oblog平台的所有站点。shineblog,blogchinese,活力博客&hellip;<br>如何简单判断一个站点是否使用oblog平台<br>Bo-blog,所有Bo-blog平台<br>博客园，所有cnblogs子站点：<br>　　BlogJava(blogjava.net),博客生活(cnweblog.com),IT博客网(cnitblog.com),<br>　　C++博客(cppblog.com),管理博客(manageblog.net),教师博客(teachblog.net),PHP博客(phpweblog.net)<br>WordPress，所有WordPress站点。my.donews&hellip;<br>x-space，使用x-space的站点。谷逸&hellip;<br>起点博客cmfu<br>丫丫网日记/笔记iyaya<br>育儿博客ci123/育儿宝宝主页成长记录ci123baobao<br>博客蓝bokeland<br>教育人博客blog.edu.cn<br>优友uuzone<br>敏思blogms<br>强国rmblog<br>都快dukuai<br>阿里巴巴博客alibaba<br>365ren(包括日志与杂志，已经于2007/6/30日永久关闭)<br>blogBus,无名小站wretch(在[我的QQ/我的blog/导入导出]中直接支持原站XML备份文件导入) </p>\n<p>简要操作说明：<br>将下载压缩文件解开到一个目录下即可，无需安装纯绿色软件<br>运行blogbak.exe<br>选择您当前使用的blog服务商<br>点[去登录],左侧浏览器会转到对应服务商站点的入口，输入你自己的用户口令正常登录<br>登录成功后，点［开始备份],然后请耐心等待<br>全部完成后，左侧会有提示，备份数据文件保存在安装目录下<br>可以马上将数据导入搬家到5ilog中 </p>\n<p>其他提示<br>文章标题如果重复，是无法导入的，建议先修改<br>如果要导入文章分类(书架)，请先在5ilog[blog管理/基本设置/其他设置]中设置好名称一样的书架名<br>对于软件的建议／意见／bug以及增加支持的其他服务商业，可以反馈到［blog搬家］</p>\n<p>官方下载：<a href=\"http://www.5ilog.com/qq/qlog/banjia.htm\" target=\"_blank\" rel=\"noopener\">http://www.5ilog.com/qq/qlog/banjia.htm&nbsp;</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>BlogBak是一个帮助blog用户，备份自己文章、搬家的工具。最大的特点是支持众多blog运营商搬家！无论你是使用什么blog系统，都可以轻松完成数据导出/备份／搬家！</p>\n<p>支持搬家服务商：<br>中国博客网blogcn<br>博客动力blogdriver<br>博客公社老版bokee<br>博客中国新版bokee<br>歪酷ycul<br>博客大巴blogBus<br>和讯hexun<br>天涯tianya<br>猫扑mop<br>Live spaces(MSN)<br>CSDN<br>网易163<br>搜狐sohu<br>新浪sina<br>Tom<br>百度baidu<br>腾讯qqzone<br>blogger.com<br>Xuite/xuite<br>Opera<br>oblog3、oblog4，使用oblog平台的所有站点。shineblog,blogchinese,活力博客&hellip;<br>如何简单判断一个站点是否使用oblog平台<br>Bo-blog,所有Bo-blog平台<br>博客园，所有cnblogs子站点：<br>　　BlogJava(blogjava.net),博客生活(cnweblog.com),IT博客网(cnitblog.com),<br>　　C++博客(cppblog.com),管理博客(manageblog.net),教师博客(teachblog.net),PHP博客(phpweblog.net)<br>WordPress，所有WordPress站点。my.donews&hellip;<br>x-space，使用x-space的站点。谷逸&hellip;<br>起点博客cmfu<br>丫丫网日记/笔记iyaya<br>育儿博客ci123/育儿宝宝主页成长记录ci123baobao<br>博客蓝bokeland<br>教育人博客blog.edu.cn<br>优友uuzone<br>敏思blogms<br>强国rmblog<br>都快dukuai<br>阿里巴巴博客alibaba<br>365ren(包括日志与杂志，已经于2007/6/30日永久关闭)<br>blogBus,无名小站wretch(在[我的QQ/我的blog/导入导出]中直接支持原站XML备份文件导入) </p>\n<p>简要操作说明：<br>将下载压缩文件解开到一个目录下即可，无需安装纯绿色软件<br>运行blogbak.exe<br>选择您当前使用的blog服务商<br>点[去登录],左侧浏览器会转到对应服务商站点的入口，输入你自己的用户口令正常登录<br>登录成功后，点［开始备份],然后请耐心等待<br>全部完成后，左侧会有提示，备份数据文件保存在安装目录下<br>可以马上将数据导入搬家到5ilog中 </p>\n<p>其他提示<br>文章标题如果重复，是无法导入的，建议先修改<br>如果要导入文章分类(书架)，请先在5ilog[blog管理/基本设置/其他设置]中设置好名称一样的书架名<br>对于软件的建议／意见／bug以及增加支持的其他服务商业，可以反馈到［blog搬家］</p>\n<p>官方下载：<a href=\"http://www.5ilog.com/qq/qlog/banjia.htm\" target=\"_blank\" rel=\"noopener\">http://www.5ilog.com/qq/qlog/banjia.htm&nbsp;</a></p>\n"},{"title":"C++ 中int，char，string，CString类型转换","id":"444","date":"2011-12-05T00:07:31.000Z","_content":"\n<div id=\"cnblogs_post_body\">\n\n1.** c++中string到int的转换**\n\n1) 在C标准库里面，使用atoi：\n> #include &lt;cstdlib&gt;\n> #include &lt;string&gt;\n> \n> std::string text = \"152\";\n> int number = std::atoi( text.c_str() );\n> if (errno == ERANGE) //可能是std::errno\n> {\n> //number可能由于过大或过小而不能完全存储\n> }\n> else if (errno == ????)\n> //可能是EINVAL\n> {\n> //不能转换成一个数字\n> }\n2) 在C++标准库里面，使用stringstream：(stringstream 可以用于各种数据类型之间的转换)<!--more-->\n> #include &lt;sstream&gt;\n> #include &lt;string&gt;\n> \n> std::string text = \"152\";\n> int number;\n> std::stringstream ss;\n> \n> ss &lt;&lt; text;//可以是其他数据类型\n> ss &gt;&gt; number; //string -&gt; int\n> if (! ss.good())\n> {\n> //错误发生\n> }\n> \n> ss &lt;&lt; number;// int-&gt;string\n> string str = ss.str();\n> if (! ss.good())\n> {\n> //错误发生\n> }\n3) 在Boost库里面，使用lexical_cast：\n> #include &lt;boost/lexical_cast.hpp&gt;\n> #include &lt;string&gt;\n> \n> try\n> {\n> std::string text = \"152\";\n> int number = boost::lexical_cast&lt; int &gt;( text );\n> }\n> catch( const boost::bad_lexical_cast &amp; )\n> {\n> //转换失败\n> }\n**2.string 转 CString**\nCString.format(”%s”, string.c_str());\n用c_str()确实比data()要好；\n\n**3.char 转 CString**\nCString.format(”%s”, char*);\n\n**4.char 转 string**\nstring s(char *);\n只能初始化，在不是初始化的地方最好还是用assign().\n\n**5.string 转 char ***\nchar *p = string.c_str();\n\n**6.CString 转 string**\nstring s(CString.GetBuffer());\nGetBuffer()后一定要ReleaseBuffer(),否则就没有释放缓冲区所占的空间.\n\n**7.字符串的内容转换为字符数组和C—string**\n(1)  data(),返回没有”\u0000“的字符串数组\n(2)  c_str()，返回有”\u0000“的字符串数组\n(3)  copy()\n\n**8.CString与int、char*、char[100]之间的转换**\n\n(1) CString互转int\n\n将字符转换为整数，可以使用atoi、_atoi64或atol。而将数字转换为CString变量，可以使用CString的Format函数。如\nCString s;\nint i = 64;\ns.Format(”%d”, i)\nFormat函数的功能很强，值得你研究一下。\n\nvoid CStrDlg::OnButton1()\n{\nCString\nss=”1212.12″;\nint temp=atoi(ss);\nCString aa;\naa.Format(”%d”,temp);\nAfxMessageBox(”var is ” + aa);\n}\n\n(2) CString互转char*\n\n///char * TO cstring\nCString strtest;\nchar * charpoint;\ncharpoint=”give string a value”; //?\nstrtest=charpoint;\n\n///cstring TO char *\ncharpoint=strtest.GetBuffer(strtest.GetLength());\n\n(3) 标准C里没有string,char *==char []==string, 可以用CString.Format(”%s”,char *)这个方法来将char *转成CString。\n要把CString转成char *，用操作符（LPCSTR）CString就可以了。\nCString转换 char[100]\nchar a[100];\nCString str(”aaaaaa”);\nstrncpy(a,(LPCTSTR)str,sizeof(a));\n\n</div>","source":"_posts/c-e4-b8-adint-ef-bc-8cchar-ef-bc-8cstring-ef-bc-8ccstring-e7-b1-bb-e5-9e-8b-e8-bd-ac-e6-8d-a2.md","raw":"---\ntitle: C++ 中int，char，string，CString类型转换\ntags:\n  - C/C++\nid: 444\ncategories:\n  - Other\ndate: 2011-12-05 08:07:31\n---\n\n<div id=\"cnblogs_post_body\">\n\n1.** c++中string到int的转换**\n\n1) 在C标准库里面，使用atoi：\n> #include &lt;cstdlib&gt;\n> #include &lt;string&gt;\n> \n> std::string text = \"152\";\n> int number = std::atoi( text.c_str() );\n> if (errno == ERANGE) //可能是std::errno\n> {\n> //number可能由于过大或过小而不能完全存储\n> }\n> else if (errno == ????)\n> //可能是EINVAL\n> {\n> //不能转换成一个数字\n> }\n2) 在C++标准库里面，使用stringstream：(stringstream 可以用于各种数据类型之间的转换)<!--more-->\n> #include &lt;sstream&gt;\n> #include &lt;string&gt;\n> \n> std::string text = \"152\";\n> int number;\n> std::stringstream ss;\n> \n> ss &lt;&lt; text;//可以是其他数据类型\n> ss &gt;&gt; number; //string -&gt; int\n> if (! ss.good())\n> {\n> //错误发生\n> }\n> \n> ss &lt;&lt; number;// int-&gt;string\n> string str = ss.str();\n> if (! ss.good())\n> {\n> //错误发生\n> }\n3) 在Boost库里面，使用lexical_cast：\n> #include &lt;boost/lexical_cast.hpp&gt;\n> #include &lt;string&gt;\n> \n> try\n> {\n> std::string text = \"152\";\n> int number = boost::lexical_cast&lt; int &gt;( text );\n> }\n> catch( const boost::bad_lexical_cast &amp; )\n> {\n> //转换失败\n> }\n**2.string 转 CString**\nCString.format(”%s”, string.c_str());\n用c_str()确实比data()要好；\n\n**3.char 转 CString**\nCString.format(”%s”, char*);\n\n**4.char 转 string**\nstring s(char *);\n只能初始化，在不是初始化的地方最好还是用assign().\n\n**5.string 转 char ***\nchar *p = string.c_str();\n\n**6.CString 转 string**\nstring s(CString.GetBuffer());\nGetBuffer()后一定要ReleaseBuffer(),否则就没有释放缓冲区所占的空间.\n\n**7.字符串的内容转换为字符数组和C—string**\n(1)  data(),返回没有”\u0000“的字符串数组\n(2)  c_str()，返回有”\u0000“的字符串数组\n(3)  copy()\n\n**8.CString与int、char*、char[100]之间的转换**\n\n(1) CString互转int\n\n将字符转换为整数，可以使用atoi、_atoi64或atol。而将数字转换为CString变量，可以使用CString的Format函数。如\nCString s;\nint i = 64;\ns.Format(”%d”, i)\nFormat函数的功能很强，值得你研究一下。\n\nvoid CStrDlg::OnButton1()\n{\nCString\nss=”1212.12″;\nint temp=atoi(ss);\nCString aa;\naa.Format(”%d”,temp);\nAfxMessageBox(”var is ” + aa);\n}\n\n(2) CString互转char*\n\n///char * TO cstring\nCString strtest;\nchar * charpoint;\ncharpoint=”give string a value”; //?\nstrtest=charpoint;\n\n///cstring TO char *\ncharpoint=strtest.GetBuffer(strtest.GetLength());\n\n(3) 标准C里没有string,char *==char []==string, 可以用CString.Format(”%s”,char *)这个方法来将char *转成CString。\n要把CString转成char *，用操作符（LPCSTR）CString就可以了。\nCString转换 char[100]\nchar a[100];\nCString str(”aaaaaa”);\nstrncpy(a,(LPCTSTR)str,sizeof(a));\n\n</div>","slug":"c-e4-b8-adint-ef-bc-8cchar-ef-bc-8cstring-ef-bc-8ccstring-e7-b1-bb-e5-9e-8b-e8-bd-ac-e6-8d-a2","published":1,"updated":"2018-01-13T05:07:00.449Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjccw7x7k000laqcr14aylzu5","content":"<div id=\"cnblogs_post_body\"><br><br>1.<strong> c++中string到int的转换</strong><br><br>1) 在C标准库里面，使用atoi：<br>&gt; #include &lt;cstdlib&gt;<br>&gt; #include &lt;string&gt;<br>&gt;<br>&gt; std::string text = “152”;<br>&gt; int number = std::atoi( text.c_str() );<br>&gt; if (errno == ERANGE) //可能是std::errno<br>&gt; {<br>&gt; //number可能由于过大或过小而不能完全存储<br>&gt; }<br>&gt; else if (errno == ????)<br>&gt; //可能是EINVAL<br>&gt; {<br>&gt; //不能转换成一个数字<br>&gt; }<br>2) 在C++标准库里面，使用stringstream：(stringstream 可以用于各种数据类型之间的转换)<a id=\"more\"></a><br>&gt; #include &lt;sstream&gt;<br>&gt; #include &lt;string&gt;<br>&gt;<br>&gt; std::string text = “152”;<br>&gt; int number;<br>&gt; std::stringstream ss;<br>&gt;<br>&gt; ss &lt;&lt; text;//可以是其他数据类型<br>&gt; ss &gt;&gt; number; //string -&gt; int<br>&gt; if (! ss.good())<br>&gt; {<br>&gt; //错误发生<br>&gt; }<br>&gt;<br>&gt; ss &lt;&lt; number;// int-&gt;string<br>&gt; string str = ss.str();<br>&gt; if (! ss.good())<br>&gt; {<br>&gt; //错误发生<br>&gt; }<br>3) 在Boost库里面，使用lexical_cast：<br>&gt; #include &lt;boost/lexical_cast.hpp&gt;<br>&gt; #include &lt;string&gt;<br>&gt;<br>&gt; try<br>&gt; {<br>&gt; std::string text = “152”;<br>&gt; int number = boost::lexical_cast&lt; int &gt;( text );<br>&gt; }<br>&gt; catch( const boost::bad_lexical_cast &amp; )<br>&gt; {<br>&gt; //转换失败<br>&gt; }<br><strong>2.string 转 CString</strong><br>CString.format(”%s”, string.c_str());<br>用c_str()确实比data()要好；<br><br><strong>3.char 转 CString</strong><br>CString.format(”%s”, char<em>);<br><br><strong>4.char 转 string</strong><br>string s(char </em>);<br>只能初始化，在不是初始化的地方最好还是用assign().<br><br><strong>5.string 转 char *</strong><br>char <em>p = string.c_str();<br><br><strong>6.CString 转 string</strong><br>string s(CString.GetBuffer());<br>GetBuffer()后一定要ReleaseBuffer(),否则就没有释放缓冲区所占的空间.<br><br><strong>7.字符串的内容转换为字符数组和C—string</strong><br>(1)  data(),返回没有”\u0000“的字符串数组<br>(2)  c_str()，返回有”\u0000“的字符串数组<br>(3)  copy()<br><br>**8.CString与int、char</em>、char[100]之间的转换<em>*<br><br>(1) CString互转int<br><br>将字符转换为整数，可以使用atoi、_atoi64或atol。而将数字转换为CString变量，可以使用CString的Format函数。如<br>CString s;<br>int i = 64;<br>s.Format(”%d”, i)<br>Format函数的功能很强，值得你研究一下。<br><br>void CStrDlg::OnButton1()<br>{<br>CString<br>ss=”1212.12″;<br>int temp=atoi(ss);<br>CString aa;<br>aa.Format(”%d”,temp);<br>AfxMessageBox(”var is ” + aa);<br>}<br><br>(2) CString互转char</em><br><br>///char <em> TO cstring<br>CString strtest;<br>char </em> charpoint;<br>charpoint=”give string a value”; //?<br>strtest=charpoint;<br><br>///cstring TO char <em><br>charpoint=strtest.GetBuffer(strtest.GetLength());<br><br>(3) 标准C里没有string,char </em>==char []==string, 可以用CString.Format(”%s”,char <em>)这个方法来将char </em>转成CString。<br>要把CString转成char *，用操作符（LPCSTR）CString就可以了。<br>CString转换 char[100]<br>char a[100];<br>CString str(”aaaaaa”);<br>strncpy(a,(LPCTSTR)str,sizeof(a));<br><br></div>","site":{"data":{}},"excerpt":"<div id=\"cnblogs_post_body\"><br><br>1.<strong> c++中string到int的转换</strong><br><br>1) 在C标准库里面，使用atoi：<br>&gt; #include &lt;cstdlib&gt;<br>&gt; #include &lt;string&gt;<br>&gt;<br>&gt; std::string text = “152”;<br>&gt; int number = std::atoi( text.c_str() );<br>&gt; if (errno == ERANGE) //可能是std::errno<br>&gt; {<br>&gt; //number可能由于过大或过小而不能完全存储<br>&gt; }<br>&gt; else if (errno == ????)<br>&gt; //可能是EINVAL<br>&gt; {<br>&gt; //不能转换成一个数字<br>&gt; }<br>2) 在C++标准库里面，使用stringstream：(stringstream 可以用于各种数据类型之间的转换)","more":"<br>&gt; #include &lt;sstream&gt;<br>&gt; #include &lt;string&gt;<br>&gt;<br>&gt; std::string text = “152”;<br>&gt; int number;<br>&gt; std::stringstream ss;<br>&gt;<br>&gt; ss &lt;&lt; text;//可以是其他数据类型<br>&gt; ss &gt;&gt; number; //string -&gt; int<br>&gt; if (! ss.good())<br>&gt; {<br>&gt; //错误发生<br>&gt; }<br>&gt;<br>&gt; ss &lt;&lt; number;// int-&gt;string<br>&gt; string str = ss.str();<br>&gt; if (! ss.good())<br>&gt; {<br>&gt; //错误发生<br>&gt; }<br>3) 在Boost库里面，使用lexical_cast：<br>&gt; #include &lt;boost/lexical_cast.hpp&gt;<br>&gt; #include &lt;string&gt;<br>&gt;<br>&gt; try<br>&gt; {<br>&gt; std::string text = “152”;<br>&gt; int number = boost::lexical_cast&lt; int &gt;( text );<br>&gt; }<br>&gt; catch( const boost::bad_lexical_cast &amp; )<br>&gt; {<br>&gt; //转换失败<br>&gt; }<br><strong>2.string 转 CString</strong><br>CString.format(”%s”, string.c_str());<br>用c_str()确实比data()要好；<br><br><strong>3.char 转 CString</strong><br>CString.format(”%s”, char<em>);<br><br><strong>4.char 转 string</strong><br>string s(char </em>);<br>只能初始化，在不是初始化的地方最好还是用assign().<br><br><strong>5.string 转 char *</strong><br>char <em>p = string.c_str();<br><br><strong>6.CString 转 string</strong><br>string s(CString.GetBuffer());<br>GetBuffer()后一定要ReleaseBuffer(),否则就没有释放缓冲区所占的空间.<br><br><strong>7.字符串的内容转换为字符数组和C—string</strong><br>(1)  data(),返回没有”\u0000“的字符串数组<br>(2)  c_str()，返回有”\u0000“的字符串数组<br>(3)  copy()<br><br>**8.CString与int、char</em>、char[100]之间的转换<em>*<br><br>(1) CString互转int<br><br>将字符转换为整数，可以使用atoi、_atoi64或atol。而将数字转换为CString变量，可以使用CString的Format函数。如<br>CString s;<br>int i = 64;<br>s.Format(”%d”, i)<br>Format函数的功能很强，值得你研究一下。<br><br>void CStrDlg::OnButton1()<br>{<br>CString<br>ss=”1212.12″;<br>int temp=atoi(ss);<br>CString aa;<br>aa.Format(”%d”,temp);<br>AfxMessageBox(”var is ” + aa);<br>}<br><br>(2) CString互转char</em><br><br>///char <em> TO cstring<br>CString strtest;<br>char </em> charpoint;<br>charpoint=”give string a value”; //?<br>strtest=charpoint;<br><br>///cstring TO char <em><br>charpoint=strtest.GetBuffer(strtest.GetLength());<br><br>(3) 标准C里没有string,char </em>==char []==string, 可以用CString.Format(”%s”,char <em>)这个方法来将char </em>转成CString。<br>要把CString转成char *，用操作符（LPCSTR）CString就可以了。<br>CString转换 char[100]<br>char a[100];<br>CString str(”aaaaaa”);<br>strncpy(a,(LPCTSTR)str,sizeof(a));<br><br></div>"},{"title":"CM设置—性能设置—Cpu设置—可用调速器的设置","id":"1032","date":"2012-05-19T08:26:34.000Z","_content":"\nondemand（按需响应模式）：系统默认的超频模式，在最大最小频率之间自动调整\n interactive（交流循环模式）：只要手机运行频率直接上最高值，然后CPU负荷慢慢降低（系统响应最快，耗电多一些）\n conservative（保守模式）：随着CPU负荷加大，逐步提升频率到最高，然后降至最低（系统响应快，耗电比I模式省）\n smartass：是I和C模式的升级，该模式在比i模式不差的响应的前提下会做到了更加省电\n performance（高性能模式）：高性能模式，按你设定范围的最好频率运行(机器最流畅,耗电也最大)\n userspace（用户隔离模式）：当控制器处于非工作状态时控制cpu速度的一种方法，建议最好不使用该选项\n powersave（省电模式）：按设定最小频率低负荷运行，省电但系统响应速度慢\n lagthree(不受延迟模式）：一种CPU调节策略，倾向于节省电量。<!--more-->\n 建议不要选择省电模式，因为会只在最低频率下运行，不是一般般的卡（最低频率非122MHZ不在此列）…\n 在听音乐的时候建议不要选择按需模式，因为在按需模式下播放音乐，锁屏后音乐会一卡一卡的播放（由此可见，按需模式是使用时最高频运行，锁屏时最低频运行）\n 在玩游戏的时候建议超频，并选择高性能模式。\n 想省电请选择传统模式，因为2.1便是此模式。\n 模式选择请自行按照需求选择，\n\nondemand及conservative是另外一组。其中，ondemand是CM7的默认调速器，在ondemand下，CPU会规律性地检查负载状况，当负载量超过了某临界值，CPU会自动调整运行在最高频率下，而当负载量再度回落，CPU会调整运行在次低一级的频率（而非直接降至最低频率）。而conservative与ondemand不同的地方就在于，当负载超过某临界值时，CPU会调整运行至更高一级的频率（而非直接跳至最高频率）。\n 也就是说，ondemand下CPU的做法是对手一反抗，直接发大招。conservative下CPU的做法是道高一尺，魔高一丈…\n\n 不管那两个我不清楚的模式…在另外四种模式中，耗电量从小到大的排序应该是powersave、conservative、ondemand、performance。powersave模式是省电，但卡得厉害。因此，conservative便成为我们唯一的选择。\n 经过本人实践，consevative确实要比ondemand模式下更为省电（通过观察currentwidget记录的log）,而且也不算太卡。\n 当然，由于本人并非游戏党，所以在性能与耗电的平衡中才最终选择了conservative（其实我也不太清楚conservative模式对游戏性能究竟能有多大影响，感觉无非就是CPU多蹦几下嘛…)。其他的各位机油可以根据自己的使用习惯并结合实践选择最适合自己的调速器。另外友情提示，在选择了一个新的调速器后，请记得勾选CPU设置中的启动时设置选项，这样下次启动时才能维持自己的调速器设置。\n相信CM7在好好利用调速器之后，CM7耗电量大的问题能得以解决。","source":"_posts/cm-e8-ae-be-e7-bd-ae-e6-80-a7-e8-83-bd-e8-ae-be-e7-bd-ae-cpu-e8-ae-be-e7-bd-ae-e5-8f-af-e7-94-a8-e8-b0-83-e9-80-9f-e5-99-a8-e7-9a-84-e8-ae-be-e7-bd-ae.md","raw":"---\ntitle: CM设置—性能设置—Cpu设置—可用调速器的设置\nid: 1032\ncategories:\n  - Other\ndate: 2012-05-19 16:26:34\ntags:\n---\n\nondemand（按需响应模式）：系统默认的超频模式，在最大最小频率之间自动调整\n interactive（交流循环模式）：只要手机运行频率直接上最高值，然后CPU负荷慢慢降低（系统响应最快，耗电多一些）\n conservative（保守模式）：随着CPU负荷加大，逐步提升频率到最高，然后降至最低（系统响应快，耗电比I模式省）\n smartass：是I和C模式的升级，该模式在比i模式不差的响应的前提下会做到了更加省电\n performance（高性能模式）：高性能模式，按你设定范围的最好频率运行(机器最流畅,耗电也最大)\n userspace（用户隔离模式）：当控制器处于非工作状态时控制cpu速度的一种方法，建议最好不使用该选项\n powersave（省电模式）：按设定最小频率低负荷运行，省电但系统响应速度慢\n lagthree(不受延迟模式）：一种CPU调节策略，倾向于节省电量。<!--more-->\n 建议不要选择省电模式，因为会只在最低频率下运行，不是一般般的卡（最低频率非122MHZ不在此列）…\n 在听音乐的时候建议不要选择按需模式，因为在按需模式下播放音乐，锁屏后音乐会一卡一卡的播放（由此可见，按需模式是使用时最高频运行，锁屏时最低频运行）\n 在玩游戏的时候建议超频，并选择高性能模式。\n 想省电请选择传统模式，因为2.1便是此模式。\n 模式选择请自行按照需求选择，\n\nondemand及conservative是另外一组。其中，ondemand是CM7的默认调速器，在ondemand下，CPU会规律性地检查负载状况，当负载量超过了某临界值，CPU会自动调整运行在最高频率下，而当负载量再度回落，CPU会调整运行在次低一级的频率（而非直接降至最低频率）。而conservative与ondemand不同的地方就在于，当负载超过某临界值时，CPU会调整运行至更高一级的频率（而非直接跳至最高频率）。\n 也就是说，ondemand下CPU的做法是对手一反抗，直接发大招。conservative下CPU的做法是道高一尺，魔高一丈…\n\n 不管那两个我不清楚的模式…在另外四种模式中，耗电量从小到大的排序应该是powersave、conservative、ondemand、performance。powersave模式是省电，但卡得厉害。因此，conservative便成为我们唯一的选择。\n 经过本人实践，consevative确实要比ondemand模式下更为省电（通过观察currentwidget记录的log）,而且也不算太卡。\n 当然，由于本人并非游戏党，所以在性能与耗电的平衡中才最终选择了conservative（其实我也不太清楚conservative模式对游戏性能究竟能有多大影响，感觉无非就是CPU多蹦几下嘛…)。其他的各位机油可以根据自己的使用习惯并结合实践选择最适合自己的调速器。另外友情提示，在选择了一个新的调速器后，请记得勾选CPU设置中的启动时设置选项，这样下次启动时才能维持自己的调速器设置。\n相信CM7在好好利用调速器之后，CM7耗电量大的问题能得以解决。","slug":"cm-e8-ae-be-e7-bd-ae-e6-80-a7-e8-83-bd-e8-ae-be-e7-bd-ae-cpu-e8-ae-be-e7-bd-ae-e5-8f-af-e7-94-a8-e8-b0-83-e9-80-9f-e5-99-a8-e7-9a-84-e8-ae-be-e7-bd-ae","published":1,"updated":"2018-01-13T05:07:00.444Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjccw7x7n000naqcr92r993t3","content":"<p>ondemand（按需响应模式）：系统默认的超频模式，在最大最小频率之间自动调整<br> interactive（交流循环模式）：只要手机运行频率直接上最高值，然后CPU负荷慢慢降低（系统响应最快，耗电多一些）<br> conservative（保守模式）：随着CPU负荷加大，逐步提升频率到最高，然后降至最低（系统响应快，耗电比I模式省）<br> smartass：是I和C模式的升级，该模式在比i模式不差的响应的前提下会做到了更加省电<br> performance（高性能模式）：高性能模式，按你设定范围的最好频率运行(机器最流畅,耗电也最大)<br> userspace（用户隔离模式）：当控制器处于非工作状态时控制cpu速度的一种方法，建议最好不使用该选项<br> powersave（省电模式）：按设定最小频率低负荷运行，省电但系统响应速度慢<br> lagthree(不受延迟模式）：一种CPU调节策略，倾向于节省电量。<a id=\"more\"></a><br> 建议不要选择省电模式，因为会只在最低频率下运行，不是一般般的卡（最低频率非122MHZ不在此列）…<br> 在听音乐的时候建议不要选择按需模式，因为在按需模式下播放音乐，锁屏后音乐会一卡一卡的播放（由此可见，按需模式是使用时最高频运行，锁屏时最低频运行）<br> 在玩游戏的时候建议超频，并选择高性能模式。<br> 想省电请选择传统模式，因为2.1便是此模式。<br> 模式选择请自行按照需求选择，</p>\n<p>ondemand及conservative是另外一组。其中，ondemand是CM7的默认调速器，在ondemand下，CPU会规律性地检查负载状况，当负载量超过了某临界值，CPU会自动调整运行在最高频率下，而当负载量再度回落，CPU会调整运行在次低一级的频率（而非直接降至最低频率）。而conservative与ondemand不同的地方就在于，当负载超过某临界值时，CPU会调整运行至更高一级的频率（而非直接跳至最高频率）。<br> 也就是说，ondemand下CPU的做法是对手一反抗，直接发大招。conservative下CPU的做法是道高一尺，魔高一丈…</p>\n<p> 不管那两个我不清楚的模式…在另外四种模式中，耗电量从小到大的排序应该是powersave、conservative、ondemand、performance。powersave模式是省电，但卡得厉害。因此，conservative便成为我们唯一的选择。<br> 经过本人实践，consevative确实要比ondemand模式下更为省电（通过观察currentwidget记录的log）,而且也不算太卡。<br> 当然，由于本人并非游戏党，所以在性能与耗电的平衡中才最终选择了conservative（其实我也不太清楚conservative模式对游戏性能究竟能有多大影响，感觉无非就是CPU多蹦几下嘛…)。其他的各位机油可以根据自己的使用习惯并结合实践选择最适合自己的调速器。另外友情提示，在选择了一个新的调速器后，请记得勾选CPU设置中的启动时设置选项，这样下次启动时才能维持自己的调速器设置。<br>相信CM7在好好利用调速器之后，CM7耗电量大的问题能得以解决。</p>\n","site":{"data":{}},"excerpt":"<p>ondemand（按需响应模式）：系统默认的超频模式，在最大最小频率之间自动调整<br> interactive（交流循环模式）：只要手机运行频率直接上最高值，然后CPU负荷慢慢降低（系统响应最快，耗电多一些）<br> conservative（保守模式）：随着CPU负荷加大，逐步提升频率到最高，然后降至最低（系统响应快，耗电比I模式省）<br> smartass：是I和C模式的升级，该模式在比i模式不差的响应的前提下会做到了更加省电<br> performance（高性能模式）：高性能模式，按你设定范围的最好频率运行(机器最流畅,耗电也最大)<br> userspace（用户隔离模式）：当控制器处于非工作状态时控制cpu速度的一种方法，建议最好不使用该选项<br> powersave（省电模式）：按设定最小频率低负荷运行，省电但系统响应速度慢<br> lagthree(不受延迟模式）：一种CPU调节策略，倾向于节省电量。","more":"<br> 建议不要选择省电模式，因为会只在最低频率下运行，不是一般般的卡（最低频率非122MHZ不在此列）…<br> 在听音乐的时候建议不要选择按需模式，因为在按需模式下播放音乐，锁屏后音乐会一卡一卡的播放（由此可见，按需模式是使用时最高频运行，锁屏时最低频运行）<br> 在玩游戏的时候建议超频，并选择高性能模式。<br> 想省电请选择传统模式，因为2.1便是此模式。<br> 模式选择请自行按照需求选择，</p>\n<p>ondemand及conservative是另外一组。其中，ondemand是CM7的默认调速器，在ondemand下，CPU会规律性地检查负载状况，当负载量超过了某临界值，CPU会自动调整运行在最高频率下，而当负载量再度回落，CPU会调整运行在次低一级的频率（而非直接降至最低频率）。而conservative与ondemand不同的地方就在于，当负载超过某临界值时，CPU会调整运行至更高一级的频率（而非直接跳至最高频率）。<br> 也就是说，ondemand下CPU的做法是对手一反抗，直接发大招。conservative下CPU的做法是道高一尺，魔高一丈…</p>\n<p> 不管那两个我不清楚的模式…在另外四种模式中，耗电量从小到大的排序应该是powersave、conservative、ondemand、performance。powersave模式是省电，但卡得厉害。因此，conservative便成为我们唯一的选择。<br> 经过本人实践，consevative确实要比ondemand模式下更为省电（通过观察currentwidget记录的log）,而且也不算太卡。<br> 当然，由于本人并非游戏党，所以在性能与耗电的平衡中才最终选择了conservative（其实我也不太清楚conservative模式对游戏性能究竟能有多大影响，感觉无非就是CPU多蹦几下嘛…)。其他的各位机油可以根据自己的使用习惯并结合实践选择最适合自己的调速器。另外友情提示，在选择了一个新的调速器后，请记得勾选CPU设置中的启动时设置选项，这样下次启动时才能维持自己的调速器设置。<br>相信CM7在好好利用调速器之后，CM7耗电量大的问题能得以解决。</p>"},{"title":"dex2jar出现Error occurred during initialization of VM解决办法","id":"1543","date":"2014-03-27T03:18:27.000Z","_content":"\n使用dex2jar出现\n`Error occurred during initialization of VM Could not reserve enough space for object heap`\n这人肯定是内存不够了呗，打开dex2jar.bat，减少heap size为-Xms128m -Xmx256m就可以了。","source":"_posts/dex2jar-e5-87-ba-e7-8e-b0error-occurred-during-initialization-of-vm-e8-a7-a3-e5-86-b3-e5-8a-9e-e6-b3-95.md","raw":"---\ntitle: dex2jar出现Error occurred during initialization of VM解决办法\ntags:\n  - dex2jar\n  - java\nid: 1543\ncategories:\n  - Java\ndate: 2014-03-27 11:18:27\n---\n\n使用dex2jar出现\n`Error occurred during initialization of VM Could not reserve enough space for object heap`\n这人肯定是内存不够了呗，打开dex2jar.bat，减少heap size为-Xms128m -Xmx256m就可以了。","slug":"dex2jar-e5-87-ba-e7-8e-b0error-occurred-during-initialization-of-vm-e8-a7-a3-e5-86-b3-e5-8a-9e-e6-b3-95","published":1,"updated":"2018-01-13T05:07:00.447Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjccw7x7q000raqcrzclpi985","content":"<p>使用dex2jar出现<br><code>Error occurred during initialization of VM Could not reserve enough space for object heap</code><br>这人肯定是内存不够了呗，打开dex2jar.bat，减少heap size为-Xms128m -Xmx256m就可以了。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>使用dex2jar出现<br><code>Error occurred during initialization of VM Could not reserve enough space for object heap</code><br>这人肯定是内存不够了呗，打开dex2jar.bat，减少heap size为-Xms128m -Xmx256m就可以了。</p>\n"},{"title":"CSV 在 UTF 8 编码下 Excel 2007 打开乱码的解决方法","id":"2454","date":"2015-03-08T07:46:17.000Z","_content":"\n首先说这个问题太变态了，Office自己都和自己不兼容，正常的utf8编码下 07 局然打开中文乱乱码。当然首选想到是转成gbk这样中文系编码，这样中文没有了问题，但是对于其它小语种也是有同样乱码的问题。最后的最后还是Google到了解决方法。\n\n先下这个网页，[CSV tests encoding and column separator](http://wiki.scn.sap.com/wiki/display/ABAP/CSV+tests+of+encoding+and+column+separator?original_fqdn=wiki.sdn.sap.com \"CSV tests encoding and column separator\")\n上面对比测试了csv不同编码不同头不同分隔符在 excel 2003 和 excel 2007 乱码情况，其中没有问题的只有下面这种：\n\n![utf16bomtab](/wp-content/uploads/2015/03/utf16bomtab.png)\n\n也就是说在unicode系下，要保证没有乱码要做到3点：utf16le编码，tab分隔，加bom 。\n\n下面是PHP版的最终代码，参考这里　[excel　mangles　diacritics　in　csv](http://stackoverflow.com/questions/155097/microsoft-excel-mangles-diacritics-in-csv-files/10969702 \"excel　mangles　diacritics　in　csv\")\n`  /**\n   * Export an array as downladable Excel CSV\n   * @param array   $header\n   * @param array   $data\n   * @param string  $filename\n   */\n  function toCSV($header, $data, $filename) {\n    $sep  = \"\\t\";\n    $eol  = \"\\n\";\n    $csv  =  count($header) ? '\"'. implode('\"'.$sep.'\"', $header).'\"'.$eol : '';\n    foreach($data as $line) {\n      $csv .= '\"'. implode('\"'.$sep.'\"', $line).'\"'.$eol;\n    }\n    $encoded_csv = mb_convert_encoding($csv, 'UTF-16LE', 'UTF-8');\n    header('Content-Description: File Transfer');\n    header('Content-Type: application/vnd.ms-excel');\n    header('Content-Disposition: attachment; filename=\"'.$filename.'.csv\"');\n    header('Content-Transfer-Encoding: binary');\n    header('Expires: 0');\n    header('Cache-Control: must-revalidate, post-check=0, pre-check=0');\n    header('Pragma: public');\n    header('Content-Length: '. strlen($encoded_csv));\n    echo chr(255) . chr(254) . $encoded_csv;\n    exit;\n  }`","source":"_posts/csv-e5-9c-a8-utf-8-e7-bc-96-e7-a0-81-e4-b8-8b-excel-2007-e6-89-93-e5-bc-80-e4-b9-b1-e7-a0-81-e7-9a-84-e8-a7-a3-e5-86-b3-e6-96-b9-e6-b3-95.md","raw":"---\ntitle: CSV 在 UTF 8 编码下 Excel 2007 打开乱码的解决方法\nid: 2454\ncategories:\n  - PHP\ndate: 2015-03-08 15:46:17\ntags:\n---\n\n首先说这个问题太变态了，Office自己都和自己不兼容，正常的utf8编码下 07 局然打开中文乱乱码。当然首选想到是转成gbk这样中文系编码，这样中文没有了问题，但是对于其它小语种也是有同样乱码的问题。最后的最后还是Google到了解决方法。\n\n先下这个网页，[CSV tests encoding and column separator](http://wiki.scn.sap.com/wiki/display/ABAP/CSV+tests+of+encoding+and+column+separator?original_fqdn=wiki.sdn.sap.com \"CSV tests encoding and column separator\")\n上面对比测试了csv不同编码不同头不同分隔符在 excel 2003 和 excel 2007 乱码情况，其中没有问题的只有下面这种：\n\n![utf16bomtab](/wp-content/uploads/2015/03/utf16bomtab.png)\n\n也就是说在unicode系下，要保证没有乱码要做到3点：utf16le编码，tab分隔，加bom 。\n\n下面是PHP版的最终代码，参考这里　[excel　mangles　diacritics　in　csv](http://stackoverflow.com/questions/155097/microsoft-excel-mangles-diacritics-in-csv-files/10969702 \"excel　mangles　diacritics　in　csv\")\n`  /**\n   * Export an array as downladable Excel CSV\n   * @param array   $header\n   * @param array   $data\n   * @param string  $filename\n   */\n  function toCSV($header, $data, $filename) {\n    $sep  = \"\\t\";\n    $eol  = \"\\n\";\n    $csv  =  count($header) ? '\"'. implode('\"'.$sep.'\"', $header).'\"'.$eol : '';\n    foreach($data as $line) {\n      $csv .= '\"'. implode('\"'.$sep.'\"', $line).'\"'.$eol;\n    }\n    $encoded_csv = mb_convert_encoding($csv, 'UTF-16LE', 'UTF-8');\n    header('Content-Description: File Transfer');\n    header('Content-Type: application/vnd.ms-excel');\n    header('Content-Disposition: attachment; filename=\"'.$filename.'.csv\"');\n    header('Content-Transfer-Encoding: binary');\n    header('Expires: 0');\n    header('Cache-Control: must-revalidate, post-check=0, pre-check=0');\n    header('Pragma: public');\n    header('Content-Length: '. strlen($encoded_csv));\n    echo chr(255) . chr(254) . $encoded_csv;\n    exit;\n  }`","slug":"csv-e5-9c-a8-utf-8-e7-bc-96-e7-a0-81-e4-b8-8b-excel-2007-e6-89-93-e5-bc-80-e4-b9-b1-e7-a0-81-e7-9a-84-e8-a7-a3-e5-86-b3-e6-96-b9-e6-b3-95","published":1,"updated":"2018-01-13T05:07:00.484Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjccw7x7r000uaqcrcjvmygoj","content":"<p>首先说这个问题太变态了，Office自己都和自己不兼容，正常的utf8编码下 07 局然打开中文乱乱码。当然首选想到是转成gbk这样中文系编码，这样中文没有了问题，但是对于其它小语种也是有同样乱码的问题。最后的最后还是Google到了解决方法。</p>\n<p>先下这个网页，<a href=\"http://wiki.scn.sap.com/wiki/display/ABAP/CSV+tests+of+encoding+and+column+separator?original_fqdn=wiki.sdn.sap.com\" title=\"CSV tests encoding and column separator\" target=\"_blank\" rel=\"noopener\">CSV tests encoding and column separator</a><br>上面对比测试了csv不同编码不同头不同分隔符在 excel 2003 和 excel 2007 乱码情况，其中没有问题的只有下面这种：</p>\n<p><img src=\"/wp-content/uploads/2015/03/utf16bomtab.png\" alt=\"utf16bomtab\"></p>\n<p>也就是说在unicode系下，要保证没有乱码要做到3点：utf16le编码，tab分隔，加bom 。</p>\n<p>下面是PHP版的最终代码，参考这里　<a href=\"http://stackoverflow.com/questions/155097/microsoft-excel-mangles-diacritics-in-csv-files/10969702\" title=\"excel　mangles　diacritics　in　csv\" target=\"_blank\" rel=\"noopener\">excel　mangles　diacritics　in　csv</a><br>`  /**</p>\n<ul>\n<li>Export an array as downladable Excel CSV</li>\n<li>@param array   $header</li>\n<li>@param array   $data</li>\n<li>@param string  $filename<br>*/<br>function toCSV($header, $data, $filename) {<br>$sep  = “\\t”;<br>$eol  = “\\n”;<br>$csv  =  count($header) ? ‘“‘. implode(‘“‘.$sep.’”‘, $header).’”‘.$eol : ‘’;<br>foreach($data as $line) {<br> $csv .= ‘“‘. implode(‘“‘.$sep.’”‘, $line).’”‘.$eol;<br>}<br>$encoded_csv = mb_convert_encoding($csv, ‘UTF-16LE’, ‘UTF-8’);<br>header(‘Content-Description: File Transfer’);<br>header(‘Content-Type: application/vnd.ms-excel’);<br>header(‘Content-Disposition: attachment; filename=”‘.$filename.’.csv”‘);<br>header(‘Content-Transfer-Encoding: binary’);<br>header(‘Expires: 0’);<br>header(‘Cache-Control: must-revalidate, post-check=0, pre-check=0’);<br>header(‘Pragma: public’);<br>header(‘Content-Length: ‘. strlen($encoded_csv));<br>echo chr(255) . chr(254) . $encoded_csv;<br>exit;<br>}`</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>首先说这个问题太变态了，Office自己都和自己不兼容，正常的utf8编码下 07 局然打开中文乱乱码。当然首选想到是转成gbk这样中文系编码，这样中文没有了问题，但是对于其它小语种也是有同样乱码的问题。最后的最后还是Google到了解决方法。</p>\n<p>先下这个网页，<a href=\"http://wiki.scn.sap.com/wiki/display/ABAP/CSV+tests+of+encoding+and+column+separator?original_fqdn=wiki.sdn.sap.com\" title=\"CSV tests encoding and column separator\" target=\"_blank\" rel=\"noopener\">CSV tests encoding and column separator</a><br>上面对比测试了csv不同编码不同头不同分隔符在 excel 2003 和 excel 2007 乱码情况，其中没有问题的只有下面这种：</p>\n<p><img src=\"/wp-content/uploads/2015/03/utf16bomtab.png\" alt=\"utf16bomtab\"></p>\n<p>也就是说在unicode系下，要保证没有乱码要做到3点：utf16le编码，tab分隔，加bom 。</p>\n<p>下面是PHP版的最终代码，参考这里　<a href=\"http://stackoverflow.com/questions/155097/microsoft-excel-mangles-diacritics-in-csv-files/10969702\" title=\"excel　mangles　diacritics　in　csv\" target=\"_blank\" rel=\"noopener\">excel　mangles　diacritics　in　csv</a><br>`  /**</p>\n<ul>\n<li>Export an array as downladable Excel CSV</li>\n<li>@param array   $header</li>\n<li>@param array   $data</li>\n<li>@param string  $filename<br>*/<br>function toCSV($header, $data, $filename) {<br>$sep  = “\\t”;<br>$eol  = “\\n”;<br>$csv  =  count($header) ? ‘“‘. implode(‘“‘.$sep.’”‘, $header).’”‘.$eol : ‘’;<br>foreach($data as $line) {<br> $csv .= ‘“‘. implode(‘“‘.$sep.’”‘, $line).’”‘.$eol;<br>}<br>$encoded_csv = mb_convert_encoding($csv, ‘UTF-16LE’, ‘UTF-8’);<br>header(‘Content-Description: File Transfer’);<br>header(‘Content-Type: application/vnd.ms-excel’);<br>header(‘Content-Disposition: attachment; filename=”‘.$filename.’.csv”‘);<br>header(‘Content-Transfer-Encoding: binary’);<br>header(‘Expires: 0’);<br>header(‘Cache-Control: must-revalidate, post-check=0, pre-check=0’);<br>header(‘Pragma: public’);<br>header(‘Content-Length: ‘. strlen($encoded_csv));<br>echo chr(255) . chr(254) . $encoded_csv;<br>exit;<br>}`</li>\n</ul>\n"},{"title":"DirectX修复工具，解决各种游戏各种问题","id":"523","date":"2012-01-12T23:32:03.000Z","_content":"\nDirectX修复工具最新版：DirectX repair V1.0 NEW!\n\n版本号：V1.0.0.25354\n\n大小: 68.6MB/rar固实，98.4MB/zip格式\n\n软件类型：免费绿色软件\n\n语言：简体中文\n\n软件类型：系统修复/系统增强\n\n下载地址1：\n\n[http://download.csdn.net/detail/vbcom/3821148](http://download.csdn.net/detail/vbcom/3821148)\n\n下载地址2：\n\n[http://www.duote.com/soft/51708.html](http://www.duote.com/soft/51708.html)\n\n下载地址3：\n\n[http://www.onlinedown.net/soft/120082.htm](http://www.onlinedown.net/soft/120082.htm)\n\n<!--more-->软件简介：\n\nDirectX修复工具(DirectX repair)是一款系统级工具软件，简便易用。本程序为绿色版，无需安装，可直接运行。\n\n本程序适用于多个操作系统，如Windows XP（需先安装.NET 2.0，详情请参阅“致Windows XP用户.txt”文件）、Windows Vista以及Windows 7，同时兼容32位操作系统和64位操作系统。本程序会根据系统的不同，自动调整任务模式，无需用户进行设置。\n\n本程序的主要功能是检测当前系统的DirectX状态，如果发现异常则进行修复（可修复0xc000007b错误）。本程序中包含了最新版的DirectX redist(Jun2010)，并且全部文件都有Microsoft的数字签名，安全放心。\n\n本程序为了应对一般电脑用户的使用，采用了傻瓜式一键设计，只要点击主界面上的“检测并修复”按钮，程序就会自动完成校验、检测、修复的全部功能，无需用户的介入，大大降低了使用难度。\n\n本程序采用了多线程编程技术，可充分利用系统的资源，减少时间的等待。同时，针对部分低性能电脑，也做了一定程度的优化。\n\n本程序有自动记录日志功能，可以记录每一次检测修复结果，方便在出现问题时，及时分析和查找原因，以便找到解决办法。\n\n程序的“选项”对话框中包含了2项高级功能。点击其中的“注册系统中所有dll文件”按钮可以自动注册系统文件夹下的所有dll文件。该项功能不仅能修复DirectX的问题，还可以修复系统中很多其他由于dll未注册而产生的问题，颇为实用。点击第二个按钮可以为dll文件的右键菜单添加“注册”和“卸载”项，方便对单独的dll文件进行注册。请注意，并不是所有的dll文件都可以通过这种方式注册。\n\n程序附带了用户反馈程序，可以在用户允许的前提下发送检测修复结果。用户也可以在出现问题时通过反馈程序和软件作者进行交流，共同查找问题。反馈是完全匿名和自愿的。\n\n本程序基于Microsoft .NET Framework 2.0开发，对于Windows 2000、Windows XP、Windows 2003的用户需要首先安装.NET Framework 2.0或更高版本才可运行本程序。有关下载和安装的详细信息请参阅“致Windows XP用户.txt”文件。对于Windows Vista、Windows 7用户，可以直接运行本程序。\n\nfrom-&gt;http://blog.csdn.net/vbcom/article/details/6962388","source":"_posts/directx-e4-bf-ae-e5-a4-8d-e5-b7-a5-e5-85-b7-ef-bc-8c-e8-a7-a3-e5-86-b3-e5-90-84-e7-a7-8d-e6-b8-b8-e6-88-8f-e5-90-84-e7-a7-8d-e9-97-ae-e9-a2-98.md","raw":"---\ntitle: DirectX修复工具，解决各种游戏各种问题\nid: 523\ncategories:\n  - Windows\ndate: 2012-01-13 07:32:03\ntags:\n---\n\nDirectX修复工具最新版：DirectX repair V1.0 NEW!\n\n版本号：V1.0.0.25354\n\n大小: 68.6MB/rar固实，98.4MB/zip格式\n\n软件类型：免费绿色软件\n\n语言：简体中文\n\n软件类型：系统修复/系统增强\n\n下载地址1：\n\n[http://download.csdn.net/detail/vbcom/3821148](http://download.csdn.net/detail/vbcom/3821148)\n\n下载地址2：\n\n[http://www.duote.com/soft/51708.html](http://www.duote.com/soft/51708.html)\n\n下载地址3：\n\n[http://www.onlinedown.net/soft/120082.htm](http://www.onlinedown.net/soft/120082.htm)\n\n<!--more-->软件简介：\n\nDirectX修复工具(DirectX repair)是一款系统级工具软件，简便易用。本程序为绿色版，无需安装，可直接运行。\n\n本程序适用于多个操作系统，如Windows XP（需先安装.NET 2.0，详情请参阅“致Windows XP用户.txt”文件）、Windows Vista以及Windows 7，同时兼容32位操作系统和64位操作系统。本程序会根据系统的不同，自动调整任务模式，无需用户进行设置。\n\n本程序的主要功能是检测当前系统的DirectX状态，如果发现异常则进行修复（可修复0xc000007b错误）。本程序中包含了最新版的DirectX redist(Jun2010)，并且全部文件都有Microsoft的数字签名，安全放心。\n\n本程序为了应对一般电脑用户的使用，采用了傻瓜式一键设计，只要点击主界面上的“检测并修复”按钮，程序就会自动完成校验、检测、修复的全部功能，无需用户的介入，大大降低了使用难度。\n\n本程序采用了多线程编程技术，可充分利用系统的资源，减少时间的等待。同时，针对部分低性能电脑，也做了一定程度的优化。\n\n本程序有自动记录日志功能，可以记录每一次检测修复结果，方便在出现问题时，及时分析和查找原因，以便找到解决办法。\n\n程序的“选项”对话框中包含了2项高级功能。点击其中的“注册系统中所有dll文件”按钮可以自动注册系统文件夹下的所有dll文件。该项功能不仅能修复DirectX的问题，还可以修复系统中很多其他由于dll未注册而产生的问题，颇为实用。点击第二个按钮可以为dll文件的右键菜单添加“注册”和“卸载”项，方便对单独的dll文件进行注册。请注意，并不是所有的dll文件都可以通过这种方式注册。\n\n程序附带了用户反馈程序，可以在用户允许的前提下发送检测修复结果。用户也可以在出现问题时通过反馈程序和软件作者进行交流，共同查找问题。反馈是完全匿名和自愿的。\n\n本程序基于Microsoft .NET Framework 2.0开发，对于Windows 2000、Windows XP、Windows 2003的用户需要首先安装.NET Framework 2.0或更高版本才可运行本程序。有关下载和安装的详细信息请参阅“致Windows XP用户.txt”文件。对于Windows Vista、Windows 7用户，可以直接运行本程序。\n\nfrom-&gt;http://blog.csdn.net/vbcom/article/details/6962388","slug":"directx-e4-bf-ae-e5-a4-8d-e5-b7-a5-e5-85-b7-ef-bc-8c-e8-a7-a3-e5-86-b3-e5-90-84-e7-a7-8d-e6-b8-b8-e6-88-8f-e5-90-84-e7-a7-8d-e9-97-ae-e9-a2-98","published":1,"updated":"2018-01-13T05:07:00.490Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjccw7x7t000zaqcrzj3hr7x8","content":"<p>DirectX修复工具最新版：DirectX repair V1.0 NEW!</p>\n<p>版本号：V1.0.0.25354</p>\n<p>大小: 68.6MB/rar固实，98.4MB/zip格式</p>\n<p>软件类型：免费绿色软件</p>\n<p>语言：简体中文</p>\n<p>软件类型：系统修复/系统增强</p>\n<p>下载地址1：</p>\n<p><a href=\"http://download.csdn.net/detail/vbcom/3821148\" target=\"_blank\" rel=\"noopener\">http://download.csdn.net/detail/vbcom/3821148</a></p>\n<p>下载地址2：</p>\n<p><a href=\"http://www.duote.com/soft/51708.html\" target=\"_blank\" rel=\"noopener\">http://www.duote.com/soft/51708.html</a></p>\n<p>下载地址3：</p>\n<p><a href=\"http://www.onlinedown.net/soft/120082.htm\" target=\"_blank\" rel=\"noopener\">http://www.onlinedown.net/soft/120082.htm</a></p>\n<p><a id=\"more\"></a>软件简介：</p>\n<p>DirectX修复工具(DirectX repair)是一款系统级工具软件，简便易用。本程序为绿色版，无需安装，可直接运行。</p>\n<p>本程序适用于多个操作系统，如Windows XP（需先安装.NET 2.0，详情请参阅“致Windows XP用户.txt”文件）、Windows Vista以及Windows 7，同时兼容32位操作系统和64位操作系统。本程序会根据系统的不同，自动调整任务模式，无需用户进行设置。</p>\n<p>本程序的主要功能是检测当前系统的DirectX状态，如果发现异常则进行修复（可修复0xc000007b错误）。本程序中包含了最新版的DirectX redist(Jun2010)，并且全部文件都有Microsoft的数字签名，安全放心。</p>\n<p>本程序为了应对一般电脑用户的使用，采用了傻瓜式一键设计，只要点击主界面上的“检测并修复”按钮，程序就会自动完成校验、检测、修复的全部功能，无需用户的介入，大大降低了使用难度。</p>\n<p>本程序采用了多线程编程技术，可充分利用系统的资源，减少时间的等待。同时，针对部分低性能电脑，也做了一定程度的优化。</p>\n<p>本程序有自动记录日志功能，可以记录每一次检测修复结果，方便在出现问题时，及时分析和查找原因，以便找到解决办法。</p>\n<p>程序的“选项”对话框中包含了2项高级功能。点击其中的“注册系统中所有dll文件”按钮可以自动注册系统文件夹下的所有dll文件。该项功能不仅能修复DirectX的问题，还可以修复系统中很多其他由于dll未注册而产生的问题，颇为实用。点击第二个按钮可以为dll文件的右键菜单添加“注册”和“卸载”项，方便对单独的dll文件进行注册。请注意，并不是所有的dll文件都可以通过这种方式注册。</p>\n<p>程序附带了用户反馈程序，可以在用户允许的前提下发送检测修复结果。用户也可以在出现问题时通过反馈程序和软件作者进行交流，共同查找问题。反馈是完全匿名和自愿的。</p>\n<p>本程序基于Microsoft .NET Framework 2.0开发，对于Windows 2000、Windows XP、Windows 2003的用户需要首先安装.NET Framework 2.0或更高版本才可运行本程序。有关下载和安装的详细信息请参阅“致Windows XP用户.txt”文件。对于Windows Vista、Windows 7用户，可以直接运行本程序。</p>\n<p>from-&gt;<a href=\"http://blog.csdn.net/vbcom/article/details/6962388\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/vbcom/article/details/6962388</a></p>\n","site":{"data":{}},"excerpt":"<p>DirectX修复工具最新版：DirectX repair V1.0 NEW!</p>\n<p>版本号：V1.0.0.25354</p>\n<p>大小: 68.6MB/rar固实，98.4MB/zip格式</p>\n<p>软件类型：免费绿色软件</p>\n<p>语言：简体中文</p>\n<p>软件类型：系统修复/系统增强</p>\n<p>下载地址1：</p>\n<p><a href=\"http://download.csdn.net/detail/vbcom/3821148\" target=\"_blank\" rel=\"noopener\">http://download.csdn.net/detail/vbcom/3821148</a></p>\n<p>下载地址2：</p>\n<p><a href=\"http://www.duote.com/soft/51708.html\" target=\"_blank\" rel=\"noopener\">http://www.duote.com/soft/51708.html</a></p>\n<p>下载地址3：</p>\n<p><a href=\"http://www.onlinedown.net/soft/120082.htm\" target=\"_blank\" rel=\"noopener\">http://www.onlinedown.net/soft/120082.htm</a></p>\n<p>","more":"软件简介：</p>\n<p>DirectX修复工具(DirectX repair)是一款系统级工具软件，简便易用。本程序为绿色版，无需安装，可直接运行。</p>\n<p>本程序适用于多个操作系统，如Windows XP（需先安装.NET 2.0，详情请参阅“致Windows XP用户.txt”文件）、Windows Vista以及Windows 7，同时兼容32位操作系统和64位操作系统。本程序会根据系统的不同，自动调整任务模式，无需用户进行设置。</p>\n<p>本程序的主要功能是检测当前系统的DirectX状态，如果发现异常则进行修复（可修复0xc000007b错误）。本程序中包含了最新版的DirectX redist(Jun2010)，并且全部文件都有Microsoft的数字签名，安全放心。</p>\n<p>本程序为了应对一般电脑用户的使用，采用了傻瓜式一键设计，只要点击主界面上的“检测并修复”按钮，程序就会自动完成校验、检测、修复的全部功能，无需用户的介入，大大降低了使用难度。</p>\n<p>本程序采用了多线程编程技术，可充分利用系统的资源，减少时间的等待。同时，针对部分低性能电脑，也做了一定程度的优化。</p>\n<p>本程序有自动记录日志功能，可以记录每一次检测修复结果，方便在出现问题时，及时分析和查找原因，以便找到解决办法。</p>\n<p>程序的“选项”对话框中包含了2项高级功能。点击其中的“注册系统中所有dll文件”按钮可以自动注册系统文件夹下的所有dll文件。该项功能不仅能修复DirectX的问题，还可以修复系统中很多其他由于dll未注册而产生的问题，颇为实用。点击第二个按钮可以为dll文件的右键菜单添加“注册”和“卸载”项，方便对单独的dll文件进行注册。请注意，并不是所有的dll文件都可以通过这种方式注册。</p>\n<p>程序附带了用户反馈程序，可以在用户允许的前提下发送检测修复结果。用户也可以在出现问题时通过反馈程序和软件作者进行交流，共同查找问题。反馈是完全匿名和自愿的。</p>\n<p>本程序基于Microsoft .NET Framework 2.0开发，对于Windows 2000、Windows XP、Windows 2003的用户需要首先安装.NET Framework 2.0或更高版本才可运行本程序。有关下载和安装的详细信息请参阅“致Windows XP用户.txt”文件。对于Windows Vista、Windows 7用户，可以直接运行本程序。</p>\n<p>from-&gt;<a href=\"http://blog.csdn.net/vbcom/article/details/6962388\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/vbcom/article/details/6962388</a></p>"},{"title":"《星际穿越》与相对论中的时间空间","id":"2216","date":"2014-11-23T09:31:04.000Z","_content":"\n![p2209693526](/wp-content/uploads/2014/11/5a8e12bed3465155ed9ca196400bc5d1.jpg)\n首先必须承认《星际穿越》是部好电影，不单单是场面的真实感，同时也将相对论中四维空间和质量越大时间越慢的的概念用直白的方式表达了出来，当然也仅仅说明“是什么”，没有讲“为什么”，因为这其实就是一部科幻片，而不是一部科教片。电影的主线仍然是（爱+X）方式来表达，这个爱主要体现在对子女的爱与超级英雄拯救全人类大爱上，而X换成了与一往不大相同的相对论的时间与空间的概念，并且找了霍金的朋友Kip这位真正的物理学家来设计黑洞，当然是精彩。\n\n**说下库伯儿子的人物设定**\n\n关于人物的设定其他人不用多讲，一看就会明白，但是关于库伯儿子的设定好多人会认为这是多余的，或是感觉他好无能。其实我想这就是目的，通过对代表的传统人类和要拯救人类并且有着相信父亲会回来的妹妹作对比，可以很明显的感到那种踏实与规规矩矩，这个肯定是从侧面让他妹的人物更立体。还有一小点就是他一直和他父亲对话，20多年一如既往，一个很大的催泪弹。并且他妹开始时不跟库伯通话，不找个儿子来通话那还有人性么，这也是突出他妹的个性，其实从她的墨菲（墨菲定理）的名字就早已可以看出。不过要说对人类的贡献，那就是他把他妹的房间保护的很完整，如果他把那些书全仍了，也许就没有了后来。\n\n** 个人理解下四维空间和时间越慢的问题**<!--more-->\n\n四维空间可以理解为是三维空间的平移，而在四维空间的人是看不到时间量的，只有更高维度的五维空间才可以看到，这个在影片中的库伯在超立方体就是这样看，可以像播放器一样快进与后退看四维空间的变化。可以设想一下自己在二维空间中，看到的只是线和点，只有我们在三维里的人才可以看到这个面。其实这里隐含着一个有意思的问题，就是，我们可以把一张平面进行扭曲，这个是不是类似于更高维度的通某种方式把我们的时空也可以扭曲？这里当然有个疑问，更高维的库伯为什么没有用更高明的方法来传递信息？库伯在五维超立方体向身在四维空间的女儿传递信息时的方式感觉好费劲，也许正是这种费劲看起来对撕心裂肺与激动人心。库伯的五维超立方体是更高维的库伯建造，然后再从五维向四维传递信息，是不是可以理解维度的信息传递只能一次跨一维，如果想跨多维就要找介质（当前为库伯本身）？但是库伯说向低维传递信息是通过引力，而引力是由质量引起，这里就有些纠结。\n\n要说一下为什么“海洋星球”上1个小时相当于7年。这个要看下狭义相对论的定义中的时问题间变慢（钟慢效应）问题。先来类似比下，举个不恰当的栗子（初学者~）：一个旋转的陀螺（是不是想到了盗梦空间里的?）。它的角速度是不变的，但是半径的圆上的点在相同时间里经过的长度是不同的，越往外长度越长，对应的速度也就越快。假设不同半径上有不同的人，那么要想让俩人经过的角度相同，也就是时间相同，半径大的人就要走更多的路（步数）。反之，如果走相同的步数，外面的人花的时间更短。人的时间是相对自己来说，自己走一步的时间是相同的，也就是说外面的人花了更少的“时间”作了和里面的人相同的事情，所以自己“过的快”。\n\n** 最后一定要吐槽下**\n1.Prefix有点长，到了三分之二时候才猜出片头在女儿房间传递信息的是库伯本人。如果要问看电影前要准备些什么，我要说少喝水。。。\n2.库伯同事死的时候我感觉他们都好淡定，难道这就是英雄们的气魄？还有就是片后的库伯的子子孙孙见了库伯本人后为什么没人喊爷爷？","source":"_posts/e3-80-8a-e6-98-9f-e9-99-85-e7-a9-bf-e8-b6-8a-e3-80-8b-e4-b8-8e-e7-9b-b8-e5-af-b9-e8-ae-ba-e4-b8-ad-e7-9a-84-e6-97-b6-e9-97-b4-e7-a9-ba-e9-97-b4.md","raw":"---\ntitle: 《星际穿越》与相对论中的时间空间\nid: 2216\ncategories:\n  - Other\ndate: 2014-11-23 17:31:04\ntags:\n---\n\n![p2209693526](/wp-content/uploads/2014/11/5a8e12bed3465155ed9ca196400bc5d1.jpg)\n首先必须承认《星际穿越》是部好电影，不单单是场面的真实感，同时也将相对论中四维空间和质量越大时间越慢的的概念用直白的方式表达了出来，当然也仅仅说明“是什么”，没有讲“为什么”，因为这其实就是一部科幻片，而不是一部科教片。电影的主线仍然是（爱+X）方式来表达，这个爱主要体现在对子女的爱与超级英雄拯救全人类大爱上，而X换成了与一往不大相同的相对论的时间与空间的概念，并且找了霍金的朋友Kip这位真正的物理学家来设计黑洞，当然是精彩。\n\n**说下库伯儿子的人物设定**\n\n关于人物的设定其他人不用多讲，一看就会明白，但是关于库伯儿子的设定好多人会认为这是多余的，或是感觉他好无能。其实我想这就是目的，通过对代表的传统人类和要拯救人类并且有着相信父亲会回来的妹妹作对比，可以很明显的感到那种踏实与规规矩矩，这个肯定是从侧面让他妹的人物更立体。还有一小点就是他一直和他父亲对话，20多年一如既往，一个很大的催泪弹。并且他妹开始时不跟库伯通话，不找个儿子来通话那还有人性么，这也是突出他妹的个性，其实从她的墨菲（墨菲定理）的名字就早已可以看出。不过要说对人类的贡献，那就是他把他妹的房间保护的很完整，如果他把那些书全仍了，也许就没有了后来。\n\n** 个人理解下四维空间和时间越慢的问题**<!--more-->\n\n四维空间可以理解为是三维空间的平移，而在四维空间的人是看不到时间量的，只有更高维度的五维空间才可以看到，这个在影片中的库伯在超立方体就是这样看，可以像播放器一样快进与后退看四维空间的变化。可以设想一下自己在二维空间中，看到的只是线和点，只有我们在三维里的人才可以看到这个面。其实这里隐含着一个有意思的问题，就是，我们可以把一张平面进行扭曲，这个是不是类似于更高维度的通某种方式把我们的时空也可以扭曲？这里当然有个疑问，更高维的库伯为什么没有用更高明的方法来传递信息？库伯在五维超立方体向身在四维空间的女儿传递信息时的方式感觉好费劲，也许正是这种费劲看起来对撕心裂肺与激动人心。库伯的五维超立方体是更高维的库伯建造，然后再从五维向四维传递信息，是不是可以理解维度的信息传递只能一次跨一维，如果想跨多维就要找介质（当前为库伯本身）？但是库伯说向低维传递信息是通过引力，而引力是由质量引起，这里就有些纠结。\n\n要说一下为什么“海洋星球”上1个小时相当于7年。这个要看下狭义相对论的定义中的时问题间变慢（钟慢效应）问题。先来类似比下，举个不恰当的栗子（初学者~）：一个旋转的陀螺（是不是想到了盗梦空间里的?）。它的角速度是不变的，但是半径的圆上的点在相同时间里经过的长度是不同的，越往外长度越长，对应的速度也就越快。假设不同半径上有不同的人，那么要想让俩人经过的角度相同，也就是时间相同，半径大的人就要走更多的路（步数）。反之，如果走相同的步数，外面的人花的时间更短。人的时间是相对自己来说，自己走一步的时间是相同的，也就是说外面的人花了更少的“时间”作了和里面的人相同的事情，所以自己“过的快”。\n\n** 最后一定要吐槽下**\n1.Prefix有点长，到了三分之二时候才猜出片头在女儿房间传递信息的是库伯本人。如果要问看电影前要准备些什么，我要说少喝水。。。\n2.库伯同事死的时候我感觉他们都好淡定，难道这就是英雄们的气魄？还有就是片后的库伯的子子孙孙见了库伯本人后为什么没人喊爷爷？","slug":"e3-80-8a-e6-98-9f-e9-99-85-e7-a9-bf-e8-b6-8a-e3-80-8b-e4-b8-8e-e7-9b-b8-e5-af-b9-e8-ae-ba-e4-b8-ad-e7-9a-84-e6-97-b6-e9-97-b4-e7-a9-ba-e9-97-b4","published":1,"updated":"2018-01-13T05:07:00.492Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjccw7x7v0012aqcren6dkx7i","content":"<p><img src=\"/wp-content/uploads/2014/11/5a8e12bed3465155ed9ca196400bc5d1.jpg\" alt=\"p2209693526\"><br>首先必须承认《星际穿越》是部好电影，不单单是场面的真实感，同时也将相对论中四维空间和质量越大时间越慢的的概念用直白的方式表达了出来，当然也仅仅说明“是什么”，没有讲“为什么”，因为这其实就是一部科幻片，而不是一部科教片。电影的主线仍然是（爱+X）方式来表达，这个爱主要体现在对子女的爱与超级英雄拯救全人类大爱上，而X换成了与一往不大相同的相对论的时间与空间的概念，并且找了霍金的朋友Kip这位真正的物理学家来设计黑洞，当然是精彩。</p>\n<p><strong>说下库伯儿子的人物设定</strong></p>\n<p>关于人物的设定其他人不用多讲，一看就会明白，但是关于库伯儿子的设定好多人会认为这是多余的，或是感觉他好无能。其实我想这就是目的，通过对代表的传统人类和要拯救人类并且有着相信父亲会回来的妹妹作对比，可以很明显的感到那种踏实与规规矩矩，这个肯定是从侧面让他妹的人物更立体。还有一小点就是他一直和他父亲对话，20多年一如既往，一个很大的催泪弹。并且他妹开始时不跟库伯通话，不找个儿子来通话那还有人性么，这也是突出他妹的个性，其实从她的墨菲（墨菲定理）的名字就早已可以看出。不过要说对人类的贡献，那就是他把他妹的房间保护的很完整，如果他把那些书全仍了，也许就没有了后来。</p>\n<p><strong> 个人理解下四维空间和时间越慢的问题</strong><a id=\"more\"></a></p>\n<p>四维空间可以理解为是三维空间的平移，而在四维空间的人是看不到时间量的，只有更高维度的五维空间才可以看到，这个在影片中的库伯在超立方体就是这样看，可以像播放器一样快进与后退看四维空间的变化。可以设想一下自己在二维空间中，看到的只是线和点，只有我们在三维里的人才可以看到这个面。其实这里隐含着一个有意思的问题，就是，我们可以把一张平面进行扭曲，这个是不是类似于更高维度的通某种方式把我们的时空也可以扭曲？这里当然有个疑问，更高维的库伯为什么没有用更高明的方法来传递信息？库伯在五维超立方体向身在四维空间的女儿传递信息时的方式感觉好费劲，也许正是这种费劲看起来对撕心裂肺与激动人心。库伯的五维超立方体是更高维的库伯建造，然后再从五维向四维传递信息，是不是可以理解维度的信息传递只能一次跨一维，如果想跨多维就要找介质（当前为库伯本身）？但是库伯说向低维传递信息是通过引力，而引力是由质量引起，这里就有些纠结。</p>\n<p>要说一下为什么“海洋星球”上1个小时相当于7年。这个要看下狭义相对论的定义中的时问题间变慢（钟慢效应）问题。先来类似比下，举个不恰当的栗子（初学者~）：一个旋转的陀螺（是不是想到了盗梦空间里的?）。它的角速度是不变的，但是半径的圆上的点在相同时间里经过的长度是不同的，越往外长度越长，对应的速度也就越快。假设不同半径上有不同的人，那么要想让俩人经过的角度相同，也就是时间相同，半径大的人就要走更多的路（步数）。反之，如果走相同的步数，外面的人花的时间更短。人的时间是相对自己来说，自己走一步的时间是相同的，也就是说外面的人花了更少的“时间”作了和里面的人相同的事情，所以自己“过的快”。</p>\n<p><strong> 最后一定要吐槽下</strong><br>1.Prefix有点长，到了三分之二时候才猜出片头在女儿房间传递信息的是库伯本人。如果要问看电影前要准备些什么，我要说少喝水。。。<br>2.库伯同事死的时候我感觉他们都好淡定，难道这就是英雄们的气魄？还有就是片后的库伯的子子孙孙见了库伯本人后为什么没人喊爷爷？</p>\n","site":{"data":{}},"excerpt":"<p><img src=\"/wp-content/uploads/2014/11/5a8e12bed3465155ed9ca196400bc5d1.jpg\" alt=\"p2209693526\"><br>首先必须承认《星际穿越》是部好电影，不单单是场面的真实感，同时也将相对论中四维空间和质量越大时间越慢的的概念用直白的方式表达了出来，当然也仅仅说明“是什么”，没有讲“为什么”，因为这其实就是一部科幻片，而不是一部科教片。电影的主线仍然是（爱+X）方式来表达，这个爱主要体现在对子女的爱与超级英雄拯救全人类大爱上，而X换成了与一往不大相同的相对论的时间与空间的概念，并且找了霍金的朋友Kip这位真正的物理学家来设计黑洞，当然是精彩。</p>\n<p><strong>说下库伯儿子的人物设定</strong></p>\n<p>关于人物的设定其他人不用多讲，一看就会明白，但是关于库伯儿子的设定好多人会认为这是多余的，或是感觉他好无能。其实我想这就是目的，通过对代表的传统人类和要拯救人类并且有着相信父亲会回来的妹妹作对比，可以很明显的感到那种踏实与规规矩矩，这个肯定是从侧面让他妹的人物更立体。还有一小点就是他一直和他父亲对话，20多年一如既往，一个很大的催泪弹。并且他妹开始时不跟库伯通话，不找个儿子来通话那还有人性么，这也是突出他妹的个性，其实从她的墨菲（墨菲定理）的名字就早已可以看出。不过要说对人类的贡献，那就是他把他妹的房间保护的很完整，如果他把那些书全仍了，也许就没有了后来。</p>\n<p><strong> 个人理解下四维空间和时间越慢的问题</strong>","more":"</p>\n<p>四维空间可以理解为是三维空间的平移，而在四维空间的人是看不到时间量的，只有更高维度的五维空间才可以看到，这个在影片中的库伯在超立方体就是这样看，可以像播放器一样快进与后退看四维空间的变化。可以设想一下自己在二维空间中，看到的只是线和点，只有我们在三维里的人才可以看到这个面。其实这里隐含着一个有意思的问题，就是，我们可以把一张平面进行扭曲，这个是不是类似于更高维度的通某种方式把我们的时空也可以扭曲？这里当然有个疑问，更高维的库伯为什么没有用更高明的方法来传递信息？库伯在五维超立方体向身在四维空间的女儿传递信息时的方式感觉好费劲，也许正是这种费劲看起来对撕心裂肺与激动人心。库伯的五维超立方体是更高维的库伯建造，然后再从五维向四维传递信息，是不是可以理解维度的信息传递只能一次跨一维，如果想跨多维就要找介质（当前为库伯本身）？但是库伯说向低维传递信息是通过引力，而引力是由质量引起，这里就有些纠结。</p>\n<p>要说一下为什么“海洋星球”上1个小时相当于7年。这个要看下狭义相对论的定义中的时问题间变慢（钟慢效应）问题。先来类似比下，举个不恰当的栗子（初学者~）：一个旋转的陀螺（是不是想到了盗梦空间里的?）。它的角速度是不变的，但是半径的圆上的点在相同时间里经过的长度是不同的，越往外长度越长，对应的速度也就越快。假设不同半径上有不同的人，那么要想让俩人经过的角度相同，也就是时间相同，半径大的人就要走更多的路（步数）。反之，如果走相同的步数，外面的人花的时间更短。人的时间是相对自己来说，自己走一步的时间是相同的，也就是说外面的人花了更少的“时间”作了和里面的人相同的事情，所以自己“过的快”。</p>\n<p><strong> 最后一定要吐槽下</strong><br>1.Prefix有点长，到了三分之二时候才猜出片头在女儿房间传递信息的是库伯本人。如果要问看电影前要准备些什么，我要说少喝水。。。<br>2.库伯同事死的时候我感觉他们都好淡定，难道这就是英雄们的气魄？还有就是片后的库伯的子子孙孙见了库伯本人后为什么没人喊爷爷？</p>"},{"title":"【转】使Qt程序只运行一个实例","id":"1064","date":"2012-08-05T10:12:08.000Z","_content":"\n【转】[http://blog.csdn.net/tingsking18/](http://blog.csdn.net/tingsking18/)\n\n让应用程序只运行一个实例，这个问题很古老了。以及以前 HGR 老胡写过操作 event 的 delphi 版本的。当然在 win 下这样的解决方案还是很多的。\n\n让 Qt 程序只运行一个实例，当然用 win 下的 native API 是很不靠谱的，因为这样会牺牲掉 Qt 跨平台的特性。所以我给出下面两种解决方案。原理上就是进程间通讯。 QSingleApplication 用的而是 socket ，而我使用的是共享内存。\n\n1\\. 使用 QSingleApplication 。\n\nQSingleApplication 是 Qt 提供的一个 solution ，它不包含在 Qt 的 library 中。遵循 LGPL 协议。关于如何使用，下载了这个 solution 之后，里面有例子。还有， QtCreator 中还用到了它。你也可以翻一番 QtCreator 的源代码。\n\n2\\. 使用共享内存。\n\n// 确保只运行一次\n\nQSystemSemaphore sema(\"JAMKey\",1,QSystemSemaphore::Open);\n\nsema.acquire();// 在临界区操作共享内存 SharedMemory<!--more-->\n\nQSharedMemory mem(\"SystemObject\");// 全局对象名\n\nif (!mem.create(1))// 如果全局对象以存在则退出\n\n{\n\nQMessageBox::information(0, MESSAGEBOXTXT,\"An instance has already been running.\");\n\nsema.release();// 如果是 Unix 系统，会自动释放。\n\nreturn 0;\n\n}\n\nsema.release();// 临界区","source":"_posts/e3-80-90-e8-bd-ac-e3-80-91-e4-bd-bfqt-e7-a8-8b-e5-ba-8f-e5-8f-aa-e8-bf-90-e8-a1-8c-e4-b8-80-e4-b8-aa-e5-ae-9e-e4-be-8b.md","raw":"---\ntitle: 【转】使Qt程序只运行一个实例\nid: 1064\ncategories:\n  - Qt\ndate: 2012-08-05 18:12:08\ntags:\n---\n\n【转】[http://blog.csdn.net/tingsking18/](http://blog.csdn.net/tingsking18/)\n\n让应用程序只运行一个实例，这个问题很古老了。以及以前 HGR 老胡写过操作 event 的 delphi 版本的。当然在 win 下这样的解决方案还是很多的。\n\n让 Qt 程序只运行一个实例，当然用 win 下的 native API 是很不靠谱的，因为这样会牺牲掉 Qt 跨平台的特性。所以我给出下面两种解决方案。原理上就是进程间通讯。 QSingleApplication 用的而是 socket ，而我使用的是共享内存。\n\n1\\. 使用 QSingleApplication 。\n\nQSingleApplication 是 Qt 提供的一个 solution ，它不包含在 Qt 的 library 中。遵循 LGPL 协议。关于如何使用，下载了这个 solution 之后，里面有例子。还有， QtCreator 中还用到了它。你也可以翻一番 QtCreator 的源代码。\n\n2\\. 使用共享内存。\n\n// 确保只运行一次\n\nQSystemSemaphore sema(\"JAMKey\",1,QSystemSemaphore::Open);\n\nsema.acquire();// 在临界区操作共享内存 SharedMemory<!--more-->\n\nQSharedMemory mem(\"SystemObject\");// 全局对象名\n\nif (!mem.create(1))// 如果全局对象以存在则退出\n\n{\n\nQMessageBox::information(0, MESSAGEBOXTXT,\"An instance has already been running.\");\n\nsema.release();// 如果是 Unix 系统，会自动释放。\n\nreturn 0;\n\n}\n\nsema.release();// 临界区","slug":"e3-80-90-e8-bd-ac-e3-80-91-e4-bd-bfqt-e7-a8-8b-e5-ba-8f-e5-8f-aa-e8-bf-90-e8-a1-8c-e4-b8-80-e4-b8-aa-e5-ae-9e-e4-be-8b","published":1,"updated":"2018-01-13T05:07:00.467Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjccw7x7x0016aqcrza7ajtv4","content":"<p>【转】<a href=\"http://blog.csdn.net/tingsking18/\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/tingsking18/</a></p>\n<p>让应用程序只运行一个实例，这个问题很古老了。以及以前 HGR 老胡写过操作 event 的 delphi 版本的。当然在 win 下这样的解决方案还是很多的。</p>\n<p>让 Qt 程序只运行一个实例，当然用 win 下的 native API 是很不靠谱的，因为这样会牺牲掉 Qt 跨平台的特性。所以我给出下面两种解决方案。原理上就是进程间通讯。 QSingleApplication 用的而是 socket ，而我使用的是共享内存。</p>\n<p>1. 使用 QSingleApplication 。</p>\n<p>QSingleApplication 是 Qt 提供的一个 solution ，它不包含在 Qt 的 library 中。遵循 LGPL 协议。关于如何使用，下载了这个 solution 之后，里面有例子。还有， QtCreator 中还用到了它。你也可以翻一番 QtCreator 的源代码。</p>\n<p>2. 使用共享内存。</p>\n<p>// 确保只运行一次</p>\n<p>QSystemSemaphore sema(“JAMKey”,1,QSystemSemaphore::Open);</p>\n<p>sema.acquire();// 在临界区操作共享内存 SharedMemory<a id=\"more\"></a></p>\n<p>QSharedMemory mem(“SystemObject”);// 全局对象名</p>\n<p>if (!mem.create(1))// 如果全局对象以存在则退出</p>\n<p>{</p>\n<p>QMessageBox::information(0, MESSAGEBOXTXT,”An instance has already been running.”);</p>\n<p>sema.release();// 如果是 Unix 系统，会自动释放。</p>\n<p>return 0;</p>\n<p>}</p>\n<p>sema.release();// 临界区</p>\n","site":{"data":{}},"excerpt":"<p>【转】<a href=\"http://blog.csdn.net/tingsking18/\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/tingsking18/</a></p>\n<p>让应用程序只运行一个实例，这个问题很古老了。以及以前 HGR 老胡写过操作 event 的 delphi 版本的。当然在 win 下这样的解决方案还是很多的。</p>\n<p>让 Qt 程序只运行一个实例，当然用 win 下的 native API 是很不靠谱的，因为这样会牺牲掉 Qt 跨平台的特性。所以我给出下面两种解决方案。原理上就是进程间通讯。 QSingleApplication 用的而是 socket ，而我使用的是共享内存。</p>\n<p>1. 使用 QSingleApplication 。</p>\n<p>QSingleApplication 是 Qt 提供的一个 solution ，它不包含在 Qt 的 library 中。遵循 LGPL 协议。关于如何使用，下载了这个 solution 之后，里面有例子。还有， QtCreator 中还用到了它。你也可以翻一番 QtCreator 的源代码。</p>\n<p>2. 使用共享内存。</p>\n<p>// 确保只运行一次</p>\n<p>QSystemSemaphore sema(“JAMKey”,1,QSystemSemaphore::Open);</p>\n<p>sema.acquire();// 在临界区操作共享内存 SharedMemory","more":"</p>\n<p>QSharedMemory mem(“SystemObject”);// 全局对象名</p>\n<p>if (!mem.create(1))// 如果全局对象以存在则退出</p>\n<p>{</p>\n<p>QMessageBox::information(0, MESSAGEBOXTXT,”An instance has already been running.”);</p>\n<p>sema.release();// 如果是 Unix 系统，会自动释放。</p>\n<p>return 0;</p>\n<p>}</p>\n<p>sema.release();// 临界区</p>"},{"title":"phpword 中文乱码解决方法","id":"1079","date":"2012-09-27T13:35:44.000Z","_content":"\nin Section.php addText function:\nI did this:\n// $givenText = utf8_encode($text);\n$givenText = $text;\n\nand in cell.php addText function\n\nI did this:\n// $text = utf8_encode($text);\n\nThere are many more places where this should probably be done, but I'm only using section.addText and Cell.addText in my application so that's the only places I needed to change.\n\nSearching for utf8_encode found 19 matches in 7 files throughout the codebase.\nIf the developer could address this in the main codebase it would greatly help people.\nThe ironic thing about this problem is that the problem characters are coming from Microsoft Word in the first place!\n\nfrom:http://phpword.codeplex.com/discussions/261365","source":"_posts/e4-b8-ad-e6-96-87-e4-b9-b1-e7-a0-81-e8-a7-a3-e5-86-b3-e6-96-b9-e6-b3-95phpword.md","raw":"---\ntitle: phpword 中文乱码解决方法\nid: 1079\ncategories:\n  - PHP\ndate: 2012-09-27 21:35:44\ntags:\n---\n\nin Section.php addText function:\nI did this:\n// $givenText = utf8_encode($text);\n$givenText = $text;\n\nand in cell.php addText function\n\nI did this:\n// $text = utf8_encode($text);\n\nThere are many more places where this should probably be done, but I'm only using section.addText and Cell.addText in my application so that's the only places I needed to change.\n\nSearching for utf8_encode found 19 matches in 7 files throughout the codebase.\nIf the developer could address this in the main codebase it would greatly help people.\nThe ironic thing about this problem is that the problem characters are coming from Microsoft Word in the first place!\n\nfrom:http://phpword.codeplex.com/discussions/261365","slug":"e4-b8-ad-e6-96-87-e4-b9-b1-e7-a0-81-e8-a7-a3-e5-86-b3-e6-96-b9-e6-b3-95phpword","published":1,"updated":"2018-01-13T05:07:00.472Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjccw7x7z0018aqcrv1xdbo7t","content":"<p>in Section.php addText function:<br>I did this:<br>// $givenText = utf8_encode($text);<br>$givenText = $text;</p>\n<p>and in cell.php addText function</p>\n<p>I did this:<br>// $text = utf8_encode($text);</p>\n<p>There are many more places where this should probably be done, but I’m only using section.addText and Cell.addText in my application so that’s the only places I needed to change.</p>\n<p>Searching for utf8_encode found 19 matches in 7 files throughout the codebase.<br>If the developer could address this in the main codebase it would greatly help people.<br>The ironic thing about this problem is that the problem characters are coming from Microsoft Word in the first place!</p>\n<p>from:<a href=\"http://phpword.codeplex.com/discussions/261365\" target=\"_blank\" rel=\"noopener\">http://phpword.codeplex.com/discussions/261365</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>in Section.php addText function:<br>I did this:<br>// $givenText = utf8_encode($text);<br>$givenText = $text;</p>\n<p>and in cell.php addText function</p>\n<p>I did this:<br>// $text = utf8_encode($text);</p>\n<p>There are many more places where this should probably be done, but I’m only using section.addText and Cell.addText in my application so that’s the only places I needed to change.</p>\n<p>Searching for utf8_encode found 19 matches in 7 files throughout the codebase.<br>If the developer could address this in the main codebase it would greatly help people.<br>The ironic thing about this problem is that the problem characters are coming from Microsoft Word in the first place!</p>\n<p>from:<a href=\"http://phpword.codeplex.com/discussions/261365\" target=\"_blank\" rel=\"noopener\">http://phpword.codeplex.com/discussions/261365</a></p>\n"},{"title":"关闭QMessageBox的时候，整个程序也退出","id":"1126","date":"2013-03-30T02:36:28.000Z","_content":"\n在程序中加入：QApplication::setQuitOnLastWindowClosed(false);\n\n如：\nQApplication::setQuitOnLastWindowClosed(false);QMessageBoxmessage(QMessageBox::NoIcon,\"Show Qt\",\"Do you want to show Qt dialog?\",QMessageBox::Yes|QMessageBox::No);if(message.exec()==QMessageBox::Yes){delLoginFile();}else{qDebug()<<\"~~~~~~~~~~~\";return;}","source":"_posts/e5-85-b3-e9-97-adqmessagebox-e7-9a-84-e6-97-b6-e5-80-99-ef-bc-8c-e6-95-b4-e4-b8-aa-e7-a8-8b-e5-ba-8f-e4-b9-9f-e9-80-80-e5-87-ba.md","raw":"---\ntitle: 关闭QMessageBox的时候，整个程序也退出\nid: 1126\ncategories:\n  - Qt\ndate: 2013-03-30 10:36:28\ntags:\n---\n\n在程序中加入：QApplication::setQuitOnLastWindowClosed(false);\n\n如：\nQApplication::setQuitOnLastWindowClosed(false);QMessageBoxmessage(QMessageBox::NoIcon,\"Show Qt\",\"Do you want to show Qt dialog?\",QMessageBox::Yes|QMessageBox::No);if(message.exec()==QMessageBox::Yes){delLoginFile();}else{qDebug()<<\"~~~~~~~~~~~\";return;}","slug":"e5-85-b3-e9-97-adqmessagebox-e7-9a-84-e6-97-b6-e5-80-99-ef-bc-8c-e6-95-b4-e4-b8-aa-e7-a8-8b-e5-ba-8f-e4-b9-9f-e9-80-80-e5-87-ba","published":1,"updated":"2018-01-13T05:07:00.479Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjccw7x80001aaqcrj1ca1tcg","content":"<p>在程序中加入：QApplication::setQuitOnLastWindowClosed(false);</p>\n<p>如：<br>QApplication::setQuitOnLastWindowClosed(false);QMessageBoxmessage(QMessageBox::NoIcon,”Show Qt”,”Do you want to show Qt dialog?”,QMessageBox::Yes|QMessageBox::No);if(message.exec()==QMessageBox::Yes){delLoginFile();}else{qDebug()&lt;&lt;”<del>~</del><del>~</del>~”;return;}</p>\n","site":{"data":{}},"excerpt":"","more":"<p>在程序中加入：QApplication::setQuitOnLastWindowClosed(false);</p>\n<p>如：<br>QApplication::setQuitOnLastWindowClosed(false);QMessageBoxmessage(QMessageBox::NoIcon,”Show Qt”,”Do you want to show Qt dialog?”,QMessageBox::Yes|QMessageBox::No);if(message.exec()==QMessageBox::Yes){delLoginFile();}else{qDebug()&lt;&lt;”<del>~</del><del>~</del>~”;return;}</p>\n"},{"title":"关于手机信号强度单位dBm和asu！","id":"1020","date":"2012-05-13T01:51:45.000Z","_content":"\n第一篇：\n\n关于手机信号强度单位db和dBm\n\n最近做android开发，在wifi模块遇到手机信号的问题，设计到强度的计算，于是就有了db和dbm两个单位。\n dB，dBm 都是功率增益的单位，不同之处如下：\ndB\n 是一个表征相对值的值，纯粹的比值，只表示两个量的相对大小关系，没有单位，当考虑甲的功率相比于乙功率大或小多少个dB时，按下面的计算公式：10log（甲功率/乙功率），如果采用两者的电压比计算，要用20log（甲电压/乙电压）。\n [例] 甲功率比乙功率大一倍，那么10lg（甲功率/乙功率）=10lg2=3dB。也就是说，甲的功率比乙的功率大3 dB。反之，如果甲的功率是乙的功率的一半，则甲的功率比乙的功率小3 dB。\ndBm\ndBm是一个表示功率绝对值的值（也可以认为是以1mW功率为基准的一个比值），计算公式为：10log（功率值/1mw）。\n [例] 如果功率P为1mw，折算为dBm后为0dBm。\n [例] 对于40W的功率，按dBm单位进行折算后的值应为： 10log（40W/1mw)=10log（40000）=10log4+10log10000=46dBm。\n 总之，dB是两个量之间的比值，表示两个量间的相对大小，而dBm则是表示功率绝对大小的值。在dB，dBm计算中，要注意基本概念，用一个dBm减另外一个dBm时，得到的结果是dB，如：30dBm - 0dBm = 30dB。<!--more-->\n手机上显示的数字的单位是dBm(可以用ALT+NMLL就可以让手机显示出当前的接收信号值了).这个值是负的，也就是说手机会显示比如 -67(dBm),那就说明信号很强了.这里还说一个小知识:中国移动的规范规定,手机接收电平>=(城市取-90dBm;乡村取-94dBm) 时,则满足覆盖要求,也就是说此处无线信号强度满足覆盖要求.-67dBm要比-90dBm信号要强20多个dB,那么它在打电话接通成功率和通话过程中的话音质量都会好的多(当然也包括EDGE/GPRS上网的速度那些 ).\n所以,那个值越大信号就越好,因为那是个负值,而且在你手里的时候它永远是负值 ,如果你感兴趣且附近有无线基站的天线的话,你也可以把你的手机尽量接近天线面板,那么值就越来越大,如果手机跟天线面板挨到一起,那么它可能十分接近于 0了(0是达不到的,这里的0的意思也不是说手机没信号了)\n\n另一篇：\n\n先介绍单位dBm\n\ndBm是一个表示功率绝对值的值（也可以认为是以1mW功率为基准的一个比值），计算公式为：10log（功率值/1mw）。\n [例] 如果功率P为1mw，折算为dBm后为0dBm。\n [例] 对于40W的功率，按dBm单位进行折算后的值应为： （40W/1mw)=10log（40000）=10log4+10log10000=46dBm。\n\n 当你仔细看的时候会发现这个值是负的。\n\n 也就是说手机会显示比如 -67(dBm),等等，那到底数值为多少信号是差或者好呢？\n\n 首先先说，这个数值越大越好！-67dbm VS -90dbm ，前者信号比后者好！\n\n 这里还说一个小知识:中国移动的规范规定,手机接收电平>=(城市取-90dBm;乡村取-94dBm)时,则满足覆盖要求,\n\n 也就是说此处无线信号强度满足覆盖要求，即接受电平>=-90dBm，就可以满足覆盖要求\n\n -67dBm要比-90dBm信号要强20多个dB,那么它在打电话接通成功率和通话过程中的话音质量都会好的多(当然也包括EDGE/GPRS上网的速度那些 )\n\n 最后，就是说说信号强度和信号格数的显示的关系\n\n 工程师就是根据接受电平数值进行信号格数的划分。讲比较复杂的数据以信号格数直观地表达在我们眼前。\n\n 说到此，就不由得提一下，许多机油说在同一个地方有的手机又一格两格信号，有的手机没有信号，相信大家现在都明白了~\n\n 当然，这个除了电平数值进行信号格数的划分存在细小差别外，手机之间也会存在个体差异和电平接受能力的差别。","source":"_posts/e5-85-b3-e4-ba-8e-e6-89-8b-e6-9c-ba-e4-bf-a1-e5-8f-b7-e5-bc-ba-e5-ba-a6-e5-8d-95-e4-bd-8ddbm-e5-92-8casu-ef-bc-81.md","raw":"---\ntitle: 关于手机信号强度单位dBm和asu！\nid: 1020\ncategories:\n  - Other\ndate: 2012-05-13 09:51:45\ntags:\n---\n\n第一篇：\n\n关于手机信号强度单位db和dBm\n\n最近做android开发，在wifi模块遇到手机信号的问题，设计到强度的计算，于是就有了db和dbm两个单位。\n dB，dBm 都是功率增益的单位，不同之处如下：\ndB\n 是一个表征相对值的值，纯粹的比值，只表示两个量的相对大小关系，没有单位，当考虑甲的功率相比于乙功率大或小多少个dB时，按下面的计算公式：10log（甲功率/乙功率），如果采用两者的电压比计算，要用20log（甲电压/乙电压）。\n [例] 甲功率比乙功率大一倍，那么10lg（甲功率/乙功率）=10lg2=3dB。也就是说，甲的功率比乙的功率大3 dB。反之，如果甲的功率是乙的功率的一半，则甲的功率比乙的功率小3 dB。\ndBm\ndBm是一个表示功率绝对值的值（也可以认为是以1mW功率为基准的一个比值），计算公式为：10log（功率值/1mw）。\n [例] 如果功率P为1mw，折算为dBm后为0dBm。\n [例] 对于40W的功率，按dBm单位进行折算后的值应为： 10log（40W/1mw)=10log（40000）=10log4+10log10000=46dBm。\n 总之，dB是两个量之间的比值，表示两个量间的相对大小，而dBm则是表示功率绝对大小的值。在dB，dBm计算中，要注意基本概念，用一个dBm减另外一个dBm时，得到的结果是dB，如：30dBm - 0dBm = 30dB。<!--more-->\n手机上显示的数字的单位是dBm(可以用ALT+NMLL就可以让手机显示出当前的接收信号值了).这个值是负的，也就是说手机会显示比如 -67(dBm),那就说明信号很强了.这里还说一个小知识:中国移动的规范规定,手机接收电平>=(城市取-90dBm;乡村取-94dBm) 时,则满足覆盖要求,也就是说此处无线信号强度满足覆盖要求.-67dBm要比-90dBm信号要强20多个dB,那么它在打电话接通成功率和通话过程中的话音质量都会好的多(当然也包括EDGE/GPRS上网的速度那些 ).\n所以,那个值越大信号就越好,因为那是个负值,而且在你手里的时候它永远是负值 ,如果你感兴趣且附近有无线基站的天线的话,你也可以把你的手机尽量接近天线面板,那么值就越来越大,如果手机跟天线面板挨到一起,那么它可能十分接近于 0了(0是达不到的,这里的0的意思也不是说手机没信号了)\n\n另一篇：\n\n先介绍单位dBm\n\ndBm是一个表示功率绝对值的值（也可以认为是以1mW功率为基准的一个比值），计算公式为：10log（功率值/1mw）。\n [例] 如果功率P为1mw，折算为dBm后为0dBm。\n [例] 对于40W的功率，按dBm单位进行折算后的值应为： （40W/1mw)=10log（40000）=10log4+10log10000=46dBm。\n\n 当你仔细看的时候会发现这个值是负的。\n\n 也就是说手机会显示比如 -67(dBm),等等，那到底数值为多少信号是差或者好呢？\n\n 首先先说，这个数值越大越好！-67dbm VS -90dbm ，前者信号比后者好！\n\n 这里还说一个小知识:中国移动的规范规定,手机接收电平>=(城市取-90dBm;乡村取-94dBm)时,则满足覆盖要求,\n\n 也就是说此处无线信号强度满足覆盖要求，即接受电平>=-90dBm，就可以满足覆盖要求\n\n -67dBm要比-90dBm信号要强20多个dB,那么它在打电话接通成功率和通话过程中的话音质量都会好的多(当然也包括EDGE/GPRS上网的速度那些 )\n\n 最后，就是说说信号强度和信号格数的显示的关系\n\n 工程师就是根据接受电平数值进行信号格数的划分。讲比较复杂的数据以信号格数直观地表达在我们眼前。\n\n 说到此，就不由得提一下，许多机油说在同一个地方有的手机又一格两格信号，有的手机没有信号，相信大家现在都明白了~\n\n 当然，这个除了电平数值进行信号格数的划分存在细小差别外，手机之间也会存在个体差异和电平接受能力的差别。","slug":"e5-85-b3-e4-ba-8e-e6-89-8b-e6-9c-ba-e4-bf-a1-e5-8f-b7-e5-bc-ba-e5-ba-a6-e5-8d-95-e4-bd-8ddbm-e5-92-8casu-ef-bc-81","published":1,"updated":"2018-01-13T05:07:00.470Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjccw7x82001faqcr1ny6qptp","content":"<p>第一篇：</p>\n<p>关于手机信号强度单位db和dBm</p>\n<p>最近做android开发，在wifi模块遇到手机信号的问题，设计到强度的计算，于是就有了db和dbm两个单位。<br> dB，dBm 都是功率增益的单位，不同之处如下：<br>dB<br> 是一个表征相对值的值，纯粹的比值，只表示两个量的相对大小关系，没有单位，当考虑甲的功率相比于乙功率大或小多少个dB时，按下面的计算公式：10log（甲功率/乙功率），如果采用两者的电压比计算，要用20log（甲电压/乙电压）。<br> [例] 甲功率比乙功率大一倍，那么10lg（甲功率/乙功率）=10lg2=3dB。也就是说，甲的功率比乙的功率大3 dB。反之，如果甲的功率是乙的功率的一半，则甲的功率比乙的功率小3 dB。<br>dBm<br>dBm是一个表示功率绝对值的值（也可以认为是以1mW功率为基准的一个比值），计算公式为：10log（功率值/1mw）。<br> [例] 如果功率P为1mw，折算为dBm后为0dBm。<br> [例] 对于40W的功率，按dBm单位进行折算后的值应为： 10log（40W/1mw)=10log（40000）=10log4+10log10000=46dBm。<br> 总之，dB是两个量之间的比值，表示两个量间的相对大小，而dBm则是表示功率绝对大小的值。在dB，dBm计算中，要注意基本概念，用一个dBm减另外一个dBm时，得到的结果是dB，如：30dBm - 0dBm = 30dB。<a id=\"more\"></a><br>手机上显示的数字的单位是dBm(可以用ALT+NMLL就可以让手机显示出当前的接收信号值了).这个值是负的，也就是说手机会显示比如 -67(dBm),那就说明信号很强了.这里还说一个小知识:中国移动的规范规定,手机接收电平&gt;=(城市取-90dBm;乡村取-94dBm) 时,则满足覆盖要求,也就是说此处无线信号强度满足覆盖要求.-67dBm要比-90dBm信号要强20多个dB,那么它在打电话接通成功率和通话过程中的话音质量都会好的多(当然也包括EDGE/GPRS上网的速度那些 ).<br>所以,那个值越大信号就越好,因为那是个负值,而且在你手里的时候它永远是负值 ,如果你感兴趣且附近有无线基站的天线的话,你也可以把你的手机尽量接近天线面板,那么值就越来越大,如果手机跟天线面板挨到一起,那么它可能十分接近于 0了(0是达不到的,这里的0的意思也不是说手机没信号了)</p>\n<p>另一篇：</p>\n<p>先介绍单位dBm</p>\n<p>dBm是一个表示功率绝对值的值（也可以认为是以1mW功率为基准的一个比值），计算公式为：10log（功率值/1mw）。<br> [例] 如果功率P为1mw，折算为dBm后为0dBm。<br> [例] 对于40W的功率，按dBm单位进行折算后的值应为： （40W/1mw)=10log（40000）=10log4+10log10000=46dBm。</p>\n<p> 当你仔细看的时候会发现这个值是负的。</p>\n<p> 也就是说手机会显示比如 -67(dBm),等等，那到底数值为多少信号是差或者好呢？</p>\n<p> 首先先说，这个数值越大越好！-67dbm VS -90dbm ，前者信号比后者好！</p>\n<p> 这里还说一个小知识:中国移动的规范规定,手机接收电平&gt;=(城市取-90dBm;乡村取-94dBm)时,则满足覆盖要求,</p>\n<p> 也就是说此处无线信号强度满足覆盖要求，即接受电平&gt;=-90dBm，就可以满足覆盖要求</p>\n<p> -67dBm要比-90dBm信号要强20多个dB,那么它在打电话接通成功率和通话过程中的话音质量都会好的多(当然也包括EDGE/GPRS上网的速度那些 )</p>\n<p> 最后，就是说说信号强度和信号格数的显示的关系</p>\n<p> 工程师就是根据接受电平数值进行信号格数的划分。讲比较复杂的数据以信号格数直观地表达在我们眼前。</p>\n<p> 说到此，就不由得提一下，许多机油说在同一个地方有的手机又一格两格信号，有的手机没有信号，相信大家现在都明白了~</p>\n<p> 当然，这个除了电平数值进行信号格数的划分存在细小差别外，手机之间也会存在个体差异和电平接受能力的差别。</p>\n","site":{"data":{}},"excerpt":"<p>第一篇：</p>\n<p>关于手机信号强度单位db和dBm</p>\n<p>最近做android开发，在wifi模块遇到手机信号的问题，设计到强度的计算，于是就有了db和dbm两个单位。<br> dB，dBm 都是功率增益的单位，不同之处如下：<br>dB<br> 是一个表征相对值的值，纯粹的比值，只表示两个量的相对大小关系，没有单位，当考虑甲的功率相比于乙功率大或小多少个dB时，按下面的计算公式：10log（甲功率/乙功率），如果采用两者的电压比计算，要用20log（甲电压/乙电压）。<br> [例] 甲功率比乙功率大一倍，那么10lg（甲功率/乙功率）=10lg2=3dB。也就是说，甲的功率比乙的功率大3 dB。反之，如果甲的功率是乙的功率的一半，则甲的功率比乙的功率小3 dB。<br>dBm<br>dBm是一个表示功率绝对值的值（也可以认为是以1mW功率为基准的一个比值），计算公式为：10log（功率值/1mw）。<br> [例] 如果功率P为1mw，折算为dBm后为0dBm。<br> [例] 对于40W的功率，按dBm单位进行折算后的值应为： 10log（40W/1mw)=10log（40000）=10log4+10log10000=46dBm。<br> 总之，dB是两个量之间的比值，表示两个量间的相对大小，而dBm则是表示功率绝对大小的值。在dB，dBm计算中，要注意基本概念，用一个dBm减另外一个dBm时，得到的结果是dB，如：30dBm - 0dBm = 30dB。","more":"<br>手机上显示的数字的单位是dBm(可以用ALT+NMLL就可以让手机显示出当前的接收信号值了).这个值是负的，也就是说手机会显示比如 -67(dBm),那就说明信号很强了.这里还说一个小知识:中国移动的规范规定,手机接收电平&gt;=(城市取-90dBm;乡村取-94dBm) 时,则满足覆盖要求,也就是说此处无线信号强度满足覆盖要求.-67dBm要比-90dBm信号要强20多个dB,那么它在打电话接通成功率和通话过程中的话音质量都会好的多(当然也包括EDGE/GPRS上网的速度那些 ).<br>所以,那个值越大信号就越好,因为那是个负值,而且在你手里的时候它永远是负值 ,如果你感兴趣且附近有无线基站的天线的话,你也可以把你的手机尽量接近天线面板,那么值就越来越大,如果手机跟天线面板挨到一起,那么它可能十分接近于 0了(0是达不到的,这里的0的意思也不是说手机没信号了)</p>\n<p>另一篇：</p>\n<p>先介绍单位dBm</p>\n<p>dBm是一个表示功率绝对值的值（也可以认为是以1mW功率为基准的一个比值），计算公式为：10log（功率值/1mw）。<br> [例] 如果功率P为1mw，折算为dBm后为0dBm。<br> [例] 对于40W的功率，按dBm单位进行折算后的值应为： （40W/1mw)=10log（40000）=10log4+10log10000=46dBm。</p>\n<p> 当你仔细看的时候会发现这个值是负的。</p>\n<p> 也就是说手机会显示比如 -67(dBm),等等，那到底数值为多少信号是差或者好呢？</p>\n<p> 首先先说，这个数值越大越好！-67dbm VS -90dbm ，前者信号比后者好！</p>\n<p> 这里还说一个小知识:中国移动的规范规定,手机接收电平&gt;=(城市取-90dBm;乡村取-94dBm)时,则满足覆盖要求,</p>\n<p> 也就是说此处无线信号强度满足覆盖要求，即接受电平&gt;=-90dBm，就可以满足覆盖要求</p>\n<p> -67dBm要比-90dBm信号要强20多个dB,那么它在打电话接通成功率和通话过程中的话音质量都会好的多(当然也包括EDGE/GPRS上网的速度那些 )</p>\n<p> 最后，就是说说信号强度和信号格数的显示的关系</p>\n<p> 工程师就是根据接受电平数值进行信号格数的划分。讲比较复杂的数据以信号格数直观地表达在我们眼前。</p>\n<p> 说到此，就不由得提一下，许多机油说在同一个地方有的手机又一格两格信号，有的手机没有信号，相信大家现在都明白了~</p>\n<p> 当然，这个除了电平数值进行信号格数的划分存在细小差别外，手机之间也会存在个体差异和电平接受能力的差别。</p>"},{"title":"关于 redis 文档 lrange start > end 情况的一点说明","id":"2031","date":"2014-05-13T01:35:50.000Z","_content":"\nredis 官方文档里对 lrange start > end 说了这样一句话\n> If start is larger than the end of the list, an empty list is returned.\n就是说  start > end 就会返回一个空list ,不过这里还有一种特殊情况。就是end 为负数时，比如\n`lrange ilist 0 -1`\n那么它会返回整个 list ,这里先不考虑极端情况。就和 an empty list is returned  相冲突，这是其中一种理解方式。另一种是负数在list里不是指小于0的自然数，而是指list尾端的数，比如\n`127.0.0.1:6379> RPUSH lst 1 3 5 7 9\n(integer) 5\n\n127.0.0.1:6379> LRANGE lst 0 -1\n1) \"1\"\n2) \"3\"\n3) \"5\"\n4) \"7\"\n5) \"9\"`\n<!--more-->\n那么此时-1指的是5, 也就符合了 0 <-1 =5 的情况，文档就没有错了。\n总的来说，还是文档有要严谨的地方。\n\np.s. 后来发现 end 包括 stop 及 -1 的情况，文档没有问题。","source":"_posts/e5-85-b3-e4-ba-8e-redis-e6-96-87-e6-a1-a3-lrange-start-end-e6-83-85-e5-86-b5-e7-9a-84-e4-b8-80-e7-82-b9-e8-af-b4-e6-98-8e.md","raw":"---\ntitle: 关于 redis 文档 lrange start > end 情况的一点说明\ntags:\n  - redis\nid: 2031\ncategories:\n  - Other\ndate: 2014-05-13 09:35:50\n---\n\nredis 官方文档里对 lrange start > end 说了这样一句话\n> If start is larger than the end of the list, an empty list is returned.\n就是说  start > end 就会返回一个空list ,不过这里还有一种特殊情况。就是end 为负数时，比如\n`lrange ilist 0 -1`\n那么它会返回整个 list ,这里先不考虑极端情况。就和 an empty list is returned  相冲突，这是其中一种理解方式。另一种是负数在list里不是指小于0的自然数，而是指list尾端的数，比如\n`127.0.0.1:6379> RPUSH lst 1 3 5 7 9\n(integer) 5\n\n127.0.0.1:6379> LRANGE lst 0 -1\n1) \"1\"\n2) \"3\"\n3) \"5\"\n4) \"7\"\n5) \"9\"`\n<!--more-->\n那么此时-1指的是5, 也就符合了 0 <-1 =5 的情况，文档就没有错了。\n总的来说，还是文档有要严谨的地方。\n\np.s. 后来发现 end 包括 stop 及 -1 的情况，文档没有问题。","slug":"e5-85-b3-e4-ba-8e-redis-e6-96-87-e6-a1-a3-lrange-start-end-e6-83-85-e5-86-b5-e7-9a-84-e4-b8-80-e7-82-b9-e8-af-b4-e6-98-8e","published":1,"updated":"2018-01-13T05:07:00.453Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjccw7x84001iaqcrwl7rbg08","content":"<p>redis 官方文档里对 lrange start &gt; end 说了这样一句话</p>\n<blockquote>\n<p>If start is larger than the end of the list, an empty list is returned.<br>就是说  start &gt; end 就会返回一个空list ,不过这里还有一种特殊情况。就是end 为负数时，比如<br><code>lrange ilist 0 -1</code><br>那么它会返回整个 list ,这里先不考虑极端情况。就和 an empty list is returned  相冲突，这是其中一种理解方式。另一种是负数在list里不是指小于0的自然数，而是指list尾端的数，比如<br>`127.0.0.1:6379&gt; RPUSH lst 1 3 5 7 9<br>(integer) 5</p>\n</blockquote>\n<p>127.0.0.1:6379&gt; LRANGE lst 0 -1<br>1) “1”<br>2) “3”<br>3) “5”<br>4) “7”<br>5) “9”`<br><a id=\"more\"></a><br>那么此时-1指的是5, 也就符合了 0 &lt;-1 =5 的情况，文档就没有错了。<br>总的来说，还是文档有要严谨的地方。</p>\n<p>p.s. 后来发现 end 包括 stop 及 -1 的情况，文档没有问题。</p>\n","site":{"data":{}},"excerpt":"<p>redis 官方文档里对 lrange start &gt; end 说了这样一句话</p>\n<blockquote>\n<p>If start is larger than the end of the list, an empty list is returned.<br>就是说  start &gt; end 就会返回一个空list ,不过这里还有一种特殊情况。就是end 为负数时，比如<br><code>lrange ilist 0 -1</code><br>那么它会返回整个 list ,这里先不考虑极端情况。就和 an empty list is returned  相冲突，这是其中一种理解方式。另一种是负数在list里不是指小于0的自然数，而是指list尾端的数，比如<br>`127.0.0.1:6379&gt; RPUSH lst 1 3 5 7 9<br>(integer) 5</p>\n</blockquote>\n<p>127.0.0.1:6379&gt; LRANGE lst 0 -1<br>1) “1”<br>2) “3”<br>3) “5”<br>4) “7”<br>5) “9”`<br>","more":"<br>那么此时-1指的是5, 也就符合了 0 &lt;-1 =5 的情况，文档就没有错了。<br>总的来说，还是文档有要严谨的地方。</p>\n<p>p.s. 后来发现 end 包括 stop 及 -1 的情况，文档没有问题。</p>"},{"title":"再度使用 sublime text 3 及相关技巧、插件、美化、快捷键","id":"1939","date":"2014-05-07T02:17:35.000Z","_content":"\n“工欲善其事，必先利其器”，每当发现一个好工具时都要说这么一句话，感觉特牛那种。第一次用sublime时好像还是 2 的 20xx 的某个版本，当时就是看着比 nodepad++ 漂亮，不过用了几天因为处理大文件和对编码处理不好放弃了，后来就是出了个 ConvertToUTF8 也不怎么理想。直到现在，再度拿出，按自己的需求跑了一遍，以前遇到的问题都ok了，果断把它作为默认的编辑器。\n![sublime](/wp-content/uploads/2014/05/86b8789c7e7f755b44728838b83c4949.png)\n<!--more-->\n\n下面是一些相关技巧、插件、美化，会不定时更新。\n\n**安装 Sublime Text 3**\n`http://www.sublimetext.com/3`\n\n**字体大小**\n在这里修改配置preferences -&gt; settings-user\n`\"font_size\": 14`\n\n**不记住最后打开的文件**\n`\"hot_exit\": false,\n\"remember_open_files\": false`\n\n**安装 Package Control**\n按下 Control + ` 调出 Console\n将以下代码粘贴进命令行中并回车，注意网络通畅\n`import urllib.request,os; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); open(os.path.join(ipp, pf), 'wb').write(urllib.request.urlopen( 'http://sublime.wbond.net/' + pf.replace(' ','%20')).read())`\n\n**安装插件及主题**\n按下 Shift + Ctrl + P 调出命令面板。\n输入 install 或者 pi 调出 Package Control: Install Package 选项，按下回车。\n在列表中查找相应插件按下回车进行安装。\n\n**推荐的主题 Theme - Soda**\n使用，两选一，重启sublime查看效果\n`\"theme\": \"Soda Light 3.sublime-theme\"`\n`\"theme\": \"Soda Dark 3.sublime-theme\" `\n\n**推荐的主题 spacegray 搜索 “ spacegray ”**\n使用，选一，重启sublime查看效果，color_scheme可以选别的，我用的是Obsidian\n`\"theme\": \"Spacegray.sublime-theme\",\n\"color_scheme\": \"Packages/Theme - Spacegray/base16-ocean.dark.tmTheme\"`\n\n`\"theme\": \"Spacegray Light.sublime-theme\",\n\"color_scheme\": \"Packages/Theme - Spacegray/base16-ocean.light.tmTheme\"`\n\n`\"theme\": \"Spacegray Eighties.sublime-theme\",\n\"color_scheme\": \"Packages/Theme - Spacegray/base16-eighties.dark.tmTheme\"`\n\n**推荐配色方案 Obsidian**\n这有两个，一个是 Obsidian 另一个是是它孙子 Grandson-of-Obsidian ，它孙子可以直接用 PI 安装，它爷爷要手动安装。\n两个地址\n`https://github.com/mekwall/obsidian-color-scheme\nhttps://github.com/jfromaniello/Grandson-of-Obsidian`\n\n**推荐的插件**\nConvertToUTF8 支持UTF-8编码的插件\nEmmet (Zen Coding) 快速生成HTML代码段的插件，不知道的自行google\n\n**通用快捷键**\nCtrl+Shift+P 打开Package Control\nCtrl+P 根据文件名打开文件\nCtrl+G 定位行数\nCtrl+D 多处同步编辑\n\n**windows 右键处用sublime打开**\n把下面代码保存成 sublime_open_here.reg 双击就可以了。\n`Windows Registry Editor Version 5.00`\n\n[HKEY_CLASSES_ROOT\\*\\shell\\Sublime]\n\n[HKEY_CLASSES_ROOT\\*\\shell\\Sublime\\Command]\n@=\"\\\"D:\\\\Tools\\\\SublimeText\\\\sublime_text.exe\\\" \\\"%1\\\"\"\n\n**我的最终的配置文件**\n`{\n\"color_scheme\": \"Packages/Grandson-of-Obsidian/GrandsonOfObsidian.tmTheme\",\n\"font_size\": 14,\n\"hot_exit\": false,\n\"ignored_packages\":\n[\n\"Vintage\"\n],\n\"remember_open_files\": false,\n\"theme\": \"Soda Dark 3.sublime-theme\"\n}`","source":"_posts/e5-86-8d-e5-ba-a6-e4-bd-bf-e7-94-a8-sublime-text-3-e5-8f-8a-e7-9b-b8-e5-85-b3-e6-8a-80-e5-b7-a7-e3-80-81-e6-8f-92-e4-bb-b6-e3-80-81-e7-be-8e-e5-8c-96.md","raw":"---\ntitle: 再度使用 sublime text 3 及相关技巧、插件、美化、快捷键\ntags:\n  - sublime\nid: 1939\ncategories:\n  - Other\ndate: 2014-05-07 10:17:35\n---\n\n“工欲善其事，必先利其器”，每当发现一个好工具时都要说这么一句话，感觉特牛那种。第一次用sublime时好像还是 2 的 20xx 的某个版本，当时就是看着比 nodepad++ 漂亮，不过用了几天因为处理大文件和对编码处理不好放弃了，后来就是出了个 ConvertToUTF8 也不怎么理想。直到现在，再度拿出，按自己的需求跑了一遍，以前遇到的问题都ok了，果断把它作为默认的编辑器。\n![sublime](/wp-content/uploads/2014/05/86b8789c7e7f755b44728838b83c4949.png)\n<!--more-->\n\n下面是一些相关技巧、插件、美化，会不定时更新。\n\n**安装 Sublime Text 3**\n`http://www.sublimetext.com/3`\n\n**字体大小**\n在这里修改配置preferences -&gt; settings-user\n`\"font_size\": 14`\n\n**不记住最后打开的文件**\n`\"hot_exit\": false,\n\"remember_open_files\": false`\n\n**安装 Package Control**\n按下 Control + ` 调出 Console\n将以下代码粘贴进命令行中并回车，注意网络通畅\n`import urllib.request,os; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); open(os.path.join(ipp, pf), 'wb').write(urllib.request.urlopen( 'http://sublime.wbond.net/' + pf.replace(' ','%20')).read())`\n\n**安装插件及主题**\n按下 Shift + Ctrl + P 调出命令面板。\n输入 install 或者 pi 调出 Package Control: Install Package 选项，按下回车。\n在列表中查找相应插件按下回车进行安装。\n\n**推荐的主题 Theme - Soda**\n使用，两选一，重启sublime查看效果\n`\"theme\": \"Soda Light 3.sublime-theme\"`\n`\"theme\": \"Soda Dark 3.sublime-theme\" `\n\n**推荐的主题 spacegray 搜索 “ spacegray ”**\n使用，选一，重启sublime查看效果，color_scheme可以选别的，我用的是Obsidian\n`\"theme\": \"Spacegray.sublime-theme\",\n\"color_scheme\": \"Packages/Theme - Spacegray/base16-ocean.dark.tmTheme\"`\n\n`\"theme\": \"Spacegray Light.sublime-theme\",\n\"color_scheme\": \"Packages/Theme - Spacegray/base16-ocean.light.tmTheme\"`\n\n`\"theme\": \"Spacegray Eighties.sublime-theme\",\n\"color_scheme\": \"Packages/Theme - Spacegray/base16-eighties.dark.tmTheme\"`\n\n**推荐配色方案 Obsidian**\n这有两个，一个是 Obsidian 另一个是是它孙子 Grandson-of-Obsidian ，它孙子可以直接用 PI 安装，它爷爷要手动安装。\n两个地址\n`https://github.com/mekwall/obsidian-color-scheme\nhttps://github.com/jfromaniello/Grandson-of-Obsidian`\n\n**推荐的插件**\nConvertToUTF8 支持UTF-8编码的插件\nEmmet (Zen Coding) 快速生成HTML代码段的插件，不知道的自行google\n\n**通用快捷键**\nCtrl+Shift+P 打开Package Control\nCtrl+P 根据文件名打开文件\nCtrl+G 定位行数\nCtrl+D 多处同步编辑\n\n**windows 右键处用sublime打开**\n把下面代码保存成 sublime_open_here.reg 双击就可以了。\n`Windows Registry Editor Version 5.00`\n\n[HKEY_CLASSES_ROOT\\*\\shell\\Sublime]\n\n[HKEY_CLASSES_ROOT\\*\\shell\\Sublime\\Command]\n@=\"\\\"D:\\\\Tools\\\\SublimeText\\\\sublime_text.exe\\\" \\\"%1\\\"\"\n\n**我的最终的配置文件**\n`{\n\"color_scheme\": \"Packages/Grandson-of-Obsidian/GrandsonOfObsidian.tmTheme\",\n\"font_size\": 14,\n\"hot_exit\": false,\n\"ignored_packages\":\n[\n\"Vintage\"\n],\n\"remember_open_files\": false,\n\"theme\": \"Soda Dark 3.sublime-theme\"\n}`","slug":"e5-86-8d-e5-ba-a6-e4-bd-bf-e7-94-a8-sublime-text-3-e5-8f-8a-e7-9b-b8-e5-85-b3-e6-8a-80-e5-b7-a7-e3-80-81-e6-8f-92-e4-bb-b6-e3-80-81-e7-be-8e-e5-8c-96","published":1,"updated":"2018-01-13T05:07:00.472Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjccw7x86001maqcr8nne83fo","content":"<p>“工欲善其事，必先利其器”，每当发现一个好工具时都要说这么一句话，感觉特牛那种。第一次用sublime时好像还是 2 的 20xx 的某个版本，当时就是看着比 nodepad++ 漂亮，不过用了几天因为处理大文件和对编码处理不好放弃了，后来就是出了个 ConvertToUTF8 也不怎么理想。直到现在，再度拿出，按自己的需求跑了一遍，以前遇到的问题都ok了，果断把它作为默认的编辑器。<br><img src=\"/wp-content/uploads/2014/05/86b8789c7e7f755b44728838b83c4949.png\" alt=\"sublime\"><br><a id=\"more\"></a></p>\n<p>下面是一些相关技巧、插件、美化，会不定时更新。</p>\n<p><strong>安装 Sublime Text 3</strong><br><code>http://www.sublimetext.com/3</code></p>\n<p><strong>字体大小</strong><br>在这里修改配置preferences -&gt; settings-user<br><code>&quot;font_size&quot;: 14</code></p>\n<p><strong>不记住最后打开的文件</strong><br><code>&quot;hot_exit&quot;: false,\n&quot;remember_open_files&quot;: false</code></p>\n<p><strong>安装 Package Control</strong><br>按下 Control + <code>调出 Console\n将以下代码粘贴进命令行中并回车，注意网络通畅</code>import urllib.request,os; pf = ‘Package Control.sublime-package’; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); open(os.path.join(ipp, pf), ‘wb’).write(urllib.request.urlopen( ‘<a href=\"http://sublime.wbond.net/\" target=\"_blank\" rel=\"noopener\">http://sublime.wbond.net/</a>‘ + pf.replace(‘ ‘,’%20’)).read())`</p>\n<p><strong>安装插件及主题</strong><br>按下 Shift + Ctrl + P 调出命令面板。<br>输入 install 或者 pi 调出 Package Control: Install Package 选项，按下回车。<br>在列表中查找相应插件按下回车进行安装。</p>\n<p><strong>推荐的主题 Theme - Soda</strong><br>使用，两选一，重启sublime查看效果<br><code>&quot;theme&quot;: &quot;Soda Light 3.sublime-theme&quot;</code><br><code>&quot;theme&quot;: &quot;Soda Dark 3.sublime-theme&quot;</code></p>\n<p><strong>推荐的主题 spacegray 搜索 “ spacegray ”</strong><br>使用，选一，重启sublime查看效果，color_scheme可以选别的，我用的是Obsidian<br><code>&quot;theme&quot;: &quot;Spacegray.sublime-theme&quot;,\n&quot;color_scheme&quot;: &quot;Packages/Theme - Spacegray/base16-ocean.dark.tmTheme&quot;</code></p>\n<p><code>&quot;theme&quot;: &quot;Spacegray Light.sublime-theme&quot;,\n&quot;color_scheme&quot;: &quot;Packages/Theme - Spacegray/base16-ocean.light.tmTheme&quot;</code></p>\n<p><code>&quot;theme&quot;: &quot;Spacegray Eighties.sublime-theme&quot;,\n&quot;color_scheme&quot;: &quot;Packages/Theme - Spacegray/base16-eighties.dark.tmTheme&quot;</code></p>\n<p><strong>推荐配色方案 Obsidian</strong><br>这有两个，一个是 Obsidian 另一个是是它孙子 Grandson-of-Obsidian ，它孙子可以直接用 PI 安装，它爷爷要手动安装。<br>两个地址<br><code>https://github.com/mekwall/obsidian-color-scheme\nhttps://github.com/jfromaniello/Grandson-of-Obsidian</code></p>\n<p><strong>推荐的插件</strong><br>ConvertToUTF8 支持UTF-8编码的插件<br>Emmet (Zen Coding) 快速生成HTML代码段的插件，不知道的自行google</p>\n<p><strong>通用快捷键</strong><br>Ctrl+Shift+P 打开Package Control<br>Ctrl+P 根据文件名打开文件<br>Ctrl+G 定位行数<br>Ctrl+D 多处同步编辑</p>\n<p><strong>windows 右键处用sublime打开</strong><br>把下面代码保存成 sublime_open_here.reg 双击就可以了。<br><code>Windows Registry Editor Version 5.00</code></p>\n<p>[HKEY_CLASSES_ROOT*\\shell\\Sublime]</p>\n<p>[HKEY_CLASSES_ROOT*\\shell\\Sublime\\Command]<br>@=”\\”D:\\Tools\\SublimeText\\sublime_text.exe\\” \\”%1\\””</p>\n<p><strong>我的最终的配置文件</strong><br><code>{\n&quot;color_scheme&quot;: &quot;Packages/Grandson-of-Obsidian/GrandsonOfObsidian.tmTheme&quot;,\n&quot;font_size&quot;: 14,\n&quot;hot_exit&quot;: false,\n&quot;ignored_packages&quot;:\n[\n&quot;Vintage&quot;\n],\n&quot;remember_open_files&quot;: false,\n&quot;theme&quot;: &quot;Soda Dark 3.sublime-theme&quot;\n}</code></p>\n","site":{"data":{}},"excerpt":"<p>“工欲善其事，必先利其器”，每当发现一个好工具时都要说这么一句话，感觉特牛那种。第一次用sublime时好像还是 2 的 20xx 的某个版本，当时就是看着比 nodepad++ 漂亮，不过用了几天因为处理大文件和对编码处理不好放弃了，后来就是出了个 ConvertToUTF8 也不怎么理想。直到现在，再度拿出，按自己的需求跑了一遍，以前遇到的问题都ok了，果断把它作为默认的编辑器。<br><img src=\"/wp-content/uploads/2014/05/86b8789c7e7f755b44728838b83c4949.png\" alt=\"sublime\"><br>","more":"</p>\n<p>下面是一些相关技巧、插件、美化，会不定时更新。</p>\n<p><strong>安装 Sublime Text 3</strong><br><code>http://www.sublimetext.com/3</code></p>\n<p><strong>字体大小</strong><br>在这里修改配置preferences -&gt; settings-user<br><code>&quot;font_size&quot;: 14</code></p>\n<p><strong>不记住最后打开的文件</strong><br><code>&quot;hot_exit&quot;: false,\n&quot;remember_open_files&quot;: false</code></p>\n<p><strong>安装 Package Control</strong><br>按下 Control + <code>调出 Console\n将以下代码粘贴进命令行中并回车，注意网络通畅</code>import urllib.request,os; pf = ‘Package Control.sublime-package’; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); open(os.path.join(ipp, pf), ‘wb’).write(urllib.request.urlopen( ‘<a href=\"http://sublime.wbond.net/\" target=\"_blank\" rel=\"noopener\">http://sublime.wbond.net/</a>‘ + pf.replace(‘ ‘,’%20’)).read())`</p>\n<p><strong>安装插件及主题</strong><br>按下 Shift + Ctrl + P 调出命令面板。<br>输入 install 或者 pi 调出 Package Control: Install Package 选项，按下回车。<br>在列表中查找相应插件按下回车进行安装。</p>\n<p><strong>推荐的主题 Theme - Soda</strong><br>使用，两选一，重启sublime查看效果<br><code>&quot;theme&quot;: &quot;Soda Light 3.sublime-theme&quot;</code><br><code>&quot;theme&quot;: &quot;Soda Dark 3.sublime-theme&quot;</code></p>\n<p><strong>推荐的主题 spacegray 搜索 “ spacegray ”</strong><br>使用，选一，重启sublime查看效果，color_scheme可以选别的，我用的是Obsidian<br><code>&quot;theme&quot;: &quot;Spacegray.sublime-theme&quot;,\n&quot;color_scheme&quot;: &quot;Packages/Theme - Spacegray/base16-ocean.dark.tmTheme&quot;</code></p>\n<p><code>&quot;theme&quot;: &quot;Spacegray Light.sublime-theme&quot;,\n&quot;color_scheme&quot;: &quot;Packages/Theme - Spacegray/base16-ocean.light.tmTheme&quot;</code></p>\n<p><code>&quot;theme&quot;: &quot;Spacegray Eighties.sublime-theme&quot;,\n&quot;color_scheme&quot;: &quot;Packages/Theme - Spacegray/base16-eighties.dark.tmTheme&quot;</code></p>\n<p><strong>推荐配色方案 Obsidian</strong><br>这有两个，一个是 Obsidian 另一个是是它孙子 Grandson-of-Obsidian ，它孙子可以直接用 PI 安装，它爷爷要手动安装。<br>两个地址<br><code>https://github.com/mekwall/obsidian-color-scheme\nhttps://github.com/jfromaniello/Grandson-of-Obsidian</code></p>\n<p><strong>推荐的插件</strong><br>ConvertToUTF8 支持UTF-8编码的插件<br>Emmet (Zen Coding) 快速生成HTML代码段的插件，不知道的自行google</p>\n<p><strong>通用快捷键</strong><br>Ctrl+Shift+P 打开Package Control<br>Ctrl+P 根据文件名打开文件<br>Ctrl+G 定位行数<br>Ctrl+D 多处同步编辑</p>\n<p><strong>windows 右键处用sublime打开</strong><br>把下面代码保存成 sublime_open_here.reg 双击就可以了。<br><code>Windows Registry Editor Version 5.00</code></p>\n<p>[HKEY_CLASSES_ROOT*\\shell\\Sublime]</p>\n<p>[HKEY_CLASSES_ROOT*\\shell\\Sublime\\Command]<br>@=”\\”D:\\Tools\\SublimeText\\sublime_text.exe\\” \\”%1\\””</p>\n<p><strong>我的最终的配置文件</strong><br><code>{\n&quot;color_scheme&quot;: &quot;Packages/Grandson-of-Obsidian/GrandsonOfObsidian.tmTheme&quot;,\n&quot;font_size&quot;: 14,\n&quot;hot_exit&quot;: false,\n&quot;ignored_packages&quot;:\n[\n&quot;Vintage&quot;\n],\n&quot;remember_open_files&quot;: false,\n&quot;theme&quot;: &quot;Soda Dark 3.sublime-theme&quot;\n}</code></p>"},{"title":"四级完毕","id":"908","date":"2012-02-21T02:19:17.000Z","_content":"\n没想到英语四级过了，纪念一下！","source":"_posts/e5-9b-9b-e7-ba-a7-e5-ae-8c-e6-af-95.md","raw":"---\ntitle: 四级完毕\nid: 908\ncategories:\n  - Other\ndate: 2012-02-21 10:19:17\ntags:\n---\n\n没想到英语四级过了，纪念一下！","slug":"e5-9b-9b-e7-ba-a7-e5-ae-8c-e6-af-95","published":1,"updated":"2018-01-13T05:07:00.497Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjccw7x87001paqcre5m05dtt","content":"<p>没想到英语四级过了，纪念一下！</p>\n","site":{"data":{}},"excerpt":"","more":"<p>没想到英语四级过了，纪念一下！</p>\n"},{"title":"分类算法学习笔记：朴素贝叶斯及垃圾过滤","id":"2524","date":"2016-05-08T02:40:13.000Z","_content":"\n贝叶斯方法源于贝叶斯生前为解决一个“逆概”问题写的一篇文章。假设袋子里面有N个白球，M个黑球，摸一个球是黑球的概率是多少？如果反过来看：如果我们事先并不知道袋子里面黑白球的比例，而是随意摸出一个球知道颜色之后，那么求袋子里面的黑白球的比例。类比一下，我们可以知道我们自己邮箱里的垃圾邮件是哪些，也可以通过概率知道哪些词经常出现在垃圾邮件里，那么当收到一封邮件时，我们可以根据邮件里的词，从求这封新的邮件是垃圾邮件的概率。\n\n贝叶斯算法通过已知的P(A|B)，P(A),和P(B)三个概率计算P(B|A)发生的概率,其中\n- S：S是样本空间，是所有可能事件的总和。\n- P(A)：是样本空间S中A事件发生的概率。\n- P(B)：是样本空间S中B事件发生的概率。\n- P(A∩B)：是样本空间S中A事件和B事件同时发生的概率。\n- P(A|B)：是条件概率，是B事件已经发生时A事件发生的概率，P(A|B)=P(A∩B)/P(B)。\n\n贝叶斯公式 P(B|A)=P(A|B)*P(B)/P(A)\n\n在贝叶斯公式中，每一种概率都有一个特定的名字：\n- P(B)是”先验概率”(Prior probability)。\n- P(A)是”先验概率”(Prior probability)。\n- P(A|B)是已知B发生后A的条件概率，叫做似然函数(likelihood)。\n- P(B|A)是已知A发生后B的条件概率，是我们要求的值，叫做后验概率。\n- P(A|B)/P(A)是调整因子，也被称作标准似然度（standardised likelihood）。\n\n通过出现的关键词对垃圾邮件的计算公式如下：\nP(垃圾邮件|出现关键词)=P(出现关键词|垃圾邮件)*P(垃圾邮件)/P(出现关键词)","source":"_posts/e5-88-86-e7-b1-bb-e7-ae-97-e6-b3-95-e5-ad-a6-e4-b9-a0-e7-ac-94-e8-ae-b0-ef-bc-9a-e6-9c-b4-e7-b4-a0-e8-b4-9d-e5-8f-b6-e6-96-af-e5-8f-8a-e5-9e-83-e5-9c-be-e8-bf-87-e6-bb-a4.md","raw":"---\ntitle: 分类算法学习笔记：朴素贝叶斯及垃圾过滤\nid: 2524\ncategories:\n  - Algorithm\ndate: 2016-05-08 10:40:13\ntags:\n---\n\n贝叶斯方法源于贝叶斯生前为解决一个“逆概”问题写的一篇文章。假设袋子里面有N个白球，M个黑球，摸一个球是黑球的概率是多少？如果反过来看：如果我们事先并不知道袋子里面黑白球的比例，而是随意摸出一个球知道颜色之后，那么求袋子里面的黑白球的比例。类比一下，我们可以知道我们自己邮箱里的垃圾邮件是哪些，也可以通过概率知道哪些词经常出现在垃圾邮件里，那么当收到一封邮件时，我们可以根据邮件里的词，从求这封新的邮件是垃圾邮件的概率。\n\n贝叶斯算法通过已知的P(A|B)，P(A),和P(B)三个概率计算P(B|A)发生的概率,其中\n- S：S是样本空间，是所有可能事件的总和。\n- P(A)：是样本空间S中A事件发生的概率。\n- P(B)：是样本空间S中B事件发生的概率。\n- P(A∩B)：是样本空间S中A事件和B事件同时发生的概率。\n- P(A|B)：是条件概率，是B事件已经发生时A事件发生的概率，P(A|B)=P(A∩B)/P(B)。\n\n贝叶斯公式 P(B|A)=P(A|B)*P(B)/P(A)\n\n在贝叶斯公式中，每一种概率都有一个特定的名字：\n- P(B)是”先验概率”(Prior probability)。\n- P(A)是”先验概率”(Prior probability)。\n- P(A|B)是已知B发生后A的条件概率，叫做似然函数(likelihood)。\n- P(B|A)是已知A发生后B的条件概率，是我们要求的值，叫做后验概率。\n- P(A|B)/P(A)是调整因子，也被称作标准似然度（standardised likelihood）。\n\n通过出现的关键词对垃圾邮件的计算公式如下：\nP(垃圾邮件|出现关键词)=P(出现关键词|垃圾邮件)*P(垃圾邮件)/P(出现关键词)","slug":"e5-88-86-e7-b1-bb-e7-ae-97-e6-b3-95-e5-ad-a6-e4-b9-a0-e7-ac-94-e8-ae-b0-ef-bc-9a-e6-9c-b4-e7-b4-a0-e8-b4-9d-e5-8f-b6-e6-96-af-e5-8f-8a-e5-9e-83-e5-9c-be-e8-bf-87-e6-bb-a4","published":1,"updated":"2018-01-13T05:07:00.478Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjccw7x89001taqcrt5ezgmpz","content":"<p>贝叶斯方法源于贝叶斯生前为解决一个“逆概”问题写的一篇文章。假设袋子里面有N个白球，M个黑球，摸一个球是黑球的概率是多少？如果反过来看：如果我们事先并不知道袋子里面黑白球的比例，而是随意摸出一个球知道颜色之后，那么求袋子里面的黑白球的比例。类比一下，我们可以知道我们自己邮箱里的垃圾邮件是哪些，也可以通过概率知道哪些词经常出现在垃圾邮件里，那么当收到一封邮件时，我们可以根据邮件里的词，从求这封新的邮件是垃圾邮件的概率。</p>\n<p>贝叶斯算法通过已知的P(A|B)，P(A),和P(B)三个概率计算P(B|A)发生的概率,其中</p>\n<ul>\n<li>S：S是样本空间，是所有可能事件的总和。</li>\n<li>P(A)：是样本空间S中A事件发生的概率。</li>\n<li>P(B)：是样本空间S中B事件发生的概率。</li>\n<li>P(A∩B)：是样本空间S中A事件和B事件同时发生的概率。</li>\n<li>P(A|B)：是条件概率，是B事件已经发生时A事件发生的概率，P(A|B)=P(A∩B)/P(B)。</li>\n</ul>\n<p>贝叶斯公式 P(B|A)=P(A|B)*P(B)/P(A)</p>\n<p>在贝叶斯公式中，每一种概率都有一个特定的名字：</p>\n<ul>\n<li>P(B)是”先验概率”(Prior probability)。</li>\n<li>P(A)是”先验概率”(Prior probability)。</li>\n<li>P(A|B)是已知B发生后A的条件概率，叫做似然函数(likelihood)。</li>\n<li>P(B|A)是已知A发生后B的条件概率，是我们要求的值，叫做后验概率。</li>\n<li>P(A|B)/P(A)是调整因子，也被称作标准似然度（standardised likelihood）。</li>\n</ul>\n<p>通过出现的关键词对垃圾邮件的计算公式如下：<br>P(垃圾邮件|出现关键词)=P(出现关键词|垃圾邮件)*P(垃圾邮件)/P(出现关键词)</p>\n","site":{"data":{}},"excerpt":"","more":"<p>贝叶斯方法源于贝叶斯生前为解决一个“逆概”问题写的一篇文章。假设袋子里面有N个白球，M个黑球，摸一个球是黑球的概率是多少？如果反过来看：如果我们事先并不知道袋子里面黑白球的比例，而是随意摸出一个球知道颜色之后，那么求袋子里面的黑白球的比例。类比一下，我们可以知道我们自己邮箱里的垃圾邮件是哪些，也可以通过概率知道哪些词经常出现在垃圾邮件里，那么当收到一封邮件时，我们可以根据邮件里的词，从求这封新的邮件是垃圾邮件的概率。</p>\n<p>贝叶斯算法通过已知的P(A|B)，P(A),和P(B)三个概率计算P(B|A)发生的概率,其中</p>\n<ul>\n<li>S：S是样本空间，是所有可能事件的总和。</li>\n<li>P(A)：是样本空间S中A事件发生的概率。</li>\n<li>P(B)：是样本空间S中B事件发生的概率。</li>\n<li>P(A∩B)：是样本空间S中A事件和B事件同时发生的概率。</li>\n<li>P(A|B)：是条件概率，是B事件已经发生时A事件发生的概率，P(A|B)=P(A∩B)/P(B)。</li>\n</ul>\n<p>贝叶斯公式 P(B|A)=P(A|B)*P(B)/P(A)</p>\n<p>在贝叶斯公式中，每一种概率都有一个特定的名字：</p>\n<ul>\n<li>P(B)是”先验概率”(Prior probability)。</li>\n<li>P(A)是”先验概率”(Prior probability)。</li>\n<li>P(A|B)是已知B发生后A的条件概率，叫做似然函数(likelihood)。</li>\n<li>P(B|A)是已知A发生后B的条件概率，是我们要求的值，叫做后验概率。</li>\n<li>P(A|B)/P(A)是调整因子，也被称作标准似然度（standardised likelihood）。</li>\n</ul>\n<p>通过出现的关键词对垃圾邮件的计算公式如下：<br>P(垃圾邮件|出现关键词)=P(出现关键词|垃圾邮件)*P(垃圾邮件)/P(出现关键词)</p>\n"},{"title":"几种常见的排序算法的PHP实现","id":"2050","date":"2014-05-19T02:03:30.000Z","_content":"\n`static function Bubble($arr) {\n$num = count($arr);\nfor ($i = 1; $i < $num; $i++) {\n    for ($j = $num - 1; $j >= $i ; $j--) {\n        if ($arr[$j] < $arr[$j-1]) {\n            self::exch($arr,$j,$j-1);\n        }\n    }\n}\nreturn $arr;\n}`\n\n`static public function selection (&$data){\n    $size=count($data);\n    for($i=0;$i<$size;$i++){\n        $min=$i;\n        for($j=$i+1;$j<$size;$j++){\n            if($data[$j]<$data[$min]){\n                $min=$j;\n            }\n        }\n        self::exch($data,$i,$min);\n    }  \n}\n`<!--more-->\n\n`static function insertion(&$data){\n    $size=count($data);\n    for($i=1;$i<$size;$i++){\n        for($j=$i;$j>0 $$ $a[$j]<$a[$j-1];$j--){\n            self::exch($data,$j,$j-1);\n        }\n    }\n}\n`\n`static function shell(&$data){\n    $size=count($data);\n    $h=1;\n    while($h<$size/3){\n        $h=3*$h+1;\n    }            \n    while($h>=1){\n        for($i=$h;$i<$size;$i++){\n            for($j=$i;$j>=$h && $data[$j]<$data[$j-$h];$j-=$h){\n                self::exch($data,$j,$j-$h);\n            }\n        }\n        $h=$h/3;\n    }\n}`\n`\nstatic function quick(array &$data,$lo,$hi){\n    if($hi<=$lo){\n        return ;\n    }\n\n    //partition\n    $i=$lo;\n    $j=$hi+1;\n    $v=$data[$lo];\n    while(1){\n        while($data[++$i]<$v){\n            if($i==$hi){\n                break;\n            }\n        }\n        while($v<$data[--$j]){\n            if($j==$lo){\n                break;\n            }\n        }\n        if($i>=$j){\n            break;\n        }\n        self::exch($data,$i,$j);\n    }\n    self::each($data,$lo,$j);\n    $k=$j;\n\n    //\n    quick($data,$lo,$k-1);\n    quick($data,$k+1,$hi);\n}\n`\n\n`static function exch(&$data,$i,$j){\n    $tmp=$data[$i];\n    $data[$i]=$data[$j];\n    $data[$j]=$tmp;\n}   \n`","source":"_posts/e5-87-a0-e7-a7-8d-e5-b8-b8-e8-a7-81-e7-9a-84-e6-8e-92-e5-ba-8f-e7-ae-97-e6-b3-95-e7-9a-84php-e5-ae-9e-e7-8e-b0.md","raw":"---\ntitle: 几种常见的排序算法的PHP实现\ntags:\n  - 算法\nid: 2050\ncategories:\n  - Algorithm\ndate: 2014-05-19 10:03:30\n---\n\n`static function Bubble($arr) {\n$num = count($arr);\nfor ($i = 1; $i < $num; $i++) {\n    for ($j = $num - 1; $j >= $i ; $j--) {\n        if ($arr[$j] < $arr[$j-1]) {\n            self::exch($arr,$j,$j-1);\n        }\n    }\n}\nreturn $arr;\n}`\n\n`static public function selection (&$data){\n    $size=count($data);\n    for($i=0;$i<$size;$i++){\n        $min=$i;\n        for($j=$i+1;$j<$size;$j++){\n            if($data[$j]<$data[$min]){\n                $min=$j;\n            }\n        }\n        self::exch($data,$i,$min);\n    }  \n}\n`<!--more-->\n\n`static function insertion(&$data){\n    $size=count($data);\n    for($i=1;$i<$size;$i++){\n        for($j=$i;$j>0 $$ $a[$j]<$a[$j-1];$j--){\n            self::exch($data,$j,$j-1);\n        }\n    }\n}\n`\n`static function shell(&$data){\n    $size=count($data);\n    $h=1;\n    while($h<$size/3){\n        $h=3*$h+1;\n    }            \n    while($h>=1){\n        for($i=$h;$i<$size;$i++){\n            for($j=$i;$j>=$h && $data[$j]<$data[$j-$h];$j-=$h){\n                self::exch($data,$j,$j-$h);\n            }\n        }\n        $h=$h/3;\n    }\n}`\n`\nstatic function quick(array &$data,$lo,$hi){\n    if($hi<=$lo){\n        return ;\n    }\n\n    //partition\n    $i=$lo;\n    $j=$hi+1;\n    $v=$data[$lo];\n    while(1){\n        while($data[++$i]<$v){\n            if($i==$hi){\n                break;\n            }\n        }\n        while($v<$data[--$j]){\n            if($j==$lo){\n                break;\n            }\n        }\n        if($i>=$j){\n            break;\n        }\n        self::exch($data,$i,$j);\n    }\n    self::each($data,$lo,$j);\n    $k=$j;\n\n    //\n    quick($data,$lo,$k-1);\n    quick($data,$k+1,$hi);\n}\n`\n\n`static function exch(&$data,$i,$j){\n    $tmp=$data[$i];\n    $data[$i]=$data[$j];\n    $data[$j]=$tmp;\n}   \n`","slug":"e5-87-a0-e7-a7-8d-e5-b8-b8-e8-a7-81-e7-9a-84-e6-8e-92-e5-ba-8f-e7-ae-97-e6-b3-95-e7-9a-84php-e5-ae-9e-e7-8e-b0","published":1,"updated":"2018-01-13T05:07:00.470Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjccw7x8b001vaqcrnctfrmic","content":"<p><code>static function Bubble($arr) {\n$num = count($arr);\nfor ($i = 1; $i &lt; $num; $i++) {\n    for ($j = $num - 1; $j &gt;= $i ; $j--) {\n        if ($arr[$j] &lt; $arr[$j-1]) {\n            self::exch($arr,$j,$j-1);\n        }\n    }\n}\nreturn $arr;\n}</code></p>\n<p><code>static public function selection (&amp;$data){\n    $size=count($data);\n    for($i=0;$i&lt;$size;$i++){\n        $min=$i;\n        for($j=$i+1;$j&lt;$size;$j++){\n            if($data[$j]&lt;$data[$min]){\n                $min=$j;\n            }\n        }\n        self::exch($data,$i,$min);\n    }  \n}</code><a id=\"more\"></a></p>\n<p><code>static function insertion(&amp;$data){\n    $size=count($data);\n    for($i=1;$i&lt;$size;$i++){\n        for($j=$i;$j&gt;0 $$ $a[$j]&lt;$a[$j-1];$j--){\n            self::exch($data,$j,$j-1);\n        }\n    }\n}</code><br><code>static function shell(&amp;$data){\n    $size=count($data);\n    $h=1;\n    while($h&lt;$size/3){\n        $h=3*$h+1;\n    }            \n    while($h&gt;=1){\n        for($i=$h;$i&lt;$size;$i++){\n            for($j=$i;$j&gt;=$h &amp;&amp; $data[$j]&lt;$data[$j-$h];$j-=$h){\n                self::exch($data,$j,$j-$h);\n            }\n        }\n        $h=$h/3;\n    }\n}</code><br>`<br>static function quick(array &amp;$data,$lo,$hi){<br>    if($hi&lt;=$lo){<br>        return ;<br>    }</p>\n<pre><code>//partition\n$i=$lo;\n$j=$hi+1;\n$v=$data[$lo];\nwhile(1){\n    while($data[++$i]&lt;$v){\n        if($i==$hi){\n            break;\n        }\n    }\n    while($v&lt;$data[--$j]){\n        if($j==$lo){\n            break;\n        }\n    }\n    if($i&gt;=$j){\n        break;\n    }\n    self::exch($data,$i,$j);\n}\nself::each($data,$lo,$j);\n$k=$j;\n\n//\nquick($data,$lo,$k-1);\nquick($data,$k+1,$hi);\n</code></pre><p>}<br>`</p>\n<p><code>static function exch(&amp;$data,$i,$j){\n    $tmp=$data[$i];\n    $data[$i]=$data[$j];\n    $data[$j]=$tmp;\n}</code></p>\n","site":{"data":{}},"excerpt":"<p><code>static function Bubble($arr) {\n$num = count($arr);\nfor ($i = 1; $i &lt; $num; $i++) {\n    for ($j = $num - 1; $j &gt;= $i ; $j--) {\n        if ($arr[$j] &lt; $arr[$j-1]) {\n            self::exch($arr,$j,$j-1);\n        }\n    }\n}\nreturn $arr;\n}</code></p>\n<p><code>static public function selection (&amp;$data){\n    $size=count($data);\n    for($i=0;$i&lt;$size;$i++){\n        $min=$i;\n        for($j=$i+1;$j&lt;$size;$j++){\n            if($data[$j]&lt;$data[$min]){\n                $min=$j;\n            }\n        }\n        self::exch($data,$i,$min);\n    }  \n}</code>","more":"</p>\n<p><code>static function insertion(&amp;$data){\n    $size=count($data);\n    for($i=1;$i&lt;$size;$i++){\n        for($j=$i;$j&gt;0 $$ $a[$j]&lt;$a[$j-1];$j--){\n            self::exch($data,$j,$j-1);\n        }\n    }\n}</code><br><code>static function shell(&amp;$data){\n    $size=count($data);\n    $h=1;\n    while($h&lt;$size/3){\n        $h=3*$h+1;\n    }            \n    while($h&gt;=1){\n        for($i=$h;$i&lt;$size;$i++){\n            for($j=$i;$j&gt;=$h &amp;&amp; $data[$j]&lt;$data[$j-$h];$j-=$h){\n                self::exch($data,$j,$j-$h);\n            }\n        }\n        $h=$h/3;\n    }\n}</code><br>`<br>static function quick(array &amp;$data,$lo,$hi){<br>    if($hi&lt;=$lo){<br>        return ;<br>    }</p>\n<pre><code>//partition\n$i=$lo;\n$j=$hi+1;\n$v=$data[$lo];\nwhile(1){\n    while($data[++$i]&lt;$v){\n        if($i==$hi){\n            break;\n        }\n    }\n    while($v&lt;$data[--$j]){\n        if($j==$lo){\n            break;\n        }\n    }\n    if($i&gt;=$j){\n        break;\n    }\n    self::exch($data,$i,$j);\n}\nself::each($data,$lo,$j);\n$k=$j;\n\n//\nquick($data,$lo,$k-1);\nquick($data,$k+1,$hi);\n</code></pre><p>}<br>`</p>\n<p><code>static function exch(&amp;$data,$i,$j){\n    $tmp=$data[$i];\n    $data[$i]=$data[$j];\n    $data[$j]=$tmp;\n}</code></p>"},{"title":"博客优化设置记录","id":"1277","date":"2014-03-19T08:10:50.000Z","_content":"\n本来空间响应不够快，又加上之前没有很好的设置，网站打开的速度都过了1s。主要是把前端的代码减少了体积，库更少的引用。\n\n1.  去掉了无用的js库\n2.  精简了php的逻辑\n3.  关掉了七牛cdn, 只保留图片存储功能\n4.  去掉了代码高亮，简单重写了&lt;code&gt;\n5.  使用 Gravatar缓存\n6.  使用WP Super Cache大牛插件\n7.  加上了*.eot的缓存时间\n8.  侧边栏<span style=\"line-height: 1.5em;\">Recent, </span><span style=\"line-height: 1.5em;\">Popular, </span><span style=\"line-height: 1.5em;\">Comment, </span><span style=\"line-height: 1.5em;\">Tag </span>在ie下不在一行\n9.  顶部菜单栏的固定\n10.  背景的固定\n11.  去掉了tweet\n12.  试试百度加速乐。。。","source":"_posts/e5-8d-9a-e5-ae-a2-e4-bc-98-e5-8c-96-e8-ae-be-e7-bd-ae-e8-ae-b0-e5-bd-95.md","raw":"---\ntitle: 博客优化设置记录\nid: 1277\ncategories:\n  - Other\ndate: 2014-03-19 16:10:50\ntags:\n---\n\n本来空间响应不够快，又加上之前没有很好的设置，网站打开的速度都过了1s。主要是把前端的代码减少了体积，库更少的引用。\n\n1.  去掉了无用的js库\n2.  精简了php的逻辑\n3.  关掉了七牛cdn, 只保留图片存储功能\n4.  去掉了代码高亮，简单重写了&lt;code&gt;\n5.  使用 Gravatar缓存\n6.  使用WP Super Cache大牛插件\n7.  加上了*.eot的缓存时间\n8.  侧边栏<span style=\"line-height: 1.5em;\">Recent, </span><span style=\"line-height: 1.5em;\">Popular, </span><span style=\"line-height: 1.5em;\">Comment, </span><span style=\"line-height: 1.5em;\">Tag </span>在ie下不在一行\n9.  顶部菜单栏的固定\n10.  背景的固定\n11.  去掉了tweet\n12.  试试百度加速乐。。。","slug":"e5-8d-9a-e5-ae-a2-e4-bc-98-e5-8c-96-e8-ae-be-e7-bd-ae-e8-ae-b0-e5-bd-95","published":1,"updated":"2018-01-13T05:07:00.490Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjccw7x8d001zaqcrzh6t3fv1","content":"<p>本来空间响应不够快，又加上之前没有很好的设置，网站打开的速度都过了1s。主要是把前端的代码减少了体积，库更少的引用。</p>\n<ol>\n<li>去掉了无用的js库</li>\n<li>精简了php的逻辑</li>\n<li>关掉了七牛cdn, 只保留图片存储功能</li>\n<li>去掉了代码高亮，简单重写了&lt;code&gt;</li>\n<li>使用 Gravatar缓存</li>\n<li>使用WP Super Cache大牛插件</li>\n<li>加上了*.eot的缓存时间</li>\n<li>侧边栏<span style=\"line-height: 1.5em;\">Recent, </span><span style=\"line-height: 1.5em;\">Popular, </span><span style=\"line-height: 1.5em;\">Comment, </span><span style=\"line-height: 1.5em;\">Tag </span>在ie下不在一行</li>\n<li>顶部菜单栏的固定</li>\n<li>背景的固定</li>\n<li>去掉了tweet</li>\n<li>试试百度加速乐。。。</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>本来空间响应不够快，又加上之前没有很好的设置，网站打开的速度都过了1s。主要是把前端的代码减少了体积，库更少的引用。</p>\n<ol>\n<li>去掉了无用的js库</li>\n<li>精简了php的逻辑</li>\n<li>关掉了七牛cdn, 只保留图片存储功能</li>\n<li>去掉了代码高亮，简单重写了&lt;code&gt;</li>\n<li>使用 Gravatar缓存</li>\n<li>使用WP Super Cache大牛插件</li>\n<li>加上了*.eot的缓存时间</li>\n<li>侧边栏<span style=\"line-height: 1.5em;\">Recent, </span><span style=\"line-height: 1.5em;\">Popular, </span><span style=\"line-height: 1.5em;\">Comment, </span><span style=\"line-height: 1.5em;\">Tag </span>在ie下不在一行</li>\n<li>顶部菜单栏的固定</li>\n<li>背景的固定</li>\n<li>去掉了tweet</li>\n<li>试试百度加速乐。。。</li>\n</ol>\n"},{"title":"[转] 关于数组的几道面试题 ","id":"2055","date":"2014-05-20T00:43:16.000Z","_content":"\n> 数组求和\r> \n> 求数组中的最大值和最小值\r> \n> 求数组中的最大值和次大值\r> \n> 求数组中出现次数超过一半的元素\r> \n> 求数组中元素的最短距离\r> \n> 求两个有序数组的共同元素\r> \n> 求三个数组的共同元素\r> \n> 找出数组中唯一重复的元素\r> \n> 找出出现奇数次的元素\r> \n> 求数组中满足给定和的数对\r> \n> 最大子段和\r> \n> 最大子段积\r> \n> 数组循环移位\r> \n> 字符串逆转\r> \n> 组合问题\r> \n> 合并两个数组\r> \n> 重排问题\r> \n> 找出绝对值最小的元素\n<!--more-->\n\n**数组求和 **\n    给定一个含有n个元素的整型数组a，求a中所有元素的和。可能您会觉得很简单，是的，的确简单，但是为什么还要说呢，原因：这道题要求用递归，只用一行代码。\n分析\n    简单说一下，两种情况：\n    1\\. 如果数组元素个数为0，那么和为0；\n    2\\. 如果数组元素个数为n，那么先求出前n-1个元素之和，再加上a[n - 1]即可；\n代码\n// 数组求和\n`int sum(int*a, int n)\n{\n     return n ==0?0 : sum(a, n -1) + a[n -1];\n}`\n\n**求数组的最大值和最小值**\n    给定一个含有n个元素的整型数组a，求a中的最大值和最小值。\n分析\n    常规的做法是遍历一次，分别求出最大值和最小值，事实上，至多3|n/2|（||代表向下取整）就足以找出最小值和最大值。做法是：记录比较过程中遇到的最小值和最大值。我们并不是将每一个输入元素与当前的最大值和最小值进行比较（这样做的代价是每个元素需要两次比较），而是成对的处理元素。先将一对输入元素进行比较，然后把较小者与当前最小值进行比较，把较大者与当前最大值比较，因此每两个元素比较3次。\n    如何假定当前最小值和最大值的初始值依赖于n是奇数还是偶数。如果n是奇数，就将最小值和最大值都设为第一个元素的值，然后成对的处理余下的元素。如果n是偶数，就对前两个元素做一次比较，以决定最小值和最大值的初值，然后如同n是奇数的情形一样，成对的处理余下的元素。\n\n    但是这里要说的是分治法，将数组分成左右两部分，先求出左半部分的最大值和最小值，再求出右半部分的最大值和最小值，然后综合起来求总体的最大值和最小值。这是个递归的过程，对于划分后的左右两部分，同样重复这个过程，直到划分区间内只剩下一个元素或者两个元素。\n代码\n// 求数组的最大值和最小值，返回值在maxValue和minValue\n`void MaxandMin(int *a, int l, int r, int& maxValue, int& minValue)\n{\n    if(l == r) // l与r之间只有一个元素\n    {\n        maxValue = a[l] ;\n        minValue = a[l] ;\n        return ;\n    }\n\n    if(l + 1 == r) // l与r之间只有两个元素\n    {\n        if(a[l] >= a[r])\n        {\n            maxValue = a[l] ;\n            minValue = a[r] ;\n        }\n        else\n        {\n            maxValue = a[r] ;\n            minValue = a[l] ;\n        }\n        return ;\n    }\n\n    int m = (l + r) / 2 ; // 求中点\n\n    int lmax ; // 左半部份最大值\n    int lmin ; // 左半部份最小值\n    MaxandMin(a, l, m, lmax, lmin) ; // 递归计算左半部份\n\n    int rmax ; // 右半部份最大值\n    int rmin ; // 右半部份最小值\n    MaxandMin(a, m + 1, r, rmax, rmin) ; // 递归计算右半部份\n\n    maxValue = max(lmax, rmax) ; // 总的最大值\n    minValue = min(lmin, rmin) ; // 总的最小值\n}\n`\n**求数组的最大值和次小值**\n    给定一个含有n个元素的整型数组a，求a中的最大值和次小值。\n分析\n    思路和上一题类似，同样是用分治法，先求出左边的最大值leftmax和次大值leftsecond，再求出右边的最大值rightmax和次大值rightsecond，然后合并，如何合并呢？分情况考虑。    \n    1\\. 如果leftmax > rightmax，那么可以肯定leftmax是最大值，但次大值不一定是rightmax，但肯定不是rightsecond，只需将leftsecond和rightmax做一次比较即可；\n    2\\. 如果rightmax > leftmax，那么可以肯定的rightmax是最大值，但次大值不一样是leftmax，但肯定不是leftsecond，所以只需将leftmax与rightsecond做一次比较即可；\n注意\n    这种方法无法处理最大元素有多个的情况，比如3,5,7,7，将返回7,7而不是7,5。感谢网友，从无到有靠他人指出。\n代码\n// 找出数组的最大值和次大值，a是待查找的数组，left和right是查找区间，max和second存放结果\n`void MaxandMin(int a[], int left, int right, int&max, int&second)\n{\n    if(left == right)\n    {\n        max = a[left] ;\n        second = INT_MIN;\n    }\n    elseif(left +1== right)\n    {\n        max = a[left] > a[right] ? a[left] : a[right] ;\n        second = a[left] < a[right] ? a[left] : a[right] ;\n    }\n    else\n    {\n        int mid = left + (right - left) /2 ;\n\n        int leftmax ;\n        int leftsecond ;\n        MaxandMin(a, left, mid, leftmax, leftsecond) ;\n\n        int rightmax ;\n        int rightsecond ;\n        MaxandMin(a, mid +1, right, rightmax, rightsecond) ;\n\n        if (leftmax > rightmax)\n        {\n            max = leftmax ;\n            second = leftsecond > rightmax ? leftsecond : rightmax ;\n        }\n        else\n        {\n            max = rightmax ;\n            second = leftmax < rightsecond ? rightsecond : leftmax ;\n        }\n    }\n}`\n\n**求数组中出现次数超过一半的元素**\n    给定一个含有n个元素的整型数组a，其中有个元素出现次数超过n/2，求出这个元素。据说是百度的一道题。\n分析\n    暂且先不说当前作者的思路，我看到这个问题的时候，想到了如下方法：\n    1\\. 先进行排序，常规的方法就是快速排序，平均时间复杂度为O(nlogn))，然后取第n/2个元素即可，当然，这种方法的前提是存在这个所谓的“主元素”；若不清楚，还是需要验证的；\n    2\\. 由于肯定该数组中含有这么个元素，该题就转换为找中位数了。找中位数的方法线性时间内有两种：第一、基于分治法的线性期望时间求中位数，该方法是线性期望时间，类似于快速排序；第二、最坏情况下也是线性时间复杂度的方法——“五分中项的中项”划分方法；\n    3、分治的思想  若a中存在主元素，则将a分为两部分后，a的主元素也必为两部分中至少一部分主元素，因此可用分治法。\n    将元素划分两部分，递归地检查两部分有无主元素。算法如下：\n    a. 若a中只含有一个元素，则此元素就是主元素，返回此数；\n    b. 将a分为两部分a1和a2（二者元素相等或只差一个），分别递归调用此方法求其主元素m1和m2；\n    c. 若m1和m2都存在且相等，则这个是就是a的主元素，返回次数；\n    d. 若m1和m2都存在且不相等，则分别检查这两个数是否为a的主元素，若有则返回此数，若无则返回空值；\n    e. 若m1和m2都不存在，则a无主元素，返回空值；\n    f. 若m1和m2只有一个存在，则检查这个数是否为a的主元素，若是则返回此数，若否就返回空值；\n\n    对于作者给出的这种算法，我在《编程之美》上看到过，即“寻找发帖水王”的题目。\n    设置一个当前值和当前值的计数器，初始化当前值为数组首元素，计数器值为1，然后从第二个元素开始遍历整个数组，对于每个被遍历到的值a[i]\n    1\\. 如果a[i] == currentvalue，则计数器加1；\n    2\\. 如果a[i]  != currentvalue，则计数器减一，如果计数器等于0，则更新当前值为a[i]，并将计数器值重置为1；\n代码\n`void Find(int a[], int length)\n{\n    int candidate;\n    int i, ntimes;\n    i = 0;\n    ntimes = 0;\n\n    for(i = 0; i < length; i++)\n    {\n        if(ntimes == 0)//计数为0时，读入新的元素，计数加1\n        {\n            candidate = a[i];\n            ntimes = 1;\n        }\n        else\n        {\n            if(candidate == a[i])//如果数据相同，计数加1\n            {\n                ntimes++;\n            }\n            else\n            {\n                ntimes--; //如果计数不同，则计数减1，相当于删除了两个元素\n            }\n        }\n    }\n\n    int count = 0;\n    for(i = 0; i <length; i++)\n    {\n        if(candidate == a[i])\n            count++;\n    }\n    //最终得到的candidate元素有可能是序列最末位的两个元素之一\n    //因此，需要验证\n    if(count > length/2)\n    {\n        cout << endl << \"主元素为: \" << candidate << endl;\n    }\n    else\n    {\n        cout << \"没有主元素.\" << endl;\n    }\n}`\n\n**求数组中元素的最短距离**\n    给定一个含有n个元素的整型数组a，找出数组中的两个元素x和y，使得abs(x - y)值最小。\n分析\n    看到这个题目，首先想到的是Brute Force，这样需要的时间复杂度为O(n^2)；\n    另外，我们可以先进行排序，然后遍历一次数组即可。    \n    不知道还有没有更好的方法？？？？\n代码\n`int compare(const void* a, const void* b)\n{\n    return *(int*)a - *(int*)b ;\n}\n\n// 求数组中元素的最短距离\nvoid MinimumDistance(int* a, int n)\n{\n    // Sort\n    qsort(a, n, sizeof(int), compare) ;\n\n    int i ; // Index of number 1\n    int j ; // Index of number 2\n\n    int minDistance = numeric_limits<int>::max() ;\n    for (int k = 0; k < n - 1; ++k)\n    {\n        if (a[k + 1] - a[k] < minDistance)\n        {\n            minDistance = a[k + 1] - a[k] ;\n            i = a[k] ;\n            j = a[k + 1] ;\n        }\n    }\n\n    cout << \"Minimum distance is: \" << minDistance << endl ;\n    cout << \"i = \" << i << \" j = \" << j << endl ;\n}`\n**\n求两个有序数组的共同元素**\n    给定两个含有n个元素的有序（非降序）整型数组a和b，求出其共同元素，比如\n    a = 0, 1, 2, 3, 4\n    b = 1, 3, 5, 7, 9\n    输出1, 3\n分析\n   充分利用数组有序的性质，用两个指针i和j分别指向a和b，比较a[i]和b[j]，根据比较结果移动指针，则有如下三种情况：\n    1\\. a[i] < b[j]，则i++，继续比较；\n    2\\. a[i] == b[j]，则i和j皆加1，继续比较；\n    3\\. a[i] > b[j]，则j++，继续比较；\n    重复以上过程，直至i或j到达数组末尾。\n代码\n// 找出两个数组的共同元素\n`void FindCommon(int* a, int* b, int n)\n{\n    int i = 0;\n    int j = 0 ;\n\n    while (i < n && j < n)\n    {\n        if (a[i] < b[j])\n            ++i ;\n        else if(a[i] == b[j])\n        {\n            cout << a[i] << endl ;\n            ++i ;\n            ++j ;\n        }\n        else// a[i] > b[j]\n            ++j ;\n    }\n}`\n    这道题还要其他的解法，比如对于a中任意一个元素，在b中对齐进行Bianry Search，因为a中有n个元素，而在b中进行Binary Search需要logn，所以，找出全部相同元素的时间复杂度O(nlogn)。\n    另外，上面的解法，只要b有序即可，a是否有序无所谓，因为我们只是在b中做Binary Search。如果a也有序的话，那么用上面的方法就有点慢了，因为如果a中某个元素在b中的位置是k的话，那么a中下一个元素在b中的位置一定位于k的右侧，所以本次搜索空间可以根据上次搜索结果缩小，而不是在整个b中搜索。也即如果a和b都有序的话，代码可以做如下修改，记录上次搜索b中的元素位置，作为下一次搜索的起始点。\n\n**求三个数组的共同元素**\n    给定三个含有n个元素的整型数组a、b和c，求他们最小的公共元素。\n分析\n   如果三个数组都有序，那么可以设置三个指针指向三个数组的头部，然后根据这三个指针所指的值进行比较来移动指针，直到找到共同元素。\n代码\n// 三个数组的共同元素-只找最小的\n`void FindCommonElements(int a[], int b[], int c[], int x, int y, int z)\n{\n    for(int i = 0, j = 0, k = 0; i < x && j < y && k < z;)\n    {\n        if(a[i] < b[j])\n        {\n            i++ ;\n        }\n        else // a[i] >= b[j]\n        {\n            if(b[j] < c[k])\n            {\n                j++ ;\n            }\n            else // b[j] >= c[k]\n            {\n                if(c[k] < a[i])\n                {\n                    k++ ;\n                }\n                else // c[k] >= a[i]\n                {\n                    cout << c[k] << endl ;\n                    return ;\n                }\n            }\n        }\n    }\n\n    cout << \"Not found!\" << endl ;\n}`\n    如果三个数组都没有序的话，可以对a和b进行排序，然后对c中任意一个元素都在b和c中做二分搜索。\n// 找出三个数组的共同元素\n// O(NlogN)\n`int UniqueCommonItem(int *a, int *b, int *c, int n)\n{\n    // sort array a\n    qsort(a, n, sizeof(int), compare) ; // NlogN\n\n    // sort array b\n    qsort(b, n, sizeof(int), compare) ; // NlogN\n\n    // for each element in array c, do a binary search in a and b\n    // This is up to a complexity of N*2*logN\n    for (int i = 0; i < n; i++)\n    {\n        if(BinarySearch(a, n, c[i]) && BinarySearch(b, n, c[i]))\n            return c[i] ;\n    }\n\n    return - 1 ; // not found\n}`\n    也可以对a进行排序，然后对于b和c中任意一个元素都在a中进行二分搜索，但是这样做是由问题的：当b[i]和c[i]同时都在a里面也说明不了就是共同元素。\n\n    小小总结一下，对于在数组中进行查找的问题，可以分为如下两种情况处理：\n    1\\. 如果给定的数组有序，那么首先应该想到的是二分查找，时间复杂度为（logn）；\n    2\\. 如果给定的数组无序，那么首先应该想到对数组进行排序，很多排序算法都能在O(nlogn)时间内对数组进行排序，然后再使用二分搜索，总的时间复杂度为O(nlogn)。\n\n**找出数组中唯一的重复元素**\n    给定含有1001个元素的数组，其中存放了1-1000之内的整数，只有一个整数是重复的，其他均只出现一次，每个数组元素只能访问一次。请找出这个数。\n分析\n    方法一：当N为比较大的数时警惕溢出\n    求出整个数组的和，再减去1-1000的和，得到的差即为重复的元素。\n\n    方法二：\n    数组取值操作可以看作一个特殊的函数f: D->R，定义域为下标值0~1000，值域为1到1000，我们把f(i)叫做它的后继，i叫f(i)的前驱。0只有后继没有前驱，其他数字既有后继又有前驱，重复的那个数字有两个前驱，我们将利用这些特征。\n    规律：从0开始画一个箭头指向它的后继，从它的后继继续指向后继的后继，这样，必然会有一个节点指向之前已经出现过的数，即为重复的数。\n    即利用下标与单元中所存储的内容之间的特殊关系，进行遍历访问单元，一旦访问过的单元赋予一个标记，利用标记作为发现重复数字的关键。\n    代码如下所示。\n`void FindRepeat(int array[], int length)\n{\n    int index = 0;\n    while ( true )\n    {\n       if ( array[index]<0 )\n           break;\n       array[index] *= -1; //访问过，变成相反数\n       index=array[index]*(-1);\n\n    }\n    cout<<\"The repeat number is \"<< -array[index] <<endl;\n}`\n    方法三：\n    同样考虑下标与内容的关系，不过不用标记，而用两个速度不同的过程来访问。slow每次前进一步，fast每次前进两步，在有环结构中，总会相遇。\n    代码如下所示。\n`void FindRepeat(int array[], int length)\n{\n    int slow=fast= 0;\n    while ( true ) \n    {\n       slow = array[slow];\n              fast = array[array[fast]];\n              if( slow == fast )\n                     break;\n    }\n    cout << slow << endl;\n}`\n    方法四：异或操作\n`void FindRepeat(int array[], int length)\n{\n    int result = 0;\n    for(int i=1;i<=1000;i++)\n        result ^= i;\n    for(int i=0;i<=1000;i++)\n        result ^= array[i];\n    cout << result << endl;\n}`\n\n**求找出出现奇数次的元素**\n    给定一个含有n个元素的整型数组a，其中只有一个出现奇数次，找出这个元素。\n分析\n   因为对于任意一个数k，有k^k = 0，k^ 0 = k，所以将a中所有元素进行异或，那么个数为偶数的元素异或后都变成了0，只留下个数为奇数的那个元素。\n代码\nCode highlighting produced by Actipro CodeHighlighter (freeware)\nhttp://www.CodeHighlighter.com/-->\n`int FindElementWithOddCount(int*a, int n)\n{\n        int r = a[0] ;\n\n        for (int i =1; i < n; ++i)\n        {\n                r ^= a[i] ;\n        }\n\n        return r ;\n}`\n    对于上述题目，出现一个奇数次的数，这样比较好求。但对于下面的题目，该如何求解呢？\n    题目：\n    有N+2个数，N个数出现了偶数次，2个数出现了奇数次（这两个数不相等），问用O(1)的空间复杂度，找出这两个数，不需要知道具体位置，只需要知道这两个值。\n    求解方法如下：\n    假设这两个数为a和b，将数组中所有元素异或结果为x = a ^ b，判断x中位为1的位数（注：因为a != b，所以x不等于0，我们只需要知道某一个位为1的位数k，例如0010 1100，我们可以取k = 2,或3， 或者5），然后将x与数组中第k位为1的数进行异或，异或结果为就是a,b中一个，然后用x异或，就可以求出另外一个。\n    为什么呢？因为x总第k位为1表示a或b中有一个数的第k位也为1，假设为a，将x与数组中第k位为1的数进行异或时，也即将x与a外加其他第k位为1出现过的偶数次的数进行异或，化简即为x与a异或，结果就是b。\n    代码如下所示。\n`void getNum(int a[],int length) \n{ \n    int s=0;//保存异或结果 \n    for(int i=0;i<length;i++) \n    { \n        s=s^a[i]; \n    } \n    int temp1=s;//临时保存异或结果 \n    int temp2=s;//临时保存异或结果 \n    int k=0; \n    while(!(temp1&1))//求位为1的位数 \n    { \n        temp1=temp1>>1; \n        k++; \n    } \n    for(int i=0;i<length;i++) \n    { \n        if((a[i]>>k)&1)//将s与数组中第k位为1的数异或 \n        { \n            cout<<a[i]<<\" \"; \n            s=s^a[i]; \n        } \n    } \n    cout<<s<<\" \"<<(s^temp2)<<endl;//(s^temp2)用来求另外一个数 \n}`\n\n**求数组中满足给定和的数对**\n    给定两个含有n个元素的有序整型数组a和b，各有n个元素，求两个数组中满足给定和的数对，即对a中元素i和b中元素j，满足i + j = d(d已知)。\n分析\n   两个指针i和j分别指向数组的首尾，然后从两端同时向中间遍历，直到两个指针交叉。\n代码\n// 找出满足给定和的数对\n`void FixedSum(int* a, int* b, int n, int d)\n{\n    for (int i = 0, j = n - 1; i < n && j >= 0)\n    {\n        if (a[i] + b[j] < d)\n            ++i ;\n        else if (a[i] + b[j] == d)\n        {\n            cout << a[i] << \", \" << b[j] << endl ;\n            ++i ;\n            --j ;\n        }\n        else // a[i] + b[j] > d\n            --j ;\n    }\n}`\n\n**求最大连续子段和**\n   给定一个整型数组a，求出最大连续子段和，如果和为负数，则按 0计算，比如1， 2， -5， 6， 8，则输出6 + 8  = 14。\n分析\n   《编程珠玑》上的经典题目，不多说了。\n代码\n// 子数组的最大和\n`int Sum(int* a, int n)\n{\n    int curSum = 0;\n    int maxSum = 0;\n    for (int i = 0; i < n; i++)\n    {\n        if (curSum + a[i] < 0)\n            curSum = 0;\n        else\n        {\n            curSum += a[i] ;\n            maxSum = max(maxSum, curSum);\n        }\n    }\n    return maxSum;\n}\n`\n**求最大连续子段的乘积**\n    给定一个整型数组a，求出最大连续子段的乘积，比如1， 2， -8， 12， 7则输出12*7 = 84。\n分析\n   与最大连续字段和类似，注意处理负数的情况。\n代码\n// 子数组的最大乘积\n`int MaxProduct(int *a, int n)\n{\n    int maxProduct = 1; // max positive product at current position\n    int minProduct = 1; // min negative product at current position\n    int r = 1; // result, max multiplication totally\n\n    for (int i = 0; i < n; i++)\n    {\n        if (a[i] > 0)\n        {\n            maxProduct *= a[i];\n            minProduct = min(minProduct * a[i], 1);\n        }\n        else if (a[i] == 0)\n        {\n            maxProduct = 1;\n            minProduct = 1;\n        }\n        else // a[i] < 0\n        {\n            int temp = maxProduct;\n            maxProduct = max(minProduct * a[i], 1);\n            minProduct = temp * a[i];\n        }\n\n        r = max(r, maxProduct);\n    }\n\n    return r;\n}`\n\n**数组循环移位**\n    将一个含有n个元素的数组向右循环移动k位，要求时间复杂度为O(n)，且只能使用两个额外的变量，这是在微软的编程之美上看到的。\n分析\n   最经典的两种做法：三次翻转、STL中的实现方法（这个看懂了，再补上）。\n代码\n// 将buffer中start和end之间的元素逆序\n`void Reverse( int buffer[], int start, int end )\n{\n    while ( start < end )\n    {\n        int temp = buffer[ start ] ;\n        buffer[ start++ ] = buffer[ end ] ;\n        buffer[ end-- ] = temp ;\n    }\n}`\n\n// 将含有n个元素的数组buffer右移k位\n`void Shift( int buffer[], int n, int k )\n{\n    k %= n ;\n\n    Reverse( buffer, 0, n - k - 1) ;\n    Reverse( buffer, n - k, n - 1 ) ;\n    Reverse( buffer, 0, n - 1 ) ;\n}\n`\n**字符串逆转**\n    给定一个含有n个元素的字符数组a，将其原地逆转。\n分析\n    用两个指针分别指向字符数组的首尾部，交换其对应的字符，然后两个指针分别向数组中央移动，直到交叉。\n代码\n    略\n\n**组合问题**\n    给定一个含有n个元素的整型数组a，从中任取m个元素，求所有组合。比如下面的例子\n    a = 1, 2, 3, 4, 5\n    m = 3\n    输出\n    1 2 3, 1 2 4, 1 2 5, 1 3 4, 1 3 5, 1 4 5\n    2 3 4, 2 3 5, 2 4 5\n    3 4 5\n分析\n    典型的排列组合问题，首选回溯法，为了简化问题，将a中的n个元素的值分别设置为1到n。\n代码\n// n选m的所有组合\n`int buffer[100] ;\n\nvoid PrintArray(int *a, int n)\n{\n    for (int i = 0; i < n; ++i)\n        cout << a[i] << \"\";\n    cout << endl ;\n}\n\nbool IsValid(int lastIndex, int value)\n{\n    for (int i = 0; i < lastIndex; i++)\n    {\n        if (buffer[i] >= value)\n            return false;\n    }\n    return true;\n}\n\nvoid Select(int t, int n, int m)\n{\n    if (t == m)\n        PrintArray(buffer, m);\n    else\n    {\n        for (int i = 1; i <= n; i++)\n        {\n            buffer[t] = i;\n            if (IsValid(t, i))\n                Select(t + 1, n, m);\n        }\n    }\n}\n`\n**合并两个数组**\n    给定含有n个元素的两个有序数组a和b。合并两个数组中的元素到整型数组c，要求去除重复元素并保持c有序。\n分析\n    利用合并排序的思想，两个指针i、j和k分别指向数组a、b和c，然后比较两个指针对应元素的大小，有以下三种情况：\n    1\\. a[i] < b[j]，则c[k] = a[i];\n    2\\. a[i] == b[j], 则c[k]等于a[i]或b[j]即可；\n    3\\. a[i] > b[j], 则c[k] = b[j];\n    重复以上过程，直到i或者j到达数组末尾，然后将剩下的元素直接copy到数组c中即可。\n代码\n// 合并两个有序数组\n`void Merge(int *a, int *b, int *c, int n)\n{\n    int i = 0 ;\n    int j = 0 ;\n    int k = 0 ;\n\n    while (i < n && j < n)\n    {\n        if (a[i] < b[j])// 如果a的元素小，则插入a中元素到c\n        {\n            c[k++] = a[i] ;\n            ++i ;\n        }\n        else if (a[i] == b[j])// 如果a和b元素相等，则插入二者皆可，这里插入a\n        {\n            c[k++] = a[i] ;\n            ++i ;\n            ++j ;\n        }\n        else // a[i] > b[j] // 如果b中元素小，则插入b中元素到c\n        {\n            c[k++] = b[j] ;\n            ++j ;\n        }\n    }\n\n    if (i == n) // 若a遍历完毕，处理b中剩下的元素\n    {\n        for (int m = j; m < n; ++m)\n            c[k++] = b[m] ;\n    }\n    else//j == n, 若b遍历完毕，处理a中剩下的元素\n    {\n        for (int m = i; m < n; ++m)\n            c[k++] = a[m] ;\n    }\n}`\n\n**重排问题**\n    给定含有n个元素的整型数组a，其中包括0元素和非0元素，对数组进行排序，要求：\n    1\\. 排序后所有0元素在前，所有非0元素在后，且非零元素排序前后相对位置不变\n    2\\. 不能使用额外存储空间\n    例子如下\n    输入 0， 3， 0， 2， 1， 0， 0\n    输出 0， 0， 0， 0， 3， 2， 1\n分析\n    此排序非传统意义上的排序，因为它要求排序前后非0元素相对位置不变，或者叫整理更恰当。可以从后向前遍历整个数组，遇到某个位置i上的元素是非0元素时，如果a[k]为0，则将a[i]赋值给a[k]，a[k]赋值为0。实际上，i是非0元素的下标，而k是0元素的下标。\n代码\n`void Arrange(int* a, int n)\n{\n    int k = n -1 ;\n    for (int i = n -1; i >=0; --i)\n    {\n        if (a[i] !=0)\n        {\n            if (a[k] ==0)\n            {\n                a[k] = a[i] ;\n                a[i] =0 ;\n            }\n            --k ;\n        }\n    }\n}`\n\n**找出绝对值最小的元素**\n    给定一个有序整数序列（非递减序），可能包含负数，找出其中绝对值最小的元素，比如给定序列 -5, -3, -1, 2, 8 则返回1。\n分析\n    由于给定序列是有序的，而这又是搜索问题，所以首先想到二分搜索法，只不过这个二分法比普通的二分法稍微麻烦点，可以分为下面几种情况\n    1\\. 如果给定的序列中所有的数都是正数，那么数组的第一个元素即是结果。\n    2\\. 如果给定的序列中所有的数都是负数，那么数组的最后一个元素即是结果。\n    3\\. 如果给定的序列中既有正数又有负数，那么绝对值得最小值一定出现在正数和负数的连接处。\n    为什么？因为对于负数序列来说，右侧的数字比左侧的数字绝对值小，如上面的-5, -3, -1, 而对于整数来说，左边的数字绝对值小，比如上面的2, 8，将这个思想用于二分搜索，可先判断中间元素和两侧元素的符号，然后根据符号决定搜索区间，逐步缩小搜索区间，直到只剩下两个元素。\n代码\n    单独设置一个函数用来判断两个整数的符号是否相同\n// 找出一个非递减序整数序列中绝对值最小的数\n`int MinimumAbsoluteValue(int* a, int n)\n{\n    // Only one number in array\n    if (n ==1)\n    {\n        return a[0] ;\n    }\n\n    // All numbers in array have the same sign\n    if (SameSign(a[0], a[n -1]))\n    {\n        return a[0] >=0? a[0] : a[n -1] ;\n    }\n\n    // Binary search\n    int l =0 ;\n    int r = n -1 ;\n\n    while(l < r)\n    {\n        if (l +1== r)\n        {\n            return abs(a[l]) < abs(a[r]) ? a[l] : a[r] ;\n        }\n\n        int m = (l + r) /2 ;\n\n        if (SameSign(a[m], a[r]))\n        {\n            r = m -1;\n            continue;\n        }\n        if (SameSign(a[l], a[m]))\n        {\n            l = m +1 ;\n            continue;\n        }\n    }\n}`\n    上面的代码是有问题的：查找数组a[4]={-2, -1, 3, 4}返回的是3，好像是有点问题。循环中保持的不变式应该是a[l]<0 && a[r]>0,所以比较中间元a[m]与a[l],a[r]的符号后，要保持不变式，就应该是l=m或者r=。现修正如下。\n// 找出一个非递减序整数序列中绝对值最小的数\n`int MinimumAbsoluteValue(int* a, int n)\n{\n    // Only one number in array\n    if (n ==1)\n    {\n        return a[0] ;\n    }\n\n    // All numbers in array have the same sign\n    if (SameSign(a[0], a[n -1]))\n    {\n        return a[0] >=0? a[0] : a[n -1] ;\n    }\n\n    // Binary search\n    int l =0 ;\n    int r = n -1 ;\n\n    while(l < r)\n    {\n        if (l + 1 == r)\n        {\n            return abs(a[l]) < abs(a[r]) ? a[l] : a[r] ;\n        }\n\n        int m = (l + r) /2 ;\n\n        if (SameSign(a[m], a[r]))\n        {\n            r = m;\n            continue;\n        }\n        if (SameSign(a[l], a[m]))\n        {\n            l = m ;\n            continue;\n        }\n    }\n}\n`\n\nfrom : http://blog.chinaunix.net/uid-26548237-id-3753737.html","source":"_posts/e5-85-b3-e4-ba-8e-e6-95-b0-e7-bb-84-e7-9a-84-e5-87-a0-e9-81-93-e9-9d-a2-e8-af-95-e9-a2-98.md","raw":"---\ntitle: '[转] 关于数组的几道面试题 '\ntags:\n  - 算法\nid: 2055\ncategories:\n  - Algorithm\ndate: 2014-05-20 08:43:16\n---\n\n> 数组求和\r> \n> 求数组中的最大值和最小值\r> \n> 求数组中的最大值和次大值\r> \n> 求数组中出现次数超过一半的元素\r> \n> 求数组中元素的最短距离\r> \n> 求两个有序数组的共同元素\r> \n> 求三个数组的共同元素\r> \n> 找出数组中唯一重复的元素\r> \n> 找出出现奇数次的元素\r> \n> 求数组中满足给定和的数对\r> \n> 最大子段和\r> \n> 最大子段积\r> \n> 数组循环移位\r> \n> 字符串逆转\r> \n> 组合问题\r> \n> 合并两个数组\r> \n> 重排问题\r> \n> 找出绝对值最小的元素\n<!--more-->\n\n**数组求和 **\n    给定一个含有n个元素的整型数组a，求a中所有元素的和。可能您会觉得很简单，是的，的确简单，但是为什么还要说呢，原因：这道题要求用递归，只用一行代码。\n分析\n    简单说一下，两种情况：\n    1\\. 如果数组元素个数为0，那么和为0；\n    2\\. 如果数组元素个数为n，那么先求出前n-1个元素之和，再加上a[n - 1]即可；\n代码\n// 数组求和\n`int sum(int*a, int n)\n{\n     return n ==0?0 : sum(a, n -1) + a[n -1];\n}`\n\n**求数组的最大值和最小值**\n    给定一个含有n个元素的整型数组a，求a中的最大值和最小值。\n分析\n    常规的做法是遍历一次，分别求出最大值和最小值，事实上，至多3|n/2|（||代表向下取整）就足以找出最小值和最大值。做法是：记录比较过程中遇到的最小值和最大值。我们并不是将每一个输入元素与当前的最大值和最小值进行比较（这样做的代价是每个元素需要两次比较），而是成对的处理元素。先将一对输入元素进行比较，然后把较小者与当前最小值进行比较，把较大者与当前最大值比较，因此每两个元素比较3次。\n    如何假定当前最小值和最大值的初始值依赖于n是奇数还是偶数。如果n是奇数，就将最小值和最大值都设为第一个元素的值，然后成对的处理余下的元素。如果n是偶数，就对前两个元素做一次比较，以决定最小值和最大值的初值，然后如同n是奇数的情形一样，成对的处理余下的元素。\n\n    但是这里要说的是分治法，将数组分成左右两部分，先求出左半部分的最大值和最小值，再求出右半部分的最大值和最小值，然后综合起来求总体的最大值和最小值。这是个递归的过程，对于划分后的左右两部分，同样重复这个过程，直到划分区间内只剩下一个元素或者两个元素。\n代码\n// 求数组的最大值和最小值，返回值在maxValue和minValue\n`void MaxandMin(int *a, int l, int r, int& maxValue, int& minValue)\n{\n    if(l == r) // l与r之间只有一个元素\n    {\n        maxValue = a[l] ;\n        minValue = a[l] ;\n        return ;\n    }\n\n    if(l + 1 == r) // l与r之间只有两个元素\n    {\n        if(a[l] >= a[r])\n        {\n            maxValue = a[l] ;\n            minValue = a[r] ;\n        }\n        else\n        {\n            maxValue = a[r] ;\n            minValue = a[l] ;\n        }\n        return ;\n    }\n\n    int m = (l + r) / 2 ; // 求中点\n\n    int lmax ; // 左半部份最大值\n    int lmin ; // 左半部份最小值\n    MaxandMin(a, l, m, lmax, lmin) ; // 递归计算左半部份\n\n    int rmax ; // 右半部份最大值\n    int rmin ; // 右半部份最小值\n    MaxandMin(a, m + 1, r, rmax, rmin) ; // 递归计算右半部份\n\n    maxValue = max(lmax, rmax) ; // 总的最大值\n    minValue = min(lmin, rmin) ; // 总的最小值\n}\n`\n**求数组的最大值和次小值**\n    给定一个含有n个元素的整型数组a，求a中的最大值和次小值。\n分析\n    思路和上一题类似，同样是用分治法，先求出左边的最大值leftmax和次大值leftsecond，再求出右边的最大值rightmax和次大值rightsecond，然后合并，如何合并呢？分情况考虑。    \n    1\\. 如果leftmax > rightmax，那么可以肯定leftmax是最大值，但次大值不一定是rightmax，但肯定不是rightsecond，只需将leftsecond和rightmax做一次比较即可；\n    2\\. 如果rightmax > leftmax，那么可以肯定的rightmax是最大值，但次大值不一样是leftmax，但肯定不是leftsecond，所以只需将leftmax与rightsecond做一次比较即可；\n注意\n    这种方法无法处理最大元素有多个的情况，比如3,5,7,7，将返回7,7而不是7,5。感谢网友，从无到有靠他人指出。\n代码\n// 找出数组的最大值和次大值，a是待查找的数组，left和right是查找区间，max和second存放结果\n`void MaxandMin(int a[], int left, int right, int&max, int&second)\n{\n    if(left == right)\n    {\n        max = a[left] ;\n        second = INT_MIN;\n    }\n    elseif(left +1== right)\n    {\n        max = a[left] > a[right] ? a[left] : a[right] ;\n        second = a[left] < a[right] ? a[left] : a[right] ;\n    }\n    else\n    {\n        int mid = left + (right - left) /2 ;\n\n        int leftmax ;\n        int leftsecond ;\n        MaxandMin(a, left, mid, leftmax, leftsecond) ;\n\n        int rightmax ;\n        int rightsecond ;\n        MaxandMin(a, mid +1, right, rightmax, rightsecond) ;\n\n        if (leftmax > rightmax)\n        {\n            max = leftmax ;\n            second = leftsecond > rightmax ? leftsecond : rightmax ;\n        }\n        else\n        {\n            max = rightmax ;\n            second = leftmax < rightsecond ? rightsecond : leftmax ;\n        }\n    }\n}`\n\n**求数组中出现次数超过一半的元素**\n    给定一个含有n个元素的整型数组a，其中有个元素出现次数超过n/2，求出这个元素。据说是百度的一道题。\n分析\n    暂且先不说当前作者的思路，我看到这个问题的时候，想到了如下方法：\n    1\\. 先进行排序，常规的方法就是快速排序，平均时间复杂度为O(nlogn))，然后取第n/2个元素即可，当然，这种方法的前提是存在这个所谓的“主元素”；若不清楚，还是需要验证的；\n    2\\. 由于肯定该数组中含有这么个元素，该题就转换为找中位数了。找中位数的方法线性时间内有两种：第一、基于分治法的线性期望时间求中位数，该方法是线性期望时间，类似于快速排序；第二、最坏情况下也是线性时间复杂度的方法——“五分中项的中项”划分方法；\n    3、分治的思想  若a中存在主元素，则将a分为两部分后，a的主元素也必为两部分中至少一部分主元素，因此可用分治法。\n    将元素划分两部分，递归地检查两部分有无主元素。算法如下：\n    a. 若a中只含有一个元素，则此元素就是主元素，返回此数；\n    b. 将a分为两部分a1和a2（二者元素相等或只差一个），分别递归调用此方法求其主元素m1和m2；\n    c. 若m1和m2都存在且相等，则这个是就是a的主元素，返回次数；\n    d. 若m1和m2都存在且不相等，则分别检查这两个数是否为a的主元素，若有则返回此数，若无则返回空值；\n    e. 若m1和m2都不存在，则a无主元素，返回空值；\n    f. 若m1和m2只有一个存在，则检查这个数是否为a的主元素，若是则返回此数，若否就返回空值；\n\n    对于作者给出的这种算法，我在《编程之美》上看到过，即“寻找发帖水王”的题目。\n    设置一个当前值和当前值的计数器，初始化当前值为数组首元素，计数器值为1，然后从第二个元素开始遍历整个数组，对于每个被遍历到的值a[i]\n    1\\. 如果a[i] == currentvalue，则计数器加1；\n    2\\. 如果a[i]  != currentvalue，则计数器减一，如果计数器等于0，则更新当前值为a[i]，并将计数器值重置为1；\n代码\n`void Find(int a[], int length)\n{\n    int candidate;\n    int i, ntimes;\n    i = 0;\n    ntimes = 0;\n\n    for(i = 0; i < length; i++)\n    {\n        if(ntimes == 0)//计数为0时，读入新的元素，计数加1\n        {\n            candidate = a[i];\n            ntimes = 1;\n        }\n        else\n        {\n            if(candidate == a[i])//如果数据相同，计数加1\n            {\n                ntimes++;\n            }\n            else\n            {\n                ntimes--; //如果计数不同，则计数减1，相当于删除了两个元素\n            }\n        }\n    }\n\n    int count = 0;\n    for(i = 0; i <length; i++)\n    {\n        if(candidate == a[i])\n            count++;\n    }\n    //最终得到的candidate元素有可能是序列最末位的两个元素之一\n    //因此，需要验证\n    if(count > length/2)\n    {\n        cout << endl << \"主元素为: \" << candidate << endl;\n    }\n    else\n    {\n        cout << \"没有主元素.\" << endl;\n    }\n}`\n\n**求数组中元素的最短距离**\n    给定一个含有n个元素的整型数组a，找出数组中的两个元素x和y，使得abs(x - y)值最小。\n分析\n    看到这个题目，首先想到的是Brute Force，这样需要的时间复杂度为O(n^2)；\n    另外，我们可以先进行排序，然后遍历一次数组即可。    \n    不知道还有没有更好的方法？？？？\n代码\n`int compare(const void* a, const void* b)\n{\n    return *(int*)a - *(int*)b ;\n}\n\n// 求数组中元素的最短距离\nvoid MinimumDistance(int* a, int n)\n{\n    // Sort\n    qsort(a, n, sizeof(int), compare) ;\n\n    int i ; // Index of number 1\n    int j ; // Index of number 2\n\n    int minDistance = numeric_limits<int>::max() ;\n    for (int k = 0; k < n - 1; ++k)\n    {\n        if (a[k + 1] - a[k] < minDistance)\n        {\n            minDistance = a[k + 1] - a[k] ;\n            i = a[k] ;\n            j = a[k + 1] ;\n        }\n    }\n\n    cout << \"Minimum distance is: \" << minDistance << endl ;\n    cout << \"i = \" << i << \" j = \" << j << endl ;\n}`\n**\n求两个有序数组的共同元素**\n    给定两个含有n个元素的有序（非降序）整型数组a和b，求出其共同元素，比如\n    a = 0, 1, 2, 3, 4\n    b = 1, 3, 5, 7, 9\n    输出1, 3\n分析\n   充分利用数组有序的性质，用两个指针i和j分别指向a和b，比较a[i]和b[j]，根据比较结果移动指针，则有如下三种情况：\n    1\\. a[i] < b[j]，则i++，继续比较；\n    2\\. a[i] == b[j]，则i和j皆加1，继续比较；\n    3\\. a[i] > b[j]，则j++，继续比较；\n    重复以上过程，直至i或j到达数组末尾。\n代码\n// 找出两个数组的共同元素\n`void FindCommon(int* a, int* b, int n)\n{\n    int i = 0;\n    int j = 0 ;\n\n    while (i < n && j < n)\n    {\n        if (a[i] < b[j])\n            ++i ;\n        else if(a[i] == b[j])\n        {\n            cout << a[i] << endl ;\n            ++i ;\n            ++j ;\n        }\n        else// a[i] > b[j]\n            ++j ;\n    }\n}`\n    这道题还要其他的解法，比如对于a中任意一个元素，在b中对齐进行Bianry Search，因为a中有n个元素，而在b中进行Binary Search需要logn，所以，找出全部相同元素的时间复杂度O(nlogn)。\n    另外，上面的解法，只要b有序即可，a是否有序无所谓，因为我们只是在b中做Binary Search。如果a也有序的话，那么用上面的方法就有点慢了，因为如果a中某个元素在b中的位置是k的话，那么a中下一个元素在b中的位置一定位于k的右侧，所以本次搜索空间可以根据上次搜索结果缩小，而不是在整个b中搜索。也即如果a和b都有序的话，代码可以做如下修改，记录上次搜索b中的元素位置，作为下一次搜索的起始点。\n\n**求三个数组的共同元素**\n    给定三个含有n个元素的整型数组a、b和c，求他们最小的公共元素。\n分析\n   如果三个数组都有序，那么可以设置三个指针指向三个数组的头部，然后根据这三个指针所指的值进行比较来移动指针，直到找到共同元素。\n代码\n// 三个数组的共同元素-只找最小的\n`void FindCommonElements(int a[], int b[], int c[], int x, int y, int z)\n{\n    for(int i = 0, j = 0, k = 0; i < x && j < y && k < z;)\n    {\n        if(a[i] < b[j])\n        {\n            i++ ;\n        }\n        else // a[i] >= b[j]\n        {\n            if(b[j] < c[k])\n            {\n                j++ ;\n            }\n            else // b[j] >= c[k]\n            {\n                if(c[k] < a[i])\n                {\n                    k++ ;\n                }\n                else // c[k] >= a[i]\n                {\n                    cout << c[k] << endl ;\n                    return ;\n                }\n            }\n        }\n    }\n\n    cout << \"Not found!\" << endl ;\n}`\n    如果三个数组都没有序的话，可以对a和b进行排序，然后对c中任意一个元素都在b和c中做二分搜索。\n// 找出三个数组的共同元素\n// O(NlogN)\n`int UniqueCommonItem(int *a, int *b, int *c, int n)\n{\n    // sort array a\n    qsort(a, n, sizeof(int), compare) ; // NlogN\n\n    // sort array b\n    qsort(b, n, sizeof(int), compare) ; // NlogN\n\n    // for each element in array c, do a binary search in a and b\n    // This is up to a complexity of N*2*logN\n    for (int i = 0; i < n; i++)\n    {\n        if(BinarySearch(a, n, c[i]) && BinarySearch(b, n, c[i]))\n            return c[i] ;\n    }\n\n    return - 1 ; // not found\n}`\n    也可以对a进行排序，然后对于b和c中任意一个元素都在a中进行二分搜索，但是这样做是由问题的：当b[i]和c[i]同时都在a里面也说明不了就是共同元素。\n\n    小小总结一下，对于在数组中进行查找的问题，可以分为如下两种情况处理：\n    1\\. 如果给定的数组有序，那么首先应该想到的是二分查找，时间复杂度为（logn）；\n    2\\. 如果给定的数组无序，那么首先应该想到对数组进行排序，很多排序算法都能在O(nlogn)时间内对数组进行排序，然后再使用二分搜索，总的时间复杂度为O(nlogn)。\n\n**找出数组中唯一的重复元素**\n    给定含有1001个元素的数组，其中存放了1-1000之内的整数，只有一个整数是重复的，其他均只出现一次，每个数组元素只能访问一次。请找出这个数。\n分析\n    方法一：当N为比较大的数时警惕溢出\n    求出整个数组的和，再减去1-1000的和，得到的差即为重复的元素。\n\n    方法二：\n    数组取值操作可以看作一个特殊的函数f: D->R，定义域为下标值0~1000，值域为1到1000，我们把f(i)叫做它的后继，i叫f(i)的前驱。0只有后继没有前驱，其他数字既有后继又有前驱，重复的那个数字有两个前驱，我们将利用这些特征。\n    规律：从0开始画一个箭头指向它的后继，从它的后继继续指向后继的后继，这样，必然会有一个节点指向之前已经出现过的数，即为重复的数。\n    即利用下标与单元中所存储的内容之间的特殊关系，进行遍历访问单元，一旦访问过的单元赋予一个标记，利用标记作为发现重复数字的关键。\n    代码如下所示。\n`void FindRepeat(int array[], int length)\n{\n    int index = 0;\n    while ( true )\n    {\n       if ( array[index]<0 )\n           break;\n       array[index] *= -1; //访问过，变成相反数\n       index=array[index]*(-1);\n\n    }\n    cout<<\"The repeat number is \"<< -array[index] <<endl;\n}`\n    方法三：\n    同样考虑下标与内容的关系，不过不用标记，而用两个速度不同的过程来访问。slow每次前进一步，fast每次前进两步，在有环结构中，总会相遇。\n    代码如下所示。\n`void FindRepeat(int array[], int length)\n{\n    int slow=fast= 0;\n    while ( true ) \n    {\n       slow = array[slow];\n              fast = array[array[fast]];\n              if( slow == fast )\n                     break;\n    }\n    cout << slow << endl;\n}`\n    方法四：异或操作\n`void FindRepeat(int array[], int length)\n{\n    int result = 0;\n    for(int i=1;i<=1000;i++)\n        result ^= i;\n    for(int i=0;i<=1000;i++)\n        result ^= array[i];\n    cout << result << endl;\n}`\n\n**求找出出现奇数次的元素**\n    给定一个含有n个元素的整型数组a，其中只有一个出现奇数次，找出这个元素。\n分析\n   因为对于任意一个数k，有k^k = 0，k^ 0 = k，所以将a中所有元素进行异或，那么个数为偶数的元素异或后都变成了0，只留下个数为奇数的那个元素。\n代码\nCode highlighting produced by Actipro CodeHighlighter (freeware)\nhttp://www.CodeHighlighter.com/-->\n`int FindElementWithOddCount(int*a, int n)\n{\n        int r = a[0] ;\n\n        for (int i =1; i < n; ++i)\n        {\n                r ^= a[i] ;\n        }\n\n        return r ;\n}`\n    对于上述题目，出现一个奇数次的数，这样比较好求。但对于下面的题目，该如何求解呢？\n    题目：\n    有N+2个数，N个数出现了偶数次，2个数出现了奇数次（这两个数不相等），问用O(1)的空间复杂度，找出这两个数，不需要知道具体位置，只需要知道这两个值。\n    求解方法如下：\n    假设这两个数为a和b，将数组中所有元素异或结果为x = a ^ b，判断x中位为1的位数（注：因为a != b，所以x不等于0，我们只需要知道某一个位为1的位数k，例如0010 1100，我们可以取k = 2,或3， 或者5），然后将x与数组中第k位为1的数进行异或，异或结果为就是a,b中一个，然后用x异或，就可以求出另外一个。\n    为什么呢？因为x总第k位为1表示a或b中有一个数的第k位也为1，假设为a，将x与数组中第k位为1的数进行异或时，也即将x与a外加其他第k位为1出现过的偶数次的数进行异或，化简即为x与a异或，结果就是b。\n    代码如下所示。\n`void getNum(int a[],int length) \n{ \n    int s=0;//保存异或结果 \n    for(int i=0;i<length;i++) \n    { \n        s=s^a[i]; \n    } \n    int temp1=s;//临时保存异或结果 \n    int temp2=s;//临时保存异或结果 \n    int k=0; \n    while(!(temp1&1))//求位为1的位数 \n    { \n        temp1=temp1>>1; \n        k++; \n    } \n    for(int i=0;i<length;i++) \n    { \n        if((a[i]>>k)&1)//将s与数组中第k位为1的数异或 \n        { \n            cout<<a[i]<<\" \"; \n            s=s^a[i]; \n        } \n    } \n    cout<<s<<\" \"<<(s^temp2)<<endl;//(s^temp2)用来求另外一个数 \n}`\n\n**求数组中满足给定和的数对**\n    给定两个含有n个元素的有序整型数组a和b，各有n个元素，求两个数组中满足给定和的数对，即对a中元素i和b中元素j，满足i + j = d(d已知)。\n分析\n   两个指针i和j分别指向数组的首尾，然后从两端同时向中间遍历，直到两个指针交叉。\n代码\n// 找出满足给定和的数对\n`void FixedSum(int* a, int* b, int n, int d)\n{\n    for (int i = 0, j = n - 1; i < n && j >= 0)\n    {\n        if (a[i] + b[j] < d)\n            ++i ;\n        else if (a[i] + b[j] == d)\n        {\n            cout << a[i] << \", \" << b[j] << endl ;\n            ++i ;\n            --j ;\n        }\n        else // a[i] + b[j] > d\n            --j ;\n    }\n}`\n\n**求最大连续子段和**\n   给定一个整型数组a，求出最大连续子段和，如果和为负数，则按 0计算，比如1， 2， -5， 6， 8，则输出6 + 8  = 14。\n分析\n   《编程珠玑》上的经典题目，不多说了。\n代码\n// 子数组的最大和\n`int Sum(int* a, int n)\n{\n    int curSum = 0;\n    int maxSum = 0;\n    for (int i = 0; i < n; i++)\n    {\n        if (curSum + a[i] < 0)\n            curSum = 0;\n        else\n        {\n            curSum += a[i] ;\n            maxSum = max(maxSum, curSum);\n        }\n    }\n    return maxSum;\n}\n`\n**求最大连续子段的乘积**\n    给定一个整型数组a，求出最大连续子段的乘积，比如1， 2， -8， 12， 7则输出12*7 = 84。\n分析\n   与最大连续字段和类似，注意处理负数的情况。\n代码\n// 子数组的最大乘积\n`int MaxProduct(int *a, int n)\n{\n    int maxProduct = 1; // max positive product at current position\n    int minProduct = 1; // min negative product at current position\n    int r = 1; // result, max multiplication totally\n\n    for (int i = 0; i < n; i++)\n    {\n        if (a[i] > 0)\n        {\n            maxProduct *= a[i];\n            minProduct = min(minProduct * a[i], 1);\n        }\n        else if (a[i] == 0)\n        {\n            maxProduct = 1;\n            minProduct = 1;\n        }\n        else // a[i] < 0\n        {\n            int temp = maxProduct;\n            maxProduct = max(minProduct * a[i], 1);\n            minProduct = temp * a[i];\n        }\n\n        r = max(r, maxProduct);\n    }\n\n    return r;\n}`\n\n**数组循环移位**\n    将一个含有n个元素的数组向右循环移动k位，要求时间复杂度为O(n)，且只能使用两个额外的变量，这是在微软的编程之美上看到的。\n分析\n   最经典的两种做法：三次翻转、STL中的实现方法（这个看懂了，再补上）。\n代码\n// 将buffer中start和end之间的元素逆序\n`void Reverse( int buffer[], int start, int end )\n{\n    while ( start < end )\n    {\n        int temp = buffer[ start ] ;\n        buffer[ start++ ] = buffer[ end ] ;\n        buffer[ end-- ] = temp ;\n    }\n}`\n\n// 将含有n个元素的数组buffer右移k位\n`void Shift( int buffer[], int n, int k )\n{\n    k %= n ;\n\n    Reverse( buffer, 0, n - k - 1) ;\n    Reverse( buffer, n - k, n - 1 ) ;\n    Reverse( buffer, 0, n - 1 ) ;\n}\n`\n**字符串逆转**\n    给定一个含有n个元素的字符数组a，将其原地逆转。\n分析\n    用两个指针分别指向字符数组的首尾部，交换其对应的字符，然后两个指针分别向数组中央移动，直到交叉。\n代码\n    略\n\n**组合问题**\n    给定一个含有n个元素的整型数组a，从中任取m个元素，求所有组合。比如下面的例子\n    a = 1, 2, 3, 4, 5\n    m = 3\n    输出\n    1 2 3, 1 2 4, 1 2 5, 1 3 4, 1 3 5, 1 4 5\n    2 3 4, 2 3 5, 2 4 5\n    3 4 5\n分析\n    典型的排列组合问题，首选回溯法，为了简化问题，将a中的n个元素的值分别设置为1到n。\n代码\n// n选m的所有组合\n`int buffer[100] ;\n\nvoid PrintArray(int *a, int n)\n{\n    for (int i = 0; i < n; ++i)\n        cout << a[i] << \"\";\n    cout << endl ;\n}\n\nbool IsValid(int lastIndex, int value)\n{\n    for (int i = 0; i < lastIndex; i++)\n    {\n        if (buffer[i] >= value)\n            return false;\n    }\n    return true;\n}\n\nvoid Select(int t, int n, int m)\n{\n    if (t == m)\n        PrintArray(buffer, m);\n    else\n    {\n        for (int i = 1; i <= n; i++)\n        {\n            buffer[t] = i;\n            if (IsValid(t, i))\n                Select(t + 1, n, m);\n        }\n    }\n}\n`\n**合并两个数组**\n    给定含有n个元素的两个有序数组a和b。合并两个数组中的元素到整型数组c，要求去除重复元素并保持c有序。\n分析\n    利用合并排序的思想，两个指针i、j和k分别指向数组a、b和c，然后比较两个指针对应元素的大小，有以下三种情况：\n    1\\. a[i] < b[j]，则c[k] = a[i];\n    2\\. a[i] == b[j], 则c[k]等于a[i]或b[j]即可；\n    3\\. a[i] > b[j], 则c[k] = b[j];\n    重复以上过程，直到i或者j到达数组末尾，然后将剩下的元素直接copy到数组c中即可。\n代码\n// 合并两个有序数组\n`void Merge(int *a, int *b, int *c, int n)\n{\n    int i = 0 ;\n    int j = 0 ;\n    int k = 0 ;\n\n    while (i < n && j < n)\n    {\n        if (a[i] < b[j])// 如果a的元素小，则插入a中元素到c\n        {\n            c[k++] = a[i] ;\n            ++i ;\n        }\n        else if (a[i] == b[j])// 如果a和b元素相等，则插入二者皆可，这里插入a\n        {\n            c[k++] = a[i] ;\n            ++i ;\n            ++j ;\n        }\n        else // a[i] > b[j] // 如果b中元素小，则插入b中元素到c\n        {\n            c[k++] = b[j] ;\n            ++j ;\n        }\n    }\n\n    if (i == n) // 若a遍历完毕，处理b中剩下的元素\n    {\n        for (int m = j; m < n; ++m)\n            c[k++] = b[m] ;\n    }\n    else//j == n, 若b遍历完毕，处理a中剩下的元素\n    {\n        for (int m = i; m < n; ++m)\n            c[k++] = a[m] ;\n    }\n}`\n\n**重排问题**\n    给定含有n个元素的整型数组a，其中包括0元素和非0元素，对数组进行排序，要求：\n    1\\. 排序后所有0元素在前，所有非0元素在后，且非零元素排序前后相对位置不变\n    2\\. 不能使用额外存储空间\n    例子如下\n    输入 0， 3， 0， 2， 1， 0， 0\n    输出 0， 0， 0， 0， 3， 2， 1\n分析\n    此排序非传统意义上的排序，因为它要求排序前后非0元素相对位置不变，或者叫整理更恰当。可以从后向前遍历整个数组，遇到某个位置i上的元素是非0元素时，如果a[k]为0，则将a[i]赋值给a[k]，a[k]赋值为0。实际上，i是非0元素的下标，而k是0元素的下标。\n代码\n`void Arrange(int* a, int n)\n{\n    int k = n -1 ;\n    for (int i = n -1; i >=0; --i)\n    {\n        if (a[i] !=0)\n        {\n            if (a[k] ==0)\n            {\n                a[k] = a[i] ;\n                a[i] =0 ;\n            }\n            --k ;\n        }\n    }\n}`\n\n**找出绝对值最小的元素**\n    给定一个有序整数序列（非递减序），可能包含负数，找出其中绝对值最小的元素，比如给定序列 -5, -3, -1, 2, 8 则返回1。\n分析\n    由于给定序列是有序的，而这又是搜索问题，所以首先想到二分搜索法，只不过这个二分法比普通的二分法稍微麻烦点，可以分为下面几种情况\n    1\\. 如果给定的序列中所有的数都是正数，那么数组的第一个元素即是结果。\n    2\\. 如果给定的序列中所有的数都是负数，那么数组的最后一个元素即是结果。\n    3\\. 如果给定的序列中既有正数又有负数，那么绝对值得最小值一定出现在正数和负数的连接处。\n    为什么？因为对于负数序列来说，右侧的数字比左侧的数字绝对值小，如上面的-5, -3, -1, 而对于整数来说，左边的数字绝对值小，比如上面的2, 8，将这个思想用于二分搜索，可先判断中间元素和两侧元素的符号，然后根据符号决定搜索区间，逐步缩小搜索区间，直到只剩下两个元素。\n代码\n    单独设置一个函数用来判断两个整数的符号是否相同\n// 找出一个非递减序整数序列中绝对值最小的数\n`int MinimumAbsoluteValue(int* a, int n)\n{\n    // Only one number in array\n    if (n ==1)\n    {\n        return a[0] ;\n    }\n\n    // All numbers in array have the same sign\n    if (SameSign(a[0], a[n -1]))\n    {\n        return a[0] >=0? a[0] : a[n -1] ;\n    }\n\n    // Binary search\n    int l =0 ;\n    int r = n -1 ;\n\n    while(l < r)\n    {\n        if (l +1== r)\n        {\n            return abs(a[l]) < abs(a[r]) ? a[l] : a[r] ;\n        }\n\n        int m = (l + r) /2 ;\n\n        if (SameSign(a[m], a[r]))\n        {\n            r = m -1;\n            continue;\n        }\n        if (SameSign(a[l], a[m]))\n        {\n            l = m +1 ;\n            continue;\n        }\n    }\n}`\n    上面的代码是有问题的：查找数组a[4]={-2, -1, 3, 4}返回的是3，好像是有点问题。循环中保持的不变式应该是a[l]<0 && a[r]>0,所以比较中间元a[m]与a[l],a[r]的符号后，要保持不变式，就应该是l=m或者r=。现修正如下。\n// 找出一个非递减序整数序列中绝对值最小的数\n`int MinimumAbsoluteValue(int* a, int n)\n{\n    // Only one number in array\n    if (n ==1)\n    {\n        return a[0] ;\n    }\n\n    // All numbers in array have the same sign\n    if (SameSign(a[0], a[n -1]))\n    {\n        return a[0] >=0? a[0] : a[n -1] ;\n    }\n\n    // Binary search\n    int l =0 ;\n    int r = n -1 ;\n\n    while(l < r)\n    {\n        if (l + 1 == r)\n        {\n            return abs(a[l]) < abs(a[r]) ? a[l] : a[r] ;\n        }\n\n        int m = (l + r) /2 ;\n\n        if (SameSign(a[m], a[r]))\n        {\n            r = m;\n            continue;\n        }\n        if (SameSign(a[l], a[m]))\n        {\n            l = m ;\n            continue;\n        }\n    }\n}\n`\n\nfrom : http://blog.chinaunix.net/uid-26548237-id-3753737.html","slug":"e5-85-b3-e4-ba-8e-e6-95-b0-e7-bb-84-e7-9a-84-e5-87-a0-e9-81-93-e9-9d-a2-e8-af-95-e9-a2-98","published":1,"updated":"2018-01-13T05:07:00.483Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjccw7x8h0022aqcrquohcgl8","content":"<blockquote>\n<p>数组求和</p>\n<p>求数组中的最大值和最小值</p>\n<p>求数组中的最大值和次大值</p>\n<p>求数组中出现次数超过一半的元素</p>\n<p>求数组中元素的最短距离</p>\n<p>求两个有序数组的共同元素</p>\n<p>求三个数组的共同元素</p>\n<p>找出数组中唯一重复的元素</p>\n<p>找出出现奇数次的元素</p>\n<p>求数组中满足给定和的数对</p>\n<p>最大子段和</p>\n<p>最大子段积</p>\n<p>数组循环移位</p>\n<p>字符串逆转</p>\n<p>组合问题</p>\n<p>合并两个数组</p>\n<p>重排问题</p>\n<p>找出绝对值最小的元素<br><a id=\"more\"></a></p>\n</blockquote>\n<p><strong>数组求和 </strong><br>    给定一个含有n个元素的整型数组a，求a中所有元素的和。可能您会觉得很简单，是的，的确简单，但是为什么还要说呢，原因：这道题要求用递归，只用一行代码。<br>分析<br>    简单说一下，两种情况：<br>    1. 如果数组元素个数为0，那么和为0；<br>    2. 如果数组元素个数为n，那么先求出前n-1个元素之和，再加上a[n - 1]即可；<br>代码<br>// 数组求和<br><code>int sum(int*a, int n)\n{\n     return n ==0?0 : sum(a, n -1) + a[n -1];\n}</code></p>\n<p><strong>求数组的最大值和最小值</strong><br>    给定一个含有n个元素的整型数组a，求a中的最大值和最小值。<br>分析<br>    常规的做法是遍历一次，分别求出最大值和最小值，事实上，至多3|n/2|（||代表向下取整）就足以找出最小值和最大值。做法是：记录比较过程中遇到的最小值和最大值。我们并不是将每一个输入元素与当前的最大值和最小值进行比较（这样做的代价是每个元素需要两次比较），而是成对的处理元素。先将一对输入元素进行比较，然后把较小者与当前最小值进行比较，把较大者与当前最大值比较，因此每两个元素比较3次。<br>    如何假定当前最小值和最大值的初始值依赖于n是奇数还是偶数。如果n是奇数，就将最小值和最大值都设为第一个元素的值，然后成对的处理余下的元素。如果n是偶数，就对前两个元素做一次比较，以决定最小值和最大值的初值，然后如同n是奇数的情形一样，成对的处理余下的元素。</p>\n<pre><code>但是这里要说的是分治法，将数组分成左右两部分，先求出左半部分的最大值和最小值，再求出右半部分的最大值和最小值，然后综合起来求总体的最大值和最小值。这是个递归的过程，对于划分后的左右两部分，同样重复这个过程，直到划分区间内只剩下一个元素或者两个元素。\n</code></pre><p>代码<br>// 求数组的最大值和最小值，返回值在maxValue和minValue<br>`void MaxandMin(int *a, int l, int r, int&amp; maxValue, int&amp; minValue)<br>{<br>    if(l == r) // l与r之间只有一个元素<br>    {<br>        maxValue = a[l] ;<br>        minValue = a[l] ;<br>        return ;<br>    }</p>\n<pre><code>if(l + 1 == r) // l与r之间只有两个元素\n{\n    if(a[l] &gt;= a[r])\n    {\n        maxValue = a[l] ;\n        minValue = a[r] ;\n    }\n    else\n    {\n        maxValue = a[r] ;\n        minValue = a[l] ;\n    }\n    return ;\n}\n\nint m = (l + r) / 2 ; // 求中点\n\nint lmax ; // 左半部份最大值\nint lmin ; // 左半部份最小值\nMaxandMin(a, l, m, lmax, lmin) ; // 递归计算左半部份\n\nint rmax ; // 右半部份最大值\nint rmin ; // 右半部份最小值\nMaxandMin(a, m + 1, r, rmax, rmin) ; // 递归计算右半部份\n\nmaxValue = max(lmax, rmax) ; // 总的最大值\nminValue = min(lmin, rmin) ; // 总的最小值\n</code></pre><p>}<br><code>**求数组的最大值和次小值**\n    给定一个含有n个元素的整型数组a，求a中的最大值和次小值。\n分析\n    思路和上一题类似，同样是用分治法，先求出左边的最大值leftmax和次大值leftsecond，再求出右边的最大值rightmax和次大值rightsecond，然后合并，如何合并呢？分情况考虑。    \n    1\\. 如果leftmax &gt; rightmax，那么可以肯定leftmax是最大值，但次大值不一定是rightmax，但肯定不是rightsecond，只需将leftsecond和rightmax做一次比较即可；\n    2\\. 如果rightmax &gt; leftmax，那么可以肯定的rightmax是最大值，但次大值不一样是leftmax，但肯定不是leftsecond，所以只需将leftmax与rightsecond做一次比较即可；\n注意\n    这种方法无法处理最大元素有多个的情况，比如3,5,7,7，将返回7,7而不是7,5。感谢网友，从无到有靠他人指出。\n代码\n// 找出数组的最大值和次大值，a是待查找的数组，left和right是查找区间，max和second存放结果</code>void MaxandMin(int a[], int left, int right, int&amp;max, int&amp;second)<br>{<br>    if(left == right)<br>    {<br>        max = a[left] ;<br>        second = INT_MIN;<br>    }<br>    elseif(left +1== right)<br>    {<br>        max = a[left] &gt; a[right] ? a[left] : a[right] ;<br>        second = a[left] &lt; a[right] ? a[left] : a[right] ;<br>    }<br>    else<br>    {<br>        int mid = left + (right - left) /2 ;</p>\n<pre><code>    int leftmax ;\n    int leftsecond ;\n    MaxandMin(a, left, mid, leftmax, leftsecond) ;\n\n    int rightmax ;\n    int rightsecond ;\n    MaxandMin(a, mid +1, right, rightmax, rightsecond) ;\n\n    if (leftmax &gt; rightmax)\n    {\n        max = leftmax ;\n        second = leftsecond &gt; rightmax ? leftsecond : rightmax ;\n    }\n    else\n    {\n        max = rightmax ;\n        second = leftmax &lt; rightsecond ? rightsecond : leftmax ;\n    }\n}\n</code></pre><p>}`</p>\n<p><strong>求数组中出现次数超过一半的元素</strong><br>    给定一个含有n个元素的整型数组a，其中有个元素出现次数超过n/2，求出这个元素。据说是百度的一道题。<br>分析<br>    暂且先不说当前作者的思路，我看到这个问题的时候，想到了如下方法：<br>    1. 先进行排序，常规的方法就是快速排序，平均时间复杂度为O(nlogn))，然后取第n/2个元素即可，当然，这种方法的前提是存在这个所谓的“主元素”；若不清楚，还是需要验证的；<br>    2. 由于肯定该数组中含有这么个元素，该题就转换为找中位数了。找中位数的方法线性时间内有两种：第一、基于分治法的线性期望时间求中位数，该方法是线性期望时间，类似于快速排序；第二、最坏情况下也是线性时间复杂度的方法——“五分中项的中项”划分方法；<br>    3、分治的思想  若a中存在主元素，则将a分为两部分后，a的主元素也必为两部分中至少一部分主元素，因此可用分治法。<br>    将元素划分两部分，递归地检查两部分有无主元素。算法如下：<br>    a. 若a中只含有一个元素，则此元素就是主元素，返回此数；<br>    b. 将a分为两部分a1和a2（二者元素相等或只差一个），分别递归调用此方法求其主元素m1和m2；<br>    c. 若m1和m2都存在且相等，则这个是就是a的主元素，返回次数；<br>    d. 若m1和m2都存在且不相等，则分别检查这两个数是否为a的主元素，若有则返回此数，若无则返回空值；<br>    e. 若m1和m2都不存在，则a无主元素，返回空值；<br>    f. 若m1和m2只有一个存在，则检查这个数是否为a的主元素，若是则返回此数，若否就返回空值；</p>\n<pre><code>对于作者给出的这种算法，我在《编程之美》上看到过，即“寻找发帖水王”的题目。\n设置一个当前值和当前值的计数器，初始化当前值为数组首元素，计数器值为1，然后从第二个元素开始遍历整个数组，对于每个被遍历到的值a[i]\n1\\. 如果a[i] == currentvalue，则计数器加1；\n2\\. 如果a[i]  != currentvalue，则计数器减一，如果计数器等于0，则更新当前值为a[i]，并将计数器值重置为1；\n</code></pre><p>代码<br>`void Find(int a[], int length)<br>{<br>    int candidate;<br>    int i, ntimes;<br>    i = 0;<br>    ntimes = 0;</p>\n<pre><code>for(i = 0; i &lt; length; i++)\n{\n    if(ntimes == 0)//计数为0时，读入新的元素，计数加1\n    {\n        candidate = a[i];\n        ntimes = 1;\n    }\n    else\n    {\n        if(candidate == a[i])//如果数据相同，计数加1\n        {\n            ntimes++;\n        }\n        else\n        {\n            ntimes--; //如果计数不同，则计数减1，相当于删除了两个元素\n        }\n    }\n}\n\nint count = 0;\nfor(i = 0; i &lt;length; i++)\n{\n    if(candidate == a[i])\n        count++;\n}\n//最终得到的candidate元素有可能是序列最末位的两个元素之一\n//因此，需要验证\nif(count &gt; length/2)\n{\n    cout &lt;&lt; endl &lt;&lt; &quot;主元素为: &quot; &lt;&lt; candidate &lt;&lt; endl;\n}\nelse\n{\n    cout &lt;&lt; &quot;没有主元素.&quot; &lt;&lt; endl;\n}\n</code></pre><p>}`</p>\n<p><strong>求数组中元素的最短距离</strong><br>    给定一个含有n个元素的整型数组a，找出数组中的两个元素x和y，使得abs(x - y)值最小。<br>分析<br>    看到这个题目，首先想到的是Brute Force，这样需要的时间复杂度为O(n^2)；<br>    另外，我们可以先进行排序，然后遍历一次数组即可。<br>    不知道还有没有更好的方法？？？？<br>代码<br>`int compare(const void<em> a, const void</em> b)<br>{<br>    return <em>(int</em>)a - <em>(int</em>)b ;<br>}</p>\n<p>// 求数组中元素的最短距离<br>void MinimumDistance(int* a, int n)<br>{<br>    // Sort<br>    qsort(a, n, sizeof(int), compare) ;</p>\n<pre><code>int i ; // Index of number 1\nint j ; // Index of number 2\n\nint minDistance = numeric_limits&lt;int&gt;::max() ;\nfor (int k = 0; k &lt; n - 1; ++k)\n{\n    if (a[k + 1] - a[k] &lt; minDistance)\n    {\n        minDistance = a[k + 1] - a[k] ;\n        i = a[k] ;\n        j = a[k + 1] ;\n    }\n}\n\ncout &lt;&lt; &quot;Minimum distance is: &quot; &lt;&lt; minDistance &lt;&lt; endl ;\ncout &lt;&lt; &quot;i = &quot; &lt;&lt; i &lt;&lt; &quot; j = &quot; &lt;&lt; j &lt;&lt; endl ;\n</code></pre><p>}<code>**\n求两个有序数组的共同元素**\n    给定两个含有n个元素的有序（非降序）整型数组a和b，求出其共同元素，比如\n    a = 0, 1, 2, 3, 4\n    b = 1, 3, 5, 7, 9\n    输出1, 3\n分析\n   充分利用数组有序的性质，用两个指针i和j分别指向a和b，比较a[i]和b[j]，根据比较结果移动指针，则有如下三种情况：\n    1\\. a[i] &lt; b[j]，则i++，继续比较；\n    2\\. a[i] == b[j]，则i和j皆加1，继续比较；\n    3\\. a[i] &gt; b[j]，则j++，继续比较；\n    重复以上过程，直至i或j到达数组末尾。\n代码\n// 找出两个数组的共同元素</code>void FindCommon(int<em> a, int</em> b, int n)<br>{<br>    int i = 0;<br>    int j = 0 ;</p>\n<pre><code>while (i &lt; n &amp;&amp; j &lt; n)\n{\n    if (a[i] &lt; b[j])\n        ++i ;\n    else if(a[i] == b[j])\n    {\n        cout &lt;&lt; a[i] &lt;&lt; endl ;\n        ++i ;\n        ++j ;\n    }\n    else// a[i] &gt; b[j]\n        ++j ;\n}\n</code></pre><p>}`<br>    这道题还要其他的解法，比如对于a中任意一个元素，在b中对齐进行Bianry Search，因为a中有n个元素，而在b中进行Binary Search需要logn，所以，找出全部相同元素的时间复杂度O(nlogn)。<br>    另外，上面的解法，只要b有序即可，a是否有序无所谓，因为我们只是在b中做Binary Search。如果a也有序的话，那么用上面的方法就有点慢了，因为如果a中某个元素在b中的位置是k的话，那么a中下一个元素在b中的位置一定位于k的右侧，所以本次搜索空间可以根据上次搜索结果缩小，而不是在整个b中搜索。也即如果a和b都有序的话，代码可以做如下修改，记录上次搜索b中的元素位置，作为下一次搜索的起始点。</p>\n<p><strong>求三个数组的共同元素</strong><br>    给定三个含有n个元素的整型数组a、b和c，求他们最小的公共元素。<br>分析<br>   如果三个数组都有序，那么可以设置三个指针指向三个数组的头部，然后根据这三个指针所指的值进行比较来移动指针，直到找到共同元素。<br>代码<br>// 三个数组的共同元素-只找最小的<br>`void FindCommonElements(int a[], int b[], int c[], int x, int y, int z)<br>{<br>    for(int i = 0, j = 0, k = 0; i &lt; x &amp;&amp; j &lt; y &amp;&amp; k &lt; z;)<br>    {<br>        if(a[i] &lt; b[j])<br>        {<br>            i++ ;<br>        }<br>        else // a[i] &gt;= b[j]<br>        {<br>            if(b[j] &lt; c[k])<br>            {<br>                j++ ;<br>            }<br>            else // b[j] &gt;= c[k]<br>            {<br>                if(c[k] &lt; a[i])<br>                {<br>                    k++ ;<br>                }<br>                else // c[k] &gt;= a[i]<br>                {<br>                    cout &lt;&lt; c[k] &lt;&lt; endl ;<br>                    return ;<br>                }<br>            }<br>        }<br>    }</p>\n<pre><code>cout &lt;&lt; &quot;Not found!&quot; &lt;&lt; endl ;\n</code></pre><p>}<code>如果三个数组都没有序的话，可以对a和b进行排序，然后对c中任意一个元素都在b和c中做二分搜索。\n// 找出三个数组的共同元素\n// O(NlogN)</code>int UniqueCommonItem(int <em>a, int </em>b, int *c, int n)<br>{<br>    // sort array a<br>    qsort(a, n, sizeof(int), compare) ; // NlogN</p>\n<pre><code>// sort array b\nqsort(b, n, sizeof(int), compare) ; // NlogN\n\n// for each element in array c, do a binary search in a and b\n// This is up to a complexity of N*2*logN\nfor (int i = 0; i &lt; n; i++)\n{\n    if(BinarySearch(a, n, c[i]) &amp;&amp; BinarySearch(b, n, c[i]))\n        return c[i] ;\n}\n\nreturn - 1 ; // not found\n</code></pre><p>}`<br>    也可以对a进行排序，然后对于b和c中任意一个元素都在a中进行二分搜索，但是这样做是由问题的：当b[i]和c[i]同时都在a里面也说明不了就是共同元素。</p>\n<pre><code>小小总结一下，对于在数组中进行查找的问题，可以分为如下两种情况处理：\n1\\. 如果给定的数组有序，那么首先应该想到的是二分查找，时间复杂度为（logn）；\n2\\. 如果给定的数组无序，那么首先应该想到对数组进行排序，很多排序算法都能在O(nlogn)时间内对数组进行排序，然后再使用二分搜索，总的时间复杂度为O(nlogn)。\n</code></pre><p><strong>找出数组中唯一的重复元素</strong><br>    给定含有1001个元素的数组，其中存放了1-1000之内的整数，只有一个整数是重复的，其他均只出现一次，每个数组元素只能访问一次。请找出这个数。<br>分析<br>    方法一：当N为比较大的数时警惕溢出<br>    求出整个数组的和，再减去1-1000的和，得到的差即为重复的元素。</p>\n<pre><code>方法二：\n数组取值操作可以看作一个特殊的函数f: D-&gt;R，定义域为下标值0~1000，值域为1到1000，我们把f(i)叫做它的后继，i叫f(i)的前驱。0只有后继没有前驱，其他数字既有后继又有前驱，重复的那个数字有两个前驱，我们将利用这些特征。\n规律：从0开始画一个箭头指向它的后继，从它的后继继续指向后继的后继，这样，必然会有一个节点指向之前已经出现过的数，即为重复的数。\n即利用下标与单元中所存储的内容之间的特殊关系，进行遍历访问单元，一旦访问过的单元赋予一个标记，利用标记作为发现重复数字的关键。\n代码如下所示。\n</code></pre><p>`void FindRepeat(int array[], int length)<br>{<br>    int index = 0;<br>    while ( true )<br>    {<br>       if ( array[index]&lt;0 )<br>           break;<br>       array[index] <em>= -1; //访问过，变成相反数<br>       index=array[index]</em>(-1);</p>\n<pre><code>}\ncout&lt;&lt;&quot;The repeat number is &quot;&lt;&lt; -array[index] &lt;&lt;endl;\n</code></pre><p>}<code>方法三：\n    同样考虑下标与内容的关系，不过不用标记，而用两个速度不同的过程来访问。slow每次前进一步，fast每次前进两步，在有环结构中，总会相遇。\n    代码如下所示。</code>void FindRepeat(int array[], int length)<br>{<br>    int slow=fast= 0;<br>    while ( true )<br>    {<br>       slow = array[slow];<br>              fast = array[array[fast]];<br>              if( slow == fast )<br>                     break;<br>    }<br>    cout &lt;&lt; slow &lt;&lt; endl;<br>}<code>方法四：异或操作</code>void FindRepeat(int array[], int length)<br>{<br>    int result = 0;<br>    for(int i=1;i&lt;=1000;i++)<br>        result ^= i;<br>    for(int i=0;i&lt;=1000;i++)<br>        result ^= array[i];<br>    cout &lt;&lt; result &lt;&lt; endl;<br>}`</p>\n<p><strong>求找出出现奇数次的元素</strong><br>    给定一个含有n个元素的整型数组a，其中只有一个出现奇数次，找出这个元素。<br>分析<br>   因为对于任意一个数k，有k^k = 0，k^ 0 = k，所以将a中所有元素进行异或，那么个数为偶数的元素异或后都变成了0，只留下个数为奇数的那个元素。<br>代码<br>Code highlighting produced by Actipro CodeHighlighter (freeware)<br><a href=\"http://www.CodeHighlighter.com/--&gt;\" target=\"_blank\" rel=\"noopener\">http://www.CodeHighlighter.com/--&gt;</a><br>`int FindElementWithOddCount(int*a, int n)<br>{<br>        int r = a[0] ;</p>\n<pre><code>for (int i =1; i &lt; n; ++i)\n{\n        r ^= a[i] ;\n}\n\nreturn r ;\n</code></pre><p>}<code>对于上述题目，出现一个奇数次的数，这样比较好求。但对于下面的题目，该如何求解呢？\n    题目：\n    有N+2个数，N个数出现了偶数次，2个数出现了奇数次（这两个数不相等），问用O(1)的空间复杂度，找出这两个数，不需要知道具体位置，只需要知道这两个值。\n    求解方法如下：\n    假设这两个数为a和b，将数组中所有元素异或结果为x = a ^ b，判断x中位为1的位数（注：因为a != b，所以x不等于0，我们只需要知道某一个位为1的位数k，例如0010 1100，我们可以取k = 2,或3， 或者5），然后将x与数组中第k位为1的数进行异或，异或结果为就是a,b中一个，然后用x异或，就可以求出另外一个。\n    为什么呢？因为x总第k位为1表示a或b中有一个数的第k位也为1，假设为a，将x与数组中第k位为1的数进行异或时，也即将x与a外加其他第k位为1出现过的偶数次的数进行异或，化简即为x与a异或，结果就是b。\n    代码如下所示。</code>void getNum(int a[],int length)<br>{<br>    int s=0;//保存异或结果<br>    for(int i=0;i<length;i++) {=\"\" s=\"s^a[i];\" }=\"\" int=\"\" temp1=\"s;//临时保存异或结果\" temp2=\"s;//临时保存异或结果\" k=\"0;\" while(!(temp1&1))=\"\" 求位为1的位数=\"\">&gt;1;<br>        k++;<br>    }<br>    for(int i=0;i<length;i++) {=\"\" if((a[i]=\"\">&gt;k)&amp;1)//将s与数组中第k位为1的数异或<br>        {<br>            cout&lt;&lt;a[i]&lt;&lt;” “;<br>            s=s^a[i];<br>        }<br>    }<br>    cout&lt;&lt;s&lt;&lt;” “&lt;&lt;(s^temp2)&lt;&lt;endl;//(s^temp2)用来求另外一个数<br>}`</length;i++)></length;i++)></p>\n<p><strong>求数组中满足给定和的数对</strong><br>    给定两个含有n个元素的有序整型数组a和b，各有n个元素，求两个数组中满足给定和的数对，即对a中元素i和b中元素j，满足i + j = d(d已知)。<br>分析<br>   两个指针i和j分别指向数组的首尾，然后从两端同时向中间遍历，直到两个指针交叉。<br>代码<br>// 找出满足给定和的数对<br><code>void FixedSum(int* a, int* b, int n, int d)\n{\n    for (int i = 0, j = n - 1; i &lt; n &amp;&amp; j &gt;= 0)\n    {\n        if (a[i] + b[j] &lt; d)\n            ++i ;\n        else if (a[i] + b[j] == d)\n        {\n            cout &lt;&lt; a[i] &lt;&lt; &quot;, &quot; &lt;&lt; b[j] &lt;&lt; endl ;\n            ++i ;\n            --j ;\n        }\n        else // a[i] + b[j] &gt; d\n            --j ;\n    }\n}</code></p>\n<p><strong>求最大连续子段和</strong><br>   给定一个整型数组a，求出最大连续子段和，如果和为负数，则按 0计算，比如1， 2， -5， 6， 8，则输出6 + 8  = 14。<br>分析<br>   《编程珠玑》上的经典题目，不多说了。<br>代码<br>// 子数组的最大和<br><code>int Sum(int* a, int n)\n{\n    int curSum = 0;\n    int maxSum = 0;\n    for (int i = 0; i &lt; n; i++)\n    {\n        if (curSum + a[i] &lt; 0)\n            curSum = 0;\n        else\n        {\n            curSum += a[i] ;\n            maxSum = max(maxSum, curSum);\n        }\n    }\n    return maxSum;\n}</code><br><strong>求最大连续子段的乘积</strong><br>    给定一个整型数组a，求出最大连续子段的乘积，比如1， 2， -8， 12， 7则输出12<em>7 = 84。<br>分析<br>   与最大连续字段和类似，注意处理负数的情况。<br>代码<br>// 子数组的最大乘积<br>`int MaxProduct(int </em>a, int n)<br>{<br>    int maxProduct = 1; // max positive product at current position<br>    int minProduct = 1; // min negative product at current position<br>    int r = 1; // result, max multiplication totally</p>\n<pre><code>for (int i = 0; i &lt; n; i++)\n{\n    if (a[i] &gt; 0)\n    {\n        maxProduct *= a[i];\n        minProduct = min(minProduct * a[i], 1);\n    }\n    else if (a[i] == 0)\n    {\n        maxProduct = 1;\n        minProduct = 1;\n    }\n    else // a[i] &lt; 0\n    {\n        int temp = maxProduct;\n        maxProduct = max(minProduct * a[i], 1);\n        minProduct = temp * a[i];\n    }\n\n    r = max(r, maxProduct);\n}\n\nreturn r;\n</code></pre><p>}`</p>\n<p><strong>数组循环移位</strong><br>    将一个含有n个元素的数组向右循环移动k位，要求时间复杂度为O(n)，且只能使用两个额外的变量，这是在微软的编程之美上看到的。<br>分析<br>   最经典的两种做法：三次翻转、STL中的实现方法（这个看懂了，再补上）。<br>代码<br>// 将buffer中start和end之间的元素逆序<br><code>void Reverse( int buffer[], int start, int end )\n{\n    while ( start &lt; end )\n    {\n        int temp = buffer[ start ] ;\n        buffer[ start++ ] = buffer[ end ] ;\n        buffer[ end-- ] = temp ;\n    }\n}</code></p>\n<p>// 将含有n个元素的数组buffer右移k位<br>`void Shift( int buffer[], int n, int k )<br>{<br>    k %= n ;</p>\n<pre><code>Reverse( buffer, 0, n - k - 1) ;\nReverse( buffer, n - k, n - 1 ) ;\nReverse( buffer, 0, n - 1 ) ;\n</code></pre><p>}<br>`<br><strong>字符串逆转</strong><br>    给定一个含有n个元素的字符数组a，将其原地逆转。<br>分析<br>    用两个指针分别指向字符数组的首尾部，交换其对应的字符，然后两个指针分别向数组中央移动，直到交叉。<br>代码<br>    略</p>\n<p><strong>组合问题</strong><br>    给定一个含有n个元素的整型数组a，从中任取m个元素，求所有组合。比如下面的例子<br>    a = 1, 2, 3, 4, 5<br>    m = 3<br>    输出<br>    1 2 3, 1 2 4, 1 2 5, 1 3 4, 1 3 5, 1 4 5<br>    2 3 4, 2 3 5, 2 4 5<br>    3 4 5<br>分析<br>    典型的排列组合问题，首选回溯法，为了简化问题，将a中的n个元素的值分别设置为1到n。<br>代码<br>// n选m的所有组合<br>`int buffer[100] ;</p>\n<p>void PrintArray(int *a, int n)<br>{<br>    for (int i = 0; i &lt; n; ++i)<br>        cout &lt;&lt; a[i] &lt;&lt; “”;<br>    cout &lt;&lt; endl ;<br>}</p>\n<p>bool IsValid(int lastIndex, int value)<br>{<br>    for (int i = 0; i &lt; lastIndex; i++)<br>    {<br>        if (buffer[i] &gt;= value)<br>            return false;<br>    }<br>    return true;<br>}</p>\n<p>void Select(int t, int n, int m)<br>{<br>    if (t == m)<br>        PrintArray(buffer, m);<br>    else<br>    {<br>        for (int i = 1; i &lt;= n; i++)<br>        {<br>            buffer[t] = i;<br>            if (IsValid(t, i))<br>                Select(t + 1, n, m);<br>        }<br>    }<br>}<br><code>**合并两个数组**\n    给定含有n个元素的两个有序数组a和b。合并两个数组中的元素到整型数组c，要求去除重复元素并保持c有序。\n分析\n    利用合并排序的思想，两个指针i、j和k分别指向数组a、b和c，然后比较两个指针对应元素的大小，有以下三种情况：\n    1\\. a[i] &lt; b[j]，则c[k] = a[i];\n    2\\. a[i] == b[j], 则c[k]等于a[i]或b[j]即可；\n    3\\. a[i] &gt; b[j], 则c[k] = b[j];\n    重复以上过程，直到i或者j到达数组末尾，然后将剩下的元素直接copy到数组c中即可。\n代码\n// 合并两个有序数组</code>void Merge(int <em>a, int </em>b, int *c, int n)<br>{<br>    int i = 0 ;<br>    int j = 0 ;<br>    int k = 0 ;</p>\n<pre><code>while (i &lt; n &amp;&amp; j &lt; n)\n{\n    if (a[i] &lt; b[j])// 如果a的元素小，则插入a中元素到c\n    {\n        c[k++] = a[i] ;\n        ++i ;\n    }\n    else if (a[i] == b[j])// 如果a和b元素相等，则插入二者皆可，这里插入a\n    {\n        c[k++] = a[i] ;\n        ++i ;\n        ++j ;\n    }\n    else // a[i] &gt; b[j] // 如果b中元素小，则插入b中元素到c\n    {\n        c[k++] = b[j] ;\n        ++j ;\n    }\n}\n\nif (i == n) // 若a遍历完毕，处理b中剩下的元素\n{\n    for (int m = j; m &lt; n; ++m)\n        c[k++] = b[m] ;\n}\nelse//j == n, 若b遍历完毕，处理a中剩下的元素\n{\n    for (int m = i; m &lt; n; ++m)\n        c[k++] = a[m] ;\n}\n</code></pre><p>}`</p>\n<p><strong>重排问题</strong><br>    给定含有n个元素的整型数组a，其中包括0元素和非0元素，对数组进行排序，要求：<br>    1. 排序后所有0元素在前，所有非0元素在后，且非零元素排序前后相对位置不变<br>    2. 不能使用额外存储空间<br>    例子如下<br>    输入 0， 3， 0， 2， 1， 0， 0<br>    输出 0， 0， 0， 0， 3， 2， 1<br>分析<br>    此排序非传统意义上的排序，因为它要求排序前后非0元素相对位置不变，或者叫整理更恰当。可以从后向前遍历整个数组，遇到某个位置i上的元素是非0元素时，如果a[k]为0，则将a[i]赋值给a[k]，a[k]赋值为0。实际上，i是非0元素的下标，而k是0元素的下标。<br>代码<br><code>void Arrange(int* a, int n)\n{\n    int k = n -1 ;\n    for (int i = n -1; i &gt;=0; --i)\n    {\n        if (a[i] !=0)\n        {\n            if (a[k] ==0)\n            {\n                a[k] = a[i] ;\n                a[i] =0 ;\n            }\n            --k ;\n        }\n    }\n}</code></p>\n<p><strong>找出绝对值最小的元素</strong><br>    给定一个有序整数序列（非递减序），可能包含负数，找出其中绝对值最小的元素，比如给定序列 -5, -3, -1, 2, 8 则返回1。<br>分析<br>    由于给定序列是有序的，而这又是搜索问题，所以首先想到二分搜索法，只不过这个二分法比普通的二分法稍微麻烦点，可以分为下面几种情况<br>    1. 如果给定的序列中所有的数都是正数，那么数组的第一个元素即是结果。<br>    2. 如果给定的序列中所有的数都是负数，那么数组的最后一个元素即是结果。<br>    3. 如果给定的序列中既有正数又有负数，那么绝对值得最小值一定出现在正数和负数的连接处。<br>    为什么？因为对于负数序列来说，右侧的数字比左侧的数字绝对值小，如上面的-5, -3, -1, 而对于整数来说，左边的数字绝对值小，比如上面的2, 8，将这个思想用于二分搜索，可先判断中间元素和两侧元素的符号，然后根据符号决定搜索区间，逐步缩小搜索区间，直到只剩下两个元素。<br>代码<br>    单独设置一个函数用来判断两个整数的符号是否相同<br>// 找出一个非递减序整数序列中绝对值最小的数<br>`int MinimumAbsoluteValue(int* a, int n)<br>{<br>    // Only one number in array<br>    if (n ==1)<br>    {<br>        return a[0] ;<br>    }</p>\n<pre><code>// All numbers in array have the same sign\nif (SameSign(a[0], a[n -1]))\n{\n    return a[0] &gt;=0? a[0] : a[n -1] ;\n}\n\n// Binary search\nint l =0 ;\nint r = n -1 ;\n\nwhile(l &lt; r)\n{\n    if (l +1== r)\n    {\n        return abs(a[l]) &lt; abs(a[r]) ? a[l] : a[r] ;\n    }\n\n    int m = (l + r) /2 ;\n\n    if (SameSign(a[m], a[r]))\n    {\n        r = m -1;\n        continue;\n    }\n    if (SameSign(a[l], a[m]))\n    {\n        l = m +1 ;\n        continue;\n    }\n}\n</code></pre><p>}<code>上面的代码是有问题的：查找数组a[4]={-2, -1, 3, 4}返回的是3，好像是有点问题。循环中保持的不变式应该是a[l]&lt;0 &amp;&amp; a[r]&gt;0,所以比较中间元a[m]与a[l],a[r]的符号后，要保持不变式，就应该是l=m或者r=。现修正如下。\n// 找出一个非递减序整数序列中绝对值最小的数</code>int MinimumAbsoluteValue(int* a, int n)<br>{<br>    // Only one number in array<br>    if (n ==1)<br>    {<br>        return a[0] ;<br>    }</p>\n<pre><code>// All numbers in array have the same sign\nif (SameSign(a[0], a[n -1]))\n{\n    return a[0] &gt;=0? a[0] : a[n -1] ;\n}\n\n// Binary search\nint l =0 ;\nint r = n -1 ;\n\nwhile(l &lt; r)\n{\n    if (l + 1 == r)\n    {\n        return abs(a[l]) &lt; abs(a[r]) ? a[l] : a[r] ;\n    }\n\n    int m = (l + r) /2 ;\n\n    if (SameSign(a[m], a[r]))\n    {\n        r = m;\n        continue;\n    }\n    if (SameSign(a[l], a[m]))\n    {\n        l = m ;\n        continue;\n    }\n}\n</code></pre><p>}<br>`</p>\n<p>from : <a href=\"http://blog.chinaunix.net/uid-26548237-id-3753737.html\" target=\"_blank\" rel=\"noopener\">http://blog.chinaunix.net/uid-26548237-id-3753737.html</a></p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>数组求和</p>\n<p>求数组中的最大值和最小值</p>\n<p>求数组中的最大值和次大值</p>\n<p>求数组中出现次数超过一半的元素</p>\n<p>求数组中元素的最短距离</p>\n<p>求两个有序数组的共同元素</p>\n<p>求三个数组的共同元素</p>\n<p>找出数组中唯一重复的元素</p>\n<p>找出出现奇数次的元素</p>\n<p>求数组中满足给定和的数对</p>\n<p>最大子段和</p>\n<p>最大子段积</p>\n<p>数组循环移位</p>\n<p>字符串逆转</p>\n<p>组合问题</p>\n<p>合并两个数组</p>\n<p>重排问题</p>\n<p>找出绝对值最小的元素<br>","more":"</p>\n</blockquote>\n<p><strong>数组求和 </strong><br>    给定一个含有n个元素的整型数组a，求a中所有元素的和。可能您会觉得很简单，是的，的确简单，但是为什么还要说呢，原因：这道题要求用递归，只用一行代码。<br>分析<br>    简单说一下，两种情况：<br>    1. 如果数组元素个数为0，那么和为0；<br>    2. 如果数组元素个数为n，那么先求出前n-1个元素之和，再加上a[n - 1]即可；<br>代码<br>// 数组求和<br><code>int sum(int*a, int n)\n{\n     return n ==0?0 : sum(a, n -1) + a[n -1];\n}</code></p>\n<p><strong>求数组的最大值和最小值</strong><br>    给定一个含有n个元素的整型数组a，求a中的最大值和最小值。<br>分析<br>    常规的做法是遍历一次，分别求出最大值和最小值，事实上，至多3|n/2|（||代表向下取整）就足以找出最小值和最大值。做法是：记录比较过程中遇到的最小值和最大值。我们并不是将每一个输入元素与当前的最大值和最小值进行比较（这样做的代价是每个元素需要两次比较），而是成对的处理元素。先将一对输入元素进行比较，然后把较小者与当前最小值进行比较，把较大者与当前最大值比较，因此每两个元素比较3次。<br>    如何假定当前最小值和最大值的初始值依赖于n是奇数还是偶数。如果n是奇数，就将最小值和最大值都设为第一个元素的值，然后成对的处理余下的元素。如果n是偶数，就对前两个元素做一次比较，以决定最小值和最大值的初值，然后如同n是奇数的情形一样，成对的处理余下的元素。</p>\n<pre><code>但是这里要说的是分治法，将数组分成左右两部分，先求出左半部分的最大值和最小值，再求出右半部分的最大值和最小值，然后综合起来求总体的最大值和最小值。这是个递归的过程，对于划分后的左右两部分，同样重复这个过程，直到划分区间内只剩下一个元素或者两个元素。\n</code></pre><p>代码<br>// 求数组的最大值和最小值，返回值在maxValue和minValue<br>`void MaxandMin(int *a, int l, int r, int&amp; maxValue, int&amp; minValue)<br>{<br>    if(l == r) // l与r之间只有一个元素<br>    {<br>        maxValue = a[l] ;<br>        minValue = a[l] ;<br>        return ;<br>    }</p>\n<pre><code>if(l + 1 == r) // l与r之间只有两个元素\n{\n    if(a[l] &gt;= a[r])\n    {\n        maxValue = a[l] ;\n        minValue = a[r] ;\n    }\n    else\n    {\n        maxValue = a[r] ;\n        minValue = a[l] ;\n    }\n    return ;\n}\n\nint m = (l + r) / 2 ; // 求中点\n\nint lmax ; // 左半部份最大值\nint lmin ; // 左半部份最小值\nMaxandMin(a, l, m, lmax, lmin) ; // 递归计算左半部份\n\nint rmax ; // 右半部份最大值\nint rmin ; // 右半部份最小值\nMaxandMin(a, m + 1, r, rmax, rmin) ; // 递归计算右半部份\n\nmaxValue = max(lmax, rmax) ; // 总的最大值\nminValue = min(lmin, rmin) ; // 总的最小值\n</code></pre><p>}<br><code>**求数组的最大值和次小值**\n    给定一个含有n个元素的整型数组a，求a中的最大值和次小值。\n分析\n    思路和上一题类似，同样是用分治法，先求出左边的最大值leftmax和次大值leftsecond，再求出右边的最大值rightmax和次大值rightsecond，然后合并，如何合并呢？分情况考虑。    \n    1\\. 如果leftmax &gt; rightmax，那么可以肯定leftmax是最大值，但次大值不一定是rightmax，但肯定不是rightsecond，只需将leftsecond和rightmax做一次比较即可；\n    2\\. 如果rightmax &gt; leftmax，那么可以肯定的rightmax是最大值，但次大值不一样是leftmax，但肯定不是leftsecond，所以只需将leftmax与rightsecond做一次比较即可；\n注意\n    这种方法无法处理最大元素有多个的情况，比如3,5,7,7，将返回7,7而不是7,5。感谢网友，从无到有靠他人指出。\n代码\n// 找出数组的最大值和次大值，a是待查找的数组，left和right是查找区间，max和second存放结果</code>void MaxandMin(int a[], int left, int right, int&amp;max, int&amp;second)<br>{<br>    if(left == right)<br>    {<br>        max = a[left] ;<br>        second = INT_MIN;<br>    }<br>    elseif(left +1== right)<br>    {<br>        max = a[left] &gt; a[right] ? a[left] : a[right] ;<br>        second = a[left] &lt; a[right] ? a[left] : a[right] ;<br>    }<br>    else<br>    {<br>        int mid = left + (right - left) /2 ;</p>\n<pre><code>    int leftmax ;\n    int leftsecond ;\n    MaxandMin(a, left, mid, leftmax, leftsecond) ;\n\n    int rightmax ;\n    int rightsecond ;\n    MaxandMin(a, mid +1, right, rightmax, rightsecond) ;\n\n    if (leftmax &gt; rightmax)\n    {\n        max = leftmax ;\n        second = leftsecond &gt; rightmax ? leftsecond : rightmax ;\n    }\n    else\n    {\n        max = rightmax ;\n        second = leftmax &lt; rightsecond ? rightsecond : leftmax ;\n    }\n}\n</code></pre><p>}`</p>\n<p><strong>求数组中出现次数超过一半的元素</strong><br>    给定一个含有n个元素的整型数组a，其中有个元素出现次数超过n/2，求出这个元素。据说是百度的一道题。<br>分析<br>    暂且先不说当前作者的思路，我看到这个问题的时候，想到了如下方法：<br>    1. 先进行排序，常规的方法就是快速排序，平均时间复杂度为O(nlogn))，然后取第n/2个元素即可，当然，这种方法的前提是存在这个所谓的“主元素”；若不清楚，还是需要验证的；<br>    2. 由于肯定该数组中含有这么个元素，该题就转换为找中位数了。找中位数的方法线性时间内有两种：第一、基于分治法的线性期望时间求中位数，该方法是线性期望时间，类似于快速排序；第二、最坏情况下也是线性时间复杂度的方法——“五分中项的中项”划分方法；<br>    3、分治的思想  若a中存在主元素，则将a分为两部分后，a的主元素也必为两部分中至少一部分主元素，因此可用分治法。<br>    将元素划分两部分，递归地检查两部分有无主元素。算法如下：<br>    a. 若a中只含有一个元素，则此元素就是主元素，返回此数；<br>    b. 将a分为两部分a1和a2（二者元素相等或只差一个），分别递归调用此方法求其主元素m1和m2；<br>    c. 若m1和m2都存在且相等，则这个是就是a的主元素，返回次数；<br>    d. 若m1和m2都存在且不相等，则分别检查这两个数是否为a的主元素，若有则返回此数，若无则返回空值；<br>    e. 若m1和m2都不存在，则a无主元素，返回空值；<br>    f. 若m1和m2只有一个存在，则检查这个数是否为a的主元素，若是则返回此数，若否就返回空值；</p>\n<pre><code>对于作者给出的这种算法，我在《编程之美》上看到过，即“寻找发帖水王”的题目。\n设置一个当前值和当前值的计数器，初始化当前值为数组首元素，计数器值为1，然后从第二个元素开始遍历整个数组，对于每个被遍历到的值a[i]\n1\\. 如果a[i] == currentvalue，则计数器加1；\n2\\. 如果a[i]  != currentvalue，则计数器减一，如果计数器等于0，则更新当前值为a[i]，并将计数器值重置为1；\n</code></pre><p>代码<br>`void Find(int a[], int length)<br>{<br>    int candidate;<br>    int i, ntimes;<br>    i = 0;<br>    ntimes = 0;</p>\n<pre><code>for(i = 0; i &lt; length; i++)\n{\n    if(ntimes == 0)//计数为0时，读入新的元素，计数加1\n    {\n        candidate = a[i];\n        ntimes = 1;\n    }\n    else\n    {\n        if(candidate == a[i])//如果数据相同，计数加1\n        {\n            ntimes++;\n        }\n        else\n        {\n            ntimes--; //如果计数不同，则计数减1，相当于删除了两个元素\n        }\n    }\n}\n\nint count = 0;\nfor(i = 0; i &lt;length; i++)\n{\n    if(candidate == a[i])\n        count++;\n}\n//最终得到的candidate元素有可能是序列最末位的两个元素之一\n//因此，需要验证\nif(count &gt; length/2)\n{\n    cout &lt;&lt; endl &lt;&lt; &quot;主元素为: &quot; &lt;&lt; candidate &lt;&lt; endl;\n}\nelse\n{\n    cout &lt;&lt; &quot;没有主元素.&quot; &lt;&lt; endl;\n}\n</code></pre><p>}`</p>\n<p><strong>求数组中元素的最短距离</strong><br>    给定一个含有n个元素的整型数组a，找出数组中的两个元素x和y，使得abs(x - y)值最小。<br>分析<br>    看到这个题目，首先想到的是Brute Force，这样需要的时间复杂度为O(n^2)；<br>    另外，我们可以先进行排序，然后遍历一次数组即可。<br>    不知道还有没有更好的方法？？？？<br>代码<br>`int compare(const void<em> a, const void</em> b)<br>{<br>    return <em>(int</em>)a - <em>(int</em>)b ;<br>}</p>\n<p>// 求数组中元素的最短距离<br>void MinimumDistance(int* a, int n)<br>{<br>    // Sort<br>    qsort(a, n, sizeof(int), compare) ;</p>\n<pre><code>int i ; // Index of number 1\nint j ; // Index of number 2\n\nint minDistance = numeric_limits&lt;int&gt;::max() ;\nfor (int k = 0; k &lt; n - 1; ++k)\n{\n    if (a[k + 1] - a[k] &lt; minDistance)\n    {\n        minDistance = a[k + 1] - a[k] ;\n        i = a[k] ;\n        j = a[k + 1] ;\n    }\n}\n\ncout &lt;&lt; &quot;Minimum distance is: &quot; &lt;&lt; minDistance &lt;&lt; endl ;\ncout &lt;&lt; &quot;i = &quot; &lt;&lt; i &lt;&lt; &quot; j = &quot; &lt;&lt; j &lt;&lt; endl ;\n</code></pre><p>}<code>**\n求两个有序数组的共同元素**\n    给定两个含有n个元素的有序（非降序）整型数组a和b，求出其共同元素，比如\n    a = 0, 1, 2, 3, 4\n    b = 1, 3, 5, 7, 9\n    输出1, 3\n分析\n   充分利用数组有序的性质，用两个指针i和j分别指向a和b，比较a[i]和b[j]，根据比较结果移动指针，则有如下三种情况：\n    1\\. a[i] &lt; b[j]，则i++，继续比较；\n    2\\. a[i] == b[j]，则i和j皆加1，继续比较；\n    3\\. a[i] &gt; b[j]，则j++，继续比较；\n    重复以上过程，直至i或j到达数组末尾。\n代码\n// 找出两个数组的共同元素</code>void FindCommon(int<em> a, int</em> b, int n)<br>{<br>    int i = 0;<br>    int j = 0 ;</p>\n<pre><code>while (i &lt; n &amp;&amp; j &lt; n)\n{\n    if (a[i] &lt; b[j])\n        ++i ;\n    else if(a[i] == b[j])\n    {\n        cout &lt;&lt; a[i] &lt;&lt; endl ;\n        ++i ;\n        ++j ;\n    }\n    else// a[i] &gt; b[j]\n        ++j ;\n}\n</code></pre><p>}`<br>    这道题还要其他的解法，比如对于a中任意一个元素，在b中对齐进行Bianry Search，因为a中有n个元素，而在b中进行Binary Search需要logn，所以，找出全部相同元素的时间复杂度O(nlogn)。<br>    另外，上面的解法，只要b有序即可，a是否有序无所谓，因为我们只是在b中做Binary Search。如果a也有序的话，那么用上面的方法就有点慢了，因为如果a中某个元素在b中的位置是k的话，那么a中下一个元素在b中的位置一定位于k的右侧，所以本次搜索空间可以根据上次搜索结果缩小，而不是在整个b中搜索。也即如果a和b都有序的话，代码可以做如下修改，记录上次搜索b中的元素位置，作为下一次搜索的起始点。</p>\n<p><strong>求三个数组的共同元素</strong><br>    给定三个含有n个元素的整型数组a、b和c，求他们最小的公共元素。<br>分析<br>   如果三个数组都有序，那么可以设置三个指针指向三个数组的头部，然后根据这三个指针所指的值进行比较来移动指针，直到找到共同元素。<br>代码<br>// 三个数组的共同元素-只找最小的<br>`void FindCommonElements(int a[], int b[], int c[], int x, int y, int z)<br>{<br>    for(int i = 0, j = 0, k = 0; i &lt; x &amp;&amp; j &lt; y &amp;&amp; k &lt; z;)<br>    {<br>        if(a[i] &lt; b[j])<br>        {<br>            i++ ;<br>        }<br>        else // a[i] &gt;= b[j]<br>        {<br>            if(b[j] &lt; c[k])<br>            {<br>                j++ ;<br>            }<br>            else // b[j] &gt;= c[k]<br>            {<br>                if(c[k] &lt; a[i])<br>                {<br>                    k++ ;<br>                }<br>                else // c[k] &gt;= a[i]<br>                {<br>                    cout &lt;&lt; c[k] &lt;&lt; endl ;<br>                    return ;<br>                }<br>            }<br>        }<br>    }</p>\n<pre><code>cout &lt;&lt; &quot;Not found!&quot; &lt;&lt; endl ;\n</code></pre><p>}<code>如果三个数组都没有序的话，可以对a和b进行排序，然后对c中任意一个元素都在b和c中做二分搜索。\n// 找出三个数组的共同元素\n// O(NlogN)</code>int UniqueCommonItem(int <em>a, int </em>b, int *c, int n)<br>{<br>    // sort array a<br>    qsort(a, n, sizeof(int), compare) ; // NlogN</p>\n<pre><code>// sort array b\nqsort(b, n, sizeof(int), compare) ; // NlogN\n\n// for each element in array c, do a binary search in a and b\n// This is up to a complexity of N*2*logN\nfor (int i = 0; i &lt; n; i++)\n{\n    if(BinarySearch(a, n, c[i]) &amp;&amp; BinarySearch(b, n, c[i]))\n        return c[i] ;\n}\n\nreturn - 1 ; // not found\n</code></pre><p>}`<br>    也可以对a进行排序，然后对于b和c中任意一个元素都在a中进行二分搜索，但是这样做是由问题的：当b[i]和c[i]同时都在a里面也说明不了就是共同元素。</p>\n<pre><code>小小总结一下，对于在数组中进行查找的问题，可以分为如下两种情况处理：\n1\\. 如果给定的数组有序，那么首先应该想到的是二分查找，时间复杂度为（logn）；\n2\\. 如果给定的数组无序，那么首先应该想到对数组进行排序，很多排序算法都能在O(nlogn)时间内对数组进行排序，然后再使用二分搜索，总的时间复杂度为O(nlogn)。\n</code></pre><p><strong>找出数组中唯一的重复元素</strong><br>    给定含有1001个元素的数组，其中存放了1-1000之内的整数，只有一个整数是重复的，其他均只出现一次，每个数组元素只能访问一次。请找出这个数。<br>分析<br>    方法一：当N为比较大的数时警惕溢出<br>    求出整个数组的和，再减去1-1000的和，得到的差即为重复的元素。</p>\n<pre><code>方法二：\n数组取值操作可以看作一个特殊的函数f: D-&gt;R，定义域为下标值0~1000，值域为1到1000，我们把f(i)叫做它的后继，i叫f(i)的前驱。0只有后继没有前驱，其他数字既有后继又有前驱，重复的那个数字有两个前驱，我们将利用这些特征。\n规律：从0开始画一个箭头指向它的后继，从它的后继继续指向后继的后继，这样，必然会有一个节点指向之前已经出现过的数，即为重复的数。\n即利用下标与单元中所存储的内容之间的特殊关系，进行遍历访问单元，一旦访问过的单元赋予一个标记，利用标记作为发现重复数字的关键。\n代码如下所示。\n</code></pre><p>`void FindRepeat(int array[], int length)<br>{<br>    int index = 0;<br>    while ( true )<br>    {<br>       if ( array[index]&lt;0 )<br>           break;<br>       array[index] <em>= -1; //访问过，变成相反数<br>       index=array[index]</em>(-1);</p>\n<pre><code>}\ncout&lt;&lt;&quot;The repeat number is &quot;&lt;&lt; -array[index] &lt;&lt;endl;\n</code></pre><p>}<code>方法三：\n    同样考虑下标与内容的关系，不过不用标记，而用两个速度不同的过程来访问。slow每次前进一步，fast每次前进两步，在有环结构中，总会相遇。\n    代码如下所示。</code>void FindRepeat(int array[], int length)<br>{<br>    int slow=fast= 0;<br>    while ( true )<br>    {<br>       slow = array[slow];<br>              fast = array[array[fast]];<br>              if( slow == fast )<br>                     break;<br>    }<br>    cout &lt;&lt; slow &lt;&lt; endl;<br>}<code>方法四：异或操作</code>void FindRepeat(int array[], int length)<br>{<br>    int result = 0;<br>    for(int i=1;i&lt;=1000;i++)<br>        result ^= i;<br>    for(int i=0;i&lt;=1000;i++)<br>        result ^= array[i];<br>    cout &lt;&lt; result &lt;&lt; endl;<br>}`</p>\n<p><strong>求找出出现奇数次的元素</strong><br>    给定一个含有n个元素的整型数组a，其中只有一个出现奇数次，找出这个元素。<br>分析<br>   因为对于任意一个数k，有k^k = 0，k^ 0 = k，所以将a中所有元素进行异或，那么个数为偶数的元素异或后都变成了0，只留下个数为奇数的那个元素。<br>代码<br>Code highlighting produced by Actipro CodeHighlighter (freeware)<br><a href=\"http://www.CodeHighlighter.com/--&gt;\" target=\"_blank\" rel=\"noopener\">http://www.CodeHighlighter.com/--&gt;</a><br>`int FindElementWithOddCount(int*a, int n)<br>{<br>        int r = a[0] ;</p>\n<pre><code>for (int i =1; i &lt; n; ++i)\n{\n        r ^= a[i] ;\n}\n\nreturn r ;\n</code></pre><p>}<code>对于上述题目，出现一个奇数次的数，这样比较好求。但对于下面的题目，该如何求解呢？\n    题目：\n    有N+2个数，N个数出现了偶数次，2个数出现了奇数次（这两个数不相等），问用O(1)的空间复杂度，找出这两个数，不需要知道具体位置，只需要知道这两个值。\n    求解方法如下：\n    假设这两个数为a和b，将数组中所有元素异或结果为x = a ^ b，判断x中位为1的位数（注：因为a != b，所以x不等于0，我们只需要知道某一个位为1的位数k，例如0010 1100，我们可以取k = 2,或3， 或者5），然后将x与数组中第k位为1的数进行异或，异或结果为就是a,b中一个，然后用x异或，就可以求出另外一个。\n    为什么呢？因为x总第k位为1表示a或b中有一个数的第k位也为1，假设为a，将x与数组中第k位为1的数进行异或时，也即将x与a外加其他第k位为1出现过的偶数次的数进行异或，化简即为x与a异或，结果就是b。\n    代码如下所示。</code>void getNum(int a[],int length)<br>{<br>    int s=0;//保存异或结果<br>    for(int i=0;i<length;i++) {=\"\" s=\"s^a[i];\" }=\"\" int=\"\" temp1=\"s;//临时保存异或结果\" temp2=\"s;//临时保存异或结果\" k=\"0;\" while(!(temp1&1))=\"\" 求位为1的位数=\"\">&gt;1;<br>        k++;<br>    }<br>    for(int i=0;i<length;i++) {=\"\" if((a[i]=\"\">&gt;k)&amp;1)//将s与数组中第k位为1的数异或<br>        {<br>            cout&lt;&lt;a[i]&lt;&lt;” “;<br>            s=s^a[i];<br>        }<br>    }<br>    cout&lt;&lt;s&lt;&lt;” “&lt;&lt;(s^temp2)&lt;&lt;endl;//(s^temp2)用来求另外一个数<br>}`</length;i++)></length;i++)></p>\n<p><strong>求数组中满足给定和的数对</strong><br>    给定两个含有n个元素的有序整型数组a和b，各有n个元素，求两个数组中满足给定和的数对，即对a中元素i和b中元素j，满足i + j = d(d已知)。<br>分析<br>   两个指针i和j分别指向数组的首尾，然后从两端同时向中间遍历，直到两个指针交叉。<br>代码<br>// 找出满足给定和的数对<br><code>void FixedSum(int* a, int* b, int n, int d)\n{\n    for (int i = 0, j = n - 1; i &lt; n &amp;&amp; j &gt;= 0)\n    {\n        if (a[i] + b[j] &lt; d)\n            ++i ;\n        else if (a[i] + b[j] == d)\n        {\n            cout &lt;&lt; a[i] &lt;&lt; &quot;, &quot; &lt;&lt; b[j] &lt;&lt; endl ;\n            ++i ;\n            --j ;\n        }\n        else // a[i] + b[j] &gt; d\n            --j ;\n    }\n}</code></p>\n<p><strong>求最大连续子段和</strong><br>   给定一个整型数组a，求出最大连续子段和，如果和为负数，则按 0计算，比如1， 2， -5， 6， 8，则输出6 + 8  = 14。<br>分析<br>   《编程珠玑》上的经典题目，不多说了。<br>代码<br>// 子数组的最大和<br><code>int Sum(int* a, int n)\n{\n    int curSum = 0;\n    int maxSum = 0;\n    for (int i = 0; i &lt; n; i++)\n    {\n        if (curSum + a[i] &lt; 0)\n            curSum = 0;\n        else\n        {\n            curSum += a[i] ;\n            maxSum = max(maxSum, curSum);\n        }\n    }\n    return maxSum;\n}</code><br><strong>求最大连续子段的乘积</strong><br>    给定一个整型数组a，求出最大连续子段的乘积，比如1， 2， -8， 12， 7则输出12<em>7 = 84。<br>分析<br>   与最大连续字段和类似，注意处理负数的情况。<br>代码<br>// 子数组的最大乘积<br>`int MaxProduct(int </em>a, int n)<br>{<br>    int maxProduct = 1; // max positive product at current position<br>    int minProduct = 1; // min negative product at current position<br>    int r = 1; // result, max multiplication totally</p>\n<pre><code>for (int i = 0; i &lt; n; i++)\n{\n    if (a[i] &gt; 0)\n    {\n        maxProduct *= a[i];\n        minProduct = min(minProduct * a[i], 1);\n    }\n    else if (a[i] == 0)\n    {\n        maxProduct = 1;\n        minProduct = 1;\n    }\n    else // a[i] &lt; 0\n    {\n        int temp = maxProduct;\n        maxProduct = max(minProduct * a[i], 1);\n        minProduct = temp * a[i];\n    }\n\n    r = max(r, maxProduct);\n}\n\nreturn r;\n</code></pre><p>}`</p>\n<p><strong>数组循环移位</strong><br>    将一个含有n个元素的数组向右循环移动k位，要求时间复杂度为O(n)，且只能使用两个额外的变量，这是在微软的编程之美上看到的。<br>分析<br>   最经典的两种做法：三次翻转、STL中的实现方法（这个看懂了，再补上）。<br>代码<br>// 将buffer中start和end之间的元素逆序<br><code>void Reverse( int buffer[], int start, int end )\n{\n    while ( start &lt; end )\n    {\n        int temp = buffer[ start ] ;\n        buffer[ start++ ] = buffer[ end ] ;\n        buffer[ end-- ] = temp ;\n    }\n}</code></p>\n<p>// 将含有n个元素的数组buffer右移k位<br>`void Shift( int buffer[], int n, int k )<br>{<br>    k %= n ;</p>\n<pre><code>Reverse( buffer, 0, n - k - 1) ;\nReverse( buffer, n - k, n - 1 ) ;\nReverse( buffer, 0, n - 1 ) ;\n</code></pre><p>}<br>`<br><strong>字符串逆转</strong><br>    给定一个含有n个元素的字符数组a，将其原地逆转。<br>分析<br>    用两个指针分别指向字符数组的首尾部，交换其对应的字符，然后两个指针分别向数组中央移动，直到交叉。<br>代码<br>    略</p>\n<p><strong>组合问题</strong><br>    给定一个含有n个元素的整型数组a，从中任取m个元素，求所有组合。比如下面的例子<br>    a = 1, 2, 3, 4, 5<br>    m = 3<br>    输出<br>    1 2 3, 1 2 4, 1 2 5, 1 3 4, 1 3 5, 1 4 5<br>    2 3 4, 2 3 5, 2 4 5<br>    3 4 5<br>分析<br>    典型的排列组合问题，首选回溯法，为了简化问题，将a中的n个元素的值分别设置为1到n。<br>代码<br>// n选m的所有组合<br>`int buffer[100] ;</p>\n<p>void PrintArray(int *a, int n)<br>{<br>    for (int i = 0; i &lt; n; ++i)<br>        cout &lt;&lt; a[i] &lt;&lt; “”;<br>    cout &lt;&lt; endl ;<br>}</p>\n<p>bool IsValid(int lastIndex, int value)<br>{<br>    for (int i = 0; i &lt; lastIndex; i++)<br>    {<br>        if (buffer[i] &gt;= value)<br>            return false;<br>    }<br>    return true;<br>}</p>\n<p>void Select(int t, int n, int m)<br>{<br>    if (t == m)<br>        PrintArray(buffer, m);<br>    else<br>    {<br>        for (int i = 1; i &lt;= n; i++)<br>        {<br>            buffer[t] = i;<br>            if (IsValid(t, i))<br>                Select(t + 1, n, m);<br>        }<br>    }<br>}<br><code>**合并两个数组**\n    给定含有n个元素的两个有序数组a和b。合并两个数组中的元素到整型数组c，要求去除重复元素并保持c有序。\n分析\n    利用合并排序的思想，两个指针i、j和k分别指向数组a、b和c，然后比较两个指针对应元素的大小，有以下三种情况：\n    1\\. a[i] &lt; b[j]，则c[k] = a[i];\n    2\\. a[i] == b[j], 则c[k]等于a[i]或b[j]即可；\n    3\\. a[i] &gt; b[j], 则c[k] = b[j];\n    重复以上过程，直到i或者j到达数组末尾，然后将剩下的元素直接copy到数组c中即可。\n代码\n// 合并两个有序数组</code>void Merge(int <em>a, int </em>b, int *c, int n)<br>{<br>    int i = 0 ;<br>    int j = 0 ;<br>    int k = 0 ;</p>\n<pre><code>while (i &lt; n &amp;&amp; j &lt; n)\n{\n    if (a[i] &lt; b[j])// 如果a的元素小，则插入a中元素到c\n    {\n        c[k++] = a[i] ;\n        ++i ;\n    }\n    else if (a[i] == b[j])// 如果a和b元素相等，则插入二者皆可，这里插入a\n    {\n        c[k++] = a[i] ;\n        ++i ;\n        ++j ;\n    }\n    else // a[i] &gt; b[j] // 如果b中元素小，则插入b中元素到c\n    {\n        c[k++] = b[j] ;\n        ++j ;\n    }\n}\n\nif (i == n) // 若a遍历完毕，处理b中剩下的元素\n{\n    for (int m = j; m &lt; n; ++m)\n        c[k++] = b[m] ;\n}\nelse//j == n, 若b遍历完毕，处理a中剩下的元素\n{\n    for (int m = i; m &lt; n; ++m)\n        c[k++] = a[m] ;\n}\n</code></pre><p>}`</p>\n<p><strong>重排问题</strong><br>    给定含有n个元素的整型数组a，其中包括0元素和非0元素，对数组进行排序，要求：<br>    1. 排序后所有0元素在前，所有非0元素在后，且非零元素排序前后相对位置不变<br>    2. 不能使用额外存储空间<br>    例子如下<br>    输入 0， 3， 0， 2， 1， 0， 0<br>    输出 0， 0， 0， 0， 3， 2， 1<br>分析<br>    此排序非传统意义上的排序，因为它要求排序前后非0元素相对位置不变，或者叫整理更恰当。可以从后向前遍历整个数组，遇到某个位置i上的元素是非0元素时，如果a[k]为0，则将a[i]赋值给a[k]，a[k]赋值为0。实际上，i是非0元素的下标，而k是0元素的下标。<br>代码<br><code>void Arrange(int* a, int n)\n{\n    int k = n -1 ;\n    for (int i = n -1; i &gt;=0; --i)\n    {\n        if (a[i] !=0)\n        {\n            if (a[k] ==0)\n            {\n                a[k] = a[i] ;\n                a[i] =0 ;\n            }\n            --k ;\n        }\n    }\n}</code></p>\n<p><strong>找出绝对值最小的元素</strong><br>    给定一个有序整数序列（非递减序），可能包含负数，找出其中绝对值最小的元素，比如给定序列 -5, -3, -1, 2, 8 则返回1。<br>分析<br>    由于给定序列是有序的，而这又是搜索问题，所以首先想到二分搜索法，只不过这个二分法比普通的二分法稍微麻烦点，可以分为下面几种情况<br>    1. 如果给定的序列中所有的数都是正数，那么数组的第一个元素即是结果。<br>    2. 如果给定的序列中所有的数都是负数，那么数组的最后一个元素即是结果。<br>    3. 如果给定的序列中既有正数又有负数，那么绝对值得最小值一定出现在正数和负数的连接处。<br>    为什么？因为对于负数序列来说，右侧的数字比左侧的数字绝对值小，如上面的-5, -3, -1, 而对于整数来说，左边的数字绝对值小，比如上面的2, 8，将这个思想用于二分搜索，可先判断中间元素和两侧元素的符号，然后根据符号决定搜索区间，逐步缩小搜索区间，直到只剩下两个元素。<br>代码<br>    单独设置一个函数用来判断两个整数的符号是否相同<br>// 找出一个非递减序整数序列中绝对值最小的数<br>`int MinimumAbsoluteValue(int* a, int n)<br>{<br>    // Only one number in array<br>    if (n ==1)<br>    {<br>        return a[0] ;<br>    }</p>\n<pre><code>// All numbers in array have the same sign\nif (SameSign(a[0], a[n -1]))\n{\n    return a[0] &gt;=0? a[0] : a[n -1] ;\n}\n\n// Binary search\nint l =0 ;\nint r = n -1 ;\n\nwhile(l &lt; r)\n{\n    if (l +1== r)\n    {\n        return abs(a[l]) &lt; abs(a[r]) ? a[l] : a[r] ;\n    }\n\n    int m = (l + r) /2 ;\n\n    if (SameSign(a[m], a[r]))\n    {\n        r = m -1;\n        continue;\n    }\n    if (SameSign(a[l], a[m]))\n    {\n        l = m +1 ;\n        continue;\n    }\n}\n</code></pre><p>}<code>上面的代码是有问题的：查找数组a[4]={-2, -1, 3, 4}返回的是3，好像是有点问题。循环中保持的不变式应该是a[l]&lt;0 &amp;&amp; a[r]&gt;0,所以比较中间元a[m]与a[l],a[r]的符号后，要保持不变式，就应该是l=m或者r=。现修正如下。\n// 找出一个非递减序整数序列中绝对值最小的数</code>int MinimumAbsoluteValue(int* a, int n)<br>{<br>    // Only one number in array<br>    if (n ==1)<br>    {<br>        return a[0] ;<br>    }</p>\n<pre><code>// All numbers in array have the same sign\nif (SameSign(a[0], a[n -1]))\n{\n    return a[0] &gt;=0? a[0] : a[n -1] ;\n}\n\n// Binary search\nint l =0 ;\nint r = n -1 ;\n\nwhile(l &lt; r)\n{\n    if (l + 1 == r)\n    {\n        return abs(a[l]) &lt; abs(a[r]) ? a[l] : a[r] ;\n    }\n\n    int m = (l + r) /2 ;\n\n    if (SameSign(a[m], a[r]))\n    {\n        r = m;\n        continue;\n    }\n    if (SameSign(a[l], a[m]))\n    {\n        l = m ;\n        continue;\n    }\n}\n</code></pre><p>}<br>`</p>\n<p>from : <a href=\"http://blog.chinaunix.net/uid-26548237-id-3753737.html\" target=\"_blank\" rel=\"noopener\">http://blog.chinaunix.net/uid-26548237-id-3753737.html</a></p>"},{"title":"国内 Composer 镜像收集","id":"2469","date":"2015-08-26T08:35:38.000Z","_content":"\n方法1：全局\n`composer config -g repositories.packagist composer http://packagist.phpcomposer.com\n`\n\n方法2：单个project\n在composer.json 里加上 \n\n`    \"repositories\": [\n        {\"type\": \"composer\", \"url\": \"http://packagist.phpcomposer.com\"},\n        {\"packagist\": false}\n    ]\n`\n\nhttp://packagist.phpcomposer.com\nhttp://composer-proxy.jp/proxy/packagist\nhttp://comproxy.cn/repo/packagist\nhttp://packagist.cn\nhttp://pkg.uselaravel.com/repo/packagist","source":"_posts/e5-9b-bd-e5-86-85-composer-e9-95-9c-e5-83-8f-e6-94-b6-e9-9b-86.md","raw":"---\ntitle: 国内 Composer 镜像收集\ntags:\n  - composer\nid: 2469\ncategories:\n  - PHP\ndate: 2015-08-26 16:35:38\n---\n\n方法1：全局\n`composer config -g repositories.packagist composer http://packagist.phpcomposer.com\n`\n\n方法2：单个project\n在composer.json 里加上 \n\n`    \"repositories\": [\n        {\"type\": \"composer\", \"url\": \"http://packagist.phpcomposer.com\"},\n        {\"packagist\": false}\n    ]\n`\n\nhttp://packagist.phpcomposer.com\nhttp://composer-proxy.jp/proxy/packagist\nhttp://comproxy.cn/repo/packagist\nhttp://packagist.cn\nhttp://pkg.uselaravel.com/repo/packagist","slug":"e5-9b-bd-e5-86-85-composer-e9-95-9c-e5-83-8f-e6-94-b6-e9-9b-86","published":1,"updated":"2018-01-13T05:07:00.459Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjccw7x8i0025aqcr9hrj4i9k","content":"<p>方法1：全局<br><code>composer config -g repositories.packagist composer http://packagist.phpcomposer.com</code></p>\n<p>方法2：单个project<br>在composer.json 里加上 </p>\n<p><code>&quot;repositories&quot;: [\n        {&quot;type&quot;: &quot;composer&quot;, &quot;url&quot;: &quot;http://packagist.phpcomposer.com&quot;},\n        {&quot;packagist&quot;: false}\n    ]</code></p>\n<p><a href=\"http://packagist.phpcomposer.com\" target=\"_blank\" rel=\"noopener\">http://packagist.phpcomposer.com</a><br><a href=\"http://composer-proxy.jp/proxy/packagist\" target=\"_blank\" rel=\"noopener\">http://composer-proxy.jp/proxy/packagist</a><br><a href=\"http://comproxy.cn/repo/packagist\" target=\"_blank\" rel=\"noopener\">http://comproxy.cn/repo/packagist</a><br><a href=\"http://packagist.cn\" target=\"_blank\" rel=\"noopener\">http://packagist.cn</a><br><a href=\"http://pkg.uselaravel.com/repo/packagist\" target=\"_blank\" rel=\"noopener\">http://pkg.uselaravel.com/repo/packagist</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>方法1：全局<br><code>composer config -g repositories.packagist composer http://packagist.phpcomposer.com</code></p>\n<p>方法2：单个project<br>在composer.json 里加上 </p>\n<p><code>&quot;repositories&quot;: [\n        {&quot;type&quot;: &quot;composer&quot;, &quot;url&quot;: &quot;http://packagist.phpcomposer.com&quot;},\n        {&quot;packagist&quot;: false}\n    ]</code></p>\n<p><a href=\"http://packagist.phpcomposer.com\" target=\"_blank\" rel=\"noopener\">http://packagist.phpcomposer.com</a><br><a href=\"http://composer-proxy.jp/proxy/packagist\" target=\"_blank\" rel=\"noopener\">http://composer-proxy.jp/proxy/packagist</a><br><a href=\"http://comproxy.cn/repo/packagist\" target=\"_blank\" rel=\"noopener\">http://comproxy.cn/repo/packagist</a><br><a href=\"http://packagist.cn\" target=\"_blank\" rel=\"noopener\">http://packagist.cn</a><br><a href=\"http://pkg.uselaravel.com/repo/packagist\" target=\"_blank\" rel=\"noopener\">http://pkg.uselaravel.com/repo/packagist</a></p>\n"},{"title":"在ui->widget上绘制带坐标轴的图像","id":"973","date":"2012-04-07T00:05:15.000Z","_content":"\n=====================================Widget.h=====================================\n\n#ifndef WIDGET_H\n\n#define WIDGET_H\n\n#include <qwidget>\n\nnamespace Ui {\n\n    class Widget;\n\n}\n\nclass Widget : public QWidget {\n\n    Q_OBJECT\n\npublic:\n\n    Widget(QWidget *parent = 0);\n\n    ~Widget();\n\nprotected:\n\n    virtual void changeEvent(QEvent *e);\n\n    virtual bool eventFilter(QObject *watched, QEvent *e);\n\n    void paintOnWidget(QWidget *w);\n\nprivate:\n\n    Ui::Widget *ui;\n\n};\n\n#endif // WIDGET_H\n<!--more-->=====================================Widget.cpp=====================================\n\n#include \"Widget.h\"\n\n#include \"ui_Widget.h\"\n\n#include <qtGui/QPainter>\n\nWidget::Widget(QWidget *parent) : QWidget(parent), ui(new Ui::Widget) {\n\n    ui->setupUi(this);\n\n    ui->widget->installEventFilter(this);\n\n}\n\nWidget::~Widget() {\n\n    delete ui;\n\n}\n\nvoid Widget::changeEvent(QEvent *e) {\n\n    QWidget::changeEvent(e);\n\n    switch (e->type()) {\n\n    case QEvent::LanguageChange:\n\n        ui->retranslateUi(this);\n\n        break;\n\n    default:\n\n        break;\n\n    }\n\n}\n\nbool Widget::eventFilter(QObject *watched, QEvent *e) {\n\n    if (watched == ui->widget) {\n\n        if (e->type() == QEvent::Paint) {\n\n            paintOnWidget(ui->widget);\n\n            return true;\n\n        }\n\n    }\n\n    return QWidget::eventFilter(watched, e);\n\n}\n\nvoid Widget::paintOnWidget(QWidget *w) {\n\n    QPainter painter(w);\n\n    QFontMetrics metrics = painter.fontMetrics();\n\n    int textHeight = metrics.ascent() + metrics.descent();\n\n    int leftWidth = metrics.width(tr(\"9000\")) + 5;\n\n    int rightWidth = metrics.width(tr(\"(日)\"));\n\n    int width = w->size().width() - leftWidth - rightWidth;\n\n    int height = w->size().height() - 3 * textHeight;\n\n    // 绘制外框\n\n    painter.drawRect(0, 0, w->size().width() -1, w->size().height() - 1);\n\n    //　移动坐标系\n\n    //painter.translate(inset * 2, ui->yearWidget->size().height() - inset);\n\n    painter.translate(leftWidth, 1.75 * textHeight + height);\n\n    int totalCount = 9000; // 默认每年收入9000件衣服\n\n    int count = 10;        // 分成10成\n\n    float deltaX = width / 12.0f;         // x坐标上每分的宽度\n\n    float deltaY = (float)height / count; // y坐标上每分的宽度\n\n    // 画横坐标\n\n    painter.drawLine(0, 0, width, 0);\n\n    for (int i = 1; i <= 12; ++i) {\n\n        QString month = tr(\"%1月\").arg(i);\n\n        int stringWidth = metrics.width(month);\n\n        // 绘制坐标刻度\n\n        painter.drawLine(deltaX * i, 0, deltaX * i, 4);\n\n        // 绘制坐标处的月\n\n        int monthX = deltaX * (i - 1) + ((deltaX - stringWidth) / 2);\n\n        painter.drawText(monthX, textHeight, month);\n\n    }\n\n    // 画纵坐标\n\n    painter.drawLine(0, 0, 0, -height);\n\n    painter.drawText(-metrics.width(tr(\"(件)\")),\n\n                     -(deltaY * count + textHeight / 2 + metrics.descent()),\n\n                     tr(\"(件)\"));\n\n    for (int i = 1; i <= count; ++i) {\n\n        QString value = QString(\"%1\").arg(i * totalCount / count);\n\n        int stringWidth = metrics.width(value);\n\n        // 绘制坐标刻度\n\n        painter.drawLine(-4, -i * deltaY, 0, -i * deltaY);\n\n        // 绘制坐标值\n\n        //painter.drawText(-stringWidth - 4, -i * deltaY + stringHeight / 2, value);\n\n        painter.drawText(-stringWidth - 4, -(deltaY * i + textHeight / 2 - metrics.ascent()), value);\n\n    }\n\n    //    // 绘制每个月收到的服饰\n\n    //    painter.setBrush(Qt::BDiagPattern);\n\n    //    for (int i = 0; i < yearList.size(); ++i) {\n\n    //        painter.setPen(Qt::black);\n\n    //        int fineryCount = yearList.at(i); // 第i + 1个月收到的服饰件数\n\n    //        int h = fineryCount / (float)totalCount * height;\n\n    //        painter.drawRect(deltaX * i + 2, 0, deltaX - 4, -h);\n\n    //\n\n    //        // 绘制收到的服饰件数\n\n    //        QString fineryString = QString(\"%1\").arg(fineryCount);\n\n    //        int stringWidth = metrics.width(fineryString);\n\n    //\n\n    //        if (h > height) {\n\n    //            h = height;\n\n    //        }\n\n    //\n\n    //        painter.setPen(Qt::red);\n\n    //        //painter.drawText(deltaX * i + (deltaX - stringWidth) / 2, -(h + metrics.descent()), fineryString);\n\n    //    }\n\n}","source":"_posts/e5-9c-a8ui-widget-e4-b8-8a-e7-bb-98-e5-88-b6-e5-b8-a6-e5-9d-90-e6-a0-87-e8-bd-b4-e7-9a-84-e5-9b-be-e5-83-8f.md","raw":"---\ntitle: 在ui->widget上绘制带坐标轴的图像\nid: 973\ncategories:\n  - Qt\ndate: 2012-04-07 08:05:15\ntags:\n---\n\n=====================================Widget.h=====================================\n\n#ifndef WIDGET_H\n\n#define WIDGET_H\n\n#include <qwidget>\n\nnamespace Ui {\n\n    class Widget;\n\n}\n\nclass Widget : public QWidget {\n\n    Q_OBJECT\n\npublic:\n\n    Widget(QWidget *parent = 0);\n\n    ~Widget();\n\nprotected:\n\n    virtual void changeEvent(QEvent *e);\n\n    virtual bool eventFilter(QObject *watched, QEvent *e);\n\n    void paintOnWidget(QWidget *w);\n\nprivate:\n\n    Ui::Widget *ui;\n\n};\n\n#endif // WIDGET_H\n<!--more-->=====================================Widget.cpp=====================================\n\n#include \"Widget.h\"\n\n#include \"ui_Widget.h\"\n\n#include <qtGui/QPainter>\n\nWidget::Widget(QWidget *parent) : QWidget(parent), ui(new Ui::Widget) {\n\n    ui->setupUi(this);\n\n    ui->widget->installEventFilter(this);\n\n}\n\nWidget::~Widget() {\n\n    delete ui;\n\n}\n\nvoid Widget::changeEvent(QEvent *e) {\n\n    QWidget::changeEvent(e);\n\n    switch (e->type()) {\n\n    case QEvent::LanguageChange:\n\n        ui->retranslateUi(this);\n\n        break;\n\n    default:\n\n        break;\n\n    }\n\n}\n\nbool Widget::eventFilter(QObject *watched, QEvent *e) {\n\n    if (watched == ui->widget) {\n\n        if (e->type() == QEvent::Paint) {\n\n            paintOnWidget(ui->widget);\n\n            return true;\n\n        }\n\n    }\n\n    return QWidget::eventFilter(watched, e);\n\n}\n\nvoid Widget::paintOnWidget(QWidget *w) {\n\n    QPainter painter(w);\n\n    QFontMetrics metrics = painter.fontMetrics();\n\n    int textHeight = metrics.ascent() + metrics.descent();\n\n    int leftWidth = metrics.width(tr(\"9000\")) + 5;\n\n    int rightWidth = metrics.width(tr(\"(日)\"));\n\n    int width = w->size().width() - leftWidth - rightWidth;\n\n    int height = w->size().height() - 3 * textHeight;\n\n    // 绘制外框\n\n    painter.drawRect(0, 0, w->size().width() -1, w->size().height() - 1);\n\n    //　移动坐标系\n\n    //painter.translate(inset * 2, ui->yearWidget->size().height() - inset);\n\n    painter.translate(leftWidth, 1.75 * textHeight + height);\n\n    int totalCount = 9000; // 默认每年收入9000件衣服\n\n    int count = 10;        // 分成10成\n\n    float deltaX = width / 12.0f;         // x坐标上每分的宽度\n\n    float deltaY = (float)height / count; // y坐标上每分的宽度\n\n    // 画横坐标\n\n    painter.drawLine(0, 0, width, 0);\n\n    for (int i = 1; i <= 12; ++i) {\n\n        QString month = tr(\"%1月\").arg(i);\n\n        int stringWidth = metrics.width(month);\n\n        // 绘制坐标刻度\n\n        painter.drawLine(deltaX * i, 0, deltaX * i, 4);\n\n        // 绘制坐标处的月\n\n        int monthX = deltaX * (i - 1) + ((deltaX - stringWidth) / 2);\n\n        painter.drawText(monthX, textHeight, month);\n\n    }\n\n    // 画纵坐标\n\n    painter.drawLine(0, 0, 0, -height);\n\n    painter.drawText(-metrics.width(tr(\"(件)\")),\n\n                     -(deltaY * count + textHeight / 2 + metrics.descent()),\n\n                     tr(\"(件)\"));\n\n    for (int i = 1; i <= count; ++i) {\n\n        QString value = QString(\"%1\").arg(i * totalCount / count);\n\n        int stringWidth = metrics.width(value);\n\n        // 绘制坐标刻度\n\n        painter.drawLine(-4, -i * deltaY, 0, -i * deltaY);\n\n        // 绘制坐标值\n\n        //painter.drawText(-stringWidth - 4, -i * deltaY + stringHeight / 2, value);\n\n        painter.drawText(-stringWidth - 4, -(deltaY * i + textHeight / 2 - metrics.ascent()), value);\n\n    }\n\n    //    // 绘制每个月收到的服饰\n\n    //    painter.setBrush(Qt::BDiagPattern);\n\n    //    for (int i = 0; i < yearList.size(); ++i) {\n\n    //        painter.setPen(Qt::black);\n\n    //        int fineryCount = yearList.at(i); // 第i + 1个月收到的服饰件数\n\n    //        int h = fineryCount / (float)totalCount * height;\n\n    //        painter.drawRect(deltaX * i + 2, 0, deltaX - 4, -h);\n\n    //\n\n    //        // 绘制收到的服饰件数\n\n    //        QString fineryString = QString(\"%1\").arg(fineryCount);\n\n    //        int stringWidth = metrics.width(fineryString);\n\n    //\n\n    //        if (h > height) {\n\n    //            h = height;\n\n    //        }\n\n    //\n\n    //        painter.setPen(Qt::red);\n\n    //        //painter.drawText(deltaX * i + (deltaX - stringWidth) / 2, -(h + metrics.descent()), fineryString);\n\n    //    }\n\n}","slug":"e5-9c-a8ui-widget-e4-b8-8a-e7-bb-98-e5-88-b6-e5-b8-a6-e5-9d-90-e6-a0-87-e8-bd-b4-e7-9a-84-e5-9b-be-e5-83-8f","published":1,"updated":"2018-01-13T05:07:00.473Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjccw7x8l0029aqcr9ckf7vmb","content":"<p>=====================================Widget.h=====================================</p>\n<p>#ifndef WIDGET_H</p>\n<p>#define WIDGET_H</p>\n<p>#include <qwidget></qwidget></p>\n<p>namespace Ui {</p>\n<pre><code>class Widget;\n</code></pre><p>}</p>\n<p>class Widget : public QWidget {</p>\n<pre><code>Q_OBJECT\n</code></pre><p>public:</p>\n<pre><code>Widget(QWidget *parent = 0);\n\n~Widget();\n</code></pre><p>protected:</p>\n<pre><code>virtual void changeEvent(QEvent *e);\n\nvirtual bool eventFilter(QObject *watched, QEvent *e);\n\nvoid paintOnWidget(QWidget *w);\n</code></pre><p>private:</p>\n<pre><code>Ui::Widget *ui;\n</code></pre><p>};</p>\n<p>#endif // WIDGET_H<br><a id=\"more\"></a>=====================================Widget.cpp=====================================</p>\n<p>#include “Widget.h”</p>\n<p>#include “ui_Widget.h”</p>\n<p>#include <qtgui qpainter=\"\"></qtgui></p>\n<p>Widget::Widget(QWidget *parent) : QWidget(parent), ui(new Ui::Widget) {</p>\n<pre><code>ui-&gt;setupUi(this);\n\nui-&gt;widget-&gt;installEventFilter(this);\n</code></pre><p>}</p>\n<p>Widget::~Widget() {</p>\n<pre><code>delete ui;\n</code></pre><p>}</p>\n<p>void Widget::changeEvent(QEvent *e) {</p>\n<pre><code>QWidget::changeEvent(e);\n\nswitch (e-&gt;type()) {\n\ncase QEvent::LanguageChange:\n\n    ui-&gt;retranslateUi(this);\n\n    break;\n\ndefault:\n\n    break;\n\n}\n</code></pre><p>}</p>\n<p>bool Widget::eventFilter(QObject <em>watched, QEvent </em>e) {</p>\n<pre><code>if (watched == ui-&gt;widget) {\n\n    if (e-&gt;type() == QEvent::Paint) {\n\n        paintOnWidget(ui-&gt;widget);\n\n        return true;\n\n    }\n\n}\n\nreturn QWidget::eventFilter(watched, e);\n</code></pre><p>}</p>\n<p>void Widget::paintOnWidget(QWidget *w) {</p>\n<pre><code>QPainter painter(w);\n\nQFontMetrics metrics = painter.fontMetrics();\n\nint textHeight = metrics.ascent() + metrics.descent();\n\nint leftWidth = metrics.width(tr(&quot;9000&quot;)) + 5;\n\nint rightWidth = metrics.width(tr(&quot;(日)&quot;));\n\nint width = w-&gt;size().width() - leftWidth - rightWidth;\n\nint height = w-&gt;size().height() - 3 * textHeight;\n\n// 绘制外框\n\npainter.drawRect(0, 0, w-&gt;size().width() -1, w-&gt;size().height() - 1);\n\n//　移动坐标系\n\n//painter.translate(inset * 2, ui-&gt;yearWidget-&gt;size().height() - inset);\n\npainter.translate(leftWidth, 1.75 * textHeight + height);\n\nint totalCount = 9000; // 默认每年收入9000件衣服\n\nint count = 10;        // 分成10成\n\nfloat deltaX = width / 12.0f;         // x坐标上每分的宽度\n\nfloat deltaY = (float)height / count; // y坐标上每分的宽度\n\n// 画横坐标\n\npainter.drawLine(0, 0, width, 0);\n\nfor (int i = 1; i &lt;= 12; ++i) {\n\n    QString month = tr(&quot;%1月&quot;).arg(i);\n\n    int stringWidth = metrics.width(month);\n\n    // 绘制坐标刻度\n\n    painter.drawLine(deltaX * i, 0, deltaX * i, 4);\n\n    // 绘制坐标处的月\n\n    int monthX = deltaX * (i - 1) + ((deltaX - stringWidth) / 2);\n\n    painter.drawText(monthX, textHeight, month);\n\n}\n\n// 画纵坐标\n\npainter.drawLine(0, 0, 0, -height);\n\npainter.drawText(-metrics.width(tr(&quot;(件)&quot;)),\n\n                 -(deltaY * count + textHeight / 2 + metrics.descent()),\n\n                 tr(&quot;(件)&quot;));\n\nfor (int i = 1; i &lt;= count; ++i) {\n\n    QString value = QString(&quot;%1&quot;).arg(i * totalCount / count);\n\n    int stringWidth = metrics.width(value);\n\n    // 绘制坐标刻度\n\n    painter.drawLine(-4, -i * deltaY, 0, -i * deltaY);\n\n    // 绘制坐标值\n\n    //painter.drawText(-stringWidth - 4, -i * deltaY + stringHeight / 2, value);\n\n    painter.drawText(-stringWidth - 4, -(deltaY * i + textHeight / 2 - metrics.ascent()), value);\n\n}\n\n//    // 绘制每个月收到的服饰\n\n//    painter.setBrush(Qt::BDiagPattern);\n\n//    for (int i = 0; i &lt; yearList.size(); ++i) {\n\n//        painter.setPen(Qt::black);\n\n//        int fineryCount = yearList.at(i); // 第i + 1个月收到的服饰件数\n\n//        int h = fineryCount / (float)totalCount * height;\n\n//        painter.drawRect(deltaX * i + 2, 0, deltaX - 4, -h);\n\n//\n\n//        // 绘制收到的服饰件数\n\n//        QString fineryString = QString(&quot;%1&quot;).arg(fineryCount);\n\n//        int stringWidth = metrics.width(fineryString);\n\n//\n\n//        if (h &gt; height) {\n\n//            h = height;\n\n//        }\n\n//\n\n//        painter.setPen(Qt::red);\n\n//        //painter.drawText(deltaX * i + (deltaX - stringWidth) / 2, -(h + metrics.descent()), fineryString);\n\n//    }\n</code></pre><p>}</p>\n","site":{"data":{}},"excerpt":"<p>=====================================Widget.h=====================================</p>\n<p>#ifndef WIDGET_H</p>\n<p>#define WIDGET_H</p>\n<p>#include <qwidget></qwidget></p>\n<p>namespace Ui {</p>\n<pre><code>class Widget;\n</code></pre><p>}</p>\n<p>class Widget : public QWidget {</p>\n<pre><code>Q_OBJECT\n</code></pre><p>public:</p>\n<pre><code>Widget(QWidget *parent = 0);\n\n~Widget();\n</code></pre><p>protected:</p>\n<pre><code>virtual void changeEvent(QEvent *e);\n\nvirtual bool eventFilter(QObject *watched, QEvent *e);\n\nvoid paintOnWidget(QWidget *w);\n</code></pre><p>private:</p>\n<pre><code>Ui::Widget *ui;\n</code></pre><p>};</p>\n<p>#endif // WIDGET_H<br>","more":"=====================================Widget.cpp=====================================</p>\n<p>#include “Widget.h”</p>\n<p>#include “ui_Widget.h”</p>\n<p>#include <qtgui qpainter=\"\"></qtgui></p>\n<p>Widget::Widget(QWidget *parent) : QWidget(parent), ui(new Ui::Widget) {</p>\n<pre><code>ui-&gt;setupUi(this);\n\nui-&gt;widget-&gt;installEventFilter(this);\n</code></pre><p>}</p>\n<p>Widget::~Widget() {</p>\n<pre><code>delete ui;\n</code></pre><p>}</p>\n<p>void Widget::changeEvent(QEvent *e) {</p>\n<pre><code>QWidget::changeEvent(e);\n\nswitch (e-&gt;type()) {\n\ncase QEvent::LanguageChange:\n\n    ui-&gt;retranslateUi(this);\n\n    break;\n\ndefault:\n\n    break;\n\n}\n</code></pre><p>}</p>\n<p>bool Widget::eventFilter(QObject <em>watched, QEvent </em>e) {</p>\n<pre><code>if (watched == ui-&gt;widget) {\n\n    if (e-&gt;type() == QEvent::Paint) {\n\n        paintOnWidget(ui-&gt;widget);\n\n        return true;\n\n    }\n\n}\n\nreturn QWidget::eventFilter(watched, e);\n</code></pre><p>}</p>\n<p>void Widget::paintOnWidget(QWidget *w) {</p>\n<pre><code>QPainter painter(w);\n\nQFontMetrics metrics = painter.fontMetrics();\n\nint textHeight = metrics.ascent() + metrics.descent();\n\nint leftWidth = metrics.width(tr(&quot;9000&quot;)) + 5;\n\nint rightWidth = metrics.width(tr(&quot;(日)&quot;));\n\nint width = w-&gt;size().width() - leftWidth - rightWidth;\n\nint height = w-&gt;size().height() - 3 * textHeight;\n\n// 绘制外框\n\npainter.drawRect(0, 0, w-&gt;size().width() -1, w-&gt;size().height() - 1);\n\n//　移动坐标系\n\n//painter.translate(inset * 2, ui-&gt;yearWidget-&gt;size().height() - inset);\n\npainter.translate(leftWidth, 1.75 * textHeight + height);\n\nint totalCount = 9000; // 默认每年收入9000件衣服\n\nint count = 10;        // 分成10成\n\nfloat deltaX = width / 12.0f;         // x坐标上每分的宽度\n\nfloat deltaY = (float)height / count; // y坐标上每分的宽度\n\n// 画横坐标\n\npainter.drawLine(0, 0, width, 0);\n\nfor (int i = 1; i &lt;= 12; ++i) {\n\n    QString month = tr(&quot;%1月&quot;).arg(i);\n\n    int stringWidth = metrics.width(month);\n\n    // 绘制坐标刻度\n\n    painter.drawLine(deltaX * i, 0, deltaX * i, 4);\n\n    // 绘制坐标处的月\n\n    int monthX = deltaX * (i - 1) + ((deltaX - stringWidth) / 2);\n\n    painter.drawText(monthX, textHeight, month);\n\n}\n\n// 画纵坐标\n\npainter.drawLine(0, 0, 0, -height);\n\npainter.drawText(-metrics.width(tr(&quot;(件)&quot;)),\n\n                 -(deltaY * count + textHeight / 2 + metrics.descent()),\n\n                 tr(&quot;(件)&quot;));\n\nfor (int i = 1; i &lt;= count; ++i) {\n\n    QString value = QString(&quot;%1&quot;).arg(i * totalCount / count);\n\n    int stringWidth = metrics.width(value);\n\n    // 绘制坐标刻度\n\n    painter.drawLine(-4, -i * deltaY, 0, -i * deltaY);\n\n    // 绘制坐标值\n\n    //painter.drawText(-stringWidth - 4, -i * deltaY + stringHeight / 2, value);\n\n    painter.drawText(-stringWidth - 4, -(deltaY * i + textHeight / 2 - metrics.ascent()), value);\n\n}\n\n//    // 绘制每个月收到的服饰\n\n//    painter.setBrush(Qt::BDiagPattern);\n\n//    for (int i = 0; i &lt; yearList.size(); ++i) {\n\n//        painter.setPen(Qt::black);\n\n//        int fineryCount = yearList.at(i); // 第i + 1个月收到的服饰件数\n\n//        int h = fineryCount / (float)totalCount * height;\n\n//        painter.drawRect(deltaX * i + 2, 0, deltaX - 4, -h);\n\n//\n\n//        // 绘制收到的服饰件数\n\n//        QString fineryString = QString(&quot;%1&quot;).arg(fineryCount);\n\n//        int stringWidth = metrics.width(fineryString);\n\n//\n\n//        if (h &gt; height) {\n\n//            h = height;\n\n//        }\n\n//\n\n//        painter.setPen(Qt::red);\n\n//        //painter.drawText(deltaX * i + (deltaX - stringWidth) / 2, -(h + metrics.descent()), fineryString);\n\n//    }\n</code></pre><p>}</p>"},{"title":"安装MySQL-python：EnvironmentError: mysql_config not found 解决方法及源码安装  ","id":"1663","date":"2014-04-10T01:08:26.000Z","_content":"\n这个问题通常有两种，我遇到的是第二种\n1.依赖\n` apt-get install libmysqld-dev\n yum install python-devel\n yum install mysql-devel`\n2.配置文件有问题\n执行  find / -name mysql_config 在/usr/bin/下找到了这个文件\n修改MySQL-python-1.2.3目录下的site.cfg文件\n去掉mysql_config=XXX这行的注释，并改成mysql_config=/usr/bin/mysql_config （就是刚才find找到的路径）\n再执行\n`python setup.py build\npython setup.py install`\n进行安装。\n也可以用\n直接在压缩包里进行修改site.cfg\n再\n`easy_install ./MySQL-python-1.2.3.zip`","source":"_posts/e5-ae-89-e8-a3-85mysql-python-ef-bc-9aenvironmenterror-mysql-config-not-found-e8-a7-a3-e5-86-b3-e6-96-b9-e6-b3-95.md","raw":"---\ntitle: '安装MySQL-python：EnvironmentError: mysql_config not found 解决方法及源码安装  '\ntags:\n  - MySQL\n  - Python\nid: 1663\ncategories:\n  - MySQL\ndate: 2014-04-10 09:08:26\n---\n\n这个问题通常有两种，我遇到的是第二种\n1.依赖\n` apt-get install libmysqld-dev\n yum install python-devel\n yum install mysql-devel`\n2.配置文件有问题\n执行  find / -name mysql_config 在/usr/bin/下找到了这个文件\n修改MySQL-python-1.2.3目录下的site.cfg文件\n去掉mysql_config=XXX这行的注释，并改成mysql_config=/usr/bin/mysql_config （就是刚才find找到的路径）\n再执行\n`python setup.py build\npython setup.py install`\n进行安装。\n也可以用\n直接在压缩包里进行修改site.cfg\n再\n`easy_install ./MySQL-python-1.2.3.zip`","slug":"e5-ae-89-e8-a3-85mysql-python-ef-bc-9aenvironmenterror-mysql-config-not-found-e8-a7-a3-e5-86-b3-e6-96-b9-e6-b3-95","published":1,"updated":"2018-01-13T05:07:00.480Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjccw7x8o002caqcr08uuijzl","content":"<p>这个问题通常有两种，我遇到的是第二种<br>1.依赖<br><code>apt-get install libmysqld-dev\n yum install python-devel\n yum install mysql-devel</code><br>2.配置文件有问题<br>执行  find / -name mysql_config 在/usr/bin/下找到了这个文件<br>修改MySQL-python-1.2.3目录下的site.cfg文件<br>去掉mysql_config=XXX这行的注释，并改成mysql_config=/usr/bin/mysql_config （就是刚才find找到的路径）<br>再执行<br><code>python setup.py build\npython setup.py install</code><br>进行安装。<br>也可以用<br>直接在压缩包里进行修改site.cfg<br>再<br><code>easy_install ./MySQL-python-1.2.3.zip</code></p>\n","site":{"data":{}},"excerpt":"","more":"<p>这个问题通常有两种，我遇到的是第二种<br>1.依赖<br><code>apt-get install libmysqld-dev\n yum install python-devel\n yum install mysql-devel</code><br>2.配置文件有问题<br>执行  find / -name mysql_config 在/usr/bin/下找到了这个文件<br>修改MySQL-python-1.2.3目录下的site.cfg文件<br>去掉mysql_config=XXX这行的注释，并改成mysql_config=/usr/bin/mysql_config （就是刚才find找到的路径）<br>再执行<br><code>python setup.py build\npython setup.py install</code><br>进行安装。<br>也可以用<br>直接在压缩包里进行修改site.cfg<br>再<br><code>easy_install ./MySQL-python-1.2.3.zip</code></p>\n"},{"title":"完美解决 win8.1 & win8 amd显卡无法调亮度","id":"1159","date":"2013-10-08T02:48:40.000Z","_content":"\n1：禁用服务\"Sensor Monitoring Service\"\n2：windows+R键打开“运行”，输入“regedit\" ,进入注册表\n3：搜索 \"KMD_EnableBrightnessInterface2\"，找到后将值“1”改为“0”，找到一处后按F3再找下一处，一共有5，6个\n4：重启\n\nWindows Registry Editor Version 5.00\n[HKEY_LOCAL_MACHINESYSTEMControlSet001ControlClass{4d36e968-e325-11ce-bfc1-08002be10318}\u0000000]\n\"KMD_EnableBrightnessInterface2\"=dword:00000000\n[HKEY_LOCAL_MACHINESYSTEMControlSet001Servicesamdkmdag]\n\"KMD_EnableBrightnessInterface2\"=dword:00000000","source":"_posts/e5-ae-8c-e7-be-8e-e8-a7-a3-e5-86-b3-win8-1-win8-amd-e6-98-be-e5-8d-a1-e6-97-a0-e6-b3-95-e8-b0-83-e4-ba-ae-e5-ba-a6.md","raw":"---\ntitle: 完美解决 win8.1 & win8 amd显卡无法调亮度\nid: 1159\ncategories:\n  - Windows\ndate: 2013-10-08 10:48:40\ntags:\n---\n\n1：禁用服务\"Sensor Monitoring Service\"\n2：windows+R键打开“运行”，输入“regedit\" ,进入注册表\n3：搜索 \"KMD_EnableBrightnessInterface2\"，找到后将值“1”改为“0”，找到一处后按F3再找下一处，一共有5，6个\n4：重启\n\nWindows Registry Editor Version 5.00\n[HKEY_LOCAL_MACHINESYSTEMControlSet001ControlClass{4d36e968-e325-11ce-bfc1-08002be10318}\u0000000]\n\"KMD_EnableBrightnessInterface2\"=dword:00000000\n[HKEY_LOCAL_MACHINESYSTEMControlSet001Servicesamdkmdag]\n\"KMD_EnableBrightnessInterface2\"=dword:00000000","slug":"e5-ae-8c-e7-be-8e-e8-a7-a3-e5-86-b3-win8-1-win8-amd-e6-98-be-e5-8d-a1-e6-97-a0-e6-b3-95-e8-b0-83-e4-ba-ae-e5-ba-a6","published":1,"updated":"2018-01-13T05:07:00.489Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjccw7x8q002gaqcr2m5ujxqz","content":"<p>1：禁用服务”Sensor Monitoring Service”<br>2：windows+R键打开“运行”，输入“regedit” ,进入注册表<br>3：搜索 “KMD_EnableBrightnessInterface2”，找到后将值“1”改为“0”，找到一处后按F3再找下一处，一共有5，6个<br>4：重启</p>\n<p>Windows Registry Editor Version 5.00<br>[HKEY_LOCAL_MACHINESYSTEMControlSet001ControlClass{4d36e968-e325-11ce-bfc1-08002be10318}\u0000000]<br>“KMD_EnableBrightnessInterface2”=dword:00000000<br>[HKEY_LOCAL_MACHINESYSTEMControlSet001Servicesamdkmdag]<br>“KMD_EnableBrightnessInterface2”=dword:00000000</p>\n","site":{"data":{}},"excerpt":"","more":"<p>1：禁用服务”Sensor Monitoring Service”<br>2：windows+R键打开“运行”，输入“regedit” ,进入注册表<br>3：搜索 “KMD_EnableBrightnessInterface2”，找到后将值“1”改为“0”，找到一处后按F3再找下一处，一共有5，6个<br>4：重启</p>\n<p>Windows Registry Editor Version 5.00<br>[HKEY_LOCAL_MACHINESYSTEMControlSet001ControlClass{4d36e968-e325-11ce-bfc1-08002be10318}\u0000000]<br>“KMD_EnableBrightnessInterface2”=dword:00000000<br>[HKEY_LOCAL_MACHINESYSTEMControlSet001Servicesamdkmdag]<br>“KMD_EnableBrightnessInterface2”=dword:00000000</p>\n"},{"title":"[转] PHP对象在内存中的分配说明","id":"1305","date":"2014-03-21T01:28:42.000Z","_content":"\n> 最近小组分享了php内存方面的知识，前几篇也转载了别人的讲得很好的文章，下面是关于对象在内存的分配情况。\nfrom : http://www.cnblogs.com/mo-beifeng/archive/2011/10/08/2201685.html\n\n对象在PHP 里面和整型、浮点型一样，也是一种数据类，都是存储不同类型数据用的， 在运行的时候都要加载到内存中去用，那么对象在内存里面是怎么体现的呢？内存从逻辑上 说大体上是分为4 段，栈空间段、堆空间段、代码段、初始化静态段，程序里面不同的声明 放在不同的内存段里面，**数据段**（data segment）通常是指用来存放程序中已初始化且不为0的全局变量如：静态变量和常量；**代码段**（code segment / text segment）通常是指用来存放程序执行代码的一块内存区域，比如函数和方法；**栈空间段**是存储占用相同空间长度并且占用空间小的数据类型的地方，比如说整型1，10，100，1000，10000，100000 等等，在内存里面占用空间是等长的，都是64 位4 个字节。那么数据长度不定长，而且占有空间很大的数据类型的数据放在那内存 的那个段里面呢？这样的数据是放在**堆内存**里面的。如下图：<!--more-->\n\n![](/wp-content/uploads/2014/04/45efe1b62ee9c2ba8c09681c0aa6124d.jpg)\n\n栈内存是可以直接存取的，而堆内存是 不可以直接存取的内存。对于我们的对象来数就是一种大的数据类型而且是占用空间不定长的类型，所以说对象是放在堆里面的，但对象名称是放在栈里面的，这样通过对象名称就可 以使用对象了。$p1 就是我们实例出来的对象名称，同理，$p2，$p3 也是我们实例出来的对象名称，一个类可以实例出多个对象，每个对象都是独立的，上面的代码相当于实例出来3 个人来，每个人之间是没有联系的，只能说明他们都是人类，每 个人都有自己的姓名，性别和年龄的属性，每个人都有说话和走路的方法，只要是类里面体 现出来的成员属性和成员方法，实例化出来的对象里面就包含了这些属性和方法。\n<div>\n<pre>$p1=new Person();</pre>\n</div>\n对于这个条代码，$p1 是对象名称在栈内存里面new Person()是真正的对象是在堆内存 里面的，具体的请看下图：\n\n![](/wp-content/uploads/2014/04/cfd93775920fbdf35583935b5165fe62.jpg)\n\n从上图可以看出$p1=new Person();等号右边是真正的对象实例，在堆内存里面的实体， 上图一共有3 次new Person()，所以会在堆里面开辟3 个空间，产生3 个实例对象，每个对象之间都是相互独立的，使用自己的空间，在PHP 里面，只要有一个new 这个关键字出现就会 实例化出来一个对象，在堆里面开辟一块自己的空间。 每个在堆里面的实例对象是存储属性的，比如说，现在堆里面的实例对象里面都存有姓 名、性别和年龄。每个属性又都有一个地址。 $p1=new Person();等号的右边$p1 是一个引用变量，通过赋值运算符“=”把对象的首地址 赋给“$p1”这个引用变量，所以$p1 是存储对象首地址的变量，$p1 放在栈内存里边，$p1 相当 于一个指针指向堆里面的对象，所以我们可以通过$p1 这个引用变量来操作对象,通常我们也 称对象引用为对象。\n\n先看一个简单的类\n\n`class student{\npublic name;\npublic senggao;\nprivate static check ;\npublic function name ($name){\n$this -&gt;name = $name;\n}\n}`\n\n首先对象的引用是保存在内存的栈区，$xiaoming = new student();\n\n那么$xiaoming就是 new xiaoming();这个对象的引用\n\n在 堆区里保存的是是这个对象\n\n在初始化数据区存放的是静态属性（常量也保存在这里吗？）\n\n在代码区存的是对象的方法\n\n一个事实就是 变量的赋值，是传递变量的拷贝，而对象的赋值是传递对象本身\n\n$a = 100; $b =$a; 这里传递一个$a 的拷贝给$b 在内存里，有两个100的数据块，一个给$a 一个给$b 相互不影响，所以改变$b时，$a不受影响\n\n那么$a = new a(); $b = $a时，这里传递的是变量本身 意思是 在栈区有一个$a ,一个$b 他们的指向，都是堆区的同一个对象，所以$a 和$a是完全相同的，因为指向都是堆区的同一个对象\n\n$xiaoming = new student(); $liming = new student();会发生什么\n\n这时栈区有一个对象的引用$xiaoming 和$liming 在堆区会复制两份对象$xiaoming指向堆区$xiaoming的对象，而$liming 也指向堆区$liming的对象\n\n然后在初始化数据区static check 却只有一份，是的只有一份，静态属性并不在堆区 静态方法服务于类 而不服务于对象，所以访问静态方法的时候，可以无需通过对象而直接访问 student::check 无需产生一个对象  顺便提下self::是访问当前类的静态方法或属性，是当前类，self在那个类里面，就是哪个类\n\n在代码区的成员方法，同一个类只有一份，实例化多次，也只有一份，因为方法都是固定的，无需多次拷贝\n\n[![64fa67dd005f5d405882dd0f](/wp-content/uploads/2014/04/5277de824eaae51a3ed39da8423f5d7f.jpg)](/wp-content/uploads/2014/04/5277de824eaae51a3ed39da8423f5d7f.jpg)\n\n对象的内存分布：\n\n1.  对象的引用放在“栈内存”（栈放固定的内容）\n2.  对象是放在堆内存（堆内存放可变的内容）\n3.  静态成员放在“数据区”，在第一次加载时放入，可以让堆内存里的每个对象共享\n4.  函数和方法放在代码区","source":"_posts/e5-af-b9-e8-b1-a1-e5-9c-a8-e5-86-85-e5-ad-98-e4-b8-ad-e7-9a-84-e5-88-86-e9-85-8d-e8-af-b4-e6-98-8ephp.md","raw":"---\ntitle: '[转] PHP对象在内存中的分配说明'\ntags:\n  - 内存\nid: 1305\ncategories:\n  - PHP\ndate: 2014-03-21 09:28:42\n---\n\n> 最近小组分享了php内存方面的知识，前几篇也转载了别人的讲得很好的文章，下面是关于对象在内存的分配情况。\nfrom : http://www.cnblogs.com/mo-beifeng/archive/2011/10/08/2201685.html\n\n对象在PHP 里面和整型、浮点型一样，也是一种数据类，都是存储不同类型数据用的， 在运行的时候都要加载到内存中去用，那么对象在内存里面是怎么体现的呢？内存从逻辑上 说大体上是分为4 段，栈空间段、堆空间段、代码段、初始化静态段，程序里面不同的声明 放在不同的内存段里面，**数据段**（data segment）通常是指用来存放程序中已初始化且不为0的全局变量如：静态变量和常量；**代码段**（code segment / text segment）通常是指用来存放程序执行代码的一块内存区域，比如函数和方法；**栈空间段**是存储占用相同空间长度并且占用空间小的数据类型的地方，比如说整型1，10，100，1000，10000，100000 等等，在内存里面占用空间是等长的，都是64 位4 个字节。那么数据长度不定长，而且占有空间很大的数据类型的数据放在那内存 的那个段里面呢？这样的数据是放在**堆内存**里面的。如下图：<!--more-->\n\n![](/wp-content/uploads/2014/04/45efe1b62ee9c2ba8c09681c0aa6124d.jpg)\n\n栈内存是可以直接存取的，而堆内存是 不可以直接存取的内存。对于我们的对象来数就是一种大的数据类型而且是占用空间不定长的类型，所以说对象是放在堆里面的，但对象名称是放在栈里面的，这样通过对象名称就可 以使用对象了。$p1 就是我们实例出来的对象名称，同理，$p2，$p3 也是我们实例出来的对象名称，一个类可以实例出多个对象，每个对象都是独立的，上面的代码相当于实例出来3 个人来，每个人之间是没有联系的，只能说明他们都是人类，每 个人都有自己的姓名，性别和年龄的属性，每个人都有说话和走路的方法，只要是类里面体 现出来的成员属性和成员方法，实例化出来的对象里面就包含了这些属性和方法。\n<div>\n<pre>$p1=new Person();</pre>\n</div>\n对于这个条代码，$p1 是对象名称在栈内存里面new Person()是真正的对象是在堆内存 里面的，具体的请看下图：\n\n![](/wp-content/uploads/2014/04/cfd93775920fbdf35583935b5165fe62.jpg)\n\n从上图可以看出$p1=new Person();等号右边是真正的对象实例，在堆内存里面的实体， 上图一共有3 次new Person()，所以会在堆里面开辟3 个空间，产生3 个实例对象，每个对象之间都是相互独立的，使用自己的空间，在PHP 里面，只要有一个new 这个关键字出现就会 实例化出来一个对象，在堆里面开辟一块自己的空间。 每个在堆里面的实例对象是存储属性的，比如说，现在堆里面的实例对象里面都存有姓 名、性别和年龄。每个属性又都有一个地址。 $p1=new Person();等号的右边$p1 是一个引用变量，通过赋值运算符“=”把对象的首地址 赋给“$p1”这个引用变量，所以$p1 是存储对象首地址的变量，$p1 放在栈内存里边，$p1 相当 于一个指针指向堆里面的对象，所以我们可以通过$p1 这个引用变量来操作对象,通常我们也 称对象引用为对象。\n\n先看一个简单的类\n\n`class student{\npublic name;\npublic senggao;\nprivate static check ;\npublic function name ($name){\n$this -&gt;name = $name;\n}\n}`\n\n首先对象的引用是保存在内存的栈区，$xiaoming = new student();\n\n那么$xiaoming就是 new xiaoming();这个对象的引用\n\n在 堆区里保存的是是这个对象\n\n在初始化数据区存放的是静态属性（常量也保存在这里吗？）\n\n在代码区存的是对象的方法\n\n一个事实就是 变量的赋值，是传递变量的拷贝，而对象的赋值是传递对象本身\n\n$a = 100; $b =$a; 这里传递一个$a 的拷贝给$b 在内存里，有两个100的数据块，一个给$a 一个给$b 相互不影响，所以改变$b时，$a不受影响\n\n那么$a = new a(); $b = $a时，这里传递的是变量本身 意思是 在栈区有一个$a ,一个$b 他们的指向，都是堆区的同一个对象，所以$a 和$a是完全相同的，因为指向都是堆区的同一个对象\n\n$xiaoming = new student(); $liming = new student();会发生什么\n\n这时栈区有一个对象的引用$xiaoming 和$liming 在堆区会复制两份对象$xiaoming指向堆区$xiaoming的对象，而$liming 也指向堆区$liming的对象\n\n然后在初始化数据区static check 却只有一份，是的只有一份，静态属性并不在堆区 静态方法服务于类 而不服务于对象，所以访问静态方法的时候，可以无需通过对象而直接访问 student::check 无需产生一个对象  顺便提下self::是访问当前类的静态方法或属性，是当前类，self在那个类里面，就是哪个类\n\n在代码区的成员方法，同一个类只有一份，实例化多次，也只有一份，因为方法都是固定的，无需多次拷贝\n\n[![64fa67dd005f5d405882dd0f](/wp-content/uploads/2014/04/5277de824eaae51a3ed39da8423f5d7f.jpg)](/wp-content/uploads/2014/04/5277de824eaae51a3ed39da8423f5d7f.jpg)\n\n对象的内存分布：\n\n1.  对象的引用放在“栈内存”（栈放固定的内容）\n2.  对象是放在堆内存（堆内存放可变的内容）\n3.  静态成员放在“数据区”，在第一次加载时放入，可以让堆内存里的每个对象共享\n4.  函数和方法放在代码区","slug":"e5-af-b9-e8-b1-a1-e5-9c-a8-e5-86-85-e5-ad-98-e4-b8-ad-e7-9a-84-e5-88-86-e9-85-8d-e8-af-b4-e6-98-8ephp","published":1,"updated":"2018-01-13T05:07:00.442Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjccw7x8t002kaqcrnlpiqyr8","content":"<blockquote>\n<p>最近小组分享了php内存方面的知识，前几篇也转载了别人的讲得很好的文章，下面是关于对象在内存的分配情况。<br>from : <a href=\"http://www.cnblogs.com/mo-beifeng/archive/2011/10/08/2201685.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/mo-beifeng/archive/2011/10/08/2201685.html</a></p>\n</blockquote>\n<p>对象在PHP 里面和整型、浮点型一样，也是一种数据类，都是存储不同类型数据用的， 在运行的时候都要加载到内存中去用，那么对象在内存里面是怎么体现的呢？内存从逻辑上 说大体上是分为4 段，栈空间段、堆空间段、代码段、初始化静态段，程序里面不同的声明 放在不同的内存段里面，<strong>数据段</strong>（data segment）通常是指用来存放程序中已初始化且不为0的全局变量如：静态变量和常量；<strong>代码段</strong>（code segment / text segment）通常是指用来存放程序执行代码的一块内存区域，比如函数和方法；<strong>栈空间段</strong>是存储占用相同空间长度并且占用空间小的数据类型的地方，比如说整型1，10，100，1000，10000，100000 等等，在内存里面占用空间是等长的，都是64 位4 个字节。那么数据长度不定长，而且占有空间很大的数据类型的数据放在那内存 的那个段里面呢？这样的数据是放在<strong>堆内存</strong>里面的。如下图：<a id=\"more\"></a></p>\n<p><img src=\"/wp-content/uploads/2014/04/45efe1b62ee9c2ba8c09681c0aa6124d.jpg\" alt=\"\"></p>\n<p>栈内存是可以直接存取的，而堆内存是 不可以直接存取的内存。对于我们的对象来数就是一种大的数据类型而且是占用空间不定长的类型，所以说对象是放在堆里面的，但对象名称是放在栈里面的，这样通过对象名称就可 以使用对象了。$p1 就是我们实例出来的对象名称，同理，$p2，$p3 也是我们实例出来的对象名称，一个类可以实例出多个对象，每个对象都是独立的，上面的代码相当于实例出来3 个人来，每个人之间是没有联系的，只能说明他们都是人类，每 个人都有自己的姓名，性别和年龄的属性，每个人都有说话和走路的方法，只要是类里面体 现出来的成员属性和成员方法，实例化出来的对象里面就包含了这些属性和方法。</p>\n<p><div></div></p>\n<p><pre>$p1=new Person();</pre><br><br>对于这个条代码，$p1 是对象名称在栈内存里面new Person()是真正的对象是在堆内存 里面的，具体的请看下图：</p>\n<p><img src=\"/wp-content/uploads/2014/04/cfd93775920fbdf35583935b5165fe62.jpg\" alt=\"\"></p>\n<p>从上图可以看出$p1=new Person();等号右边是真正的对象实例，在堆内存里面的实体， 上图一共有3 次new Person()，所以会在堆里面开辟3 个空间，产生3 个实例对象，每个对象之间都是相互独立的，使用自己的空间，在PHP 里面，只要有一个new 这个关键字出现就会 实例化出来一个对象，在堆里面开辟一块自己的空间。 每个在堆里面的实例对象是存储属性的，比如说，现在堆里面的实例对象里面都存有姓 名、性别和年龄。每个属性又都有一个地址。 $p1=new Person();等号的右边$p1 是一个引用变量，通过赋值运算符“=”把对象的首地址 赋给“$p1”这个引用变量，所以$p1 是存储对象首地址的变量，$p1 放在栈内存里边，$p1 相当 于一个指针指向堆里面的对象，所以我们可以通过$p1 这个引用变量来操作对象,通常我们也 称对象引用为对象。</p>\n<p>先看一个简单的类</p>\n<p><code>class student{\npublic name;\npublic senggao;\nprivate static check ;\npublic function name ($name){\n$this -&amp;gt;name = $name;\n}\n}</code></p>\n<p>首先对象的引用是保存在内存的栈区，$xiaoming = new student();</p>\n<p>那么$xiaoming就是 new xiaoming();这个对象的引用</p>\n<p>在 堆区里保存的是是这个对象</p>\n<p>在初始化数据区存放的是静态属性（常量也保存在这里吗？）</p>\n<p>在代码区存的是对象的方法</p>\n<p>一个事实就是 变量的赋值，是传递变量的拷贝，而对象的赋值是传递对象本身</p>\n<p>$a = 100; $b =$a; 这里传递一个$a 的拷贝给$b 在内存里，有两个100的数据块，一个给$a 一个给$b 相互不影响，所以改变$b时，$a不受影响</p>\n<p>那么$a = new a(); $b = $a时，这里传递的是变量本身 意思是 在栈区有一个$a ,一个$b 他们的指向，都是堆区的同一个对象，所以$a 和$a是完全相同的，因为指向都是堆区的同一个对象</p>\n<p>$xiaoming = new student(); $liming = new student();会发生什么</p>\n<p>这时栈区有一个对象的引用$xiaoming 和$liming 在堆区会复制两份对象$xiaoming指向堆区$xiaoming的对象，而$liming 也指向堆区$liming的对象</p>\n<p>然后在初始化数据区static check 却只有一份，是的只有一份，静态属性并不在堆区 静态方法服务于类 而不服务于对象，所以访问静态方法的时候，可以无需通过对象而直接访问 student::check 无需产生一个对象  顺便提下self::是访问当前类的静态方法或属性，是当前类，self在那个类里面，就是哪个类</p>\n<p>在代码区的成员方法，同一个类只有一份，实例化多次，也只有一份，因为方法都是固定的，无需多次拷贝</p>\n<p><a href=\"/wp-content/uploads/2014/04/5277de824eaae51a3ed39da8423f5d7f.jpg\"><img src=\"/wp-content/uploads/2014/04/5277de824eaae51a3ed39da8423f5d7f.jpg\" alt=\"64fa67dd005f5d405882dd0f\"></a></p>\n<p>对象的内存分布：</p>\n<ol>\n<li>对象的引用放在“栈内存”（栈放固定的内容）</li>\n<li>对象是放在堆内存（堆内存放可变的内容）</li>\n<li>静态成员放在“数据区”，在第一次加载时放入，可以让堆内存里的每个对象共享</li>\n<li>函数和方法放在代码区</li>\n</ol>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>最近小组分享了php内存方面的知识，前几篇也转载了别人的讲得很好的文章，下面是关于对象在内存的分配情况。<br>from : <a href=\"http://www.cnblogs.com/mo-beifeng/archive/2011/10/08/2201685.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/mo-beifeng/archive/2011/10/08/2201685.html</a></p>\n</blockquote>\n<p>对象在PHP 里面和整型、浮点型一样，也是一种数据类，都是存储不同类型数据用的， 在运行的时候都要加载到内存中去用，那么对象在内存里面是怎么体现的呢？内存从逻辑上 说大体上是分为4 段，栈空间段、堆空间段、代码段、初始化静态段，程序里面不同的声明 放在不同的内存段里面，<strong>数据段</strong>（data segment）通常是指用来存放程序中已初始化且不为0的全局变量如：静态变量和常量；<strong>代码段</strong>（code segment / text segment）通常是指用来存放程序执行代码的一块内存区域，比如函数和方法；<strong>栈空间段</strong>是存储占用相同空间长度并且占用空间小的数据类型的地方，比如说整型1，10，100，1000，10000，100000 等等，在内存里面占用空间是等长的，都是64 位4 个字节。那么数据长度不定长，而且占有空间很大的数据类型的数据放在那内存 的那个段里面呢？这样的数据是放在<strong>堆内存</strong>里面的。如下图：","more":"</p>\n<p><img src=\"/wp-content/uploads/2014/04/45efe1b62ee9c2ba8c09681c0aa6124d.jpg\" alt=\"\"></p>\n<p>栈内存是可以直接存取的，而堆内存是 不可以直接存取的内存。对于我们的对象来数就是一种大的数据类型而且是占用空间不定长的类型，所以说对象是放在堆里面的，但对象名称是放在栈里面的，这样通过对象名称就可 以使用对象了。$p1 就是我们实例出来的对象名称，同理，$p2，$p3 也是我们实例出来的对象名称，一个类可以实例出多个对象，每个对象都是独立的，上面的代码相当于实例出来3 个人来，每个人之间是没有联系的，只能说明他们都是人类，每 个人都有自己的姓名，性别和年龄的属性，每个人都有说话和走路的方法，只要是类里面体 现出来的成员属性和成员方法，实例化出来的对象里面就包含了这些属性和方法。</p>\n<p><div></div></p>\n<p><pre>$p1=new Person();</pre><br><br>对于这个条代码，$p1 是对象名称在栈内存里面new Person()是真正的对象是在堆内存 里面的，具体的请看下图：</p>\n<p><img src=\"/wp-content/uploads/2014/04/cfd93775920fbdf35583935b5165fe62.jpg\" alt=\"\"></p>\n<p>从上图可以看出$p1=new Person();等号右边是真正的对象实例，在堆内存里面的实体， 上图一共有3 次new Person()，所以会在堆里面开辟3 个空间，产生3 个实例对象，每个对象之间都是相互独立的，使用自己的空间，在PHP 里面，只要有一个new 这个关键字出现就会 实例化出来一个对象，在堆里面开辟一块自己的空间。 每个在堆里面的实例对象是存储属性的，比如说，现在堆里面的实例对象里面都存有姓 名、性别和年龄。每个属性又都有一个地址。 $p1=new Person();等号的右边$p1 是一个引用变量，通过赋值运算符“=”把对象的首地址 赋给“$p1”这个引用变量，所以$p1 是存储对象首地址的变量，$p1 放在栈内存里边，$p1 相当 于一个指针指向堆里面的对象，所以我们可以通过$p1 这个引用变量来操作对象,通常我们也 称对象引用为对象。</p>\n<p>先看一个简单的类</p>\n<p><code>class student{\npublic name;\npublic senggao;\nprivate static check ;\npublic function name ($name){\n$this -&amp;gt;name = $name;\n}\n}</code></p>\n<p>首先对象的引用是保存在内存的栈区，$xiaoming = new student();</p>\n<p>那么$xiaoming就是 new xiaoming();这个对象的引用</p>\n<p>在 堆区里保存的是是这个对象</p>\n<p>在初始化数据区存放的是静态属性（常量也保存在这里吗？）</p>\n<p>在代码区存的是对象的方法</p>\n<p>一个事实就是 变量的赋值，是传递变量的拷贝，而对象的赋值是传递对象本身</p>\n<p>$a = 100; $b =$a; 这里传递一个$a 的拷贝给$b 在内存里，有两个100的数据块，一个给$a 一个给$b 相互不影响，所以改变$b时，$a不受影响</p>\n<p>那么$a = new a(); $b = $a时，这里传递的是变量本身 意思是 在栈区有一个$a ,一个$b 他们的指向，都是堆区的同一个对象，所以$a 和$a是完全相同的，因为指向都是堆区的同一个对象</p>\n<p>$xiaoming = new student(); $liming = new student();会发生什么</p>\n<p>这时栈区有一个对象的引用$xiaoming 和$liming 在堆区会复制两份对象$xiaoming指向堆区$xiaoming的对象，而$liming 也指向堆区$liming的对象</p>\n<p>然后在初始化数据区static check 却只有一份，是的只有一份，静态属性并不在堆区 静态方法服务于类 而不服务于对象，所以访问静态方法的时候，可以无需通过对象而直接访问 student::check 无需产生一个对象  顺便提下self::是访问当前类的静态方法或属性，是当前类，self在那个类里面，就是哪个类</p>\n<p>在代码区的成员方法，同一个类只有一份，实例化多次，也只有一份，因为方法都是固定的，无需多次拷贝</p>\n<p><a href=\"/wp-content/uploads/2014/04/5277de824eaae51a3ed39da8423f5d7f.jpg\"><img src=\"/wp-content/uploads/2014/04/5277de824eaae51a3ed39da8423f5d7f.jpg\" alt=\"64fa67dd005f5d405882dd0f\"></a></p>\n<p>对象的内存分布：</p>\n<ol>\n<li>对象的引用放在“栈内存”（栈放固定的内容）</li>\n<li>对象是放在堆内存（堆内存放可变的内容）</li>\n<li>静态成员放在“数据区”，在第一次加载时放入，可以让堆内存里的每个对象共享</li>\n<li>函数和方法放在代码区</li>\n</ol>"},{"title":"将某个Qt4项目升级到Qt5遇到的问题","id":"1153","date":"2013-07-15T02:45:48.000Z","_content":"\n该Qt4项目以前是使用Qt4.7.4 MSVC2008开发的，因为使用到了OWC10(Office Web Components)，使用MSVC编译器的话无法正常升级到Qt4.8.x和Qt5，于是将编译器转成了MinGW4.7，Qt升级到了4.8.4。今天Qt 5.0.1-MinGW预编译版本发布了，于是就拿它练手，将它升级到Qt5，以减少系统中存在的多个Qt版本 。遇到的问题如下：\n\n1\\.  由于Qt5将大部分桌面部件移到了Qt Widgets模块中，所以在.pro中要增加下面一行\n\nQT += widgets\n\n2\\. 程序中使用了OWC10，用到了ActiveQt，原来的做法是在.pro中加CONFIG += qaxcontainer，现在需要改成\n\nQT += axcontainer\n\n当然了，原来的CONFIG += qaxcontainer也将去除\n\n3\\. 为了充分使用C++11特性，在.pro中加下面一行\n\nCONFIG += c++11\n\n4\\. 在源文件中，凡是涉及到原QtGui中可视部件的，全要修改头文件引用，或者增加QtWidgets头文件，比如：\n\n#include <qtGui/QPushButton>  要改成  #include <qpushButton>  或者  #include <qtWidgets/QPushButton>\n\n在以前使用#include <qtGui>的地方，要加上 #include <qtWidgets>\n\n5\\. 由于Qt5去除了QTextCodec::setCodecForCStrings()函数，所以在涉及到在cpp中直接写汉字的情况，有如下两种修改方法：\n\na)  如果以前的源文件编码是GBK的，则需要使用QString::fromLocal8Bit()函数将原来的汉字括起来；或者直接将源文件编码转换成UTF-8的（缺点是MSVC编译器不能方便的使用了）。我使用了使用QString::fromLocal8Bit()来调用的方式（当然了，另写便捷函数或宏来处理）\n\nb) 如果以前的源文件编码是UTF-8的，则什么都不用动。\n\n6\\. 以前使用QDesktopServices::storageLocation(QDesktopServices::xxxx)来获取一些系统目录，现在则要改成\n\nQStandardPaths::writableLocation(QStandardPaths::xxxx)\n\n7\\. 以前调用QFileDialog::getSaveFileName()时，如果在Windows下使用Native Dialog形式指定文件名，则能正常显示，如今Qt5不能正常显示文件名。所以将它的后两个参数加上了，即QFileDialog::getSaveFileName(xxx, xxx, xxx, xxx, 0, QFileDialog::DontUseNativeDialog)，这样就正常了，只是它的对话框不是系统形式的，暂且将就吧。\n\n8\\. 还有，Qt5解决了ui_qaxselect.h文件的问题。在Qt4时代，使用ActiveQt时，老提示没有这个文件，需要自己找到源代码手工uic qaxselect.ui > ui_qaxselect.h来生成一下，Qt5中则解决了该问题。\n\n9.使用到打印相关的类，Qt5单独放到了QtPrintSupport模块中，所以得加头文件#include <qtPrintSupport>，在.pro中要加QT += printsupport\n\n10\\. 使用到QWebPage等webkit相关可视部件的，Qt5单独放到了QtWebKitWidgets模块中，所以得加头文件#include <qtWebKitWidgets>，在.pro中要加QT += webkitwidgets\n\n11\\. Qt4中的cleanlooks、plastique、cde、motif等主题样式没有，新加了个fusion，好吧，问题是我的一个项目框架使用的是cleanlooks主题样式然后加自定义样式表，这下可好，升级Qt5后，样子有的就与windowsvista或fusion不相符或有缺陷，得调整一下了。所以，对主题样式依赖比较严重的程序，要衡量一下是否要升级到Qt5了。\n\n12\\. .pro文件中的TARGET在Qt4(qmake v2)中是可以不填写的，那么它就从自动采用.pro文件名字，而在Qt5中(qmake v3)这个TARGET不可不写。\n\n13\\. Q_WS_XX的宏不可用了,使用Q_OS_XX代替.\n\n至于c++11 支持的连接信号与槽时可以不使用SLOT、SIGNAL宏的问题，现在先不改吧，虽然新方法去除了这两个宏，并且加强了类型检查，但也又增加了类名和一个&符号，先偷懒不动吧。","source":"_posts/e5-b0-86-e6-9f-90-e4-b8-aaqt4-e9-a1-b9-e7-9b-ae-e5-8d-87-e7-ba-a7-e5-88-b0qt5-e9-81-87-e5-88-b0-e7-9a-84-e9-97-ae-e9-a2-98.md","raw":"---\ntitle: 将某个Qt4项目升级到Qt5遇到的问题\nid: 1153\ncategories:\n  - Qt\ndate: 2013-07-15 10:45:48\ntags:\n---\n\n该Qt4项目以前是使用Qt4.7.4 MSVC2008开发的，因为使用到了OWC10(Office Web Components)，使用MSVC编译器的话无法正常升级到Qt4.8.x和Qt5，于是将编译器转成了MinGW4.7，Qt升级到了4.8.4。今天Qt 5.0.1-MinGW预编译版本发布了，于是就拿它练手，将它升级到Qt5，以减少系统中存在的多个Qt版本 。遇到的问题如下：\n\n1\\.  由于Qt5将大部分桌面部件移到了Qt Widgets模块中，所以在.pro中要增加下面一行\n\nQT += widgets\n\n2\\. 程序中使用了OWC10，用到了ActiveQt，原来的做法是在.pro中加CONFIG += qaxcontainer，现在需要改成\n\nQT += axcontainer\n\n当然了，原来的CONFIG += qaxcontainer也将去除\n\n3\\. 为了充分使用C++11特性，在.pro中加下面一行\n\nCONFIG += c++11\n\n4\\. 在源文件中，凡是涉及到原QtGui中可视部件的，全要修改头文件引用，或者增加QtWidgets头文件，比如：\n\n#include <qtGui/QPushButton>  要改成  #include <qpushButton>  或者  #include <qtWidgets/QPushButton>\n\n在以前使用#include <qtGui>的地方，要加上 #include <qtWidgets>\n\n5\\. 由于Qt5去除了QTextCodec::setCodecForCStrings()函数，所以在涉及到在cpp中直接写汉字的情况，有如下两种修改方法：\n\na)  如果以前的源文件编码是GBK的，则需要使用QString::fromLocal8Bit()函数将原来的汉字括起来；或者直接将源文件编码转换成UTF-8的（缺点是MSVC编译器不能方便的使用了）。我使用了使用QString::fromLocal8Bit()来调用的方式（当然了，另写便捷函数或宏来处理）\n\nb) 如果以前的源文件编码是UTF-8的，则什么都不用动。\n\n6\\. 以前使用QDesktopServices::storageLocation(QDesktopServices::xxxx)来获取一些系统目录，现在则要改成\n\nQStandardPaths::writableLocation(QStandardPaths::xxxx)\n\n7\\. 以前调用QFileDialog::getSaveFileName()时，如果在Windows下使用Native Dialog形式指定文件名，则能正常显示，如今Qt5不能正常显示文件名。所以将它的后两个参数加上了，即QFileDialog::getSaveFileName(xxx, xxx, xxx, xxx, 0, QFileDialog::DontUseNativeDialog)，这样就正常了，只是它的对话框不是系统形式的，暂且将就吧。\n\n8\\. 还有，Qt5解决了ui_qaxselect.h文件的问题。在Qt4时代，使用ActiveQt时，老提示没有这个文件，需要自己找到源代码手工uic qaxselect.ui > ui_qaxselect.h来生成一下，Qt5中则解决了该问题。\n\n9.使用到打印相关的类，Qt5单独放到了QtPrintSupport模块中，所以得加头文件#include <qtPrintSupport>，在.pro中要加QT += printsupport\n\n10\\. 使用到QWebPage等webkit相关可视部件的，Qt5单独放到了QtWebKitWidgets模块中，所以得加头文件#include <qtWebKitWidgets>，在.pro中要加QT += webkitwidgets\n\n11\\. Qt4中的cleanlooks、plastique、cde、motif等主题样式没有，新加了个fusion，好吧，问题是我的一个项目框架使用的是cleanlooks主题样式然后加自定义样式表，这下可好，升级Qt5后，样子有的就与windowsvista或fusion不相符或有缺陷，得调整一下了。所以，对主题样式依赖比较严重的程序，要衡量一下是否要升级到Qt5了。\n\n12\\. .pro文件中的TARGET在Qt4(qmake v2)中是可以不填写的，那么它就从自动采用.pro文件名字，而在Qt5中(qmake v3)这个TARGET不可不写。\n\n13\\. Q_WS_XX的宏不可用了,使用Q_OS_XX代替.\n\n至于c++11 支持的连接信号与槽时可以不使用SLOT、SIGNAL宏的问题，现在先不改吧，虽然新方法去除了这两个宏，并且加强了类型检查，但也又增加了类名和一个&符号，先偷懒不动吧。","slug":"e5-b0-86-e6-9f-90-e4-b8-aaqt4-e9-a1-b9-e7-9b-ae-e5-8d-87-e7-ba-a7-e5-88-b0qt5-e9-81-87-e5-88-b0-e7-9a-84-e9-97-ae-e9-a2-98","published":1,"updated":"2018-01-13T05:07:00.461Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjccw7x8v002naqcrdmsktotk","content":"<p>该Qt4项目以前是使用Qt4.7.4 MSVC2008开发的，因为使用到了OWC10(Office Web Components)，使用MSVC编译器的话无法正常升级到Qt4.8.x和Qt5，于是将编译器转成了MinGW4.7，Qt升级到了4.8.4。今天Qt 5.0.1-MinGW预编译版本发布了，于是就拿它练手，将它升级到Qt5，以减少系统中存在的多个Qt版本 。遇到的问题如下：</p>\n<p>1.  由于Qt5将大部分桌面部件移到了Qt Widgets模块中，所以在.pro中要增加下面一行</p>\n<p>QT += widgets</p>\n<p>2. 程序中使用了OWC10，用到了ActiveQt，原来的做法是在.pro中加CONFIG += qaxcontainer，现在需要改成</p>\n<p>QT += axcontainer</p>\n<p>当然了，原来的CONFIG += qaxcontainer也将去除</p>\n<p>3. 为了充分使用C++11特性，在.pro中加下面一行</p>\n<p>CONFIG += c++11</p>\n<p>4. 在源文件中，凡是涉及到原QtGui中可视部件的，全要修改头文件引用，或者增加QtWidgets头文件，比如：</p>\n<p>#include <qtgui qpushbutton=\"\">  要改成  #include <qpushbutton>  或者  #include <qtwidgets qpushbutton=\"\"></qtwidgets></qpushbutton></qtgui></p>\n<p>在以前使用#include <qtgui>的地方，要加上 #include <qtwidgets></qtwidgets></qtgui></p>\n<p>5. 由于Qt5去除了QTextCodec::setCodecForCStrings()函数，所以在涉及到在cpp中直接写汉字的情况，有如下两种修改方法：</p>\n<p>a)  如果以前的源文件编码是GBK的，则需要使用QString::fromLocal8Bit()函数将原来的汉字括起来；或者直接将源文件编码转换成UTF-8的（缺点是MSVC编译器不能方便的使用了）。我使用了使用QString::fromLocal8Bit()来调用的方式（当然了，另写便捷函数或宏来处理）</p>\n<p>b) 如果以前的源文件编码是UTF-8的，则什么都不用动。</p>\n<p>6. 以前使用QDesktopServices::storageLocation(QDesktopServices::xxxx)来获取一些系统目录，现在则要改成</p>\n<p>QStandardPaths::writableLocation(QStandardPaths::xxxx)</p>\n<p>7. 以前调用QFileDialog::getSaveFileName()时，如果在Windows下使用Native Dialog形式指定文件名，则能正常显示，如今Qt5不能正常显示文件名。所以将它的后两个参数加上了，即QFileDialog::getSaveFileName(xxx, xxx, xxx, xxx, 0, QFileDialog::DontUseNativeDialog)，这样就正常了，只是它的对话框不是系统形式的，暂且将就吧。</p>\n<p>8. 还有，Qt5解决了ui_qaxselect.h文件的问题。在Qt4时代，使用ActiveQt时，老提示没有这个文件，需要自己找到源代码手工uic qaxselect.ui &gt; ui_qaxselect.h来生成一下，Qt5中则解决了该问题。</p>\n<p>9.使用到打印相关的类，Qt5单独放到了QtPrintSupport模块中，所以得加头文件#include <qtprintsupport>，在.pro中要加QT += printsupport</qtprintsupport></p>\n<p>10. 使用到QWebPage等webkit相关可视部件的，Qt5单独放到了QtWebKitWidgets模块中，所以得加头文件#include <qtwebkitwidgets>，在.pro中要加QT += webkitwidgets</qtwebkitwidgets></p>\n<p>11. Qt4中的cleanlooks、plastique、cde、motif等主题样式没有，新加了个fusion，好吧，问题是我的一个项目框架使用的是cleanlooks主题样式然后加自定义样式表，这下可好，升级Qt5后，样子有的就与windowsvista或fusion不相符或有缺陷，得调整一下了。所以，对主题样式依赖比较严重的程序，要衡量一下是否要升级到Qt5了。</p>\n<p>12. .pro文件中的TARGET在Qt4(qmake v2)中是可以不填写的，那么它就从自动采用.pro文件名字，而在Qt5中(qmake v3)这个TARGET不可不写。</p>\n<p>13. Q_WS_XX的宏不可用了,使用Q_OS_XX代替.</p>\n<p>至于c++11 支持的连接信号与槽时可以不使用SLOT、SIGNAL宏的问题，现在先不改吧，虽然新方法去除了这两个宏，并且加强了类型检查，但也又增加了类名和一个&amp;符号，先偷懒不动吧。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>该Qt4项目以前是使用Qt4.7.4 MSVC2008开发的，因为使用到了OWC10(Office Web Components)，使用MSVC编译器的话无法正常升级到Qt4.8.x和Qt5，于是将编译器转成了MinGW4.7，Qt升级到了4.8.4。今天Qt 5.0.1-MinGW预编译版本发布了，于是就拿它练手，将它升级到Qt5，以减少系统中存在的多个Qt版本 。遇到的问题如下：</p>\n<p>1.  由于Qt5将大部分桌面部件移到了Qt Widgets模块中，所以在.pro中要增加下面一行</p>\n<p>QT += widgets</p>\n<p>2. 程序中使用了OWC10，用到了ActiveQt，原来的做法是在.pro中加CONFIG += qaxcontainer，现在需要改成</p>\n<p>QT += axcontainer</p>\n<p>当然了，原来的CONFIG += qaxcontainer也将去除</p>\n<p>3. 为了充分使用C++11特性，在.pro中加下面一行</p>\n<p>CONFIG += c++11</p>\n<p>4. 在源文件中，凡是涉及到原QtGui中可视部件的，全要修改头文件引用，或者增加QtWidgets头文件，比如：</p>\n<p>#include <qtgui qpushbutton=\"\">  要改成  #include <qpushbutton>  或者  #include <qtwidgets qpushbutton=\"\"></qtwidgets></qpushbutton></qtgui></p>\n<p>在以前使用#include <qtgui>的地方，要加上 #include <qtwidgets></qtwidgets></qtgui></p>\n<p>5. 由于Qt5去除了QTextCodec::setCodecForCStrings()函数，所以在涉及到在cpp中直接写汉字的情况，有如下两种修改方法：</p>\n<p>a)  如果以前的源文件编码是GBK的，则需要使用QString::fromLocal8Bit()函数将原来的汉字括起来；或者直接将源文件编码转换成UTF-8的（缺点是MSVC编译器不能方便的使用了）。我使用了使用QString::fromLocal8Bit()来调用的方式（当然了，另写便捷函数或宏来处理）</p>\n<p>b) 如果以前的源文件编码是UTF-8的，则什么都不用动。</p>\n<p>6. 以前使用QDesktopServices::storageLocation(QDesktopServices::xxxx)来获取一些系统目录，现在则要改成</p>\n<p>QStandardPaths::writableLocation(QStandardPaths::xxxx)</p>\n<p>7. 以前调用QFileDialog::getSaveFileName()时，如果在Windows下使用Native Dialog形式指定文件名，则能正常显示，如今Qt5不能正常显示文件名。所以将它的后两个参数加上了，即QFileDialog::getSaveFileName(xxx, xxx, xxx, xxx, 0, QFileDialog::DontUseNativeDialog)，这样就正常了，只是它的对话框不是系统形式的，暂且将就吧。</p>\n<p>8. 还有，Qt5解决了ui_qaxselect.h文件的问题。在Qt4时代，使用ActiveQt时，老提示没有这个文件，需要自己找到源代码手工uic qaxselect.ui &gt; ui_qaxselect.h来生成一下，Qt5中则解决了该问题。</p>\n<p>9.使用到打印相关的类，Qt5单独放到了QtPrintSupport模块中，所以得加头文件#include <qtprintsupport>，在.pro中要加QT += printsupport</qtprintsupport></p>\n<p>10. 使用到QWebPage等webkit相关可视部件的，Qt5单独放到了QtWebKitWidgets模块中，所以得加头文件#include <qtwebkitwidgets>，在.pro中要加QT += webkitwidgets</qtwebkitwidgets></p>\n<p>11. Qt4中的cleanlooks、plastique、cde、motif等主题样式没有，新加了个fusion，好吧，问题是我的一个项目框架使用的是cleanlooks主题样式然后加自定义样式表，这下可好，升级Qt5后，样子有的就与windowsvista或fusion不相符或有缺陷，得调整一下了。所以，对主题样式依赖比较严重的程序，要衡量一下是否要升级到Qt5了。</p>\n<p>12. .pro文件中的TARGET在Qt4(qmake v2)中是可以不填写的，那么它就从自动采用.pro文件名字，而在Qt5中(qmake v3)这个TARGET不可不写。</p>\n<p>13. Q_WS_XX的宏不可用了,使用Q_OS_XX代替.</p>\n<p>至于c++11 支持的连接信号与槽时可以不使用SLOT、SIGNAL宏的问题，现在先不改吧，虽然新方法去除了这两个宏，并且加强了类型检查，但也又增加了类名和一个&amp;符号，先偷懒不动吧。</p>\n"},{"title":"[转] 大数据排序或取重或去重相关问题","id":"2046","date":"2014-05-18T07:18:09.000Z","_content":"\n1\\. 给定a、b两个文件，各存放50亿个url，每个url各占64字节，内存限制是4G，让你找出a、b文件共同的url？ \n方案1：可以估计每个文件安的大小为50G×64=320G，远远大于内存限制的4G。所以不可能将其完全加载到内存中处理。考虑采取分而治之的方法。 \ns 遍历文件a，对每个url求取 ，然后根据所取得的值将url分别存储到1000个小文件（记为 ）中。这样每个小文件的大约为300M。 \ns 遍历文件b，采取和a相同的方式将url分别存储到1000各小文件（记为 ）。这样处理后，所有可能相同的url都在对应的小文件（ ）中，不对应的小文件不可能有相同的url。然后我们只要求出1000对小文件中相同的url即可。\ns 求每对小文件中相同的url时，可以把其中一个小文件的url存储到hash_set中。然后遍历另一个小文件的每个url，看其是否在刚才构建的hash_set中，如果是，那么就是共同的url，存到文件里面就可以了。\n方案2：如果允许有一定的错误率，可以使用Bloom filter，4G内存大概可以表示340亿bit。将其中一个文件中的url使用Bloom filter映射为这340亿bit，然后挨个读取另外一个文件的url，检查是否与Bloom filter，如果是，那么该url应该是共同的url（注意会有一定的错误率）。\n<!--more-->\n\n2\\. 有10个文件，每个文件1G，每个文件的每一行存放的都是用户的query，每个文件的query都可能重复。要求你按照query的频度排序。 \n方案1： \ns 顺序读取10个文件，按照hash(query)%10的结果将query写入到另外10个文件（记为 ）中。这样新生成的文件每个的大小大约也1G（假设hash函数是随机的）。\ns 找一台内存在2G左右的机器，依次对 用hash_map(query, query_count)来统计每个query出现的次数。利用快速/堆/归并排序按照出现次数进行排序。将排序好的query和对应的query_cout输出到文件中。这样得到了10个排好序的文件（记为 ）。\ns 对 这10个文件进行归并排序（内排序与外排序相结合）。 \n方案2： \n一般query的总量是有限的，只是重复的次数比较多而已，可能对于所有的query，一次性就可以加入到内存了。这样，我们就可以采用trie树/hash_map等直接来统计每个query出现的次数，然后按出现次数做快速/堆/归并排序就可以了。\n方案3： \n与方案1类似，但在做完hash，分成多个文件后，可以交给多个文件来处理，采用分布式的架构来处理（比如MapReduce），最后再进行合并。 \n\n3\\. 有一个1G大小的一个文件，里面每一行是一个词，词的大小不超过16字节，内存限制大小是1M。返回频数最高的100个词。 \n方案1：顺序读文件中，对于每个词x，取 ，然后按照该值存到5000个小文件（记为 ） 中。这样每个文件大概是200k左右。如果其中的有的文件超过了1M大小，还可以按照类似的方法继续往下分，知道分解得到的小文件的大小都不超过1M。对 每个小文件，统计每个文件中出现的词以及相应的频率（可以采用trie树/hash_map等），并取出出现频率最大的100个词（可以用含100个结点 的最小堆），并把100词及相应的频率存入文件，这样又得到了5000个文件。下一步就是把这5000个文件进行归并（类似与归并排序）的过程了。\n\n4\\. 海量日志数据，提取出某日访问百度次数最多的那个IP。 \n方案1：首先是这一天，并且是访问百度的日志中的IP取出来，逐个写入到一个大文件中。注意到IP是32位的，最多有 个 IP。同样可以采用映射的方法，比如模1000，把整个大文件映射为1000个小文件，再找出每个小文中出现频率最大的IP（可以采用hash_map进 行频率统计，然后再找出频率最大的几个）及相应的频率。然后再在这1000个最大的IP中，找出那个频率最大的IP，即为所求。\n\n5\\. 在2.5亿个整数中找出不重复的整数，内存不足以容纳这2.5亿个整数。 \n方案1：采用2-Bitmap（每个数分配2bit，00表示不存在，01表示出现一次，10表示多次，11无意义）进行，共需内存 内存，还可以接受。然后扫描这2.5亿个整数，查看Bitmap中相对应位，如果是00变01，01变10，10保持不变。所描完事后，查看bitmap，把对应位是01的整数输出即可。\n方案2：也可采用上题类似的方法，进行划分小文件的方法。然后在小文件中找出不重复的整数，并排序。然后再进行归并，注意去除重复的元素。 \n\n6\\. 海量数据分布在100台电脑中，想个办法高校统计出这批数据的TOP10。 \n方案1： \ns 在每台电脑上求出TOP10，可以采用包含10个元素的堆完成（TOP10小，用最大堆，TOP10大，用最小堆）。比如求TOP10大，我们首先取前 10个元素调整成最小堆，如果发现，然后扫描后面的数据，并与堆顶元素比较，如果比堆顶元素大，那么用该元素替换堆顶，然后再调整为最小堆。最后堆中的元 素就是TOP10大。\ns 求出每台电脑上的TOP10后，然后把这100台电脑上的TOP10组合起来，共1000个数据，再利用上面类似的方法求出TOP10就可以了。 \n\n7\\. 怎么在海量数据中找出重复次数最多的一个？ \n方案1：先做hash，然后求模映射为小文件，求出每个小文件中重复次数最多的一个，并记录重复次数。然后找出上一步求出的数据中重复次数最多的一个就是所求（具体参考前面的题）。\n\n8\\. 上千万或上亿数据（有重复），统计其中出现次数最多的钱N个数据。 \n方案1：上千万或上亿的数据，现在的机器的内存应该能存下。所以考虑采用hash_map/搜索二叉树/红黑树等来进行统计次数。然后就是取出前N个出现次数最多的数据了，可以用第6题提到的堆机制完成。\n\n9\\. 1000万字符串，其中有些是重复的，需要把重复的全部去掉，保留没有重复的字符串。请怎么设计和实现？ \n方案1：这题用trie树比较合适，hash_map也应该能行。 \n\n10\\. 一个文本文件，大约有一万行，每行一个词，要求统计出其中最频繁出现的前10个词，请给出思想，给出时间复杂度分析。 \n方案1：这题是考虑时间效率。用trie树统计每个词出现的次数，时间复杂度是O(n*le)（le表示单词的平准长度）。然后是找出出现最频繁的 前10个词，可以用堆来实现，前面的题中已经讲到了，时间复杂度是O(n*lg10)。所以总的时间复杂度，是O(n*le)与O(n*lg10)中较大 的哪一个。\n\n11\\. 一个文本文件，找出前10个经常出现的词，但这次文件比较长，说是上亿行或十亿行，总之无法一次读入内存，问最优解。 \n方案1：首先根据用hash并求模，将文件分解为多个小文件，对于单个文件利用上题的方法求出每个文件件中10个最常出现的词。然后再进行归并处理，找出最终的10个最常出现的词。\n\n12\\. 100w个数中找出最大的100个数。 \n方案1：在前面的题中，我们已经提到了，用一个含100个元素的最小堆完成。复杂度为O(100w*lg100)。 \n方案2：采用快速排序的思想，每次分割之后只考虑比轴大的一部分，知道比轴大的一部分在比100多的时候，采用传统排序算法排序，取前100个。复杂度为O(100w*100)。\n方案3：采用局部淘汰法。选取前100个元素，并排序，记为序列L。然后一次扫描剩余的元素x，与排好序的100个元素中最小的元素比，如果比这个 最小的要大，那么把这个最小的元素删除，并把x利用插入排序的思想，插入到序列L中。依次循环，知道扫描了所有的元素。复杂度为O(100w*100)。\n\n13\\. 寻找热门查询： \n搜索引擎会通过日志文件把用户每次检索使用的所有检索串都记录下来，每个查询串的长度为1-255字节。假设目前有一千万个记录，这些查询串的重复 读比较高，虽然总数是1千万，但是如果去除重复和，不超过3百万个。一个查询串的重复度越高，说明查询它的用户越多，也就越热门。请你统计最热门的10个 查询串，要求使用的内存不能超过1G。\n(1) 请描述你解决这个问题的思路； \n(2) 请给出主要的处理流程，算法，以及算法的复杂度。 \n方案1：采用trie树，关键字域存该查询串出现的次数，没有出现为0。最后用10个元素的最小推来对出现频率进行排序。 \n\n14\\. 一共有N个机器，每个机器上有N个数。每个机器最多存O(N)个数并对它们操作。如何找到 个数中的中数？ \n方案1：先大体估计一下这些数的范围，比如这里假设这些数都是32位无符号整数（共有 个）。我们把0到 的整数划分为N个范围段，每个段包含 个整数。比如，第一个段位0到 ，第二段为 到 ，…，第N个段为 到 。 然后，扫描每个机器上的N个数，把属于第一个区段的数放到第一个机器上，属于第二个区段的数放到第二个机器上，…，属于第N个区段的数放到第N个机器上。 注意这个过程每个机器上存储的数应该是O(N)的。下面我们依次统计每个机器上数的个数，一次累加，直到找到第k个机器，在该机器上累加的数大于或等于 ，而在第k-1个机器上的累加数小于 ，并把这个数记为x。那么我们要找的中位数在第k个机器中，排在第 位。然后我们对第k个机器的数排序，并找出第 个数，即为所求的中位数。复杂度是 的。 \n方案2：先对每台机器上的数进行排序。排好序后，我们采用归并排序的思想，将这N个机器上的数归并起来得到最终的排序。找到第n个便是所求。复杂度是n(i)的。 \n\n15\\. 最大间隙问题 \n给定n个实数 ，求着n个实数在实轴上向量2个数之间的最大差值，要求线性的时间算法。 \n方案1：最先想到的方法就是先对这n个数据进行排序，然后一遍扫描即可确定相邻的最大间隙。但该方法不能满足线性时间的要求。故采取如下方法： \ns 找到n个数据中最大和最小数据max和min。 \ns 用n-2个点等分区间[min, max]，即将[min, max]等分为n-1个区间（前闭后开区间），将这些区间看作桶，编号为 ，且桶 的上界和桶i+1的下届相同，即每个桶的大小相同。每个桶的大小为： 。实际上，这些桶的边界构成了一个等差数列（首项为min，公差为 ），且认为将min放入第一个桶，将max放入第n-1个桶。\ns 将n个数放入n-1个桶中：将每个元素 分配到某个桶（编号为index），其中 ，并求出分到每个桶的最大最小数据。 \ns 最大间隙：除最大最小数据max和min以外的n-2个数据放入n-1个桶中，由抽屉原理可知至少有一个桶是空的，又因为每个桶的大小相同，所以最大间隙 不会在同一桶中出现，一定是某个桶的上界和气候某个桶的下界之间隙，且该量筒之间的桶（即便好在该连个便好之间的桶）一定是空桶。也就是说，最大间隙在桶 i的上界和桶j的下界之间产生 。一遍扫描即可完成。\n\n16\\. 将多个集合合并成没有交集的集合：给定一个字符串的集合，格式如： 。要求将其中交集不为空的集合合并，要求合并完成的集合之间无交集，例如上例应输出 。 \n(1) 请描述你解决这个问题的思路； \n(2) 给出主要的处理流程，算法，以及算法的复杂度； \n(3) 请描述可能的改进。 \n方案1：采用并查集。首先所有的字符串都在单独的并查集中。然后依扫描每个集合，顺序合并将两个相邻元素合并。例如，对于 ， 首先查看aaa和bbb是否在同一个并查集中，如果不在，那么把它们所在的并查集合并，然后再看bbb和ccc是否在同一个并查集中，如果不在，那么也把 它们所在的并查集合并。接下来再扫描其他的集合，当所有的集合都扫描完了，并查集代表的集合便是所求。复杂度应该是O(NlgN)的。改进的话，首先可以 记录每个节点的根结点，改进查询。合并的时候，可以把大的和小的进行合，这样也减少复杂度。\n\n17\\. 最大子序列与最大子矩阵问题 \n数组的最大子序列问题：给定一个数组，其中元素有正，也有负，找出其中一个连续子序列，使和最大。 \n方案1：这个问题可以动态规划的思想解决。设 表示以第i个元素 结尾的最大子序列，那么显然 。基于这一点可以很快用代码实现。 \n最大子矩阵问题：给定一个矩阵（二维数组），其中数据有大有小，请找一个子矩阵，使得子矩阵的和最大，并输出这个和。 \n方案1：可以采用与最大子序列类似的思想来解决。如果我们确定了选择第i列和第j列之间的元素，那么在这个范围内，其实就是一个最大子序列问题。如何确定第i列和第j列可以词用暴搜的方法进行。\n\n转自：http://hi.baidu.com/jiaxiaobosuper/blog/item/5715981c8c7f54d3a686694b.html","source":"_posts/e5-a4-a7-e6-95-b0-e6-8d-ae-e6-8e-92-e5-ba-8f-e6-88-96-e5-8f-96-e9-87-8d-e6-88-96-e5-8e-bb-e9-87-8d-e7-9b-b8-e5-85-b3-e9-97-ae-e9-a2-98.md","raw":"---\ntitle: '[转] 大数据排序或取重或去重相关问题'\ntags:\n  - 大数据\n  - 大文件\n  - 算法\nid: 2046\ncategories:\n  - Algorithm\ndate: 2014-05-18 15:18:09\n---\n\n1\\. 给定a、b两个文件，各存放50亿个url，每个url各占64字节，内存限制是4G，让你找出a、b文件共同的url？ \n方案1：可以估计每个文件安的大小为50G×64=320G，远远大于内存限制的4G。所以不可能将其完全加载到内存中处理。考虑采取分而治之的方法。 \ns 遍历文件a，对每个url求取 ，然后根据所取得的值将url分别存储到1000个小文件（记为 ）中。这样每个小文件的大约为300M。 \ns 遍历文件b，采取和a相同的方式将url分别存储到1000各小文件（记为 ）。这样处理后，所有可能相同的url都在对应的小文件（ ）中，不对应的小文件不可能有相同的url。然后我们只要求出1000对小文件中相同的url即可。\ns 求每对小文件中相同的url时，可以把其中一个小文件的url存储到hash_set中。然后遍历另一个小文件的每个url，看其是否在刚才构建的hash_set中，如果是，那么就是共同的url，存到文件里面就可以了。\n方案2：如果允许有一定的错误率，可以使用Bloom filter，4G内存大概可以表示340亿bit。将其中一个文件中的url使用Bloom filter映射为这340亿bit，然后挨个读取另外一个文件的url，检查是否与Bloom filter，如果是，那么该url应该是共同的url（注意会有一定的错误率）。\n<!--more-->\n\n2\\. 有10个文件，每个文件1G，每个文件的每一行存放的都是用户的query，每个文件的query都可能重复。要求你按照query的频度排序。 \n方案1： \ns 顺序读取10个文件，按照hash(query)%10的结果将query写入到另外10个文件（记为 ）中。这样新生成的文件每个的大小大约也1G（假设hash函数是随机的）。\ns 找一台内存在2G左右的机器，依次对 用hash_map(query, query_count)来统计每个query出现的次数。利用快速/堆/归并排序按照出现次数进行排序。将排序好的query和对应的query_cout输出到文件中。这样得到了10个排好序的文件（记为 ）。\ns 对 这10个文件进行归并排序（内排序与外排序相结合）。 \n方案2： \n一般query的总量是有限的，只是重复的次数比较多而已，可能对于所有的query，一次性就可以加入到内存了。这样，我们就可以采用trie树/hash_map等直接来统计每个query出现的次数，然后按出现次数做快速/堆/归并排序就可以了。\n方案3： \n与方案1类似，但在做完hash，分成多个文件后，可以交给多个文件来处理，采用分布式的架构来处理（比如MapReduce），最后再进行合并。 \n\n3\\. 有一个1G大小的一个文件，里面每一行是一个词，词的大小不超过16字节，内存限制大小是1M。返回频数最高的100个词。 \n方案1：顺序读文件中，对于每个词x，取 ，然后按照该值存到5000个小文件（记为 ） 中。这样每个文件大概是200k左右。如果其中的有的文件超过了1M大小，还可以按照类似的方法继续往下分，知道分解得到的小文件的大小都不超过1M。对 每个小文件，统计每个文件中出现的词以及相应的频率（可以采用trie树/hash_map等），并取出出现频率最大的100个词（可以用含100个结点 的最小堆），并把100词及相应的频率存入文件，这样又得到了5000个文件。下一步就是把这5000个文件进行归并（类似与归并排序）的过程了。\n\n4\\. 海量日志数据，提取出某日访问百度次数最多的那个IP。 \n方案1：首先是这一天，并且是访问百度的日志中的IP取出来，逐个写入到一个大文件中。注意到IP是32位的，最多有 个 IP。同样可以采用映射的方法，比如模1000，把整个大文件映射为1000个小文件，再找出每个小文中出现频率最大的IP（可以采用hash_map进 行频率统计，然后再找出频率最大的几个）及相应的频率。然后再在这1000个最大的IP中，找出那个频率最大的IP，即为所求。\n\n5\\. 在2.5亿个整数中找出不重复的整数，内存不足以容纳这2.5亿个整数。 \n方案1：采用2-Bitmap（每个数分配2bit，00表示不存在，01表示出现一次，10表示多次，11无意义）进行，共需内存 内存，还可以接受。然后扫描这2.5亿个整数，查看Bitmap中相对应位，如果是00变01，01变10，10保持不变。所描完事后，查看bitmap，把对应位是01的整数输出即可。\n方案2：也可采用上题类似的方法，进行划分小文件的方法。然后在小文件中找出不重复的整数，并排序。然后再进行归并，注意去除重复的元素。 \n\n6\\. 海量数据分布在100台电脑中，想个办法高校统计出这批数据的TOP10。 \n方案1： \ns 在每台电脑上求出TOP10，可以采用包含10个元素的堆完成（TOP10小，用最大堆，TOP10大，用最小堆）。比如求TOP10大，我们首先取前 10个元素调整成最小堆，如果发现，然后扫描后面的数据，并与堆顶元素比较，如果比堆顶元素大，那么用该元素替换堆顶，然后再调整为最小堆。最后堆中的元 素就是TOP10大。\ns 求出每台电脑上的TOP10后，然后把这100台电脑上的TOP10组合起来，共1000个数据，再利用上面类似的方法求出TOP10就可以了。 \n\n7\\. 怎么在海量数据中找出重复次数最多的一个？ \n方案1：先做hash，然后求模映射为小文件，求出每个小文件中重复次数最多的一个，并记录重复次数。然后找出上一步求出的数据中重复次数最多的一个就是所求（具体参考前面的题）。\n\n8\\. 上千万或上亿数据（有重复），统计其中出现次数最多的钱N个数据。 \n方案1：上千万或上亿的数据，现在的机器的内存应该能存下。所以考虑采用hash_map/搜索二叉树/红黑树等来进行统计次数。然后就是取出前N个出现次数最多的数据了，可以用第6题提到的堆机制完成。\n\n9\\. 1000万字符串，其中有些是重复的，需要把重复的全部去掉，保留没有重复的字符串。请怎么设计和实现？ \n方案1：这题用trie树比较合适，hash_map也应该能行。 \n\n10\\. 一个文本文件，大约有一万行，每行一个词，要求统计出其中最频繁出现的前10个词，请给出思想，给出时间复杂度分析。 \n方案1：这题是考虑时间效率。用trie树统计每个词出现的次数，时间复杂度是O(n*le)（le表示单词的平准长度）。然后是找出出现最频繁的 前10个词，可以用堆来实现，前面的题中已经讲到了，时间复杂度是O(n*lg10)。所以总的时间复杂度，是O(n*le)与O(n*lg10)中较大 的哪一个。\n\n11\\. 一个文本文件，找出前10个经常出现的词，但这次文件比较长，说是上亿行或十亿行，总之无法一次读入内存，问最优解。 \n方案1：首先根据用hash并求模，将文件分解为多个小文件，对于单个文件利用上题的方法求出每个文件件中10个最常出现的词。然后再进行归并处理，找出最终的10个最常出现的词。\n\n12\\. 100w个数中找出最大的100个数。 \n方案1：在前面的题中，我们已经提到了，用一个含100个元素的最小堆完成。复杂度为O(100w*lg100)。 \n方案2：采用快速排序的思想，每次分割之后只考虑比轴大的一部分，知道比轴大的一部分在比100多的时候，采用传统排序算法排序，取前100个。复杂度为O(100w*100)。\n方案3：采用局部淘汰法。选取前100个元素，并排序，记为序列L。然后一次扫描剩余的元素x，与排好序的100个元素中最小的元素比，如果比这个 最小的要大，那么把这个最小的元素删除，并把x利用插入排序的思想，插入到序列L中。依次循环，知道扫描了所有的元素。复杂度为O(100w*100)。\n\n13\\. 寻找热门查询： \n搜索引擎会通过日志文件把用户每次检索使用的所有检索串都记录下来，每个查询串的长度为1-255字节。假设目前有一千万个记录，这些查询串的重复 读比较高，虽然总数是1千万，但是如果去除重复和，不超过3百万个。一个查询串的重复度越高，说明查询它的用户越多，也就越热门。请你统计最热门的10个 查询串，要求使用的内存不能超过1G。\n(1) 请描述你解决这个问题的思路； \n(2) 请给出主要的处理流程，算法，以及算法的复杂度。 \n方案1：采用trie树，关键字域存该查询串出现的次数，没有出现为0。最后用10个元素的最小推来对出现频率进行排序。 \n\n14\\. 一共有N个机器，每个机器上有N个数。每个机器最多存O(N)个数并对它们操作。如何找到 个数中的中数？ \n方案1：先大体估计一下这些数的范围，比如这里假设这些数都是32位无符号整数（共有 个）。我们把0到 的整数划分为N个范围段，每个段包含 个整数。比如，第一个段位0到 ，第二段为 到 ，…，第N个段为 到 。 然后，扫描每个机器上的N个数，把属于第一个区段的数放到第一个机器上，属于第二个区段的数放到第二个机器上，…，属于第N个区段的数放到第N个机器上。 注意这个过程每个机器上存储的数应该是O(N)的。下面我们依次统计每个机器上数的个数，一次累加，直到找到第k个机器，在该机器上累加的数大于或等于 ，而在第k-1个机器上的累加数小于 ，并把这个数记为x。那么我们要找的中位数在第k个机器中，排在第 位。然后我们对第k个机器的数排序，并找出第 个数，即为所求的中位数。复杂度是 的。 \n方案2：先对每台机器上的数进行排序。排好序后，我们采用归并排序的思想，将这N个机器上的数归并起来得到最终的排序。找到第n个便是所求。复杂度是n(i)的。 \n\n15\\. 最大间隙问题 \n给定n个实数 ，求着n个实数在实轴上向量2个数之间的最大差值，要求线性的时间算法。 \n方案1：最先想到的方法就是先对这n个数据进行排序，然后一遍扫描即可确定相邻的最大间隙。但该方法不能满足线性时间的要求。故采取如下方法： \ns 找到n个数据中最大和最小数据max和min。 \ns 用n-2个点等分区间[min, max]，即将[min, max]等分为n-1个区间（前闭后开区间），将这些区间看作桶，编号为 ，且桶 的上界和桶i+1的下届相同，即每个桶的大小相同。每个桶的大小为： 。实际上，这些桶的边界构成了一个等差数列（首项为min，公差为 ），且认为将min放入第一个桶，将max放入第n-1个桶。\ns 将n个数放入n-1个桶中：将每个元素 分配到某个桶（编号为index），其中 ，并求出分到每个桶的最大最小数据。 \ns 最大间隙：除最大最小数据max和min以外的n-2个数据放入n-1个桶中，由抽屉原理可知至少有一个桶是空的，又因为每个桶的大小相同，所以最大间隙 不会在同一桶中出现，一定是某个桶的上界和气候某个桶的下界之间隙，且该量筒之间的桶（即便好在该连个便好之间的桶）一定是空桶。也就是说，最大间隙在桶 i的上界和桶j的下界之间产生 。一遍扫描即可完成。\n\n16\\. 将多个集合合并成没有交集的集合：给定一个字符串的集合，格式如： 。要求将其中交集不为空的集合合并，要求合并完成的集合之间无交集，例如上例应输出 。 \n(1) 请描述你解决这个问题的思路； \n(2) 给出主要的处理流程，算法，以及算法的复杂度； \n(3) 请描述可能的改进。 \n方案1：采用并查集。首先所有的字符串都在单独的并查集中。然后依扫描每个集合，顺序合并将两个相邻元素合并。例如，对于 ， 首先查看aaa和bbb是否在同一个并查集中，如果不在，那么把它们所在的并查集合并，然后再看bbb和ccc是否在同一个并查集中，如果不在，那么也把 它们所在的并查集合并。接下来再扫描其他的集合，当所有的集合都扫描完了，并查集代表的集合便是所求。复杂度应该是O(NlgN)的。改进的话，首先可以 记录每个节点的根结点，改进查询。合并的时候，可以把大的和小的进行合，这样也减少复杂度。\n\n17\\. 最大子序列与最大子矩阵问题 \n数组的最大子序列问题：给定一个数组，其中元素有正，也有负，找出其中一个连续子序列，使和最大。 \n方案1：这个问题可以动态规划的思想解决。设 表示以第i个元素 结尾的最大子序列，那么显然 。基于这一点可以很快用代码实现。 \n最大子矩阵问题：给定一个矩阵（二维数组），其中数据有大有小，请找一个子矩阵，使得子矩阵的和最大，并输出这个和。 \n方案1：可以采用与最大子序列类似的思想来解决。如果我们确定了选择第i列和第j列之间的元素，那么在这个范围内，其实就是一个最大子序列问题。如何确定第i列和第j列可以词用暴搜的方法进行。\n\n转自：http://hi.baidu.com/jiaxiaobosuper/blog/item/5715981c8c7f54d3a686694b.html","slug":"e5-a4-a7-e6-95-b0-e6-8d-ae-e6-8e-92-e5-ba-8f-e6-88-96-e5-8f-96-e9-87-8d-e6-88-96-e5-8e-bb-e9-87-8d-e7-9b-b8-e5-85-b3-e9-97-ae-e9-a2-98","published":1,"updated":"2018-01-13T05:07:00.484Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjccw7x8x002qaqcrejss57yl","content":"<p>1. 给定a、b两个文件，各存放50亿个url，每个url各占64字节，内存限制是4G，让你找出a、b文件共同的url？<br>方案1：可以估计每个文件安的大小为50G×64=320G，远远大于内存限制的4G。所以不可能将其完全加载到内存中处理。考虑采取分而治之的方法。<br>s 遍历文件a，对每个url求取 ，然后根据所取得的值将url分别存储到1000个小文件（记为 ）中。这样每个小文件的大约为300M。<br>s 遍历文件b，采取和a相同的方式将url分别存储到1000各小文件（记为 ）。这样处理后，所有可能相同的url都在对应的小文件（ ）中，不对应的小文件不可能有相同的url。然后我们只要求出1000对小文件中相同的url即可。<br>s 求每对小文件中相同的url时，可以把其中一个小文件的url存储到hash_set中。然后遍历另一个小文件的每个url，看其是否在刚才构建的hash_set中，如果是，那么就是共同的url，存到文件里面就可以了。<br>方案2：如果允许有一定的错误率，可以使用Bloom filter，4G内存大概可以表示340亿bit。将其中一个文件中的url使用Bloom filter映射为这340亿bit，然后挨个读取另外一个文件的url，检查是否与Bloom filter，如果是，那么该url应该是共同的url（注意会有一定的错误率）。<br><a id=\"more\"></a></p>\n<p>2. 有10个文件，每个文件1G，每个文件的每一行存放的都是用户的query，每个文件的query都可能重复。要求你按照query的频度排序。<br>方案1：<br>s 顺序读取10个文件，按照hash(query)%10的结果将query写入到另外10个文件（记为 ）中。这样新生成的文件每个的大小大约也1G（假设hash函数是随机的）。<br>s 找一台内存在2G左右的机器，依次对 用hash_map(query, query_count)来统计每个query出现的次数。利用快速/堆/归并排序按照出现次数进行排序。将排序好的query和对应的query_cout输出到文件中。这样得到了10个排好序的文件（记为 ）。<br>s 对 这10个文件进行归并排序（内排序与外排序相结合）。<br>方案2：<br>一般query的总量是有限的，只是重复的次数比较多而已，可能对于所有的query，一次性就可以加入到内存了。这样，我们就可以采用trie树/hash_map等直接来统计每个query出现的次数，然后按出现次数做快速/堆/归并排序就可以了。<br>方案3：<br>与方案1类似，但在做完hash，分成多个文件后，可以交给多个文件来处理，采用分布式的架构来处理（比如MapReduce），最后再进行合并。 </p>\n<p>3. 有一个1G大小的一个文件，里面每一行是一个词，词的大小不超过16字节，内存限制大小是1M。返回频数最高的100个词。<br>方案1：顺序读文件中，对于每个词x，取 ，然后按照该值存到5000个小文件（记为 ） 中。这样每个文件大概是200k左右。如果其中的有的文件超过了1M大小，还可以按照类似的方法继续往下分，知道分解得到的小文件的大小都不超过1M。对 每个小文件，统计每个文件中出现的词以及相应的频率（可以采用trie树/hash_map等），并取出出现频率最大的100个词（可以用含100个结点 的最小堆），并把100词及相应的频率存入文件，这样又得到了5000个文件。下一步就是把这5000个文件进行归并（类似与归并排序）的过程了。</p>\n<p>4. 海量日志数据，提取出某日访问百度次数最多的那个IP。<br>方案1：首先是这一天，并且是访问百度的日志中的IP取出来，逐个写入到一个大文件中。注意到IP是32位的，最多有 个 IP。同样可以采用映射的方法，比如模1000，把整个大文件映射为1000个小文件，再找出每个小文中出现频率最大的IP（可以采用hash_map进 行频率统计，然后再找出频率最大的几个）及相应的频率。然后再在这1000个最大的IP中，找出那个频率最大的IP，即为所求。</p>\n<p>5. 在2.5亿个整数中找出不重复的整数，内存不足以容纳这2.5亿个整数。<br>方案1：采用2-Bitmap（每个数分配2bit，00表示不存在，01表示出现一次，10表示多次，11无意义）进行，共需内存 内存，还可以接受。然后扫描这2.5亿个整数，查看Bitmap中相对应位，如果是00变01，01变10，10保持不变。所描完事后，查看bitmap，把对应位是01的整数输出即可。<br>方案2：也可采用上题类似的方法，进行划分小文件的方法。然后在小文件中找出不重复的整数，并排序。然后再进行归并，注意去除重复的元素。 </p>\n<p>6. 海量数据分布在100台电脑中，想个办法高校统计出这批数据的TOP10。<br>方案1：<br>s 在每台电脑上求出TOP10，可以采用包含10个元素的堆完成（TOP10小，用最大堆，TOP10大，用最小堆）。比如求TOP10大，我们首先取前 10个元素调整成最小堆，如果发现，然后扫描后面的数据，并与堆顶元素比较，如果比堆顶元素大，那么用该元素替换堆顶，然后再调整为最小堆。最后堆中的元 素就是TOP10大。<br>s 求出每台电脑上的TOP10后，然后把这100台电脑上的TOP10组合起来，共1000个数据，再利用上面类似的方法求出TOP10就可以了。 </p>\n<p>7. 怎么在海量数据中找出重复次数最多的一个？<br>方案1：先做hash，然后求模映射为小文件，求出每个小文件中重复次数最多的一个，并记录重复次数。然后找出上一步求出的数据中重复次数最多的一个就是所求（具体参考前面的题）。</p>\n<p>8. 上千万或上亿数据（有重复），统计其中出现次数最多的钱N个数据。<br>方案1：上千万或上亿的数据，现在的机器的内存应该能存下。所以考虑采用hash_map/搜索二叉树/红黑树等来进行统计次数。然后就是取出前N个出现次数最多的数据了，可以用第6题提到的堆机制完成。</p>\n<p>9. 1000万字符串，其中有些是重复的，需要把重复的全部去掉，保留没有重复的字符串。请怎么设计和实现？<br>方案1：这题用trie树比较合适，hash_map也应该能行。 </p>\n<p>10. 一个文本文件，大约有一万行，每行一个词，要求统计出其中最频繁出现的前10个词，请给出思想，给出时间复杂度分析。<br>方案1：这题是考虑时间效率。用trie树统计每个词出现的次数，时间复杂度是O(n<em>le)（le表示单词的平准长度）。然后是找出出现最频繁的 前10个词，可以用堆来实现，前面的题中已经讲到了，时间复杂度是O(n</em>lg10)。所以总的时间复杂度，是O(n<em>le)与O(n</em>lg10)中较大 的哪一个。</p>\n<p>11. 一个文本文件，找出前10个经常出现的词，但这次文件比较长，说是上亿行或十亿行，总之无法一次读入内存，问最优解。<br>方案1：首先根据用hash并求模，将文件分解为多个小文件，对于单个文件利用上题的方法求出每个文件件中10个最常出现的词。然后再进行归并处理，找出最终的10个最常出现的词。</p>\n<p>12. 100w个数中找出最大的100个数。<br>方案1：在前面的题中，我们已经提到了，用一个含100个元素的最小堆完成。复杂度为O(100w<em>lg100)。<br>方案2：采用快速排序的思想，每次分割之后只考虑比轴大的一部分，知道比轴大的一部分在比100多的时候，采用传统排序算法排序，取前100个。复杂度为O(100w</em>100)。<br>方案3：采用局部淘汰法。选取前100个元素，并排序，记为序列L。然后一次扫描剩余的元素x，与排好序的100个元素中最小的元素比，如果比这个 最小的要大，那么把这个最小的元素删除，并把x利用插入排序的思想，插入到序列L中。依次循环，知道扫描了所有的元素。复杂度为O(100w*100)。</p>\n<p>13. 寻找热门查询：<br>搜索引擎会通过日志文件把用户每次检索使用的所有检索串都记录下来，每个查询串的长度为1-255字节。假设目前有一千万个记录，这些查询串的重复 读比较高，虽然总数是1千万，但是如果去除重复和，不超过3百万个。一个查询串的重复度越高，说明查询它的用户越多，也就越热门。请你统计最热门的10个 查询串，要求使用的内存不能超过1G。<br>(1) 请描述你解决这个问题的思路；<br>(2) 请给出主要的处理流程，算法，以及算法的复杂度。<br>方案1：采用trie树，关键字域存该查询串出现的次数，没有出现为0。最后用10个元素的最小推来对出现频率进行排序。 </p>\n<p>14. 一共有N个机器，每个机器上有N个数。每个机器最多存O(N)个数并对它们操作。如何找到 个数中的中数？<br>方案1：先大体估计一下这些数的范围，比如这里假设这些数都是32位无符号整数（共有 个）。我们把0到 的整数划分为N个范围段，每个段包含 个整数。比如，第一个段位0到 ，第二段为 到 ，…，第N个段为 到 。 然后，扫描每个机器上的N个数，把属于第一个区段的数放到第一个机器上，属于第二个区段的数放到第二个机器上，…，属于第N个区段的数放到第N个机器上。 注意这个过程每个机器上存储的数应该是O(N)的。下面我们依次统计每个机器上数的个数，一次累加，直到找到第k个机器，在该机器上累加的数大于或等于 ，而在第k-1个机器上的累加数小于 ，并把这个数记为x。那么我们要找的中位数在第k个机器中，排在第 位。然后我们对第k个机器的数排序，并找出第 个数，即为所求的中位数。复杂度是 的。<br>方案2：先对每台机器上的数进行排序。排好序后，我们采用归并排序的思想，将这N个机器上的数归并起来得到最终的排序。找到第n个便是所求。复杂度是n(i)的。 </p>\n<p>15. 最大间隙问题<br>给定n个实数 ，求着n个实数在实轴上向量2个数之间的最大差值，要求线性的时间算法。<br>方案1：最先想到的方法就是先对这n个数据进行排序，然后一遍扫描即可确定相邻的最大间隙。但该方法不能满足线性时间的要求。故采取如下方法：<br>s 找到n个数据中最大和最小数据max和min。<br>s 用n-2个点等分区间[min, max]，即将[min, max]等分为n-1个区间（前闭后开区间），将这些区间看作桶，编号为 ，且桶 的上界和桶i+1的下届相同，即每个桶的大小相同。每个桶的大小为： 。实际上，这些桶的边界构成了一个等差数列（首项为min，公差为 ），且认为将min放入第一个桶，将max放入第n-1个桶。<br>s 将n个数放入n-1个桶中：将每个元素 分配到某个桶（编号为index），其中 ，并求出分到每个桶的最大最小数据。<br>s 最大间隙：除最大最小数据max和min以外的n-2个数据放入n-1个桶中，由抽屉原理可知至少有一个桶是空的，又因为每个桶的大小相同，所以最大间隙 不会在同一桶中出现，一定是某个桶的上界和气候某个桶的下界之间隙，且该量筒之间的桶（即便好在该连个便好之间的桶）一定是空桶。也就是说，最大间隙在桶 i的上界和桶j的下界之间产生 。一遍扫描即可完成。</p>\n<p>16. 将多个集合合并成没有交集的集合：给定一个字符串的集合，格式如： 。要求将其中交集不为空的集合合并，要求合并完成的集合之间无交集，例如上例应输出 。<br>(1) 请描述你解决这个问题的思路；<br>(2) 给出主要的处理流程，算法，以及算法的复杂度；<br>(3) 请描述可能的改进。<br>方案1：采用并查集。首先所有的字符串都在单独的并查集中。然后依扫描每个集合，顺序合并将两个相邻元素合并。例如，对于 ， 首先查看aaa和bbb是否在同一个并查集中，如果不在，那么把它们所在的并查集合并，然后再看bbb和ccc是否在同一个并查集中，如果不在，那么也把 它们所在的并查集合并。接下来再扫描其他的集合，当所有的集合都扫描完了，并查集代表的集合便是所求。复杂度应该是O(NlgN)的。改进的话，首先可以 记录每个节点的根结点，改进查询。合并的时候，可以把大的和小的进行合，这样也减少复杂度。</p>\n<p>17. 最大子序列与最大子矩阵问题<br>数组的最大子序列问题：给定一个数组，其中元素有正，也有负，找出其中一个连续子序列，使和最大。<br>方案1：这个问题可以动态规划的思想解决。设 表示以第i个元素 结尾的最大子序列，那么显然 。基于这一点可以很快用代码实现。<br>最大子矩阵问题：给定一个矩阵（二维数组），其中数据有大有小，请找一个子矩阵，使得子矩阵的和最大，并输出这个和。<br>方案1：可以采用与最大子序列类似的思想来解决。如果我们确定了选择第i列和第j列之间的元素，那么在这个范围内，其实就是一个最大子序列问题。如何确定第i列和第j列可以词用暴搜的方法进行。</p>\n<p>转自：<a href=\"http://hi.baidu.com/jiaxiaobosuper/blog/item/5715981c8c7f54d3a686694b.html\" target=\"_blank\" rel=\"noopener\">http://hi.baidu.com/jiaxiaobosuper/blog/item/5715981c8c7f54d3a686694b.html</a></p>\n","site":{"data":{}},"excerpt":"<p>1. 给定a、b两个文件，各存放50亿个url，每个url各占64字节，内存限制是4G，让你找出a、b文件共同的url？<br>方案1：可以估计每个文件安的大小为50G×64=320G，远远大于内存限制的4G。所以不可能将其完全加载到内存中处理。考虑采取分而治之的方法。<br>s 遍历文件a，对每个url求取 ，然后根据所取得的值将url分别存储到1000个小文件（记为 ）中。这样每个小文件的大约为300M。<br>s 遍历文件b，采取和a相同的方式将url分别存储到1000各小文件（记为 ）。这样处理后，所有可能相同的url都在对应的小文件（ ）中，不对应的小文件不可能有相同的url。然后我们只要求出1000对小文件中相同的url即可。<br>s 求每对小文件中相同的url时，可以把其中一个小文件的url存储到hash_set中。然后遍历另一个小文件的每个url，看其是否在刚才构建的hash_set中，如果是，那么就是共同的url，存到文件里面就可以了。<br>方案2：如果允许有一定的错误率，可以使用Bloom filter，4G内存大概可以表示340亿bit。将其中一个文件中的url使用Bloom filter映射为这340亿bit，然后挨个读取另外一个文件的url，检查是否与Bloom filter，如果是，那么该url应该是共同的url（注意会有一定的错误率）。<br>","more":"</p>\n<p>2. 有10个文件，每个文件1G，每个文件的每一行存放的都是用户的query，每个文件的query都可能重复。要求你按照query的频度排序。<br>方案1：<br>s 顺序读取10个文件，按照hash(query)%10的结果将query写入到另外10个文件（记为 ）中。这样新生成的文件每个的大小大约也1G（假设hash函数是随机的）。<br>s 找一台内存在2G左右的机器，依次对 用hash_map(query, query_count)来统计每个query出现的次数。利用快速/堆/归并排序按照出现次数进行排序。将排序好的query和对应的query_cout输出到文件中。这样得到了10个排好序的文件（记为 ）。<br>s 对 这10个文件进行归并排序（内排序与外排序相结合）。<br>方案2：<br>一般query的总量是有限的，只是重复的次数比较多而已，可能对于所有的query，一次性就可以加入到内存了。这样，我们就可以采用trie树/hash_map等直接来统计每个query出现的次数，然后按出现次数做快速/堆/归并排序就可以了。<br>方案3：<br>与方案1类似，但在做完hash，分成多个文件后，可以交给多个文件来处理，采用分布式的架构来处理（比如MapReduce），最后再进行合并。 </p>\n<p>3. 有一个1G大小的一个文件，里面每一行是一个词，词的大小不超过16字节，内存限制大小是1M。返回频数最高的100个词。<br>方案1：顺序读文件中，对于每个词x，取 ，然后按照该值存到5000个小文件（记为 ） 中。这样每个文件大概是200k左右。如果其中的有的文件超过了1M大小，还可以按照类似的方法继续往下分，知道分解得到的小文件的大小都不超过1M。对 每个小文件，统计每个文件中出现的词以及相应的频率（可以采用trie树/hash_map等），并取出出现频率最大的100个词（可以用含100个结点 的最小堆），并把100词及相应的频率存入文件，这样又得到了5000个文件。下一步就是把这5000个文件进行归并（类似与归并排序）的过程了。</p>\n<p>4. 海量日志数据，提取出某日访问百度次数最多的那个IP。<br>方案1：首先是这一天，并且是访问百度的日志中的IP取出来，逐个写入到一个大文件中。注意到IP是32位的，最多有 个 IP。同样可以采用映射的方法，比如模1000，把整个大文件映射为1000个小文件，再找出每个小文中出现频率最大的IP（可以采用hash_map进 行频率统计，然后再找出频率最大的几个）及相应的频率。然后再在这1000个最大的IP中，找出那个频率最大的IP，即为所求。</p>\n<p>5. 在2.5亿个整数中找出不重复的整数，内存不足以容纳这2.5亿个整数。<br>方案1：采用2-Bitmap（每个数分配2bit，00表示不存在，01表示出现一次，10表示多次，11无意义）进行，共需内存 内存，还可以接受。然后扫描这2.5亿个整数，查看Bitmap中相对应位，如果是00变01，01变10，10保持不变。所描完事后，查看bitmap，把对应位是01的整数输出即可。<br>方案2：也可采用上题类似的方法，进行划分小文件的方法。然后在小文件中找出不重复的整数，并排序。然后再进行归并，注意去除重复的元素。 </p>\n<p>6. 海量数据分布在100台电脑中，想个办法高校统计出这批数据的TOP10。<br>方案1：<br>s 在每台电脑上求出TOP10，可以采用包含10个元素的堆完成（TOP10小，用最大堆，TOP10大，用最小堆）。比如求TOP10大，我们首先取前 10个元素调整成最小堆，如果发现，然后扫描后面的数据，并与堆顶元素比较，如果比堆顶元素大，那么用该元素替换堆顶，然后再调整为最小堆。最后堆中的元 素就是TOP10大。<br>s 求出每台电脑上的TOP10后，然后把这100台电脑上的TOP10组合起来，共1000个数据，再利用上面类似的方法求出TOP10就可以了。 </p>\n<p>7. 怎么在海量数据中找出重复次数最多的一个？<br>方案1：先做hash，然后求模映射为小文件，求出每个小文件中重复次数最多的一个，并记录重复次数。然后找出上一步求出的数据中重复次数最多的一个就是所求（具体参考前面的题）。</p>\n<p>8. 上千万或上亿数据（有重复），统计其中出现次数最多的钱N个数据。<br>方案1：上千万或上亿的数据，现在的机器的内存应该能存下。所以考虑采用hash_map/搜索二叉树/红黑树等来进行统计次数。然后就是取出前N个出现次数最多的数据了，可以用第6题提到的堆机制完成。</p>\n<p>9. 1000万字符串，其中有些是重复的，需要把重复的全部去掉，保留没有重复的字符串。请怎么设计和实现？<br>方案1：这题用trie树比较合适，hash_map也应该能行。 </p>\n<p>10. 一个文本文件，大约有一万行，每行一个词，要求统计出其中最频繁出现的前10个词，请给出思想，给出时间复杂度分析。<br>方案1：这题是考虑时间效率。用trie树统计每个词出现的次数，时间复杂度是O(n<em>le)（le表示单词的平准长度）。然后是找出出现最频繁的 前10个词，可以用堆来实现，前面的题中已经讲到了，时间复杂度是O(n</em>lg10)。所以总的时间复杂度，是O(n<em>le)与O(n</em>lg10)中较大 的哪一个。</p>\n<p>11. 一个文本文件，找出前10个经常出现的词，但这次文件比较长，说是上亿行或十亿行，总之无法一次读入内存，问最优解。<br>方案1：首先根据用hash并求模，将文件分解为多个小文件，对于单个文件利用上题的方法求出每个文件件中10个最常出现的词。然后再进行归并处理，找出最终的10个最常出现的词。</p>\n<p>12. 100w个数中找出最大的100个数。<br>方案1：在前面的题中，我们已经提到了，用一个含100个元素的最小堆完成。复杂度为O(100w<em>lg100)。<br>方案2：采用快速排序的思想，每次分割之后只考虑比轴大的一部分，知道比轴大的一部分在比100多的时候，采用传统排序算法排序，取前100个。复杂度为O(100w</em>100)。<br>方案3：采用局部淘汰法。选取前100个元素，并排序，记为序列L。然后一次扫描剩余的元素x，与排好序的100个元素中最小的元素比，如果比这个 最小的要大，那么把这个最小的元素删除，并把x利用插入排序的思想，插入到序列L中。依次循环，知道扫描了所有的元素。复杂度为O(100w*100)。</p>\n<p>13. 寻找热门查询：<br>搜索引擎会通过日志文件把用户每次检索使用的所有检索串都记录下来，每个查询串的长度为1-255字节。假设目前有一千万个记录，这些查询串的重复 读比较高，虽然总数是1千万，但是如果去除重复和，不超过3百万个。一个查询串的重复度越高，说明查询它的用户越多，也就越热门。请你统计最热门的10个 查询串，要求使用的内存不能超过1G。<br>(1) 请描述你解决这个问题的思路；<br>(2) 请给出主要的处理流程，算法，以及算法的复杂度。<br>方案1：采用trie树，关键字域存该查询串出现的次数，没有出现为0。最后用10个元素的最小推来对出现频率进行排序。 </p>\n<p>14. 一共有N个机器，每个机器上有N个数。每个机器最多存O(N)个数并对它们操作。如何找到 个数中的中数？<br>方案1：先大体估计一下这些数的范围，比如这里假设这些数都是32位无符号整数（共有 个）。我们把0到 的整数划分为N个范围段，每个段包含 个整数。比如，第一个段位0到 ，第二段为 到 ，…，第N个段为 到 。 然后，扫描每个机器上的N个数，把属于第一个区段的数放到第一个机器上，属于第二个区段的数放到第二个机器上，…，属于第N个区段的数放到第N个机器上。 注意这个过程每个机器上存储的数应该是O(N)的。下面我们依次统计每个机器上数的个数，一次累加，直到找到第k个机器，在该机器上累加的数大于或等于 ，而在第k-1个机器上的累加数小于 ，并把这个数记为x。那么我们要找的中位数在第k个机器中，排在第 位。然后我们对第k个机器的数排序，并找出第 个数，即为所求的中位数。复杂度是 的。<br>方案2：先对每台机器上的数进行排序。排好序后，我们采用归并排序的思想，将这N个机器上的数归并起来得到最终的排序。找到第n个便是所求。复杂度是n(i)的。 </p>\n<p>15. 最大间隙问题<br>给定n个实数 ，求着n个实数在实轴上向量2个数之间的最大差值，要求线性的时间算法。<br>方案1：最先想到的方法就是先对这n个数据进行排序，然后一遍扫描即可确定相邻的最大间隙。但该方法不能满足线性时间的要求。故采取如下方法：<br>s 找到n个数据中最大和最小数据max和min。<br>s 用n-2个点等分区间[min, max]，即将[min, max]等分为n-1个区间（前闭后开区间），将这些区间看作桶，编号为 ，且桶 的上界和桶i+1的下届相同，即每个桶的大小相同。每个桶的大小为： 。实际上，这些桶的边界构成了一个等差数列（首项为min，公差为 ），且认为将min放入第一个桶，将max放入第n-1个桶。<br>s 将n个数放入n-1个桶中：将每个元素 分配到某个桶（编号为index），其中 ，并求出分到每个桶的最大最小数据。<br>s 最大间隙：除最大最小数据max和min以外的n-2个数据放入n-1个桶中，由抽屉原理可知至少有一个桶是空的，又因为每个桶的大小相同，所以最大间隙 不会在同一桶中出现，一定是某个桶的上界和气候某个桶的下界之间隙，且该量筒之间的桶（即便好在该连个便好之间的桶）一定是空桶。也就是说，最大间隙在桶 i的上界和桶j的下界之间产生 。一遍扫描即可完成。</p>\n<p>16. 将多个集合合并成没有交集的集合：给定一个字符串的集合，格式如： 。要求将其中交集不为空的集合合并，要求合并完成的集合之间无交集，例如上例应输出 。<br>(1) 请描述你解决这个问题的思路；<br>(2) 给出主要的处理流程，算法，以及算法的复杂度；<br>(3) 请描述可能的改进。<br>方案1：采用并查集。首先所有的字符串都在单独的并查集中。然后依扫描每个集合，顺序合并将两个相邻元素合并。例如，对于 ， 首先查看aaa和bbb是否在同一个并查集中，如果不在，那么把它们所在的并查集合并，然后再看bbb和ccc是否在同一个并查集中，如果不在，那么也把 它们所在的并查集合并。接下来再扫描其他的集合，当所有的集合都扫描完了，并查集代表的集合便是所求。复杂度应该是O(NlgN)的。改进的话，首先可以 记录每个节点的根结点，改进查询。合并的时候，可以把大的和小的进行合，这样也减少复杂度。</p>\n<p>17. 最大子序列与最大子矩阵问题<br>数组的最大子序列问题：给定一个数组，其中元素有正，也有负，找出其中一个连续子序列，使和最大。<br>方案1：这个问题可以动态规划的思想解决。设 表示以第i个元素 结尾的最大子序列，那么显然 。基于这一点可以很快用代码实现。<br>最大子矩阵问题：给定一个矩阵（二维数组），其中数据有大有小，请找一个子矩阵，使得子矩阵的和最大，并输出这个和。<br>方案1：可以采用与最大子序列类似的思想来解决。如果我们确定了选择第i列和第j列之间的元素，那么在这个范围内，其实就是一个最大子序列问题。如何确定第i列和第j列可以词用暴搜的方法进行。</p>\n<p>转自：<a href=\"http://hi.baidu.com/jiaxiaobosuper/blog/item/5715981c8c7f54d3a686694b.html\" target=\"_blank\" rel=\"noopener\">http://hi.baidu.com/jiaxiaobosuper/blog/item/5715981c8c7f54d3a686694b.html</a></p>"},{"title":"强制 IE  Document Mode","id":"1818","date":"2014-05-05T05:32:54.000Z","_content":"\n接上篇，如果把某个网站加到了ie的兼容性列表里，自然ie 会在ie7 下显示，一些“高级”的样式就会被严重忽视。当然这里会有一些方法来“破解”这些问题，强制以某个版本的 ie 来显示当前的页面。\n\n`<meta http-equiv=\"X-UA-Compatible\" content=\"IE=7\" />\n<meta http-equiv=\"X-UA-Compatible\" content=\"IE=8\" />\n<meta http-equiv=\"X-UA-Compatible\" content=\"IE=9\" />\n<meta http-equiv=\"X-UA-Compatible\" content=\"IE=10\" />`\n\n这些X-UA-Compatible是可以直接无视本地兼容列表和DOCTYPE的，优先级很高。\n\n当然还有一个实用的用法，就是一直以最高的ie mode来渲染。装了ie8就以ie8来渲染，装了ie10就以ie10来渲染。\n\n`<meta http-equiv=\"x-ua-compatible\" content=\"IE=edge\">`\n\n为了更好的支持，不管用哪个版本的浏览器，标记是不能少的。<!--more-->\n`<!DOCTYPE html>`\nx-ua-compatible 的负面影响还没有研究，做为一个业余的前端开发，真是体会到了ie的事真多。\n还有一些高级的用法可以看这里和那里\nhttp://msdn.microsoft.com/en-us/library/ie/jj676916(v=vs.85).aspx\nhttp://msdn.microsoft.com/en-us/library/ie/jj676915(v=vs.85).aspx","source":"_posts/e5-bc-ba-e5-88-b6-ie-document-mode.md","raw":"---\ntitle: 强制 IE  Document Mode\ntags:\n  - ie\nid: 1818\ncategories:\n  - Html\ndate: 2014-05-05 13:32:54\n---\n\n接上篇，如果把某个网站加到了ie的兼容性列表里，自然ie 会在ie7 下显示，一些“高级”的样式就会被严重忽视。当然这里会有一些方法来“破解”这些问题，强制以某个版本的 ie 来显示当前的页面。\n\n`<meta http-equiv=\"X-UA-Compatible\" content=\"IE=7\" />\n<meta http-equiv=\"X-UA-Compatible\" content=\"IE=8\" />\n<meta http-equiv=\"X-UA-Compatible\" content=\"IE=9\" />\n<meta http-equiv=\"X-UA-Compatible\" content=\"IE=10\" />`\n\n这些X-UA-Compatible是可以直接无视本地兼容列表和DOCTYPE的，优先级很高。\n\n当然还有一个实用的用法，就是一直以最高的ie mode来渲染。装了ie8就以ie8来渲染，装了ie10就以ie10来渲染。\n\n`<meta http-equiv=\"x-ua-compatible\" content=\"IE=edge\">`\n\n为了更好的支持，不管用哪个版本的浏览器，标记是不能少的。<!--more-->\n`<!DOCTYPE html>`\nx-ua-compatible 的负面影响还没有研究，做为一个业余的前端开发，真是体会到了ie的事真多。\n还有一些高级的用法可以看这里和那里\nhttp://msdn.microsoft.com/en-us/library/ie/jj676916(v=vs.85).aspx\nhttp://msdn.microsoft.com/en-us/library/ie/jj676915(v=vs.85).aspx","slug":"e5-bc-ba-e5-88-b6-ie-document-mode","published":1,"updated":"2018-01-13T05:07:00.477Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjccw7x8z002taqcr0fuarx3b","content":"<p>接上篇，如果把某个网站加到了ie的兼容性列表里，自然ie 会在ie7 下显示，一些“高级”的样式就会被严重忽视。当然这里会有一些方法来“破解”这些问题，强制以某个版本的 ie 来显示当前的页面。</p>\n<p>`<meta http-equiv=\"X-UA-Compatible\" content=\"IE=7\"></p>\n<p><meta http-equiv=\"X-UA-Compatible\" content=\"IE=8\"></p>\n<p><meta http-equiv=\"X-UA-Compatible\" content=\"IE=9\"></p>\n<p><meta http-equiv=\"X-UA-Compatible\" content=\"IE=10\">`</p>\n<p>这些X-UA-Compatible是可以直接无视本地兼容列表和DOCTYPE的，优先级很高。</p>\n<p>当然还有一个实用的用法，就是一直以最高的ie mode来渲染。装了ie8就以ie8来渲染，装了ie10就以ie10来渲染。</p>\n<p><code>&lt;meta http-equiv=&quot;x-ua-compatible&quot; content=&quot;IE=edge&quot;&gt;</code></p>\n<p>为了更好的支持，不管用哪个版本的浏览器，标记是不能少的。<a id=\"more\"></a><br><code>&lt;!DOCTYPE html&gt;</code><br>x-ua-compatible 的负面影响还没有研究，做为一个业余的前端开发，真是体会到了ie的事真多。<br>还有一些高级的用法可以看这里和那里<br><a href=\"http://msdn.microsoft.com/en-us/library/ie/jj676916(v=vs.85).aspx\" target=\"_blank\" rel=\"noopener\">http://msdn.microsoft.com/en-us/library/ie/jj676916(v=vs.85).aspx</a><br><a href=\"http://msdn.microsoft.com/en-us/library/ie/jj676915(v=vs.85).aspx\" target=\"_blank\" rel=\"noopener\">http://msdn.microsoft.com/en-us/library/ie/jj676915(v=vs.85).aspx</a></p>\n","site":{"data":{}},"excerpt":"<p>接上篇，如果把某个网站加到了ie的兼容性列表里，自然ie 会在ie7 下显示，一些“高级”的样式就会被严重忽视。当然这里会有一些方法来“破解”这些问题，强制以某个版本的 ie 来显示当前的页面。</p>\n<p>`<meta http-equiv=\"X-UA-Compatible\" content=\"IE=7\"></p>\n<p><meta http-equiv=\"X-UA-Compatible\" content=\"IE=8\"></p>\n<p><meta http-equiv=\"X-UA-Compatible\" content=\"IE=9\"></p>\n<p><meta http-equiv=\"X-UA-Compatible\" content=\"IE=10\">`</p>\n<p>这些X-UA-Compatible是可以直接无视本地兼容列表和DOCTYPE的，优先级很高。</p>\n<p>当然还有一个实用的用法，就是一直以最高的ie mode来渲染。装了ie8就以ie8来渲染，装了ie10就以ie10来渲染。</p>\n<p><code>&lt;meta http-equiv=&quot;x-ua-compatible&quot; content=&quot;IE=edge&quot;&gt;</code></p>\n<p>为了更好的支持，不管用哪个版本的浏览器，标记是不能少的。","more":"<br><code>&lt;!DOCTYPE html&gt;</code><br>x-ua-compatible 的负面影响还没有研究，做为一个业余的前端开发，真是体会到了ie的事真多。<br>还有一些高级的用法可以看这里和那里<br><a href=\"http://msdn.microsoft.com/en-us/library/ie/jj676916(v=vs.85).aspx\" target=\"_blank\" rel=\"noopener\">http://msdn.microsoft.com/en-us/library/ie/jj676916(v=vs.85).aspx</a><br><a href=\"http://msdn.microsoft.com/en-us/library/ie/jj676915(v=vs.85).aspx\" target=\"_blank\" rel=\"noopener\">http://msdn.microsoft.com/en-us/library/ie/jj676915(v=vs.85).aspx</a></p>"},{"title":"PHP时间戳","id":"1092","date":"2012-11-06T07:27:51.000Z","_content":"\n$t = time();\n$t1 = mktime(0,0,0,date(“m”,$t),date(“d”,$t),date(“Y”,$t));\n$t2 = mktime(0,0,0,date(“m”,$t),1,date(“Y”,$t));\n$t3 = mktime(0,0,0,date(“m”,$t)-1,1,date(“Y”,$t));\n$t4 = mktime(0,0,0,1,1,date(“Y”,$t));\n$e1 = mktime(23,59,59,date(“m”,$t),date(“d”,$t),date(“Y”,$t));\n$e2 = mktime(23,59,59,date(“m”,$t),date(“t”),date(“Y”,$t));\n$e3 = mktime(23,59,59,date(“m”,$t)-1,date(“t”,$t3),date(“Y”,$t));\n$e4 = mktime(23,59,59,12,31,date(“Y”,$t));\n//测试\necho date(“当前 Y-m-d H:i:s”,$t).” $t\n”;\necho date(“今天起点 Y-m-d H:i:s”,$t1).” $t1\n”;\necho date(“今月起点 Y-m-d H:i:s”,$t2).” $t2\n”;\necho date(“上月起点 Y-m-d H:i:s”,$t3).” $t3\n”;\necho date(“今年起点 Y-m-d H:i:s”,$t4).” $t4\n”;\n//测试\necho date(“今天终点 Y-m-d H:i:s”,$e1).” $e1\n”;\necho date(“今月终点 Y-m-d H:i:s”,$e2).” $e2\n”;\necho date(“上月终点 Y-m-d H:i:s”,$e3).” $e3\n”;\necho date(“今年终点 Y-m-d H:i:s”,$e4).” $e4\n”;<!--more-->\n结果：\n当前 2011-05-24 15:42:55 1306222975\n今天起点 2011-05-24 00:00:00 1306166400\n今月起点 2011-05-01 00:00:00 1304179200\n上月起点 2011-04-01 00:00:00 1301587200\n今年起点 2011-01-01 00:00:00 1293811200\n今天终点 2011-05-24 23:59:59 1306252799\n今月终点 2011-05-31 23:59:59 1306857599\n上月终点 2011-04-30 23:59:59 1304179199\n今年终点 2011-12-31 23:59:59 1325347199\n\necho \"今天:\".date(\"Y-m-d\").\"\n\";\necho \"昨天:\".date(\"Y-m-d\",strtotime(\"-1 day\")), \"\n\";\necho \"明天:\".date(\"Y-m-d\",strtotime(\"+1 day\")). \"\n\";\n\necho \"一周后:\".date(\"Y-m-d\",strtotime(\"+1 week\")). \"\n\";\necho \"一周零两天四小时两秒后:\".date(\"Y-m-d G:H:s\",strtotime(\"+1 week 2 days 4 hours 2 seconds\")). \"\n\";\necho \"下个星期四:\".date(\"Y-m-d\",strtotime(\"next Thursday\")). \"\n\";\necho \"上个周一:\".date(\"Y-m-d\",strtotime(\"last Monday\")).\"\n\";\necho \"一个月前:\".date(\"Y-m-d\",strtotime(\"last month\")).\"\n\";\necho \"一个月后:\".date(\"Y-m-d\",strtotime(\"+1 month\")).\"\n\";\necho \"十年后:\".date(\"Y-m-d\",strtotime(\"+10 year\")).\"\n\";","source":"_posts/e6-97-b6-e9-97-b4-e6-88-b3php.md","raw":"---\ntitle: PHP时间戳\nid: 1092\ncategories:\n  - PHP\ndate: 2012-11-06 15:27:51\ntags:\n---\n\n$t = time();\n$t1 = mktime(0,0,0,date(“m”,$t),date(“d”,$t),date(“Y”,$t));\n$t2 = mktime(0,0,0,date(“m”,$t),1,date(“Y”,$t));\n$t3 = mktime(0,0,0,date(“m”,$t)-1,1,date(“Y”,$t));\n$t4 = mktime(0,0,0,1,1,date(“Y”,$t));\n$e1 = mktime(23,59,59,date(“m”,$t),date(“d”,$t),date(“Y”,$t));\n$e2 = mktime(23,59,59,date(“m”,$t),date(“t”),date(“Y”,$t));\n$e3 = mktime(23,59,59,date(“m”,$t)-1,date(“t”,$t3),date(“Y”,$t));\n$e4 = mktime(23,59,59,12,31,date(“Y”,$t));\n//测试\necho date(“当前 Y-m-d H:i:s”,$t).” $t\n”;\necho date(“今天起点 Y-m-d H:i:s”,$t1).” $t1\n”;\necho date(“今月起点 Y-m-d H:i:s”,$t2).” $t2\n”;\necho date(“上月起点 Y-m-d H:i:s”,$t3).” $t3\n”;\necho date(“今年起点 Y-m-d H:i:s”,$t4).” $t4\n”;\n//测试\necho date(“今天终点 Y-m-d H:i:s”,$e1).” $e1\n”;\necho date(“今月终点 Y-m-d H:i:s”,$e2).” $e2\n”;\necho date(“上月终点 Y-m-d H:i:s”,$e3).” $e3\n”;\necho date(“今年终点 Y-m-d H:i:s”,$e4).” $e4\n”;<!--more-->\n结果：\n当前 2011-05-24 15:42:55 1306222975\n今天起点 2011-05-24 00:00:00 1306166400\n今月起点 2011-05-01 00:00:00 1304179200\n上月起点 2011-04-01 00:00:00 1301587200\n今年起点 2011-01-01 00:00:00 1293811200\n今天终点 2011-05-24 23:59:59 1306252799\n今月终点 2011-05-31 23:59:59 1306857599\n上月终点 2011-04-30 23:59:59 1304179199\n今年终点 2011-12-31 23:59:59 1325347199\n\necho \"今天:\".date(\"Y-m-d\").\"\n\";\necho \"昨天:\".date(\"Y-m-d\",strtotime(\"-1 day\")), \"\n\";\necho \"明天:\".date(\"Y-m-d\",strtotime(\"+1 day\")). \"\n\";\n\necho \"一周后:\".date(\"Y-m-d\",strtotime(\"+1 week\")). \"\n\";\necho \"一周零两天四小时两秒后:\".date(\"Y-m-d G:H:s\",strtotime(\"+1 week 2 days 4 hours 2 seconds\")). \"\n\";\necho \"下个星期四:\".date(\"Y-m-d\",strtotime(\"next Thursday\")). \"\n\";\necho \"上个周一:\".date(\"Y-m-d\",strtotime(\"last Monday\")).\"\n\";\necho \"一个月前:\".date(\"Y-m-d\",strtotime(\"last month\")).\"\n\";\necho \"一个月后:\".date(\"Y-m-d\",strtotime(\"+1 month\")).\"\n\";\necho \"十年后:\".date(\"Y-m-d\",strtotime(\"+10 year\")).\"\n\";","slug":"e6-97-b6-e9-97-b4-e6-88-b3php","published":1,"updated":"2018-01-13T05:07:00.486Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjccw7x91002vaqcry7a9o8xk","content":"<p>$t = time();<br>$t1 = mktime(0,0,0,date(“m”,$t),date(“d”,$t),date(“Y”,$t));<br>$t2 = mktime(0,0,0,date(“m”,$t),1,date(“Y”,$t));<br>$t3 = mktime(0,0,0,date(“m”,$t)-1,1,date(“Y”,$t));<br>$t4 = mktime(0,0,0,1,1,date(“Y”,$t));<br>$e1 = mktime(23,59,59,date(“m”,$t),date(“d”,$t),date(“Y”,$t));<br>$e2 = mktime(23,59,59,date(“m”,$t),date(“t”),date(“Y”,$t));<br>$e3 = mktime(23,59,59,date(“m”,$t)-1,date(“t”,$t3),date(“Y”,$t));<br>$e4 = mktime(23,59,59,12,31,date(“Y”,$t));<br>//测试<br>echo date(“当前 Y-m-d H:i:s”,$t).” $t<br>”;<br>echo date(“今天起点 Y-m-d H:i:s”,$t1).” $t1<br>”;<br>echo date(“今月起点 Y-m-d H:i:s”,$t2).” $t2<br>”;<br>echo date(“上月起点 Y-m-d H:i:s”,$t3).” $t3<br>”;<br>echo date(“今年起点 Y-m-d H:i:s”,$t4).” $t4<br>”;<br>//测试<br>echo date(“今天终点 Y-m-d H:i:s”,$e1).” $e1<br>”;<br>echo date(“今月终点 Y-m-d H:i:s”,$e2).” $e2<br>”;<br>echo date(“上月终点 Y-m-d H:i:s”,$e3).” $e3<br>”;<br>echo date(“今年终点 Y-m-d H:i:s”,$e4).” $e4<br>”;<a id=\"more\"></a><br>结果：<br>当前 2011-05-24 15:42:55 1306222975<br>今天起点 2011-05-24 00:00:00 1306166400<br>今月起点 2011-05-01 00:00:00 1304179200<br>上月起点 2011-04-01 00:00:00 1301587200<br>今年起点 2011-01-01 00:00:00 1293811200<br>今天终点 2011-05-24 23:59:59 1306252799<br>今月终点 2011-05-31 23:59:59 1306857599<br>上月终点 2011-04-30 23:59:59 1304179199<br>今年终点 2011-12-31 23:59:59 1325347199</p>\n<p>echo “今天:”.date(“Y-m-d”).”<br>“;<br>echo “昨天:”.date(“Y-m-d”,strtotime(“-1 day”)), “<br>“;<br>echo “明天:”.date(“Y-m-d”,strtotime(“+1 day”)). “<br>“;</p>\n<p>echo “一周后:”.date(“Y-m-d”,strtotime(“+1 week”)). “<br>“;<br>echo “一周零两天四小时两秒后:”.date(“Y-m-d G:H:s”,strtotime(“+1 week 2 days 4 hours 2 seconds”)). “<br>“;<br>echo “下个星期四:”.date(“Y-m-d”,strtotime(“next Thursday”)). “<br>“;<br>echo “上个周一:”.date(“Y-m-d”,strtotime(“last Monday”)).”<br>“;<br>echo “一个月前:”.date(“Y-m-d”,strtotime(“last month”)).”<br>“;<br>echo “一个月后:”.date(“Y-m-d”,strtotime(“+1 month”)).”<br>“;<br>echo “十年后:”.date(“Y-m-d”,strtotime(“+10 year”)).”<br>“;</p>\n","site":{"data":{}},"excerpt":"<p>$t = time();<br>$t1 = mktime(0,0,0,date(“m”,$t),date(“d”,$t),date(“Y”,$t));<br>$t2 = mktime(0,0,0,date(“m”,$t),1,date(“Y”,$t));<br>$t3 = mktime(0,0,0,date(“m”,$t)-1,1,date(“Y”,$t));<br>$t4 = mktime(0,0,0,1,1,date(“Y”,$t));<br>$e1 = mktime(23,59,59,date(“m”,$t),date(“d”,$t),date(“Y”,$t));<br>$e2 = mktime(23,59,59,date(“m”,$t),date(“t”),date(“Y”,$t));<br>$e3 = mktime(23,59,59,date(“m”,$t)-1,date(“t”,$t3),date(“Y”,$t));<br>$e4 = mktime(23,59,59,12,31,date(“Y”,$t));<br>//测试<br>echo date(“当前 Y-m-d H:i:s”,$t).” $t<br>”;<br>echo date(“今天起点 Y-m-d H:i:s”,$t1).” $t1<br>”;<br>echo date(“今月起点 Y-m-d H:i:s”,$t2).” $t2<br>”;<br>echo date(“上月起点 Y-m-d H:i:s”,$t3).” $t3<br>”;<br>echo date(“今年起点 Y-m-d H:i:s”,$t4).” $t4<br>”;<br>//测试<br>echo date(“今天终点 Y-m-d H:i:s”,$e1).” $e1<br>”;<br>echo date(“今月终点 Y-m-d H:i:s”,$e2).” $e2<br>”;<br>echo date(“上月终点 Y-m-d H:i:s”,$e3).” $e3<br>”;<br>echo date(“今年终点 Y-m-d H:i:s”,$e4).” $e4<br>”;","more":"<br>结果：<br>当前 2011-05-24 15:42:55 1306222975<br>今天起点 2011-05-24 00:00:00 1306166400<br>今月起点 2011-05-01 00:00:00 1304179200<br>上月起点 2011-04-01 00:00:00 1301587200<br>今年起点 2011-01-01 00:00:00 1293811200<br>今天终点 2011-05-24 23:59:59 1306252799<br>今月终点 2011-05-31 23:59:59 1306857599<br>上月终点 2011-04-30 23:59:59 1304179199<br>今年终点 2011-12-31 23:59:59 1325347199</p>\n<p>echo “今天:”.date(“Y-m-d”).”<br>“;<br>echo “昨天:”.date(“Y-m-d”,strtotime(“-1 day”)), “<br>“;<br>echo “明天:”.date(“Y-m-d”,strtotime(“+1 day”)). “<br>“;</p>\n<p>echo “一周后:”.date(“Y-m-d”,strtotime(“+1 week”)). “<br>“;<br>echo “一周零两天四小时两秒后:”.date(“Y-m-d G:H:s”,strtotime(“+1 week 2 days 4 hours 2 seconds”)). “<br>“;<br>echo “下个星期四:”.date(“Y-m-d”,strtotime(“next Thursday”)). “<br>“;<br>echo “上个周一:”.date(“Y-m-d”,strtotime(“last Monday”)).”<br>“;<br>echo “一个月前:”.date(“Y-m-d”,strtotime(“last month”)).”<br>“;<br>echo “一个月后:”.date(“Y-m-d”,strtotime(“+1 month”)).”<br>“;<br>echo “十年后:”.date(“Y-m-d”,strtotime(“+10 year”)).”<br>“;</p>"},{"title":"PHP数组排序函数总结","id":"1523","date":"2014-03-25T09:28:59.000Z","_content":"\nsort 数字大小,字母顺序排列\nrsort 与sort顺序相反\nksort 数组关键字排序\nkrsort 与kort顺序相反\nasort 数组值排序\narsort 与asort顺序相反\nnatsort 自然语言排序\narray_reverse（natsort()）与natsort相反\narray_reverse 反转数组\nusort 用户自定义的规则排序<!--more-->\n例：\n`$data = array(\"joe@\", \"@\", \"asmithsonian@\", \"jay@\");\nusort($data, 'sortByLen');\nprint_r($data);\nfunction sortByLen($a, $b) {\nif (strlen($a) == strlen($b)) {\nreturn 0;\n} else {\nreturn (strlen($a) &gt; strlen($b)) ? 1 : -1;\n}\n}\n/*\nArray ([0] =&gt; jay@\n[1] =&gt; joe@\n[2] =&gt; @\n[3] =&gt; asmithsonian@\n)\n*/`\n\narray_multisort 多维数组或多个数组排序\n例：首先是根据rating进行排序，然后，如果rating相等的话，再根据name排序\n`$data = array(\narray(\"id\" =&gt; 1, \"name\" =&gt; \"Boney M\", \"rating\" =&gt; 3),\narray(\"id\" =&gt; 2, \"name\" =&gt; \"Take That\", \"rating\" =&gt; 1),\narray(\"id\" =&gt; 3, \"name\" =&gt; \"The Killers\", \"rating\" =&gt; 4),\narray(\"id\" =&gt; 4, \"name\" =&gt; \"Lusain\", \"rating\" =&gt; 3),\n);\nforeach ($data as $key =&gt; $value) {\n$name[$key] = $value['name'];\n$rating[$key] = $value['rating'];\n}\narray_multisort($rating, $name, $data);`","source":"_posts/e6-95-b0-e7-bb-84php-e6-8e-92-e5-ba-8f-e5-87-bd-e6-95-b0-e6-80-bb-e7-bb-93.md","raw":"---\ntitle: PHP数组排序函数总结\ntags:\n  - 排序\nid: 1523\ncategories:\n  - PHP\ndate: 2014-03-25 17:28:59\n---\n\nsort 数字大小,字母顺序排列\nrsort 与sort顺序相反\nksort 数组关键字排序\nkrsort 与kort顺序相反\nasort 数组值排序\narsort 与asort顺序相反\nnatsort 自然语言排序\narray_reverse（natsort()）与natsort相反\narray_reverse 反转数组\nusort 用户自定义的规则排序<!--more-->\n例：\n`$data = array(\"joe@\", \"@\", \"asmithsonian@\", \"jay@\");\nusort($data, 'sortByLen');\nprint_r($data);\nfunction sortByLen($a, $b) {\nif (strlen($a) == strlen($b)) {\nreturn 0;\n} else {\nreturn (strlen($a) &gt; strlen($b)) ? 1 : -1;\n}\n}\n/*\nArray ([0] =&gt; jay@\n[1] =&gt; joe@\n[2] =&gt; @\n[3] =&gt; asmithsonian@\n)\n*/`\n\narray_multisort 多维数组或多个数组排序\n例：首先是根据rating进行排序，然后，如果rating相等的话，再根据name排序\n`$data = array(\narray(\"id\" =&gt; 1, \"name\" =&gt; \"Boney M\", \"rating\" =&gt; 3),\narray(\"id\" =&gt; 2, \"name\" =&gt; \"Take That\", \"rating\" =&gt; 1),\narray(\"id\" =&gt; 3, \"name\" =&gt; \"The Killers\", \"rating\" =&gt; 4),\narray(\"id\" =&gt; 4, \"name\" =&gt; \"Lusain\", \"rating\" =&gt; 3),\n);\nforeach ($data as $key =&gt; $value) {\n$name[$key] = $value['name'];\n$rating[$key] = $value['rating'];\n}\narray_multisort($rating, $name, $data);`","slug":"e6-95-b0-e7-bb-84php-e6-8e-92-e5-ba-8f-e5-87-bd-e6-95-b0-e6-80-bb-e7-bb-93","published":1,"updated":"2018-01-13T05:07:00.478Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjccw7x92002yaqcrmfxrg0lm","content":"<p>sort 数字大小,字母顺序排列<br>rsort 与sort顺序相反<br>ksort 数组关键字排序<br>krsort 与kort顺序相反<br>asort 数组值排序<br>arsort 与asort顺序相反<br>natsort 自然语言排序<br>array_reverse（natsort()）与natsort相反<br>array_reverse 反转数组<br>usort 用户自定义的规则排序<a id=\"more\"></a><br>例：<br><code>$data = array(&quot;joe@&quot;, &quot;@&quot;, &quot;asmithsonian@&quot;, &quot;jay@&quot;);\nusort($data, &#39;sortByLen&#39;);\nprint_r($data);\nfunction sortByLen($a, $b) {\nif (strlen($a) == strlen($b)) {\nreturn 0;\n} else {\nreturn (strlen($a) &amp;gt; strlen($b)) ? 1 : -1;\n}\n}\n/*\nArray ([0] =&amp;gt; jay@\n[1] =&amp;gt; joe@\n[2] =&amp;gt; @\n[3] =&amp;gt; asmithsonian@\n)\n*/</code></p>\n<p>array_multisort 多维数组或多个数组排序<br>例：首先是根据rating进行排序，然后，如果rating相等的话，再根据name排序<br><code>$data = array(\narray(&quot;id&quot; =&amp;gt; 1, &quot;name&quot; =&amp;gt; &quot;Boney M&quot;, &quot;rating&quot; =&amp;gt; 3),\narray(&quot;id&quot; =&amp;gt; 2, &quot;name&quot; =&amp;gt; &quot;Take That&quot;, &quot;rating&quot; =&amp;gt; 1),\narray(&quot;id&quot; =&amp;gt; 3, &quot;name&quot; =&amp;gt; &quot;The Killers&quot;, &quot;rating&quot; =&amp;gt; 4),\narray(&quot;id&quot; =&amp;gt; 4, &quot;name&quot; =&amp;gt; &quot;Lusain&quot;, &quot;rating&quot; =&amp;gt; 3),\n);\nforeach ($data as $key =&amp;gt; $value) {\n$name[$key] = $value[&#39;name&#39;];\n$rating[$key] = $value[&#39;rating&#39;];\n}\narray_multisort($rating, $name, $data);</code></p>\n","site":{"data":{}},"excerpt":"<p>sort 数字大小,字母顺序排列<br>rsort 与sort顺序相反<br>ksort 数组关键字排序<br>krsort 与kort顺序相反<br>asort 数组值排序<br>arsort 与asort顺序相反<br>natsort 自然语言排序<br>array_reverse（natsort()）与natsort相反<br>array_reverse 反转数组<br>usort 用户自定义的规则排序","more":"<br>例：<br><code>$data = array(&quot;joe@&quot;, &quot;@&quot;, &quot;asmithsonian@&quot;, &quot;jay@&quot;);\nusort($data, &#39;sortByLen&#39;);\nprint_r($data);\nfunction sortByLen($a, $b) {\nif (strlen($a) == strlen($b)) {\nreturn 0;\n} else {\nreturn (strlen($a) &amp;gt; strlen($b)) ? 1 : -1;\n}\n}\n/*\nArray ([0] =&amp;gt; jay@\n[1] =&amp;gt; joe@\n[2] =&amp;gt; @\n[3] =&amp;gt; asmithsonian@\n)\n*/</code></p>\n<p>array_multisort 多维数组或多个数组排序<br>例：首先是根据rating进行排序，然后，如果rating相等的话，再根据name排序<br><code>$data = array(\narray(&quot;id&quot; =&amp;gt; 1, &quot;name&quot; =&amp;gt; &quot;Boney M&quot;, &quot;rating&quot; =&amp;gt; 3),\narray(&quot;id&quot; =&amp;gt; 2, &quot;name&quot; =&amp;gt; &quot;Take That&quot;, &quot;rating&quot; =&amp;gt; 1),\narray(&quot;id&quot; =&amp;gt; 3, &quot;name&quot; =&amp;gt; &quot;The Killers&quot;, &quot;rating&quot; =&amp;gt; 4),\narray(&quot;id&quot; =&amp;gt; 4, &quot;name&quot; =&amp;gt; &quot;Lusain&quot;, &quot;rating&quot; =&amp;gt; 3),\n);\nforeach ($data as $key =&amp;gt; $value) {\n$name[$key] = $value[&#39;name&#39;];\n$rating[$key] = $value[&#39;rating&#39;];\n}\narray_multisort($rating, $name, $data);</code></p>"},{"title":"明基 KX800 键盘入手","id":"1836","date":"2014-05-05T09:16:02.000Z","_content":"\n最近一直在找键盘，公司的火山口太难用了。想入手机械键盘一件，型号都选好了，后来感觉最好用的还是自己破笔记本的键盘，很轻的X架构，打起字来也不累。于是就是网上搜寻，关键字是，非巧克力，超薄，X架构和有线。选来选去定了两个，一个是双飞燕的wk210, 另一个就是 明基 KX800 。在京东上看到wk210差评很多，又查到 明基 在历史上出了几款很有名的键盘，最终就选了明基 KX800，虽然是3年前的产品，不过到手使用后还是非常超赞的，手感特别好。\n\n![benq](/wp-content/uploads/2014/05/392d4b4e47419b5eb069716b829a4a10.jpg)","source":"_posts/e6-98-8e-e5-9f-ba-kx800-e9-94-ae-e7-9b-98-e5-85-a5-e6-89-8b.md","raw":"---\ntitle: 明基 KX800 键盘入手\ntags:\n  - 键盘\nid: 1836\ncategories:\n  - Other\ndate: 2014-05-05 17:16:02\n---\n\n最近一直在找键盘，公司的火山口太难用了。想入手机械键盘一件，型号都选好了，后来感觉最好用的还是自己破笔记本的键盘，很轻的X架构，打起字来也不累。于是就是网上搜寻，关键字是，非巧克力，超薄，X架构和有线。选来选去定了两个，一个是双飞燕的wk210, 另一个就是 明基 KX800 。在京东上看到wk210差评很多，又查到 明基 在历史上出了几款很有名的键盘，最终就选了明基 KX800，虽然是3年前的产品，不过到手使用后还是非常超赞的，手感特别好。\n\n![benq](/wp-content/uploads/2014/05/392d4b4e47419b5eb069716b829a4a10.jpg)","slug":"e6-98-8e-e5-9f-ba-kx800-e9-94-ae-e7-9b-98-e5-85-a5-e6-89-8b","published":1,"updated":"2018-01-13T05:07:00.493Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjccw7x950032aqcr6opipp92","content":"<p>最近一直在找键盘，公司的火山口太难用了。想入手机械键盘一件，型号都选好了，后来感觉最好用的还是自己破笔记本的键盘，很轻的X架构，打起字来也不累。于是就是网上搜寻，关键字是，非巧克力，超薄，X架构和有线。选来选去定了两个，一个是双飞燕的wk210, 另一个就是 明基 KX800 。在京东上看到wk210差评很多，又查到 明基 在历史上出了几款很有名的键盘，最终就选了明基 KX800，虽然是3年前的产品，不过到手使用后还是非常超赞的，手感特别好。</p>\n<p><img src=\"/wp-content/uploads/2014/05/392d4b4e47419b5eb069716b829a4a10.jpg\" alt=\"benq\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>最近一直在找键盘，公司的火山口太难用了。想入手机械键盘一件，型号都选好了，后来感觉最好用的还是自己破笔记本的键盘，很轻的X架构，打起字来也不累。于是就是网上搜寻，关键字是，非巧克力，超薄，X架构和有线。选来选去定了两个，一个是双飞燕的wk210, 另一个就是 明基 KX800 。在京东上看到wk210差评很多，又查到 明基 在历史上出了几款很有名的键盘，最终就选了明基 KX800，虽然是3年前的产品，不过到手使用后还是非常超赞的，手感特别好。</p>\n<p><img src=\"/wp-content/uploads/2014/05/392d4b4e47419b5eb069716b829a4a10.jpg\" alt=\"benq\"></p>\n"},{"title":"更改 vagrant 虚拟磁盘的默认路径","id":"1995","date":"2014-05-11T13:05:28.000Z","_content":"\n至少在我的电脑上 vagrant 默认是放在了 c:/user 里，本来很小的系统盘在 vagrant add box 后就更小了，然后再加上 virtual box 也放在 系统盘里，一下就多了好几个G。最直接的方法当然是把他们给移到其它盘去。\n\n在这之前，要简单说一下 vagrant 的几个命令后的到底动了哪几个大文件。\n\n### 一点原理\n\n首先我们会用 vagrant add box ，这个是把下载好的比如 fedora.box 文件加载到\nC:\\Users\\user_name\\.vagrant.d\\boxes 里，并解成 packer-fedora-20-i386-disk1.vmdk 类似的 virtual box 可识别的文件，当然还有一些其它的像 Vagrantfile 配置文件。也就是说有多少种不同的 add box 就会生成多少个 vmdk ，那当然要占空间了。\n\n接下来我们会 vagrant init , 这个没大文件，就是在当前目录下生成个 Vagrantfile。不过对于第一次 vagrant up就会在 C:\\Users\\user_name\\.VirtualBox\\VirtualBox VMs 生成过G的 vmdk ，这个是直接具体的实例。<!--more-->\n\n对于上面讲的简单说就是 add box 是根据 .box 生成一个模板，放在 .vagrant.d\\boxes ，以后每次 init &amp; up 时就会再用这个模板再生成具体的实例，放在.VirtualBox\\VirtualBox VMs 。也就是说我们要把 .vagrant.d VirtualBox VMs 给挪了。\n\n下面是具体的操作\n\n### 更改 VirtualBox 虚拟机 VirtualBox VMs 文件的位置\n\n打开 VirtualBox ，Ctrl+G, 将默认虚拟电脑位置改为其他磁盘下的路径，并将原路径 C:\\Users\\user_name\\.VirtualBox\\VirtualBox VMs 下的文件移动到新路径下。\n\n### 更改 vagrant 配置文件 .vagrant.d 位置\n\n说到这我有一个疑问，官方的给的方法是新建环境变量VAGRANT_HOME，指向新的路径，并将 C:\\Users\\user_name\\.vagrant.d 移动到新的位置。这招好像 linux 、mac 都好使，但是我的机器 win8.1 x64 好像不好使，我的方法是直接改原文件。\n\n在这里，这个具体版本具体安装路径自己改\n`D:\\HashiCorp\\Vagrant\\embedded\\gems\\gems\\vagrant-1.5.3\\lib\\vagrant\\environment.rb `，\n第 119 行改成\n`@home_path = Util::Platform.fs_real_path(\"D:/vagrant/home/\")`\n然后再把 C:\\Users\\user_name\\.vagrant.d 里的文件移到 D:/vagrant/home/ 里面，重启 vagrant 就可以了。\n\n另外说一句，先备份，再操作。","source":"_posts/e6-9b-b4-e6-94-b9-vagrant-e8-99-9a-e6-8b-9f-e7-a3-81-e7-9b-98-e7-9a-84-e9-bb-98-e8-ae-a4-e8-b7-af-e5-be-84.md","raw":"---\ntitle: 更改 vagrant 虚拟磁盘的默认路径\ntags:\n  - vagrant\nid: 1995\ncategories:\n  - Linux\ndate: 2014-05-11 21:05:28\n---\n\n至少在我的电脑上 vagrant 默认是放在了 c:/user 里，本来很小的系统盘在 vagrant add box 后就更小了，然后再加上 virtual box 也放在 系统盘里，一下就多了好几个G。最直接的方法当然是把他们给移到其它盘去。\n\n在这之前，要简单说一下 vagrant 的几个命令后的到底动了哪几个大文件。\n\n### 一点原理\n\n首先我们会用 vagrant add box ，这个是把下载好的比如 fedora.box 文件加载到\nC:\\Users\\user_name\\.vagrant.d\\boxes 里，并解成 packer-fedora-20-i386-disk1.vmdk 类似的 virtual box 可识别的文件，当然还有一些其它的像 Vagrantfile 配置文件。也就是说有多少种不同的 add box 就会生成多少个 vmdk ，那当然要占空间了。\n\n接下来我们会 vagrant init , 这个没大文件，就是在当前目录下生成个 Vagrantfile。不过对于第一次 vagrant up就会在 C:\\Users\\user_name\\.VirtualBox\\VirtualBox VMs 生成过G的 vmdk ，这个是直接具体的实例。<!--more-->\n\n对于上面讲的简单说就是 add box 是根据 .box 生成一个模板，放在 .vagrant.d\\boxes ，以后每次 init &amp; up 时就会再用这个模板再生成具体的实例，放在.VirtualBox\\VirtualBox VMs 。也就是说我们要把 .vagrant.d VirtualBox VMs 给挪了。\n\n下面是具体的操作\n\n### 更改 VirtualBox 虚拟机 VirtualBox VMs 文件的位置\n\n打开 VirtualBox ，Ctrl+G, 将默认虚拟电脑位置改为其他磁盘下的路径，并将原路径 C:\\Users\\user_name\\.VirtualBox\\VirtualBox VMs 下的文件移动到新路径下。\n\n### 更改 vagrant 配置文件 .vagrant.d 位置\n\n说到这我有一个疑问，官方的给的方法是新建环境变量VAGRANT_HOME，指向新的路径，并将 C:\\Users\\user_name\\.vagrant.d 移动到新的位置。这招好像 linux 、mac 都好使，但是我的机器 win8.1 x64 好像不好使，我的方法是直接改原文件。\n\n在这里，这个具体版本具体安装路径自己改\n`D:\\HashiCorp\\Vagrant\\embedded\\gems\\gems\\vagrant-1.5.3\\lib\\vagrant\\environment.rb `，\n第 119 行改成\n`@home_path = Util::Platform.fs_real_path(\"D:/vagrant/home/\")`\n然后再把 C:\\Users\\user_name\\.vagrant.d 里的文件移到 D:/vagrant/home/ 里面，重启 vagrant 就可以了。\n\n另外说一句，先备份，再操作。","slug":"e6-9b-b4-e6-94-b9-vagrant-e8-99-9a-e6-8b-9f-e7-a3-81-e7-9b-98-e7-9a-84-e9-bb-98-e8-ae-a4-e8-b7-af-e5-be-84","published":1,"updated":"2018-01-13T05:07:00.480Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjccw7x980035aqcrni2figst","content":"<p>至少在我的电脑上 vagrant 默认是放在了 c:/user 里，本来很小的系统盘在 vagrant add box 后就更小了，然后再加上 virtual box 也放在 系统盘里，一下就多了好几个G。最直接的方法当然是把他们给移到其它盘去。</p>\n<p>在这之前，要简单说一下 vagrant 的几个命令后的到底动了哪几个大文件。</p>\n<h3 id=\"一点原理\"><a href=\"#一点原理\" class=\"headerlink\" title=\"一点原理\"></a>一点原理</h3><p>首先我们会用 vagrant add box ，这个是把下载好的比如 fedora.box 文件加载到<br>C:\\Users\\user_name.vagrant.d\\boxes 里，并解成 packer-fedora-20-i386-disk1.vmdk 类似的 virtual box 可识别的文件，当然还有一些其它的像 Vagrantfile 配置文件。也就是说有多少种不同的 add box 就会生成多少个 vmdk ，那当然要占空间了。</p>\n<p>接下来我们会 vagrant init , 这个没大文件，就是在当前目录下生成个 Vagrantfile。不过对于第一次 vagrant up就会在 C:\\Users\\user_name.VirtualBox\\VirtualBox VMs 生成过G的 vmdk ，这个是直接具体的实例。<a id=\"more\"></a></p>\n<p>对于上面讲的简单说就是 add box 是根据 .box 生成一个模板，放在 .vagrant.d\\boxes ，以后每次 init &amp; up 时就会再用这个模板再生成具体的实例，放在.VirtualBox\\VirtualBox VMs 。也就是说我们要把 .vagrant.d VirtualBox VMs 给挪了。</p>\n<p>下面是具体的操作</p>\n<h3 id=\"更改-VirtualBox-虚拟机-VirtualBox-VMs-文件的位置\"><a href=\"#更改-VirtualBox-虚拟机-VirtualBox-VMs-文件的位置\" class=\"headerlink\" title=\"更改 VirtualBox 虚拟机 VirtualBox VMs 文件的位置\"></a>更改 VirtualBox 虚拟机 VirtualBox VMs 文件的位置</h3><p>打开 VirtualBox ，Ctrl+G, 将默认虚拟电脑位置改为其他磁盘下的路径，并将原路径 C:\\Users\\user_name.VirtualBox\\VirtualBox VMs 下的文件移动到新路径下。</p>\n<h3 id=\"更改-vagrant-配置文件-vagrant-d-位置\"><a href=\"#更改-vagrant-配置文件-vagrant-d-位置\" class=\"headerlink\" title=\"更改 vagrant 配置文件 .vagrant.d 位置\"></a>更改 vagrant 配置文件 .vagrant.d 位置</h3><p>说到这我有一个疑问，官方的给的方法是新建环境变量VAGRANT_HOME，指向新的路径，并将 C:\\Users\\user_name.vagrant.d 移动到新的位置。这招好像 linux 、mac 都好使，但是我的机器 win8.1 x64 好像不好使，我的方法是直接改原文件。</p>\n<p>在这里，这个具体版本具体安装路径自己改<br><code>D:\\HashiCorp\\Vagrant\\embedded\\gems\\gems\\vagrant-1.5.3\\lib\\vagrant\\environment.rb</code>，<br>第 119 行改成<br><code>@home_path = Util::Platform.fs_real_path(&quot;D:/vagrant/home/&quot;)</code><br>然后再把 C:\\Users\\user_name.vagrant.d 里的文件移到 D:/vagrant/home/ 里面，重启 vagrant 就可以了。</p>\n<p>另外说一句，先备份，再操作。</p>\n","site":{"data":{}},"excerpt":"<p>至少在我的电脑上 vagrant 默认是放在了 c:/user 里，本来很小的系统盘在 vagrant add box 后就更小了，然后再加上 virtual box 也放在 系统盘里，一下就多了好几个G。最直接的方法当然是把他们给移到其它盘去。</p>\n<p>在这之前，要简单说一下 vagrant 的几个命令后的到底动了哪几个大文件。</p>\n<h3 id=\"一点原理\"><a href=\"#一点原理\" class=\"headerlink\" title=\"一点原理\"></a>一点原理</h3><p>首先我们会用 vagrant add box ，这个是把下载好的比如 fedora.box 文件加载到<br>C:\\Users\\user_name.vagrant.d\\boxes 里，并解成 packer-fedora-20-i386-disk1.vmdk 类似的 virtual box 可识别的文件，当然还有一些其它的像 Vagrantfile 配置文件。也就是说有多少种不同的 add box 就会生成多少个 vmdk ，那当然要占空间了。</p>\n<p>接下来我们会 vagrant init , 这个没大文件，就是在当前目录下生成个 Vagrantfile。不过对于第一次 vagrant up就会在 C:\\Users\\user_name.VirtualBox\\VirtualBox VMs 生成过G的 vmdk ，这个是直接具体的实例。","more":"</p>\n<p>对于上面讲的简单说就是 add box 是根据 .box 生成一个模板，放在 .vagrant.d\\boxes ，以后每次 init &amp; up 时就会再用这个模板再生成具体的实例，放在.VirtualBox\\VirtualBox VMs 。也就是说我们要把 .vagrant.d VirtualBox VMs 给挪了。</p>\n<p>下面是具体的操作</p>\n<h3 id=\"更改-VirtualBox-虚拟机-VirtualBox-VMs-文件的位置\"><a href=\"#更改-VirtualBox-虚拟机-VirtualBox-VMs-文件的位置\" class=\"headerlink\" title=\"更改 VirtualBox 虚拟机 VirtualBox VMs 文件的位置\"></a>更改 VirtualBox 虚拟机 VirtualBox VMs 文件的位置</h3><p>打开 VirtualBox ，Ctrl+G, 将默认虚拟电脑位置改为其他磁盘下的路径，并将原路径 C:\\Users\\user_name.VirtualBox\\VirtualBox VMs 下的文件移动到新路径下。</p>\n<h3 id=\"更改-vagrant-配置文件-vagrant-d-位置\"><a href=\"#更改-vagrant-配置文件-vagrant-d-位置\" class=\"headerlink\" title=\"更改 vagrant 配置文件 .vagrant.d 位置\"></a>更改 vagrant 配置文件 .vagrant.d 位置</h3><p>说到这我有一个疑问，官方的给的方法是新建环境变量VAGRANT_HOME，指向新的路径，并将 C:\\Users\\user_name.vagrant.d 移动到新的位置。这招好像 linux 、mac 都好使，但是我的机器 win8.1 x64 好像不好使，我的方法是直接改原文件。</p>\n<p>在这里，这个具体版本具体安装路径自己改<br><code>D:\\HashiCorp\\Vagrant\\embedded\\gems\\gems\\vagrant-1.5.3\\lib\\vagrant\\environment.rb</code>，<br>第 119 行改成<br><code>@home_path = Util::Platform.fs_real_path(&quot;D:/vagrant/home/&quot;)</code><br>然后再把 C:\\Users\\user_name.vagrant.d 里的文件移到 D:/vagrant/home/ 里面，重启 vagrant 就可以了。</p>\n<p>另外说一句，先备份，再操作。</p>"},{"title":"本地前端开发 Document mode 为ie7 default 问题","id":"1787","date":"2014-05-05T05:16:47.000Z","_content":"\n一直在本地默默的修改另一套 WordPress 主题，本地的环境都ok, 但是用ie 跑的时候确一直是图中的丑样。查看 Source &lt;!DOCTYPE html&gt; 局然是被注释掉了，难到是不知写了什么影响了？\n\n[![1](/wp-content/uploads/2014/05/e8059811450b854a7b77cc653761282d.png)](/wp-content/uploads/2014/05/e8059811450b854a7b77cc653761282d.png)\n\n&nbsp;\n\n接下来查看Document mode局然是ie7 default , 当然对于ie7 来说不支持rgba 的css标签。\n\n[![2](/wp-content/uploads/2014/05/1102774157837fdba32b0df0811ab9ea.png)](/wp-content/uploads/2014/05/1102774157837fdba32b0df0811ab9ea.png)\n\n&nbsp;\n\n下面的一行字到时引起了我的注意。Via local compatibility view settings. 本地的兼容列表设置？检查一下：<span style=\"color: #454545;\">Alt –&gt; Tools –&gt; Compatibility View Settings</span><!--more-->\n\n[![3](/wp-content/uploads/2014/05/3447418403fc4780091e5a804471a00f.png)](/wp-content/uploads/2014/05/3447418403fc4780091e5a804471a00f.png)\n\n&nbsp;\n\nokay ，把127.0.0.1 remove 掉，刷新,查看 Document mode:\n\n[![4](/wp-content/uploads/2014/05/b969542c2f6cba75156ffed773cf5801.png)](/wp-content/uploads/2014/05/b969542c2f6cba75156ffed773cf5801.png)\n\n&nbsp;\n\n查看 Source\n\n&nbsp;\n\n[![5](/wp-content/uploads/2014/05/3534b2282023a8d4926ef7a7cd09532c.png)](/wp-content/uploads/2014/05/3534b2282023a8d4926ef7a7cd09532c.png)\n\n搞定。&lt;!DOCTYPE html&gt; 也正常了。\n\n[![6](/wp-content/uploads/2014/05/d875d51eba70514e60c5ab64c06ab787.png)](/wp-content/uploads/2014/05/d875d51eba70514e60c5ab64c06ab787.png)\n\n&nbsp;","source":"_posts/e6-9c-ac-e5-9c-b0-e5-89-8d-e7-ab-af-e5-bc-80-e5-8f-91-document-mode-e4-b8-baie7-default-e9-97-ae-e9-a2-98.md","raw":"---\ntitle: 本地前端开发 Document mode 为ie7 default 问题\ntags:\n  - ie\nid: 1787\ncategories:\n  - Html\ndate: 2014-05-05 13:16:47\n---\n\n一直在本地默默的修改另一套 WordPress 主题，本地的环境都ok, 但是用ie 跑的时候确一直是图中的丑样。查看 Source &lt;!DOCTYPE html&gt; 局然是被注释掉了，难到是不知写了什么影响了？\n\n[![1](/wp-content/uploads/2014/05/e8059811450b854a7b77cc653761282d.png)](/wp-content/uploads/2014/05/e8059811450b854a7b77cc653761282d.png)\n\n&nbsp;\n\n接下来查看Document mode局然是ie7 default , 当然对于ie7 来说不支持rgba 的css标签。\n\n[![2](/wp-content/uploads/2014/05/1102774157837fdba32b0df0811ab9ea.png)](/wp-content/uploads/2014/05/1102774157837fdba32b0df0811ab9ea.png)\n\n&nbsp;\n\n下面的一行字到时引起了我的注意。Via local compatibility view settings. 本地的兼容列表设置？检查一下：<span style=\"color: #454545;\">Alt –&gt; Tools –&gt; Compatibility View Settings</span><!--more-->\n\n[![3](/wp-content/uploads/2014/05/3447418403fc4780091e5a804471a00f.png)](/wp-content/uploads/2014/05/3447418403fc4780091e5a804471a00f.png)\n\n&nbsp;\n\nokay ，把127.0.0.1 remove 掉，刷新,查看 Document mode:\n\n[![4](/wp-content/uploads/2014/05/b969542c2f6cba75156ffed773cf5801.png)](/wp-content/uploads/2014/05/b969542c2f6cba75156ffed773cf5801.png)\n\n&nbsp;\n\n查看 Source\n\n&nbsp;\n\n[![5](/wp-content/uploads/2014/05/3534b2282023a8d4926ef7a7cd09532c.png)](/wp-content/uploads/2014/05/3534b2282023a8d4926ef7a7cd09532c.png)\n\n搞定。&lt;!DOCTYPE html&gt; 也正常了。\n\n[![6](/wp-content/uploads/2014/05/d875d51eba70514e60c5ab64c06ab787.png)](/wp-content/uploads/2014/05/d875d51eba70514e60c5ab64c06ab787.png)\n\n&nbsp;","slug":"e6-9c-ac-e5-9c-b0-e5-89-8d-e7-ab-af-e5-bc-80-e5-8f-91-document-mode-e4-b8-baie7-default-e9-97-ae-e9-a2-98","published":1,"updated":"2018-01-13T05:07:00.495Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjccw7x9a0038aqcr5yc4o05u","content":"<p>一直在本地默默的修改另一套 WordPress 主题，本地的环境都ok, 但是用ie 跑的时候确一直是图中的丑样。查看 Source &lt;!DOCTYPE html&gt; 局然是被注释掉了，难到是不知写了什么影响了？</p>\n<p><a href=\"/wp-content/uploads/2014/05/e8059811450b854a7b77cc653761282d.png\"><img src=\"/wp-content/uploads/2014/05/e8059811450b854a7b77cc653761282d.png\" alt=\"1\"></a></p>\n<p>&nbsp;</p>\n<p>接下来查看Document mode局然是ie7 default , 当然对于ie7 来说不支持rgba 的css标签。</p>\n<p><a href=\"/wp-content/uploads/2014/05/1102774157837fdba32b0df0811ab9ea.png\"><img src=\"/wp-content/uploads/2014/05/1102774157837fdba32b0df0811ab9ea.png\" alt=\"2\"></a></p>\n<p>&nbsp;</p>\n<p>下面的一行字到时引起了我的注意。Via local compatibility view settings. 本地的兼容列表设置？检查一下：<span style=\"color: #454545;\">Alt –&gt; Tools –&gt; Compatibility View Settings</span><a id=\"more\"></a></p>\n<p><a href=\"/wp-content/uploads/2014/05/3447418403fc4780091e5a804471a00f.png\"><img src=\"/wp-content/uploads/2014/05/3447418403fc4780091e5a804471a00f.png\" alt=\"3\"></a></p>\n<p>&nbsp;</p>\n<p>okay ，把127.0.0.1 remove 掉，刷新,查看 Document mode:</p>\n<p><a href=\"/wp-content/uploads/2014/05/b969542c2f6cba75156ffed773cf5801.png\"><img src=\"/wp-content/uploads/2014/05/b969542c2f6cba75156ffed773cf5801.png\" alt=\"4\"></a></p>\n<p>&nbsp;</p>\n<p>查看 Source</p>\n<p>&nbsp;</p>\n<p><a href=\"/wp-content/uploads/2014/05/3534b2282023a8d4926ef7a7cd09532c.png\"><img src=\"/wp-content/uploads/2014/05/3534b2282023a8d4926ef7a7cd09532c.png\" alt=\"5\"></a></p>\n<p>搞定。&lt;!DOCTYPE html&gt; 也正常了。</p>\n<p><a href=\"/wp-content/uploads/2014/05/d875d51eba70514e60c5ab64c06ab787.png\"><img src=\"/wp-content/uploads/2014/05/d875d51eba70514e60c5ab64c06ab787.png\" alt=\"6\"></a></p>\n<p>&nbsp;</p>\n","site":{"data":{}},"excerpt":"<p>一直在本地默默的修改另一套 WordPress 主题，本地的环境都ok, 但是用ie 跑的时候确一直是图中的丑样。查看 Source &lt;!DOCTYPE html&gt; 局然是被注释掉了，难到是不知写了什么影响了？</p>\n<p><a href=\"/wp-content/uploads/2014/05/e8059811450b854a7b77cc653761282d.png\"><img src=\"/wp-content/uploads/2014/05/e8059811450b854a7b77cc653761282d.png\" alt=\"1\"></a></p>\n<p>&nbsp;</p>\n<p>接下来查看Document mode局然是ie7 default , 当然对于ie7 来说不支持rgba 的css标签。</p>\n<p><a href=\"/wp-content/uploads/2014/05/1102774157837fdba32b0df0811ab9ea.png\"><img src=\"/wp-content/uploads/2014/05/1102774157837fdba32b0df0811ab9ea.png\" alt=\"2\"></a></p>\n<p>&nbsp;</p>\n<p>下面的一行字到时引起了我的注意。Via local compatibility view settings. 本地的兼容列表设置？检查一下：<span style=\"color: #454545;\">Alt –&gt; Tools –&gt; Compatibility View Settings</span>","more":"</p>\n<p><a href=\"/wp-content/uploads/2014/05/3447418403fc4780091e5a804471a00f.png\"><img src=\"/wp-content/uploads/2014/05/3447418403fc4780091e5a804471a00f.png\" alt=\"3\"></a></p>\n<p>&nbsp;</p>\n<p>okay ，把127.0.0.1 remove 掉，刷新,查看 Document mode:</p>\n<p><a href=\"/wp-content/uploads/2014/05/b969542c2f6cba75156ffed773cf5801.png\"><img src=\"/wp-content/uploads/2014/05/b969542c2f6cba75156ffed773cf5801.png\" alt=\"4\"></a></p>\n<p>&nbsp;</p>\n<p>查看 Source</p>\n<p>&nbsp;</p>\n<p><a href=\"/wp-content/uploads/2014/05/3534b2282023a8d4926ef7a7cd09532c.png\"><img src=\"/wp-content/uploads/2014/05/3534b2282023a8d4926ef7a7cd09532c.png\" alt=\"5\"></a></p>\n<p>搞定。&lt;!DOCTYPE html&gt; 也正常了。</p>\n<p><a href=\"/wp-content/uploads/2014/05/d875d51eba70514e60c5ab64c06ab787.png\"><img src=\"/wp-content/uploads/2014/05/d875d51eba70514e60c5ab64c06ab787.png\" alt=\"6\"></a></p>\n<p>&nbsp;</p>"},{"title":"清理win8.1我的电脑里六个文件夹方法","id":"1283","date":"2014-03-20T06:16:39.000Z","_content":"\n`HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\MyComputer\\NameSpace\\ `\n\n展开 NameSpace 按以下对应关系删除相应键值即可：\n\n`{374DE290-123F-4565-9164-39C4925E4678} 下载 \n{B4BFCC3A-DB2C-424C-BO29-7FE99A87C641} 桌面 \n{1CF1260C-4DD0-4ebb-811F-33C572699FDE} 音乐 \n{3ADD1653-EB32-4cb0-BBD7-DFA0ABB5ACCA} 图片 \n{A0953C92-50DC-43bf-BE83-3742FED03C9C} 视频 \n{A8CDFF1C-4878-43be-B5FD-F8091C1C60D0} 文档 `","source":"_posts/e6-b8-85-e7-90-86win8-1-e6-88-91-e7-9a-84-e7-94-b5-e8-84-91-e9-87-8c-e5-85-ad-e4-b8-aa-e6-96-87-e4-bb-b6-e5-a4-b9-e6-96-b9-e6-b3-95.md","raw":"---\ntitle: 清理win8.1我的电脑里六个文件夹方法\nid: 1283\ncategories:\n  - Windows\ndate: 2014-03-20 14:16:39\ntags:\n---\n\n`HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\MyComputer\\NameSpace\\ `\n\n展开 NameSpace 按以下对应关系删除相应键值即可：\n\n`{374DE290-123F-4565-9164-39C4925E4678} 下载 \n{B4BFCC3A-DB2C-424C-BO29-7FE99A87C641} 桌面 \n{1CF1260C-4DD0-4ebb-811F-33C572699FDE} 音乐 \n{3ADD1653-EB32-4cb0-BBD7-DFA0ABB5ACCA} 图片 \n{A0953C92-50DC-43bf-BE83-3742FED03C9C} 视频 \n{A8CDFF1C-4878-43be-B5FD-F8091C1C60D0} 文档 `","slug":"e6-b8-85-e7-90-86win8-1-e6-88-91-e7-9a-84-e7-94-b5-e8-84-91-e9-87-8c-e5-85-ad-e4-b8-aa-e6-96-87-e4-bb-b6-e5-a4-b9-e6-96-b9-e6-b3-95","published":1,"updated":"2018-01-13T05:07:00.452Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjccw7x9c003baqcrnrf3hwzy","content":"<p><code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\MyComputer\\NameSpace\\</code></p>\n<p>展开 NameSpace 按以下对应关系删除相应键值即可：</p>\n<p><code>{374DE290-123F-4565-9164-39C4925E4678} 下载 \n{B4BFCC3A-DB2C-424C-BO29-7FE99A87C641} 桌面 \n{1CF1260C-4DD0-4ebb-811F-33C572699FDE} 音乐 \n{3ADD1653-EB32-4cb0-BBD7-DFA0ABB5ACCA} 图片 \n{A0953C92-50DC-43bf-BE83-3742FED03C9C} 视频 \n{A8CDFF1C-4878-43be-B5FD-F8091C1C60D0} 文档</code></p>\n","site":{"data":{}},"excerpt":"","more":"<p><code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\MyComputer\\NameSpace\\</code></p>\n<p>展开 NameSpace 按以下对应关系删除相应键值即可：</p>\n<p><code>{374DE290-123F-4565-9164-39C4925E4678} 下载 \n{B4BFCC3A-DB2C-424C-BO29-7FE99A87C641} 桌面 \n{1CF1260C-4DD0-4ebb-811F-33C572699FDE} 音乐 \n{3ADD1653-EB32-4cb0-BBD7-DFA0ABB5ACCA} 图片 \n{A0953C92-50DC-43bf-BE83-3742FED03C9C} 视频 \n{A8CDFF1C-4878-43be-B5FD-F8091C1C60D0} 文档</code></p>\n"},{"title":"权限管理java实现（源于Linux中的权限管理算法）","id":"1111","date":"2013-02-17T02:29:24.000Z","_content":"\n这个帖子由来已久吧，我也是到处搜到的，然后仔细学习，果然博大精深，然后加强点弄点自己的东西\n\n我已声明 部分转载！！\n\n向大家介绍一种很不错，也是Linux中的权限管理算法。\n\n　　定义a^b为：a的b次方\n\n　　假如，我们为每一个操作设定一个唯一的整数值，比如：\n\n　　删除A---0\n\n　　修改A---1\n\n　　添加A---2\n\n　　删除B---3\n\n　　修改B---4\n\n　　添加B---5\n\n　　。。。\n\n　　理论上可以有N个操作，这取决于你用于储存用户权限值的数据类型了。\n\n　　这样，如果用户有权限：添加A---2;删除B---3;修改B---4\n\n　　那用户的权限值 purview =2^2+2^3+2^4=28，也就是2的权的和了\n\n　　化成二进制可以表示为11100\n\n　　如果要验证用户是否有删除B的权限，就可以通过位与运算来实现。\n\n　　在Java里，位与运算运算符号为&\n\n　　即是：int value = purview &((int)Math.pow(2,3));\n\n　　你会发现，当用户有操作权限时，运算出来的结果都会等于这个操作需要的权限值!\n\n　　原理：\n\n　　位与运算，顾名思义就是对位进行与运算：\n\n　　以上面的式子为例：purview &2^3 也就是　28&8\n\n　　将它们化成二进制有\n\n　　11100\n\n　　& 01000\n\n　　-------------------\n\n　　01000 == 8(十进制)　==　2^3\n\n　　同理，如果要验证是否有删除A---0的权限\n\n　　可以用：purview &((int)Math.pow(2,0));\n\n　　即：\n\n　　11100\n\n　　& 00001\n\n　　------------------------\n\n　　00000 == 0(十进制)　　!=　2^0\n\n　　这种算法的一个优点是速度快。可以同时处理N个权限，设置N种角色.\n\n　　处理多个权限：\n\n                                 如果想验证是否同时有删除A---0和删除B---3的权限\n\n　　                          可以用purview&(2^0+2^3)==(2^0+2^3)?true:false;\n\n　　处理多角色用户：\n\n　　 这里我多加一个示例，把问题说清楚，假设有四个角色，分别有多个不同的权限，多个权限构成一个角色\n\n             角色1：删除A---0，修改A---1，添加A---2，查看A---3\n\n            权限值2^0+2^1+2^2+2^3 = 15   二进制1111\n\n             角色2：删除B---4，修改B---5，添加B---6，查看B---7\n\n             权限值2^4+2^5+2^6+2^7 = 240    二进制11110000\n\n             角色3：删除A---0，修改A---1，添加A---2，查看A---3，删除B---4，修改B---5，添加B---6，查看B---7\n\n             权限值2^0+2^1+2^2+2^3 +2^4+2^5+2^6+2^7= 255 二进制 11111111\n\n             角色4：查看A---3，查看B---7\n\n             权限值 2^3+2^7 = 136   二进制 10001000\n\n   某一个用户拥有角色1--1111和角色4---10001000 的权限，即二进制总权限要为10001111\n\n (2^0+2^1+2^2+2^3)| (2^3+2^7)=purview（用户总权限值 ） = 143\n\n      根据权限值判断用户的角色，例如判断该用户有没有添加A和查看B的权限\n\npurview&（2^2+2^7）?true:false;\n\n 　　下面提供一个java的单操作权限判断的代码：\n\nJava代码\n//userPurview是用户具有的总权限\n\n//optPurview是一个操作要求的权限为一个整数(没有经过权的!)\n\npublic static boolean checkPower(int userPurview, int optPurview){\n\n  int purviewValue = (int)Math.pow(2, optPurview);\n\n  return (userPurview &purviewValue) == purviewValue;\n\n}\n\n这是对多角色权限的模拟\n\nJava代码\npackage com.authority;\n\npublic class AuthorityCodeTest {\n\n    /**\n     * @param args\n     */\n    public static void main(String[] args) {\n\n        //用户具有的总权限\n        int userPurview ;\n        //用户拥有角色1和角色4的权限\n        int power =(int)Math.pow(2, 0)+(int)Math.pow(2, 1)+(int)Math.pow(2, 2)+(int)Math.pow(2, 3);//15\n        int power4 =(int)Math.pow(2, 3)+(int)Math.pow(2, 7);//136\n        userPurview =totolPower(power,power4);//143 ----10001111\n\n        int[]optPurview = {2,7};\n        //这里假设用户要执行2号添加A和7号操作查看B\n        boolean rs = checkPower(userPurview, optPurview);\n        System.out.println(rs);\n    }\n\n    private static int totolPower(int i, int j) {\n        return i|j;\n\n    }\n\n    //optPurview是操作要求的权限码整形数组，还没有经过权\n    private static boolean checkPower(int userPurview, int[] optPurview) {\n\n        int purviewValue =0;\n        for (int i = 0; i < optPurview.length; i++) {\n            int j = optPurview[i];\n            purviewValue+= (int)Math.pow(2, j);\n        }\n         System.out.println(\"操作要求码：\"+purviewValue);//132 ---10000100\n         return (userPurview&purviewValue) == purviewValue;\n\n    }\n}","source":"_posts/e6-9d-83-e9-99-90-e7-ae-a1-e7-90-86java-e5-ae-9e-e7-8e-b0-ef-bc-88-e6-ba-90-e4-ba-8elinux-e4-b8-ad-e7-9a-84-e6-9d-83-e9-99-90-e7-ae-a1-e7-90-86-e7-ae-97-e6-b3-95-ef-bc-89.md","raw":"---\ntitle: 权限管理java实现（源于Linux中的权限管理算法）\nid: 1111\ncategories:\n  - Java\ndate: 2013-02-17 10:29:24\ntags:\n---\n\n这个帖子由来已久吧，我也是到处搜到的，然后仔细学习，果然博大精深，然后加强点弄点自己的东西\n\n我已声明 部分转载！！\n\n向大家介绍一种很不错，也是Linux中的权限管理算法。\n\n　　定义a^b为：a的b次方\n\n　　假如，我们为每一个操作设定一个唯一的整数值，比如：\n\n　　删除A---0\n\n　　修改A---1\n\n　　添加A---2\n\n　　删除B---3\n\n　　修改B---4\n\n　　添加B---5\n\n　　。。。\n\n　　理论上可以有N个操作，这取决于你用于储存用户权限值的数据类型了。\n\n　　这样，如果用户有权限：添加A---2;删除B---3;修改B---4\n\n　　那用户的权限值 purview =2^2+2^3+2^4=28，也就是2的权的和了\n\n　　化成二进制可以表示为11100\n\n　　如果要验证用户是否有删除B的权限，就可以通过位与运算来实现。\n\n　　在Java里，位与运算运算符号为&\n\n　　即是：int value = purview &((int)Math.pow(2,3));\n\n　　你会发现，当用户有操作权限时，运算出来的结果都会等于这个操作需要的权限值!\n\n　　原理：\n\n　　位与运算，顾名思义就是对位进行与运算：\n\n　　以上面的式子为例：purview &2^3 也就是　28&8\n\n　　将它们化成二进制有\n\n　　11100\n\n　　& 01000\n\n　　-------------------\n\n　　01000 == 8(十进制)　==　2^3\n\n　　同理，如果要验证是否有删除A---0的权限\n\n　　可以用：purview &((int)Math.pow(2,0));\n\n　　即：\n\n　　11100\n\n　　& 00001\n\n　　------------------------\n\n　　00000 == 0(十进制)　　!=　2^0\n\n　　这种算法的一个优点是速度快。可以同时处理N个权限，设置N种角色.\n\n　　处理多个权限：\n\n                                 如果想验证是否同时有删除A---0和删除B---3的权限\n\n　　                          可以用purview&(2^0+2^3)==(2^0+2^3)?true:false;\n\n　　处理多角色用户：\n\n　　 这里我多加一个示例，把问题说清楚，假设有四个角色，分别有多个不同的权限，多个权限构成一个角色\n\n             角色1：删除A---0，修改A---1，添加A---2，查看A---3\n\n            权限值2^0+2^1+2^2+2^3 = 15   二进制1111\n\n             角色2：删除B---4，修改B---5，添加B---6，查看B---7\n\n             权限值2^4+2^5+2^6+2^7 = 240    二进制11110000\n\n             角色3：删除A---0，修改A---1，添加A---2，查看A---3，删除B---4，修改B---5，添加B---6，查看B---7\n\n             权限值2^0+2^1+2^2+2^3 +2^4+2^5+2^6+2^7= 255 二进制 11111111\n\n             角色4：查看A---3，查看B---7\n\n             权限值 2^3+2^7 = 136   二进制 10001000\n\n   某一个用户拥有角色1--1111和角色4---10001000 的权限，即二进制总权限要为10001111\n\n (2^0+2^1+2^2+2^3)| (2^3+2^7)=purview（用户总权限值 ） = 143\n\n      根据权限值判断用户的角色，例如判断该用户有没有添加A和查看B的权限\n\npurview&（2^2+2^7）?true:false;\n\n 　　下面提供一个java的单操作权限判断的代码：\n\nJava代码\n//userPurview是用户具有的总权限\n\n//optPurview是一个操作要求的权限为一个整数(没有经过权的!)\n\npublic static boolean checkPower(int userPurview, int optPurview){\n\n  int purviewValue = (int)Math.pow(2, optPurview);\n\n  return (userPurview &purviewValue) == purviewValue;\n\n}\n\n这是对多角色权限的模拟\n\nJava代码\npackage com.authority;\n\npublic class AuthorityCodeTest {\n\n    /**\n     * @param args\n     */\n    public static void main(String[] args) {\n\n        //用户具有的总权限\n        int userPurview ;\n        //用户拥有角色1和角色4的权限\n        int power =(int)Math.pow(2, 0)+(int)Math.pow(2, 1)+(int)Math.pow(2, 2)+(int)Math.pow(2, 3);//15\n        int power4 =(int)Math.pow(2, 3)+(int)Math.pow(2, 7);//136\n        userPurview =totolPower(power,power4);//143 ----10001111\n\n        int[]optPurview = {2,7};\n        //这里假设用户要执行2号添加A和7号操作查看B\n        boolean rs = checkPower(userPurview, optPurview);\n        System.out.println(rs);\n    }\n\n    private static int totolPower(int i, int j) {\n        return i|j;\n\n    }\n\n    //optPurview是操作要求的权限码整形数组，还没有经过权\n    private static boolean checkPower(int userPurview, int[] optPurview) {\n\n        int purviewValue =0;\n        for (int i = 0; i < optPurview.length; i++) {\n            int j = optPurview[i];\n            purviewValue+= (int)Math.pow(2, j);\n        }\n         System.out.println(\"操作要求码：\"+purviewValue);//132 ---10000100\n         return (userPurview&purviewValue) == purviewValue;\n\n    }\n}","slug":"e6-9d-83-e9-99-90-e7-ae-a1-e7-90-86java-e5-ae-9e-e7-8e-b0-ef-bc-88-e6-ba-90-e4-ba-8elinux-e4-b8-ad-e7-9a-84-e6-9d-83-e9-99-90-e7-ae-a1-e7-90-86-e7-ae-97-e6-b3-95-ef-bc-89","published":1,"updated":"2018-01-13T05:07:00.459Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjccw7x9e003eaqcr77s4d5fx","content":"<p>这个帖子由来已久吧，我也是到处搜到的，然后仔细学习，果然博大精深，然后加强点弄点自己的东西</p>\n<p>我已声明 部分转载！！</p>\n<p>向大家介绍一种很不错，也是Linux中的权限管理算法。</p>\n<p>　　定义a^b为：a的b次方</p>\n<p>　　假如，我们为每一个操作设定一个唯一的整数值，比如：</p>\n<p>　　删除A—0</p>\n<p>　　修改A—1</p>\n<p>　　添加A—2</p>\n<p>　　删除B—3</p>\n<p>　　修改B—4</p>\n<p>　　添加B—5</p>\n<p>　　。。。</p>\n<p>　　理论上可以有N个操作，这取决于你用于储存用户权限值的数据类型了。</p>\n<p>　　这样，如果用户有权限：添加A—2;删除B—3;修改B—4</p>\n<p>　　那用户的权限值 purview =2^2+2^3+2^4=28，也就是2的权的和了</p>\n<p>　　化成二进制可以表示为11100</p>\n<p>　　如果要验证用户是否有删除B的权限，就可以通过位与运算来实现。</p>\n<p>　　在Java里，位与运算运算符号为&amp;</p>\n<p>　　即是：int value = purview &amp;((int)Math.pow(2,3));</p>\n<p>　　你会发现，当用户有操作权限时，运算出来的结果都会等于这个操作需要的权限值!</p>\n<p>　　原理：</p>\n<p>　　位与运算，顾名思义就是对位进行与运算：</p>\n<p>　　以上面的式子为例：purview &amp;2^3 也就是　28&amp;8</p>\n<p>　　将它们化成二进制有</p>\n<p>　　11100</p>\n<p>　　&amp; 01000</p>\n<p>　　——————-</p>\n<p>　　01000 == 8(十进制)　==　2^3</p>\n<p>　　同理，如果要验证是否有删除A—0的权限</p>\n<p>　　可以用：purview &amp;((int)Math.pow(2,0));</p>\n<p>　　即：</p>\n<p>　　11100</p>\n<p>　　&amp; 00001</p>\n<p>　　————————</p>\n<p>　　00000 == 0(十进制)　　!=　2^0</p>\n<p>　　这种算法的一个优点是速度快。可以同时处理N个权限，设置N种角色.</p>\n<p>　　处理多个权限：</p>\n<pre><code>如果想验证是否同时有删除A---0和删除B---3的权限\n</code></pre><p>　　                          可以用purview&amp;(2^0+2^3)==(2^0+2^3)?true:false;</p>\n<p>　　处理多角色用户：</p>\n<p>　　 这里我多加一个示例，把问题说清楚，假设有四个角色，分别有多个不同的权限，多个权限构成一个角色</p>\n<pre><code> 角色1：删除A---0，修改A---1，添加A---2，查看A---3\n\n权限值2^0+2^1+2^2+2^3 = 15   二进制1111\n\n 角色2：删除B---4，修改B---5，添加B---6，查看B---7\n\n 权限值2^4+2^5+2^6+2^7 = 240    二进制11110000\n\n 角色3：删除A---0，修改A---1，添加A---2，查看A---3，删除B---4，修改B---5，添加B---6，查看B---7\n\n 权限值2^0+2^1+2^2+2^3 +2^4+2^5+2^6+2^7= 255 二进制 11111111\n\n 角色4：查看A---3，查看B---7\n\n 权限值 2^3+2^7 = 136   二进制 10001000\n</code></pre><p>   某一个用户拥有角色1–1111和角色4—10001000 的权限，即二进制总权限要为10001111</p>\n<p> (2^0+2^1+2^2+2^3)| (2^3+2^7)=purview（用户总权限值 ） = 143</p>\n<pre><code>根据权限值判断用户的角色，例如判断该用户有没有添加A和查看B的权限\n</code></pre><p>purview&amp;（2^2+2^7）?true:false;</p>\n<p> 　　下面提供一个java的单操作权限判断的代码：</p>\n<p>Java代码<br>//userPurview是用户具有的总权限</p>\n<p>//optPurview是一个操作要求的权限为一个整数(没有经过权的!)</p>\n<p>public static boolean checkPower(int userPurview, int optPurview){</p>\n<p>  int purviewValue = (int)Math.pow(2, optPurview);</p>\n<p>  return (userPurview &amp;purviewValue) == purviewValue;</p>\n<p>}</p>\n<p>这是对多角色权限的模拟</p>\n<p>Java代码<br>package com.authority;</p>\n<p>public class AuthorityCodeTest {</p>\n<pre><code>/**\n * @param args\n */\npublic static void main(String[] args) {\n\n    //用户具有的总权限\n    int userPurview ;\n    //用户拥有角色1和角色4的权限\n    int power =(int)Math.pow(2, 0)+(int)Math.pow(2, 1)+(int)Math.pow(2, 2)+(int)Math.pow(2, 3);//15\n    int power4 =(int)Math.pow(2, 3)+(int)Math.pow(2, 7);//136\n    userPurview =totolPower(power,power4);//143 ----10001111\n\n    int[]optPurview = {2,7};\n    //这里假设用户要执行2号添加A和7号操作查看B\n    boolean rs = checkPower(userPurview, optPurview);\n    System.out.println(rs);\n}\n\nprivate static int totolPower(int i, int j) {\n    return i|j;\n\n}\n\n//optPurview是操作要求的权限码整形数组，还没有经过权\nprivate static boolean checkPower(int userPurview, int[] optPurview) {\n\n    int purviewValue =0;\n    for (int i = 0; i &lt; optPurview.length; i++) {\n        int j = optPurview[i];\n        purviewValue+= (int)Math.pow(2, j);\n    }\n     System.out.println(&quot;操作要求码：&quot;+purviewValue);//132 ---10000100\n     return (userPurview&amp;purviewValue) == purviewValue;\n\n}\n</code></pre><p>}</p>\n","site":{"data":{}},"excerpt":"","more":"<p>这个帖子由来已久吧，我也是到处搜到的，然后仔细学习，果然博大精深，然后加强点弄点自己的东西</p>\n<p>我已声明 部分转载！！</p>\n<p>向大家介绍一种很不错，也是Linux中的权限管理算法。</p>\n<p>　　定义a^b为：a的b次方</p>\n<p>　　假如，我们为每一个操作设定一个唯一的整数值，比如：</p>\n<p>　　删除A—0</p>\n<p>　　修改A—1</p>\n<p>　　添加A—2</p>\n<p>　　删除B—3</p>\n<p>　　修改B—4</p>\n<p>　　添加B—5</p>\n<p>　　。。。</p>\n<p>　　理论上可以有N个操作，这取决于你用于储存用户权限值的数据类型了。</p>\n<p>　　这样，如果用户有权限：添加A—2;删除B—3;修改B—4</p>\n<p>　　那用户的权限值 purview =2^2+2^3+2^4=28，也就是2的权的和了</p>\n<p>　　化成二进制可以表示为11100</p>\n<p>　　如果要验证用户是否有删除B的权限，就可以通过位与运算来实现。</p>\n<p>　　在Java里，位与运算运算符号为&amp;</p>\n<p>　　即是：int value = purview &amp;((int)Math.pow(2,3));</p>\n<p>　　你会发现，当用户有操作权限时，运算出来的结果都会等于这个操作需要的权限值!</p>\n<p>　　原理：</p>\n<p>　　位与运算，顾名思义就是对位进行与运算：</p>\n<p>　　以上面的式子为例：purview &amp;2^3 也就是　28&amp;8</p>\n<p>　　将它们化成二进制有</p>\n<p>　　11100</p>\n<p>　　&amp; 01000</p>\n<p>　　——————-</p>\n<p>　　01000 == 8(十进制)　==　2^3</p>\n<p>　　同理，如果要验证是否有删除A—0的权限</p>\n<p>　　可以用：purview &amp;((int)Math.pow(2,0));</p>\n<p>　　即：</p>\n<p>　　11100</p>\n<p>　　&amp; 00001</p>\n<p>　　————————</p>\n<p>　　00000 == 0(十进制)　　!=　2^0</p>\n<p>　　这种算法的一个优点是速度快。可以同时处理N个权限，设置N种角色.</p>\n<p>　　处理多个权限：</p>\n<pre><code>如果想验证是否同时有删除A---0和删除B---3的权限\n</code></pre><p>　　                          可以用purview&amp;(2^0+2^3)==(2^0+2^3)?true:false;</p>\n<p>　　处理多角色用户：</p>\n<p>　　 这里我多加一个示例，把问题说清楚，假设有四个角色，分别有多个不同的权限，多个权限构成一个角色</p>\n<pre><code> 角色1：删除A---0，修改A---1，添加A---2，查看A---3\n\n权限值2^0+2^1+2^2+2^3 = 15   二进制1111\n\n 角色2：删除B---4，修改B---5，添加B---6，查看B---7\n\n 权限值2^4+2^5+2^6+2^7 = 240    二进制11110000\n\n 角色3：删除A---0，修改A---1，添加A---2，查看A---3，删除B---4，修改B---5，添加B---6，查看B---7\n\n 权限值2^0+2^1+2^2+2^3 +2^4+2^5+2^6+2^7= 255 二进制 11111111\n\n 角色4：查看A---3，查看B---7\n\n 权限值 2^3+2^7 = 136   二进制 10001000\n</code></pre><p>   某一个用户拥有角色1–1111和角色4—10001000 的权限，即二进制总权限要为10001111</p>\n<p> (2^0+2^1+2^2+2^3)| (2^3+2^7)=purview（用户总权限值 ） = 143</p>\n<pre><code>根据权限值判断用户的角色，例如判断该用户有没有添加A和查看B的权限\n</code></pre><p>purview&amp;（2^2+2^7）?true:false;</p>\n<p> 　　下面提供一个java的单操作权限判断的代码：</p>\n<p>Java代码<br>//userPurview是用户具有的总权限</p>\n<p>//optPurview是一个操作要求的权限为一个整数(没有经过权的!)</p>\n<p>public static boolean checkPower(int userPurview, int optPurview){</p>\n<p>  int purviewValue = (int)Math.pow(2, optPurview);</p>\n<p>  return (userPurview &amp;purviewValue) == purviewValue;</p>\n<p>}</p>\n<p>这是对多角色权限的模拟</p>\n<p>Java代码<br>package com.authority;</p>\n<p>public class AuthorityCodeTest {</p>\n<pre><code>/**\n * @param args\n */\npublic static void main(String[] args) {\n\n    //用户具有的总权限\n    int userPurview ;\n    //用户拥有角色1和角色4的权限\n    int power =(int)Math.pow(2, 0)+(int)Math.pow(2, 1)+(int)Math.pow(2, 2)+(int)Math.pow(2, 3);//15\n    int power4 =(int)Math.pow(2, 3)+(int)Math.pow(2, 7);//136\n    userPurview =totolPower(power,power4);//143 ----10001111\n\n    int[]optPurview = {2,7};\n    //这里假设用户要执行2号添加A和7号操作查看B\n    boolean rs = checkPower(userPurview, optPurview);\n    System.out.println(rs);\n}\n\nprivate static int totolPower(int i, int j) {\n    return i|j;\n\n}\n\n//optPurview是操作要求的权限码整形数组，还没有经过权\nprivate static boolean checkPower(int userPurview, int[] optPurview) {\n\n    int purviewValue =0;\n    for (int i = 0; i &lt; optPurview.length; i++) {\n        int j = optPurview[i];\n        purviewValue+= (int)Math.pow(2, j);\n    }\n     System.out.println(&quot;操作要求码：&quot;+purviewValue);//132 ---10000100\n     return (userPurview&amp;purviewValue) == purviewValue;\n\n}\n</code></pre><p>}</p>\n"},{"title":"正则表达式语法","id":"1779","date":"2014-04-30T07:51:37.000Z","_content":"\n<table width=\"100%\">\n<tbody>\n<tr>\n<th style=\"color: #636363;\">表达式</th>\n<th style=\"color: #636363;\">匹配</th>\n</tr>\n<tr>\n<td style=\"color: #2a2a2a;\">/^\\s*$/</td>\n<td style=\"color: #2a2a2a;\">匹配空行。</td>\n</tr>\n<tr>\n<td style=\"color: #2a2a2a;\">/\\d{2}-\\d{5}/</td>\n<td style=\"color: #2a2a2a;\">验证由两位数字、一个连字符再加 5 位数字组成的 ID 号。</td>\n</tr>\n<tr>\n<td style=\"color: #2a2a2a;\">/&lt;\\s*(\\S+)(\\s[^&gt;]*)?&gt;[\\s\\S]*&lt;\\s*\\/\\1\\s*&gt;/</td>\n<td style=\"color: #2a2a2a;\">匹配 HTML 标记。</td>\n</tr>\n</tbody>\n</table>\n\n<!--more-->\n\n<table width=\"100%\">\n<tbody>\n<tr>\n<th style=\"color: #636363;\">字符</th>\n<th style=\"color: #636363;\">说明</th>\n</tr>\n<tr>\n<td style=\"color: #2a2a2a;\">\\</td>\n<td style=\"color: #2a2a2a;\">将下一字符标记为特殊字符、文本、反向引用或八进制转义符。例如，“n”匹配字符“n”。“\\n”匹配换行符。序列“\\\\”匹配“\\”，“\\(”匹配“(”。</td>\n</tr>\n<tr>\n<td style=\"color: #2a2a2a;\">^</td>\n<td style=\"color: #2a2a2a;\">匹配输入字符串开始的位置。如果设置了 **RegExp** 对象的 **Multiline** 属性，^ 还会与“\\n”或“\\r”之后的位置匹配。</td>\n</tr>\n<tr>\n<td style=\"color: #2a2a2a;\">$</td>\n<td style=\"color: #2a2a2a;\">匹配输入字符串结尾的位置。如果设置了 **RegExp** 对象的 **Multiline** 属性，$ 还会与“\\n”或“\\r”之前的位置匹配。</td>\n</tr>\n<tr>\n<td style=\"color: #2a2a2a;\">*</td>\n<td style=\"color: #2a2a2a;\">零次或多次匹配前面的字符或子表达式。例如，zo* 匹配“z”和“zoo”。* 等效于 {0,}。</td>\n</tr>\n<tr>\n<td style=\"color: #2a2a2a;\">+</td>\n<td style=\"color: #2a2a2a;\">一次或多次匹配前面的字符或子表达式。例如，“zo+”与“zo”和“zoo”匹配，但与“z”不匹配。+ 等效于 {1,}。</td>\n</tr>\n<tr>\n<td style=\"color: #2a2a2a;\">?</td>\n<td style=\"color: #2a2a2a;\">零次或一次匹配前面的字符或子表达式。例如，“do(es)?”匹配“do”或“does”中的“do”。? 等效于 {0,1}。</td>\n</tr>\n<tr>\n<td style=\"color: #2a2a2a;\">{_n_}</td>\n<td style=\"color: #2a2a2a;\">_n _是非负整数。正好匹配 _n_ 次。例如，“o{2}”与“Bob”中的“o”不匹配，但与“food”中的两个“o”匹配。</td>\n</tr>\n<tr>\n<td style=\"color: #2a2a2a;\">{_n_,}</td>\n<td style=\"color: #2a2a2a;\">_n _是非负整数。至少匹配 _n _次。例如，“o{2,}”不匹配“Bob”中的“o”，而匹配“foooood”中的所有 o。“o{1,}”等效于“o+”。“o{0,}”等效于“o*”。</td>\n</tr>\n<tr>\n<td style=\"color: #2a2a2a;\">{_n_,_m_}</td>\n<td style=\"color: #2a2a2a;\">_M_ 和 _n_ 是非负整数，其中 _n_ &lt;= _m_。匹配至少 _n_ 次，至多 _m_ 次。例如，“o{1,3}”匹配“fooooood”中的头三个 o。'o{0,1}' 等效于 'o?'。注意：您不能将空格插入逗号和数字之间。</td>\n</tr>\n<tr>\n<td style=\"color: #2a2a2a;\">?</td>\n<td style=\"color: #2a2a2a;\">当此字符紧随任何其他限定符（*、+、?、{_n_}、{_n_,}、{_n_,_m_}）之后时，匹配模式是“非贪心的”。“非贪心的”模式匹配搜索到的、尽可能短的字符串，而默认的“贪心的”模式匹配搜索到的、尽可能长的字符串。例如，在字符串“oooo”中，“o+?”只匹配单个“o”，而“o+”匹配所有“o”。</td>\n</tr>\n<tr>\n<td style=\"color: #2a2a2a;\">.</td>\n<td style=\"color: #2a2a2a;\">匹配除“\\n”之外的任何单个字符。若要匹配包括“\\n”在内的任意字符，请使用诸如“[\\s\\S]”之类的模式。</td>\n</tr>\n<tr>\n<td style=\"color: #2a2a2a;\">(_pattern_)</td>\n<td style=\"color: #2a2a2a;\">匹配 _pattern_ 并捕获该匹配的子表达式。可以使用 **$0…$9** 属性从结果“匹配”集合中检索捕获的匹配。若要匹配括号字符 ( )，请使用“\\(”或者“\\)”。</td>\n</tr>\n<tr>\n<td style=\"color: #2a2a2a;\">(?:_pattern_)</td>\n<td style=\"color: #2a2a2a;\">匹配 _pattern_ 但不捕获该匹配的子表达式，即它是一个非捕获匹配，不存储供以后使用的匹配。这对于用“or”字符 (|) 组合模式部件的情况很有用。例如，'industr(?:y|ies) 是比 'industry|industries' 更经济的表达式。</td>\n</tr>\n<tr>\n<td style=\"color: #2a2a2a;\">(?=_pattern_)</td>\n<td style=\"color: #2a2a2a;\">执行正向预测先行搜索的子表达式，该表达式匹配处于匹配 _pattern_ 的字符串的起始点的字符串。它是一个非捕获匹配，即不能捕获供以后使用的匹配。例如，'Windows (?=95|98|NT|2000)' 匹配“Windows 2000”中的“Windows”，但不匹配“Windows 3.1”中的“Windows”。预测先行不占用字符，即发生匹配后，下一匹配的搜索紧随上一匹配之后，而不是在组成预测先行的字符后。</td>\n</tr>\n<tr>\n<td style=\"color: #2a2a2a;\">(?!_pattern_)</td>\n<td style=\"color: #2a2a2a;\">执行反向预测先行搜索的子表达式，该表达式匹配不处于匹配 _pattern_ 的字符串的起始点的搜索字符串。它是一个非捕获匹配，即不能捕获供以后使用的匹配。例如，'Windows (?!95|98|NT|2000)' 匹配“Windows 3.1”中的 “Windows”，但不匹配“Windows 2000”中的“Windows”。预测先行不占用字符，即发生匹配后，下一匹配的搜索紧随上一匹配之后，而不是在组成预测先行的字符后。</td>\n</tr>\n<tr>\n<td style=\"color: #2a2a2a;\">_x_|_y_</td>\n<td style=\"color: #2a2a2a;\">匹配 _x_ 或 _y_。例如，'z|food' 匹配“z”或“food”。'(z|f)ood' 匹配“zood”或“food”。</td>\n</tr>\n<tr>\n<td style=\"color: #2a2a2a;\">[_xyz_]</td>\n<td style=\"color: #2a2a2a;\">字符集。匹配包含的任一字符。例如，“[abc]”匹配“plain”中的“a”。</td>\n</tr>\n<tr>\n<td style=\"color: #2a2a2a;\">[^_xyz_]</td>\n<td style=\"color: #2a2a2a;\">反向字符集。匹配未包含的任何字符。例如，“[^abc]”匹配“plain”中的“p”。</td>\n</tr>\n<tr>\n<td style=\"color: #2a2a2a;\">[_a-z_]</td>\n<td style=\"color: #2a2a2a;\">字符范围。匹配指定范围内的任何字符。例如，“[a-z]”匹配“a”到“z”范围内的任何小写字母。</td>\n</tr>\n<tr>\n<td style=\"color: #2a2a2a;\">[^_a-z_]</td>\n<td style=\"color: #2a2a2a;\">反向范围字符。匹配不在指定的范围内的任何字符。例如，“[^a-z]”匹配任何不在“a”到“z”范围内的任何字符。</td>\n</tr>\n<tr>\n<td style=\"color: #2a2a2a;\">\\b</td>\n<td style=\"color: #2a2a2a;\">匹配一个字边界，即字与空格间的位置。例如，“er\\b”匹配“never”中的“er”，但不匹配“verb”中的“er”。</td>\n</tr>\n<tr>\n<td style=\"color: #2a2a2a;\">\\B</td>\n<td style=\"color: #2a2a2a;\">非字边界匹配。“er\\B”匹配“verb”中的“er”，但不匹配“never”中的“er”。</td>\n</tr>\n<tr>\n<td style=\"color: #2a2a2a;\">\\c_x_</td>\n<td style=\"color: #2a2a2a;\">匹配 _x_ 指示的控制字符。例如，\\cM 匹配 Control-M 或回车符。_x_ 的值必须在 A-Z 或 a-z 之间。如果不是这样，则假定 c 就是“c”字符本身。</td>\n</tr>\n<tr>\n<td style=\"color: #2a2a2a;\">\\d</td>\n<td style=\"color: #2a2a2a;\">数字字符匹配。等效于 [0-9]。</td>\n</tr>\n<tr>\n<td style=\"color: #2a2a2a;\">\\D</td>\n<td style=\"color: #2a2a2a;\">非数字字符匹配。等效于 [^0-9]。</td>\n</tr>\n<tr>\n<td style=\"color: #2a2a2a;\">\\f</td>\n<td style=\"color: #2a2a2a;\">换页符匹配。等效于 \\x0c 和 \\cL。</td>\n</tr>\n<tr>\n<td style=\"color: #2a2a2a;\">\\n</td>\n<td style=\"color: #2a2a2a;\">换行符匹配。等效于 \\x0a 和 \\cJ。</td>\n</tr>\n<tr>\n<td style=\"color: #2a2a2a;\">\\r</td>\n<td style=\"color: #2a2a2a;\">匹配一个回车符。等效于 \\x0d 和 \\cM。</td>\n</tr>\n<tr>\n<td style=\"color: #2a2a2a;\">\\s</td>\n<td style=\"color: #2a2a2a;\">匹配任何空白字符，包括空格、制表符、换页符等。与 [ \\f\\n\\r\\t\\v] 等效。</td>\n</tr>\n<tr>\n<td style=\"color: #2a2a2a;\">\\S</td>\n<td style=\"color: #2a2a2a;\">匹配任何非空白字符。与 [^ \\f\\n\\r\\t\\v] 等效。</td>\n</tr>\n<tr>\n<td style=\"color: #2a2a2a;\">\\t</td>\n<td style=\"color: #2a2a2a;\">制表符匹配。与 \\x09 和 \\cI 等效。</td>\n</tr>\n<tr>\n<td style=\"color: #2a2a2a;\">\\v</td>\n<td style=\"color: #2a2a2a;\">垂直制表符匹配。与 \\x0b 和 \\cK 等效。</td>\n</tr>\n<tr>\n<td style=\"color: #2a2a2a;\">\\w</td>\n<td style=\"color: #2a2a2a;\">匹配任何字类字符，包括下划线。与“[A-Za-z0-9_]”等效。</td>\n</tr>\n<tr>\n<td style=\"color: #2a2a2a;\">\\W</td>\n<td style=\"color: #2a2a2a;\">与任何非单词字符匹配。与“[^A-Za-z0-9_]”等效。</td>\n</tr>\n<tr>\n<td style=\"color: #2a2a2a;\">\\x_n_</td>\n<td style=\"color: #2a2a2a;\">匹配 _n_，此处的 _n_ 是一个十六进制转义码。十六进制转义码必须正好是两位数长。例如，“\\x41”匹配“A”。“\\x041”与“\\x04”&amp;“1”等效。允许在正则表达式中使用 ASCII 代码。</td>\n</tr>\n<tr>\n<td style=\"color: #2a2a2a;\">\\_num_</td>\n<td style=\"color: #2a2a2a;\">匹配 _num_，此处的 _num_ 是一个正整数。到捕获匹配的反向引用。例如，“(.)\\1”匹配两个连续的相同字符。</td>\n</tr>\n<tr>\n<td style=\"color: #2a2a2a;\">\\_n_</td>\n<td style=\"color: #2a2a2a;\">标识一个八进制转义码或反向引用。如果 \\_n_ 前面至少有 _n_ 个捕获子表达式，那么 _n_ 是反向引用。否则，如果 _n_ 是八进制数 (0-7)，那么 _n_ 是八进制转义码。</td>\n</tr>\n<tr>\n<td style=\"color: #2a2a2a;\">\\_nm_</td>\n<td style=\"color: #2a2a2a;\">标识一个八进制转义码或反向引用。如果 \\_nm_ 前面至少有 _nm_ 个捕获子表达式，那么 _nm_ 是反向引用。如果 \\_nm_ 前面至少有 _n_ 个捕获，则 _n_ 是反向引用，后面跟有字符 _m_。如果两种前面的情况都不存在，则 \\_nm_ 匹配八进制值 _nm_，其中 _n _和 _m_ 是八进制数字 (0-7)。</td>\n</tr>\n<tr>\n<td style=\"color: #2a2a2a;\">\\<span class=\"parameter\" style=\"font-style: italic;\">nml</span></td>\n<td style=\"color: #2a2a2a;\">当 _n_ 是八进制数 (0-3)，_m_ 和 _l_ 是八进制数 (0-7) 时，匹配八进制转义码 _nml_。</td>\n</tr>\n<tr>\n<td style=\"color: #2a2a2a;\">\\u_n_</td>\n<td style=\"color: #2a2a2a;\">匹配 _n_，其中 _n_ 是以四位十六进制数表示的 Unicode 字符。例如，\\u00A9 匹配版权符号 (©)。</td>\n</tr>\n</tbody>\n</table>\n\n<!--more-->\n\nhttp://msdn.microsoft.com/zh-cn/library/ae5bf541(VS.80).aspx","source":"_posts/e6-ad-a3-e5-88-99-e8-a1-a8-e8-be-be-e5-bc-8f-e8-af-ad-e6-b3-95.md","raw":"---\ntitle: 正则表达式语法\ntags:\n  - 正则表达式\nid: 1779\ncategories:\n  - Other\ndate: 2014-04-30 15:51:37\n---\n\n<table width=\"100%\">\n<tbody>\n<tr>\n<th style=\"color: #636363;\">表达式</th>\n<th style=\"color: #636363;\">匹配</th>\n</tr>\n<tr>\n<td style=\"color: #2a2a2a;\">/^\\s*$/</td>\n<td style=\"color: #2a2a2a;\">匹配空行。</td>\n</tr>\n<tr>\n<td style=\"color: #2a2a2a;\">/\\d{2}-\\d{5}/</td>\n<td style=\"color: #2a2a2a;\">验证由两位数字、一个连字符再加 5 位数字组成的 ID 号。</td>\n</tr>\n<tr>\n<td style=\"color: #2a2a2a;\">/&lt;\\s*(\\S+)(\\s[^&gt;]*)?&gt;[\\s\\S]*&lt;\\s*\\/\\1\\s*&gt;/</td>\n<td style=\"color: #2a2a2a;\">匹配 HTML 标记。</td>\n</tr>\n</tbody>\n</table>\n\n<!--more-->\n\n<table width=\"100%\">\n<tbody>\n<tr>\n<th style=\"color: #636363;\">字符</th>\n<th style=\"color: #636363;\">说明</th>\n</tr>\n<tr>\n<td style=\"color: #2a2a2a;\">\\</td>\n<td style=\"color: #2a2a2a;\">将下一字符标记为特殊字符、文本、反向引用或八进制转义符。例如，“n”匹配字符“n”。“\\n”匹配换行符。序列“\\\\”匹配“\\”，“\\(”匹配“(”。</td>\n</tr>\n<tr>\n<td style=\"color: #2a2a2a;\">^</td>\n<td style=\"color: #2a2a2a;\">匹配输入字符串开始的位置。如果设置了 **RegExp** 对象的 **Multiline** 属性，^ 还会与“\\n”或“\\r”之后的位置匹配。</td>\n</tr>\n<tr>\n<td style=\"color: #2a2a2a;\">$</td>\n<td style=\"color: #2a2a2a;\">匹配输入字符串结尾的位置。如果设置了 **RegExp** 对象的 **Multiline** 属性，$ 还会与“\\n”或“\\r”之前的位置匹配。</td>\n</tr>\n<tr>\n<td style=\"color: #2a2a2a;\">*</td>\n<td style=\"color: #2a2a2a;\">零次或多次匹配前面的字符或子表达式。例如，zo* 匹配“z”和“zoo”。* 等效于 {0,}。</td>\n</tr>\n<tr>\n<td style=\"color: #2a2a2a;\">+</td>\n<td style=\"color: #2a2a2a;\">一次或多次匹配前面的字符或子表达式。例如，“zo+”与“zo”和“zoo”匹配，但与“z”不匹配。+ 等效于 {1,}。</td>\n</tr>\n<tr>\n<td style=\"color: #2a2a2a;\">?</td>\n<td style=\"color: #2a2a2a;\">零次或一次匹配前面的字符或子表达式。例如，“do(es)?”匹配“do”或“does”中的“do”。? 等效于 {0,1}。</td>\n</tr>\n<tr>\n<td style=\"color: #2a2a2a;\">{_n_}</td>\n<td style=\"color: #2a2a2a;\">_n _是非负整数。正好匹配 _n_ 次。例如，“o{2}”与“Bob”中的“o”不匹配，但与“food”中的两个“o”匹配。</td>\n</tr>\n<tr>\n<td style=\"color: #2a2a2a;\">{_n_,}</td>\n<td style=\"color: #2a2a2a;\">_n _是非负整数。至少匹配 _n _次。例如，“o{2,}”不匹配“Bob”中的“o”，而匹配“foooood”中的所有 o。“o{1,}”等效于“o+”。“o{0,}”等效于“o*”。</td>\n</tr>\n<tr>\n<td style=\"color: #2a2a2a;\">{_n_,_m_}</td>\n<td style=\"color: #2a2a2a;\">_M_ 和 _n_ 是非负整数，其中 _n_ &lt;= _m_。匹配至少 _n_ 次，至多 _m_ 次。例如，“o{1,3}”匹配“fooooood”中的头三个 o。'o{0,1}' 等效于 'o?'。注意：您不能将空格插入逗号和数字之间。</td>\n</tr>\n<tr>\n<td style=\"color: #2a2a2a;\">?</td>\n<td style=\"color: #2a2a2a;\">当此字符紧随任何其他限定符（*、+、?、{_n_}、{_n_,}、{_n_,_m_}）之后时，匹配模式是“非贪心的”。“非贪心的”模式匹配搜索到的、尽可能短的字符串，而默认的“贪心的”模式匹配搜索到的、尽可能长的字符串。例如，在字符串“oooo”中，“o+?”只匹配单个“o”，而“o+”匹配所有“o”。</td>\n</tr>\n<tr>\n<td style=\"color: #2a2a2a;\">.</td>\n<td style=\"color: #2a2a2a;\">匹配除“\\n”之外的任何单个字符。若要匹配包括“\\n”在内的任意字符，请使用诸如“[\\s\\S]”之类的模式。</td>\n</tr>\n<tr>\n<td style=\"color: #2a2a2a;\">(_pattern_)</td>\n<td style=\"color: #2a2a2a;\">匹配 _pattern_ 并捕获该匹配的子表达式。可以使用 **$0…$9** 属性从结果“匹配”集合中检索捕获的匹配。若要匹配括号字符 ( )，请使用“\\(”或者“\\)”。</td>\n</tr>\n<tr>\n<td style=\"color: #2a2a2a;\">(?:_pattern_)</td>\n<td style=\"color: #2a2a2a;\">匹配 _pattern_ 但不捕获该匹配的子表达式，即它是一个非捕获匹配，不存储供以后使用的匹配。这对于用“or”字符 (|) 组合模式部件的情况很有用。例如，'industr(?:y|ies) 是比 'industry|industries' 更经济的表达式。</td>\n</tr>\n<tr>\n<td style=\"color: #2a2a2a;\">(?=_pattern_)</td>\n<td style=\"color: #2a2a2a;\">执行正向预测先行搜索的子表达式，该表达式匹配处于匹配 _pattern_ 的字符串的起始点的字符串。它是一个非捕获匹配，即不能捕获供以后使用的匹配。例如，'Windows (?=95|98|NT|2000)' 匹配“Windows 2000”中的“Windows”，但不匹配“Windows 3.1”中的“Windows”。预测先行不占用字符，即发生匹配后，下一匹配的搜索紧随上一匹配之后，而不是在组成预测先行的字符后。</td>\n</tr>\n<tr>\n<td style=\"color: #2a2a2a;\">(?!_pattern_)</td>\n<td style=\"color: #2a2a2a;\">执行反向预测先行搜索的子表达式，该表达式匹配不处于匹配 _pattern_ 的字符串的起始点的搜索字符串。它是一个非捕获匹配，即不能捕获供以后使用的匹配。例如，'Windows (?!95|98|NT|2000)' 匹配“Windows 3.1”中的 “Windows”，但不匹配“Windows 2000”中的“Windows”。预测先行不占用字符，即发生匹配后，下一匹配的搜索紧随上一匹配之后，而不是在组成预测先行的字符后。</td>\n</tr>\n<tr>\n<td style=\"color: #2a2a2a;\">_x_|_y_</td>\n<td style=\"color: #2a2a2a;\">匹配 _x_ 或 _y_。例如，'z|food' 匹配“z”或“food”。'(z|f)ood' 匹配“zood”或“food”。</td>\n</tr>\n<tr>\n<td style=\"color: #2a2a2a;\">[_xyz_]</td>\n<td style=\"color: #2a2a2a;\">字符集。匹配包含的任一字符。例如，“[abc]”匹配“plain”中的“a”。</td>\n</tr>\n<tr>\n<td style=\"color: #2a2a2a;\">[^_xyz_]</td>\n<td style=\"color: #2a2a2a;\">反向字符集。匹配未包含的任何字符。例如，“[^abc]”匹配“plain”中的“p”。</td>\n</tr>\n<tr>\n<td style=\"color: #2a2a2a;\">[_a-z_]</td>\n<td style=\"color: #2a2a2a;\">字符范围。匹配指定范围内的任何字符。例如，“[a-z]”匹配“a”到“z”范围内的任何小写字母。</td>\n</tr>\n<tr>\n<td style=\"color: #2a2a2a;\">[^_a-z_]</td>\n<td style=\"color: #2a2a2a;\">反向范围字符。匹配不在指定的范围内的任何字符。例如，“[^a-z]”匹配任何不在“a”到“z”范围内的任何字符。</td>\n</tr>\n<tr>\n<td style=\"color: #2a2a2a;\">\\b</td>\n<td style=\"color: #2a2a2a;\">匹配一个字边界，即字与空格间的位置。例如，“er\\b”匹配“never”中的“er”，但不匹配“verb”中的“er”。</td>\n</tr>\n<tr>\n<td style=\"color: #2a2a2a;\">\\B</td>\n<td style=\"color: #2a2a2a;\">非字边界匹配。“er\\B”匹配“verb”中的“er”，但不匹配“never”中的“er”。</td>\n</tr>\n<tr>\n<td style=\"color: #2a2a2a;\">\\c_x_</td>\n<td style=\"color: #2a2a2a;\">匹配 _x_ 指示的控制字符。例如，\\cM 匹配 Control-M 或回车符。_x_ 的值必须在 A-Z 或 a-z 之间。如果不是这样，则假定 c 就是“c”字符本身。</td>\n</tr>\n<tr>\n<td style=\"color: #2a2a2a;\">\\d</td>\n<td style=\"color: #2a2a2a;\">数字字符匹配。等效于 [0-9]。</td>\n</tr>\n<tr>\n<td style=\"color: #2a2a2a;\">\\D</td>\n<td style=\"color: #2a2a2a;\">非数字字符匹配。等效于 [^0-9]。</td>\n</tr>\n<tr>\n<td style=\"color: #2a2a2a;\">\\f</td>\n<td style=\"color: #2a2a2a;\">换页符匹配。等效于 \\x0c 和 \\cL。</td>\n</tr>\n<tr>\n<td style=\"color: #2a2a2a;\">\\n</td>\n<td style=\"color: #2a2a2a;\">换行符匹配。等效于 \\x0a 和 \\cJ。</td>\n</tr>\n<tr>\n<td style=\"color: #2a2a2a;\">\\r</td>\n<td style=\"color: #2a2a2a;\">匹配一个回车符。等效于 \\x0d 和 \\cM。</td>\n</tr>\n<tr>\n<td style=\"color: #2a2a2a;\">\\s</td>\n<td style=\"color: #2a2a2a;\">匹配任何空白字符，包括空格、制表符、换页符等。与 [ \\f\\n\\r\\t\\v] 等效。</td>\n</tr>\n<tr>\n<td style=\"color: #2a2a2a;\">\\S</td>\n<td style=\"color: #2a2a2a;\">匹配任何非空白字符。与 [^ \\f\\n\\r\\t\\v] 等效。</td>\n</tr>\n<tr>\n<td style=\"color: #2a2a2a;\">\\t</td>\n<td style=\"color: #2a2a2a;\">制表符匹配。与 \\x09 和 \\cI 等效。</td>\n</tr>\n<tr>\n<td style=\"color: #2a2a2a;\">\\v</td>\n<td style=\"color: #2a2a2a;\">垂直制表符匹配。与 \\x0b 和 \\cK 等效。</td>\n</tr>\n<tr>\n<td style=\"color: #2a2a2a;\">\\w</td>\n<td style=\"color: #2a2a2a;\">匹配任何字类字符，包括下划线。与“[A-Za-z0-9_]”等效。</td>\n</tr>\n<tr>\n<td style=\"color: #2a2a2a;\">\\W</td>\n<td style=\"color: #2a2a2a;\">与任何非单词字符匹配。与“[^A-Za-z0-9_]”等效。</td>\n</tr>\n<tr>\n<td style=\"color: #2a2a2a;\">\\x_n_</td>\n<td style=\"color: #2a2a2a;\">匹配 _n_，此处的 _n_ 是一个十六进制转义码。十六进制转义码必须正好是两位数长。例如，“\\x41”匹配“A”。“\\x041”与“\\x04”&amp;“1”等效。允许在正则表达式中使用 ASCII 代码。</td>\n</tr>\n<tr>\n<td style=\"color: #2a2a2a;\">\\_num_</td>\n<td style=\"color: #2a2a2a;\">匹配 _num_，此处的 _num_ 是一个正整数。到捕获匹配的反向引用。例如，“(.)\\1”匹配两个连续的相同字符。</td>\n</tr>\n<tr>\n<td style=\"color: #2a2a2a;\">\\_n_</td>\n<td style=\"color: #2a2a2a;\">标识一个八进制转义码或反向引用。如果 \\_n_ 前面至少有 _n_ 个捕获子表达式，那么 _n_ 是反向引用。否则，如果 _n_ 是八进制数 (0-7)，那么 _n_ 是八进制转义码。</td>\n</tr>\n<tr>\n<td style=\"color: #2a2a2a;\">\\_nm_</td>\n<td style=\"color: #2a2a2a;\">标识一个八进制转义码或反向引用。如果 \\_nm_ 前面至少有 _nm_ 个捕获子表达式，那么 _nm_ 是反向引用。如果 \\_nm_ 前面至少有 _n_ 个捕获，则 _n_ 是反向引用，后面跟有字符 _m_。如果两种前面的情况都不存在，则 \\_nm_ 匹配八进制值 _nm_，其中 _n _和 _m_ 是八进制数字 (0-7)。</td>\n</tr>\n<tr>\n<td style=\"color: #2a2a2a;\">\\<span class=\"parameter\" style=\"font-style: italic;\">nml</span></td>\n<td style=\"color: #2a2a2a;\">当 _n_ 是八进制数 (0-3)，_m_ 和 _l_ 是八进制数 (0-7) 时，匹配八进制转义码 _nml_。</td>\n</tr>\n<tr>\n<td style=\"color: #2a2a2a;\">\\u_n_</td>\n<td style=\"color: #2a2a2a;\">匹配 _n_，其中 _n_ 是以四位十六进制数表示的 Unicode 字符。例如，\\u00A9 匹配版权符号 (©)。</td>\n</tr>\n</tbody>\n</table>\n\n<!--more-->\n\nhttp://msdn.microsoft.com/zh-cn/library/ae5bf541(VS.80).aspx","slug":"e6-ad-a3-e5-88-99-e8-a1-a8-e8-be-be-e5-bc-8f-e8-af-ad-e6-b3-95","published":1,"updated":"2018-01-13T05:07:00.449Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjccw7x9f003gaqcrgzmb1c38","content":"<table width=\"100%\"><br><tbody><br><tr><br><th style=\"color: #636363;\">表达式</th><br><th style=\"color: #636363;\">匹配</th><br></tr><br><tr><br><td style=\"color: #2a2a2a;\">/^\\s<em>$/</em></td><br><td style=\"color: #2a2a2a;\">匹配空行。</td><br></tr><br><tr><br><td style=\"color: #2a2a2a;\">/\\d{2}-\\d{5}/</td><br><td style=\"color: #2a2a2a;\">验证由两位数字、一个连字符再加 5 位数字组成的 ID 号。</td><br></tr><br><tr><br><td style=\"color: #2a2a2a;\">/&lt;\\s(\\S+)(\\s[^&gt;]<em>)?&gt;[\\s\\S]</em>&lt;\\s<em>\\/\\1\\s</em>&gt;/</td><br><td style=\"color: #2a2a2a;\">匹配 HTML 标记。</td><br></tr><br></tbody><br></table>\n\n<a id=\"more\"></a>\n<table width=\"100%\"><br><tbody><br><tr><br><th style=\"color: #636363;\">字符</th><br><th style=\"color: #636363;\">说明</th><br></tr><br><tr><br><td style=\"color: #2a2a2a;\">\\</td><br><td style=\"color: #2a2a2a;\">将下一字符标记为特殊字符、文本、反向引用或八进制转义符。例如，“n”匹配字符“n”。“\\n”匹配换行符。序列“\\”匹配“\\”，“(”匹配“(”。</td><br></tr><br><tr><br><td style=\"color: #2a2a2a;\">^</td><br><td style=\"color: #2a2a2a;\">匹配输入字符串开始的位置。如果设置了 <strong>RegExp</strong> 对象的 <strong>Multiline</strong> 属性，^ 还会与“\\n”或“\\r”之后的位置匹配。</td><br></tr><br><tr><br><td style=\"color: #2a2a2a;\">$</td><br><td style=\"color: #2a2a2a;\">匹配输入字符串结尾的位置。如果设置了 <strong>RegExp</strong> 对象的 <strong>Multiline</strong> 属性，$ 还会与“\\n”或“\\r”之前的位置匹配。</td><br></tr><br><tr><br><td style=\"color: #2a2a2a;\"><em></em></td><br><td style=\"color: #2a2a2a;\">零次或多次匹配前面的字符或子表达式。例如，zo 匹配“z”和“zoo”。<em> 等效于 {0,}。</em></td><br></tr><br><tr><br><td style=\"color: #2a2a2a;\">+</td><br><td style=\"color: #2a2a2a;\">一次或多次匹配前面的字符或子表达式。例如，“zo+”与“zo”和“zoo”匹配，但与“z”不匹配。+ 等效于 {1,}。</td><br></tr><br><tr><br><td style=\"color: #2a2a2a;\">?</td><br><td style=\"color: #2a2a2a;\">零次或一次匹配前面的字符或子表达式。例如，“do(es)?”匹配“do”或“does”中的“do”。? 等效于 {0,1}。</td><br></tr><br><tr><br><td style=\"color: #2a2a2a;\">{<em>n</em>}</td><br><td style=\"color: #2a2a2a;\"><em>n </em>是非负整数。正好匹配 <em>n</em> 次。例如，“o{2}”与“Bob”中的“o”不匹配，但与“food”中的两个“o”匹配。</td><br></tr><br><tr><br><td style=\"color: #2a2a2a;\">{<em>n</em>,}</td><br><td style=\"color: #2a2a2a;\"><em>n </em>是非负整数。至少匹配 <em>n </em>次。例如，“o{2,}”不匹配“Bob”中的“o”，而匹配“foooood”中的所有 o。“o{1,}”等效于“o+”。“o{0,}”等效于“o”。</td><br></tr><br><tr><br><td style=\"color: #2a2a2a;\">{<em>n</em>,<em>m</em>}</td><br><td style=\"color: #2a2a2a;\"><em>M</em> 和 <em>n</em> 是非负整数，其中 <em>n</em> &lt;= <em>m</em>。匹配至少 <em>n</em> 次，至多 <em>m</em> 次。例如，“o{1,3}”匹配“fooooood”中的头三个 o。’o{0,1}’ 等效于 ‘o?’。注意：您不能将空格插入逗号和数字之间。</td><br></tr><br><tr><br><td style=\"color: #2a2a2a;\">?</td><br><td style=\"color: #2a2a2a;\">当此字符紧随任何其他限定符（<em>、+、?、{<em>n</em>}、{<em>n</em>,}、{<em>n</em>,<em>m</em>}）之后时，匹配模式是“非贪心的”。“非贪心的”模式匹配搜索到的、尽可能短的字符串，而默认的“贪心的”模式匹配搜索到的、尽可能长的字符串。例如，在字符串“oooo”中，“o+?”只匹配单个“o”，而“o+”匹配所有“o”。</em></td><br></tr><br><tr><br><td style=\"color: #2a2a2a;\">.</td><br><td style=\"color: #2a2a2a;\">匹配除“\\n”之外的任何单个字符。若要匹配包括“\\n”在内的任意字符，请使用诸如“[\\s\\S]”之类的模式。</td><br></tr><br><tr><br><td style=\"color: #2a2a2a;\">(<em>pattern</em>)</td><br><td style=\"color: #2a2a2a;\">匹配 <em>pattern</em> 并捕获该匹配的子表达式。可以使用 <em>*$0…$9</em> 属性从结果“匹配”集合中检索捕获的匹配。若要匹配括号字符 ( )，请使用“(”或者“)”。</td><br></tr><br><tr><br><td style=\"color: #2a2a2a;\">(?:<em>pattern</em>)</td><br><td style=\"color: #2a2a2a;\">匹配 <em>pattern</em> 但不捕获该匹配的子表达式，即它是一个非捕获匹配，不存储供以后使用的匹配。这对于用“or”字符 (|) 组合模式部件的情况很有用。例如，’industr(?:y|ies) 是比 ‘industry|industries’ 更经济的表达式。</td><br></tr><br><tr><br><td style=\"color: #2a2a2a;\">(?=<em>pattern</em>)</td><br><td style=\"color: #2a2a2a;\">执行正向预测先行搜索的子表达式，该表达式匹配处于匹配 <em>pattern</em> 的字符串的起始点的字符串。它是一个非捕获匹配，即不能捕获供以后使用的匹配。例如，’Windows (?=95|98|NT|2000)’ 匹配“Windows 2000”中的“Windows”，但不匹配“Windows 3.1”中的“Windows”。预测先行不占用字符，即发生匹配后，下一匹配的搜索紧随上一匹配之后，而不是在组成预测先行的字符后。</td><br></tr><br><tr><br><td style=\"color: #2a2a2a;\">(?!<em>pattern</em>)</td><br><td style=\"color: #2a2a2a;\">执行反向预测先行搜索的子表达式，该表达式匹配不处于匹配 <em>pattern</em> 的字符串的起始点的搜索字符串。它是一个非捕获匹配，即不能捕获供以后使用的匹配。例如，’Windows (?!95|98|NT|2000)’ 匹配“Windows 3.1”中的 “Windows”，但不匹配“Windows 2000”中的“Windows”。预测先行不占用字符，即发生匹配后，下一匹配的搜索紧随上一匹配之后，而不是在组成预测先行的字符后。</td><br></tr><br><tr><br><td style=\"color: #2a2a2a;\"><em>x</em>|<em>y</em></td><br><td style=\"color: #2a2a2a;\">匹配 <em>x</em> 或 <em>y</em>。例如，’z|food’ 匹配“z”或“food”。’(z|f)ood’ 匹配“zood”或“food”。</td><br></tr><br><tr><br><td style=\"color: #2a2a2a;\">[<em>xyz</em>]</td><br><td style=\"color: #2a2a2a;\">字符集。匹配包含的任一字符。例如，“[abc]”匹配“plain”中的“a”。</td><br></tr><br><tr><br><td style=\"color: #2a2a2a;\">[^<em>xyz</em>]</td><br><td style=\"color: #2a2a2a;\">反向字符集。匹配未包含的任何字符。例如，“[^abc]”匹配“plain”中的“p”。</td><br></tr><br><tr><br><td style=\"color: #2a2a2a;\">[<em>a-z</em>]</td><br><td style=\"color: #2a2a2a;\">字符范围。匹配指定范围内的任何字符。例如，“[a-z]”匹配“a”到“z”范围内的任何小写字母。</td><br></tr><br><tr><br><td style=\"color: #2a2a2a;\">[^<em>a-z</em>]</td><br><td style=\"color: #2a2a2a;\">反向范围字符。匹配不在指定的范围内的任何字符。例如，“[^a-z]”匹配任何不在“a”到“z”范围内的任何字符。</td><br></tr><br><tr><br><td style=\"color: #2a2a2a;\">\\b</td><br><td style=\"color: #2a2a2a;\">匹配一个字边界，即字与空格间的位置。例如，“er\\b”匹配“never”中的“er”，但不匹配“verb”中的“er”。</td><br></tr><br><tr><br><td style=\"color: #2a2a2a;\">\\B</td><br><td style=\"color: #2a2a2a;\">非字边界匹配。“er\\B”匹配“verb”中的“er”，但不匹配“never”中的“er”。</td><br></tr><br><tr><br><td style=\"color: #2a2a2a;\">\\c<em>x</em></td><br><td style=\"color: #2a2a2a;\">匹配 <em>x</em> 指示的控制字符。例如，\\cM 匹配 Control-M 或回车符。<em>x</em> 的值必须在 A-Z 或 a-z 之间。如果不是这样，则假定 c 就是“c”字符本身。</td><br></tr><br><tr><br><td style=\"color: #2a2a2a;\">\\d</td><br><td style=\"color: #2a2a2a;\">数字字符匹配。等效于 [0-9]。</td><br></tr><br><tr><br><td style=\"color: #2a2a2a;\">\\D</td><br><td style=\"color: #2a2a2a;\">非数字字符匹配。等效于 [^0-9]。</td><br></tr><br><tr><br><td style=\"color: #2a2a2a;\">\\f</td><br><td style=\"color: #2a2a2a;\">换页符匹配。等效于 \\x0c 和 \\cL。</td><br></tr><br><tr><br><td style=\"color: #2a2a2a;\">\\n</td><br><td style=\"color: #2a2a2a;\">换行符匹配。等效于 \\x0a 和 \\cJ。</td><br></tr><br><tr><br><td style=\"color: #2a2a2a;\">\\r</td><br><td style=\"color: #2a2a2a;\">匹配一个回车符。等效于 \\x0d 和 \\cM。</td><br></tr><br><tr><br><td style=\"color: #2a2a2a;\">\\s</td><br><td style=\"color: #2a2a2a;\">匹配任何空白字符，包括空格、制表符、换页符等。与 [ \\f\\n\\r\\t\\v] 等效。</td><br></tr><br><tr><br><td style=\"color: #2a2a2a;\">\\S</td><br><td style=\"color: #2a2a2a;\">匹配任何非空白字符。与 [^ \\f\\n\\r\\t\\v] 等效。</td><br></tr><br><tr><br><td style=\"color: #2a2a2a;\">\\t</td><br><td style=\"color: #2a2a2a;\">制表符匹配。与 \\x09 和 \\cI 等效。</td><br></tr><br><tr><br><td style=\"color: #2a2a2a;\">\\v</td><br><td style=\"color: #2a2a2a;\">垂直制表符匹配。与 \\x0b 和 \\cK 等效。</td><br></tr><br><tr><br><td style=\"color: #2a2a2a;\">\\w</td><br><td style=\"color: #2a2a2a;\">匹配任何字类字符，包括下划线。与“[A-Za-z0-9<em>]”等效。</em></td><br></tr><br><tr><br><td style=\"color: #2a2a2a;\">\\W</td><br><td style=\"color: #2a2a2a;\">与任何非单词字符匹配。与“[^A-Za-z0-9]”等效。</td><br></tr><br><tr><br><td style=\"color: #2a2a2a;\">\\x<em>n</em></td><br><td style=\"color: #2a2a2a;\">匹配 <em>n</em>，此处的 <em>n</em> 是一个十六进制转义码。十六进制转义码必须正好是两位数长。例如，“\\x41”匹配“A”。“\\x041”与“\\x04”&amp;“1”等效。允许在正则表达式中使用 ASCII 代码。</td><br></tr><br><tr><br><td style=\"color: #2a2a2a;\">_num_</td><br><td style=\"color: #2a2a2a;\">匹配 <em>num</em>，此处的 <em>num</em> 是一个正整数。到捕获匹配的反向引用。例如，“(.)\\1”匹配两个连续的相同字符。</td><br></tr><br><tr><br><td style=\"color: #2a2a2a;\">_n_</td><br><td style=\"color: #2a2a2a;\">标识一个八进制转义码或反向引用。如果 _n_ 前面至少有 <em>n</em> 个捕获子表达式，那么 <em>n</em> 是反向引用。否则，如果 <em>n</em> 是八进制数 (0-7)，那么 <em>n</em> 是八进制转义码。</td><br></tr><br><tr><br><td style=\"color: #2a2a2a;\">_nm_</td><br><td style=\"color: #2a2a2a;\">标识一个八进制转义码或反向引用。如果 _nm_ 前面至少有 <em>nm</em> 个捕获子表达式，那么 <em>nm</em> 是反向引用。如果 _nm_ 前面至少有 <em>n</em> 个捕获，则 <em>n</em> 是反向引用，后面跟有字符 <em>m</em>。如果两种前面的情况都不存在，则 _nm_ 匹配八进制值 <em>nm</em>，其中 <em>n </em>和 <em>m</em> 是八进制数字 (0-7)。</td><br></tr><br><tr><br><td style=\"color: #2a2a2a;\">\\<span class=\"parameter\" style=\"font-style: italic;\">nml</span></td><br><td style=\"color: #2a2a2a;\">当 <em>n</em> 是八进制数 (0-3)，<em>m</em> 和 <em>l</em> 是八进制数 (0-7) 时，匹配八进制转义码 <em>nml</em>。</td><br></tr><br><tr><br><td style=\"color: #2a2a2a;\">\\u<em>n</em></td><br><td style=\"color: #2a2a2a;\">匹配 <em>n</em>，其中 <em>n</em> 是以四位十六进制数表示的 Unicode 字符。例如，\\u00A9 匹配版权符号 (©)。</td><br></tr><br></tbody><br></table>\n\n<!--more-->\n<p><a href=\"http://msdn.microsoft.com/zh-cn/library/ae5bf541(VS.80).aspx\" target=\"_blank\" rel=\"noopener\">http://msdn.microsoft.com/zh-cn/library/ae5bf541(VS.80).aspx</a></p>\n","site":{"data":{}},"excerpt":"<table width=\"100%\"><br><tbody><br><tr><br><th style=\"color: #636363;\">表达式</th><br><th style=\"color: #636363;\">匹配</th><br></tr><br><tr><br><td style=\"color: #2a2a2a;\">/^\\s<em>$/</em></td><br><td style=\"color: #2a2a2a;\">匹配空行。</td><br></tr><br><tr><br><td style=\"color: #2a2a2a;\">/\\d{2}-\\d{5}/</td><br><td style=\"color: #2a2a2a;\">验证由两位数字、一个连字符再加 5 位数字组成的 ID 号。</td><br></tr><br><tr><br><td style=\"color: #2a2a2a;\">/&lt;\\s(\\S+)(\\s[^&gt;]<em>)?&gt;[\\s\\S]</em>&lt;\\s<em>\\/\\1\\s</em>&gt;/</td><br><td style=\"color: #2a2a2a;\">匹配 HTML 标记。</td><br></tr><br></tbody><br></table>","more":"<table width=\"100%\"><br><tbody><br><tr><br><th style=\"color: #636363;\">字符</th><br><th style=\"color: #636363;\">说明</th><br></tr><br><tr><br><td style=\"color: #2a2a2a;\">\\</td><br><td style=\"color: #2a2a2a;\">将下一字符标记为特殊字符、文本、反向引用或八进制转义符。例如，“n”匹配字符“n”。“\\n”匹配换行符。序列“\\”匹配“\\”，“(”匹配“(”。</td><br></tr><br><tr><br><td style=\"color: #2a2a2a;\">^</td><br><td style=\"color: #2a2a2a;\">匹配输入字符串开始的位置。如果设置了 <strong>RegExp</strong> 对象的 <strong>Multiline</strong> 属性，^ 还会与“\\n”或“\\r”之后的位置匹配。</td><br></tr><br><tr><br><td style=\"color: #2a2a2a;\">$</td><br><td style=\"color: #2a2a2a;\">匹配输入字符串结尾的位置。如果设置了 <strong>RegExp</strong> 对象的 <strong>Multiline</strong> 属性，$ 还会与“\\n”或“\\r”之前的位置匹配。</td><br></tr><br><tr><br><td style=\"color: #2a2a2a;\"><em></em></td><br><td style=\"color: #2a2a2a;\">零次或多次匹配前面的字符或子表达式。例如，zo 匹配“z”和“zoo”。<em> 等效于 {0,}。</em></td><br></tr><br><tr><br><td style=\"color: #2a2a2a;\">+</td><br><td style=\"color: #2a2a2a;\">一次或多次匹配前面的字符或子表达式。例如，“zo+”与“zo”和“zoo”匹配，但与“z”不匹配。+ 等效于 {1,}。</td><br></tr><br><tr><br><td style=\"color: #2a2a2a;\">?</td><br><td style=\"color: #2a2a2a;\">零次或一次匹配前面的字符或子表达式。例如，“do(es)?”匹配“do”或“does”中的“do”。? 等效于 {0,1}。</td><br></tr><br><tr><br><td style=\"color: #2a2a2a;\">{<em>n</em>}</td><br><td style=\"color: #2a2a2a;\"><em>n </em>是非负整数。正好匹配 <em>n</em> 次。例如，“o{2}”与“Bob”中的“o”不匹配，但与“food”中的两个“o”匹配。</td><br></tr><br><tr><br><td style=\"color: #2a2a2a;\">{<em>n</em>,}</td><br><td style=\"color: #2a2a2a;\"><em>n </em>是非负整数。至少匹配 <em>n </em>次。例如，“o{2,}”不匹配“Bob”中的“o”，而匹配“foooood”中的所有 o。“o{1,}”等效于“o+”。“o{0,}”等效于“o”。</td><br></tr><br><tr><br><td style=\"color: #2a2a2a;\">{<em>n</em>,<em>m</em>}</td><br><td style=\"color: #2a2a2a;\"><em>M</em> 和 <em>n</em> 是非负整数，其中 <em>n</em> &lt;= <em>m</em>。匹配至少 <em>n</em> 次，至多 <em>m</em> 次。例如，“o{1,3}”匹配“fooooood”中的头三个 o。’o{0,1}’ 等效于 ‘o?’。注意：您不能将空格插入逗号和数字之间。</td><br></tr><br><tr><br><td style=\"color: #2a2a2a;\">?</td><br><td style=\"color: #2a2a2a;\">当此字符紧随任何其他限定符（<em>、+、?、{<em>n</em>}、{<em>n</em>,}、{<em>n</em>,<em>m</em>}）之后时，匹配模式是“非贪心的”。“非贪心的”模式匹配搜索到的、尽可能短的字符串，而默认的“贪心的”模式匹配搜索到的、尽可能长的字符串。例如，在字符串“oooo”中，“o+?”只匹配单个“o”，而“o+”匹配所有“o”。</em></td><br></tr><br><tr><br><td style=\"color: #2a2a2a;\">.</td><br><td style=\"color: #2a2a2a;\">匹配除“\\n”之外的任何单个字符。若要匹配包括“\\n”在内的任意字符，请使用诸如“[\\s\\S]”之类的模式。</td><br></tr><br><tr><br><td style=\"color: #2a2a2a;\">(<em>pattern</em>)</td><br><td style=\"color: #2a2a2a;\">匹配 <em>pattern</em> 并捕获该匹配的子表达式。可以使用 <em>*$0…$9</em> 属性从结果“匹配”集合中检索捕获的匹配。若要匹配括号字符 ( )，请使用“(”或者“)”。</td><br></tr><br><tr><br><td style=\"color: #2a2a2a;\">(?:<em>pattern</em>)</td><br><td style=\"color: #2a2a2a;\">匹配 <em>pattern</em> 但不捕获该匹配的子表达式，即它是一个非捕获匹配，不存储供以后使用的匹配。这对于用“or”字符 (|) 组合模式部件的情况很有用。例如，’industr(?:y|ies) 是比 ‘industry|industries’ 更经济的表达式。</td><br></tr><br><tr><br><td style=\"color: #2a2a2a;\">(?=<em>pattern</em>)</td><br><td style=\"color: #2a2a2a;\">执行正向预测先行搜索的子表达式，该表达式匹配处于匹配 <em>pattern</em> 的字符串的起始点的字符串。它是一个非捕获匹配，即不能捕获供以后使用的匹配。例如，’Windows (?=95|98|NT|2000)’ 匹配“Windows 2000”中的“Windows”，但不匹配“Windows 3.1”中的“Windows”。预测先行不占用字符，即发生匹配后，下一匹配的搜索紧随上一匹配之后，而不是在组成预测先行的字符后。</td><br></tr><br><tr><br><td style=\"color: #2a2a2a;\">(?!<em>pattern</em>)</td><br><td style=\"color: #2a2a2a;\">执行反向预测先行搜索的子表达式，该表达式匹配不处于匹配 <em>pattern</em> 的字符串的起始点的搜索字符串。它是一个非捕获匹配，即不能捕获供以后使用的匹配。例如，’Windows (?!95|98|NT|2000)’ 匹配“Windows 3.1”中的 “Windows”，但不匹配“Windows 2000”中的“Windows”。预测先行不占用字符，即发生匹配后，下一匹配的搜索紧随上一匹配之后，而不是在组成预测先行的字符后。</td><br></tr><br><tr><br><td style=\"color: #2a2a2a;\"><em>x</em>|<em>y</em></td><br><td style=\"color: #2a2a2a;\">匹配 <em>x</em> 或 <em>y</em>。例如，’z|food’ 匹配“z”或“food”。’(z|f)ood’ 匹配“zood”或“food”。</td><br></tr><br><tr><br><td style=\"color: #2a2a2a;\">[<em>xyz</em>]</td><br><td style=\"color: #2a2a2a;\">字符集。匹配包含的任一字符。例如，“[abc]”匹配“plain”中的“a”。</td><br></tr><br><tr><br><td style=\"color: #2a2a2a;\">[^<em>xyz</em>]</td><br><td style=\"color: #2a2a2a;\">反向字符集。匹配未包含的任何字符。例如，“[^abc]”匹配“plain”中的“p”。</td><br></tr><br><tr><br><td style=\"color: #2a2a2a;\">[<em>a-z</em>]</td><br><td style=\"color: #2a2a2a;\">字符范围。匹配指定范围内的任何字符。例如，“[a-z]”匹配“a”到“z”范围内的任何小写字母。</td><br></tr><br><tr><br><td style=\"color: #2a2a2a;\">[^<em>a-z</em>]</td><br><td style=\"color: #2a2a2a;\">反向范围字符。匹配不在指定的范围内的任何字符。例如，“[^a-z]”匹配任何不在“a”到“z”范围内的任何字符。</td><br></tr><br><tr><br><td style=\"color: #2a2a2a;\">\\b</td><br><td style=\"color: #2a2a2a;\">匹配一个字边界，即字与空格间的位置。例如，“er\\b”匹配“never”中的“er”，但不匹配“verb”中的“er”。</td><br></tr><br><tr><br><td style=\"color: #2a2a2a;\">\\B</td><br><td style=\"color: #2a2a2a;\">非字边界匹配。“er\\B”匹配“verb”中的“er”，但不匹配“never”中的“er”。</td><br></tr><br><tr><br><td style=\"color: #2a2a2a;\">\\c<em>x</em></td><br><td style=\"color: #2a2a2a;\">匹配 <em>x</em> 指示的控制字符。例如，\\cM 匹配 Control-M 或回车符。<em>x</em> 的值必须在 A-Z 或 a-z 之间。如果不是这样，则假定 c 就是“c”字符本身。</td><br></tr><br><tr><br><td style=\"color: #2a2a2a;\">\\d</td><br><td style=\"color: #2a2a2a;\">数字字符匹配。等效于 [0-9]。</td><br></tr><br><tr><br><td style=\"color: #2a2a2a;\">\\D</td><br><td style=\"color: #2a2a2a;\">非数字字符匹配。等效于 [^0-9]。</td><br></tr><br><tr><br><td style=\"color: #2a2a2a;\">\\f</td><br><td style=\"color: #2a2a2a;\">换页符匹配。等效于 \\x0c 和 \\cL。</td><br></tr><br><tr><br><td style=\"color: #2a2a2a;\">\\n</td><br><td style=\"color: #2a2a2a;\">换行符匹配。等效于 \\x0a 和 \\cJ。</td><br></tr><br><tr><br><td style=\"color: #2a2a2a;\">\\r</td><br><td style=\"color: #2a2a2a;\">匹配一个回车符。等效于 \\x0d 和 \\cM。</td><br></tr><br><tr><br><td style=\"color: #2a2a2a;\">\\s</td><br><td style=\"color: #2a2a2a;\">匹配任何空白字符，包括空格、制表符、换页符等。与 [ \\f\\n\\r\\t\\v] 等效。</td><br></tr><br><tr><br><td style=\"color: #2a2a2a;\">\\S</td><br><td style=\"color: #2a2a2a;\">匹配任何非空白字符。与 [^ \\f\\n\\r\\t\\v] 等效。</td><br></tr><br><tr><br><td style=\"color: #2a2a2a;\">\\t</td><br><td style=\"color: #2a2a2a;\">制表符匹配。与 \\x09 和 \\cI 等效。</td><br></tr><br><tr><br><td style=\"color: #2a2a2a;\">\\v</td><br><td style=\"color: #2a2a2a;\">垂直制表符匹配。与 \\x0b 和 \\cK 等效。</td><br></tr><br><tr><br><td style=\"color: #2a2a2a;\">\\w</td><br><td style=\"color: #2a2a2a;\">匹配任何字类字符，包括下划线。与“[A-Za-z0-9<em>]”等效。</em></td><br></tr><br><tr><br><td style=\"color: #2a2a2a;\">\\W</td><br><td style=\"color: #2a2a2a;\">与任何非单词字符匹配。与“[^A-Za-z0-9]”等效。</td><br></tr><br><tr><br><td style=\"color: #2a2a2a;\">\\x<em>n</em></td><br><td style=\"color: #2a2a2a;\">匹配 <em>n</em>，此处的 <em>n</em> 是一个十六进制转义码。十六进制转义码必须正好是两位数长。例如，“\\x41”匹配“A”。“\\x041”与“\\x04”&amp;“1”等效。允许在正则表达式中使用 ASCII 代码。</td><br></tr><br><tr><br><td style=\"color: #2a2a2a;\">_num_</td><br><td style=\"color: #2a2a2a;\">匹配 <em>num</em>，此处的 <em>num</em> 是一个正整数。到捕获匹配的反向引用。例如，“(.)\\1”匹配两个连续的相同字符。</td><br></tr><br><tr><br><td style=\"color: #2a2a2a;\">_n_</td><br><td style=\"color: #2a2a2a;\">标识一个八进制转义码或反向引用。如果 _n_ 前面至少有 <em>n</em> 个捕获子表达式，那么 <em>n</em> 是反向引用。否则，如果 <em>n</em> 是八进制数 (0-7)，那么 <em>n</em> 是八进制转义码。</td><br></tr><br><tr><br><td style=\"color: #2a2a2a;\">_nm_</td><br><td style=\"color: #2a2a2a;\">标识一个八进制转义码或反向引用。如果 _nm_ 前面至少有 <em>nm</em> 个捕获子表达式，那么 <em>nm</em> 是反向引用。如果 _nm_ 前面至少有 <em>n</em> 个捕获，则 <em>n</em> 是反向引用，后面跟有字符 <em>m</em>。如果两种前面的情况都不存在，则 _nm_ 匹配八进制值 <em>nm</em>，其中 <em>n </em>和 <em>m</em> 是八进制数字 (0-7)。</td><br></tr><br><tr><br><td style=\"color: #2a2a2a;\">\\<span class=\"parameter\" style=\"font-style: italic;\">nml</span></td><br><td style=\"color: #2a2a2a;\">当 <em>n</em> 是八进制数 (0-3)，<em>m</em> 和 <em>l</em> 是八进制数 (0-7) 时，匹配八进制转义码 <em>nml</em>。</td><br></tr><br><tr><br><td style=\"color: #2a2a2a;\">\\u<em>n</em></td><br><td style=\"color: #2a2a2a;\">匹配 <em>n</em>，其中 <em>n</em> 是以四位十六进制数表示的 Unicode 字符。例如，\\u00A9 匹配版权符号 (©)。</td><br></tr><br></tbody><br></table>\n\n<!--more-->\n<p><a href=\"http://msdn.microsoft.com/zh-cn/library/ae5bf541(VS.80).aspx\" target=\"_blank\" rel=\"noopener\">http://msdn.microsoft.com/zh-cn/library/ae5bf541(VS.80).aspx</a></p>"},{"title":"纯 PHP (Html) + Css 实现组织结构图","id":"1967","date":"2014-05-09T06:43:07.000Z","_content":"\n网上有很多开源的js版本的组织结构图工具，不过假设有这么个场景，有一个10多m的xml文件，里面是组织关系，要用php解析，再到js生成，这个两个过程都是很费时的，尤其是js的渲染过程，大部分的js版本都是再生成div的方式，这肯定会更加的慢了。\n\n我的方法是，直接用php输出一个相应的html结构，我用的是一定结构的table,再通过css画画线就搞定了。具体的实现方法直接看代码就ok了。有问题可以讨论。\n\ngithub : [https://github.com/Awesomez/PHP-to-OrgChart](https://github.com/Awesomez/PHP-to-OrgChart)\n\n![sreenshot](/wp-content/uploads/2014/05/5e0a675a93cceaa1884b150f4ba2306e.png)\n<!--more-->\n\n纯Html实现看这里\nhttps://github.com/Awesomez/PHP-to-OrgChart/blob/master/demo/pureHtml.html\n通过php数组生成看这里\nhttps://github.com/Awesomez/PHP-to-OrgChart/blob/master/demo/simple.php\n\nphp的使用方法\n`\ninclude '../src/PHPtoOrgChart.php';\n$data=array(\n    'a'=>array(\n        'aa'=>array(\n            'aaa'=>'Mike',\n            'aab'=>'Look',\n            'aac'=>'Rum',\n        ),\n        'bb'=>array(\n            'aaa'=>'123',\n            'aab'=>'567',\n            'aac'=>'890',\n            'bbdd'=>array(\n                'aaa'=>'123',\n                'aab'=>'567',\n                'aac'=>'890',\n            ),\n        ),\n    ),\n    'b'=>array(\n        'cc'=>array(\n            'aaa'=>'Mike',\n            'aab'=>'Look',\n            'aac'=>'Rum',\n        ),\n        'dd'=>array(\n            'aaa'=>'123',\n            'aab'=>'567',\n            'aac'=>'890',\n        ),\n    ),\n);\necho '\n<div class=\"orgchart\">';\nPHPtoOrgChart($data);\necho '</div>\n';\n`","source":"_posts/e7-ba-af-php-html-css-e5-ae-9e-e7-8e-b0-e7-bb-84-e7-bb-87-e7-bb-93-e6-9e-84-e5-9b-be.md","raw":"---\ntitle: 纯 PHP (Html) + Css 实现组织结构图\ntags:\n  - css\n  - html\n  - php\nid: 1967\ncategories:\n  - PHP\ndate: 2014-05-09 14:43:07\n---\n\n网上有很多开源的js版本的组织结构图工具，不过假设有这么个场景，有一个10多m的xml文件，里面是组织关系，要用php解析，再到js生成，这个两个过程都是很费时的，尤其是js的渲染过程，大部分的js版本都是再生成div的方式，这肯定会更加的慢了。\n\n我的方法是，直接用php输出一个相应的html结构，我用的是一定结构的table,再通过css画画线就搞定了。具体的实现方法直接看代码就ok了。有问题可以讨论。\n\ngithub : [https://github.com/Awesomez/PHP-to-OrgChart](https://github.com/Awesomez/PHP-to-OrgChart)\n\n![sreenshot](/wp-content/uploads/2014/05/5e0a675a93cceaa1884b150f4ba2306e.png)\n<!--more-->\n\n纯Html实现看这里\nhttps://github.com/Awesomez/PHP-to-OrgChart/blob/master/demo/pureHtml.html\n通过php数组生成看这里\nhttps://github.com/Awesomez/PHP-to-OrgChart/blob/master/demo/simple.php\n\nphp的使用方法\n`\ninclude '../src/PHPtoOrgChart.php';\n$data=array(\n    'a'=>array(\n        'aa'=>array(\n            'aaa'=>'Mike',\n            'aab'=>'Look',\n            'aac'=>'Rum',\n        ),\n        'bb'=>array(\n            'aaa'=>'123',\n            'aab'=>'567',\n            'aac'=>'890',\n            'bbdd'=>array(\n                'aaa'=>'123',\n                'aab'=>'567',\n                'aac'=>'890',\n            ),\n        ),\n    ),\n    'b'=>array(\n        'cc'=>array(\n            'aaa'=>'Mike',\n            'aab'=>'Look',\n            'aac'=>'Rum',\n        ),\n        'dd'=>array(\n            'aaa'=>'123',\n            'aab'=>'567',\n            'aac'=>'890',\n        ),\n    ),\n);\necho '\n<div class=\"orgchart\">';\nPHPtoOrgChart($data);\necho '</div>\n';\n`","slug":"e7-ba-af-php-html-css-e5-ae-9e-e7-8e-b0-e7-bb-84-e7-bb-87-e7-bb-93-e6-9e-84-e5-9b-be","published":1,"updated":"2018-01-13T05:07:00.488Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjccw7x9h003jaqcrstjm5nvp","content":"<p>网上有很多开源的js版本的组织结构图工具，不过假设有这么个场景，有一个10多m的xml文件，里面是组织关系，要用php解析，再到js生成，这个两个过程都是很费时的，尤其是js的渲染过程，大部分的js版本都是再生成div的方式，这肯定会更加的慢了。</p>\n<p>我的方法是，直接用php输出一个相应的html结构，我用的是一定结构的table,再通过css画画线就搞定了。具体的实现方法直接看代码就ok了。有问题可以讨论。</p>\n<p>github : <a href=\"https://github.com/Awesomez/PHP-to-OrgChart\" target=\"_blank\" rel=\"noopener\">https://github.com/Awesomez/PHP-to-OrgChart</a></p>\n<p><img src=\"/wp-content/uploads/2014/05/5e0a675a93cceaa1884b150f4ba2306e.png\" alt=\"sreenshot\"><br><a id=\"more\"></a></p>\n<p>纯Html实现看这里<br><a href=\"https://github.com/Awesomez/PHP-to-OrgChart/blob/master/demo/pureHtml.html\" target=\"_blank\" rel=\"noopener\">https://github.com/Awesomez/PHP-to-OrgChart/blob/master/demo/pureHtml.html</a><br>通过php数组生成看这里<br><a href=\"https://github.com/Awesomez/PHP-to-OrgChart/blob/master/demo/simple.php\" target=\"_blank\" rel=\"noopener\">https://github.com/Awesomez/PHP-to-OrgChart/blob/master/demo/simple.php</a></p>\n<p>php的使用方法<br>`<br>include ‘../src/PHPtoOrgChart.php’;<br>$data=array(<br>    ‘a’=&gt;array(<br>        ‘aa’=&gt;array(<br>            ‘aaa’=&gt;’Mike’,<br>            ‘aab’=&gt;’Look’,<br>            ‘aac’=&gt;’Rum’,<br>        ),<br>        ‘bb’=&gt;array(<br>            ‘aaa’=&gt;’123’,<br>            ‘aab’=&gt;’567’,<br>            ‘aac’=&gt;’890’,<br>            ‘bbdd’=&gt;array(<br>                ‘aaa’=&gt;’123’,<br>                ‘aab’=&gt;’567’,<br>                ‘aac’=&gt;’890’,<br>            ),<br>        ),<br>    ),<br>    ‘b’=&gt;array(<br>        ‘cc’=&gt;array(<br>            ‘aaa’=&gt;’Mike’,<br>            ‘aab’=&gt;’Look’,<br>            ‘aac’=&gt;’Rum’,<br>        ),<br>        ‘dd’=&gt;array(<br>            ‘aaa’=&gt;’123’,<br>            ‘aab’=&gt;’567’,<br>            ‘aac’=&gt;’890’,<br>        ),<br>    ),<br>);<br>echo ‘</p>\n<p><div class=\"orgchart\">‘;<br>PHPtoOrgChart($data);<br>echo ‘</div><br>‘;<br>`</p>\n","site":{"data":{}},"excerpt":"<p>网上有很多开源的js版本的组织结构图工具，不过假设有这么个场景，有一个10多m的xml文件，里面是组织关系，要用php解析，再到js生成，这个两个过程都是很费时的，尤其是js的渲染过程，大部分的js版本都是再生成div的方式，这肯定会更加的慢了。</p>\n<p>我的方法是，直接用php输出一个相应的html结构，我用的是一定结构的table,再通过css画画线就搞定了。具体的实现方法直接看代码就ok了。有问题可以讨论。</p>\n<p>github : <a href=\"https://github.com/Awesomez/PHP-to-OrgChart\" target=\"_blank\" rel=\"noopener\">https://github.com/Awesomez/PHP-to-OrgChart</a></p>\n<p><img src=\"/wp-content/uploads/2014/05/5e0a675a93cceaa1884b150f4ba2306e.png\" alt=\"sreenshot\"><br>","more":"</p>\n<p>纯Html实现看这里<br><a href=\"https://github.com/Awesomez/PHP-to-OrgChart/blob/master/demo/pureHtml.html\" target=\"_blank\" rel=\"noopener\">https://github.com/Awesomez/PHP-to-OrgChart/blob/master/demo/pureHtml.html</a><br>通过php数组生成看这里<br><a href=\"https://github.com/Awesomez/PHP-to-OrgChart/blob/master/demo/simple.php\" target=\"_blank\" rel=\"noopener\">https://github.com/Awesomez/PHP-to-OrgChart/blob/master/demo/simple.php</a></p>\n<p>php的使用方法<br>`<br>include ‘../src/PHPtoOrgChart.php’;<br>$data=array(<br>    ‘a’=&gt;array(<br>        ‘aa’=&gt;array(<br>            ‘aaa’=&gt;’Mike’,<br>            ‘aab’=&gt;’Look’,<br>            ‘aac’=&gt;’Rum’,<br>        ),<br>        ‘bb’=&gt;array(<br>            ‘aaa’=&gt;’123’,<br>            ‘aab’=&gt;’567’,<br>            ‘aac’=&gt;’890’,<br>            ‘bbdd’=&gt;array(<br>                ‘aaa’=&gt;’123’,<br>                ‘aab’=&gt;’567’,<br>                ‘aac’=&gt;’890’,<br>            ),<br>        ),<br>    ),<br>    ‘b’=&gt;array(<br>        ‘cc’=&gt;array(<br>            ‘aaa’=&gt;’Mike’,<br>            ‘aab’=&gt;’Look’,<br>            ‘aac’=&gt;’Rum’,<br>        ),<br>        ‘dd’=&gt;array(<br>            ‘aaa’=&gt;’123’,<br>            ‘aab’=&gt;’567’,<br>            ‘aac’=&gt;’890’,<br>        ),<br>    ),<br>);<br>echo ‘</p>\n<p><div class=\"orgchart\">‘;<br>PHPtoOrgChart($data);<br>echo ‘</div><br>‘;<br>`</p>"},{"title":"解决ssh 远端vim中文乱码的问题","id":"2620","date":"2017-10-26T07:56:21.000Z","_content":"\nsudo vi /etc/ssh_config\n\n注释\n\n#SendEnv LANG LC_*","source":"_posts/e8-a7-a3-e5-86-b3ssh-e8-bf-9c-e7-ab-afvim-e4-b8-ad-e6-96-87-e4-b9-b1-e7-a0-81-e7-9a-84-e9-97-ae-e9-a2-98.md","raw":"---\ntitle: 解决ssh 远端vim中文乱码的问题\nid: 2620\ncategories:\n  - Other\ndate: 2017-10-26 15:56:21\ntags:\n---\n\nsudo vi /etc/ssh_config\n\n注释\n\n#SendEnv LANG LC_*","slug":"e8-a7-a3-e5-86-b3ssh-e8-bf-9c-e7-ab-afvim-e4-b8-ad-e6-96-87-e4-b9-b1-e7-a0-81-e7-9a-84-e9-97-ae-e9-a2-98","published":1,"updated":"2018-01-13T05:07:00.458Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjccw7x9j003maqcr5qzc7rta","content":"<p>sudo vi /etc/ssh_config</p>\n<p>注释</p>\n<p>#SendEnv LANG LC_*</p>\n","site":{"data":{}},"excerpt":"","more":"<p>sudo vi /etc/ssh_config</p>\n<p>注释</p>\n<p>#SendEnv LANG LC_*</p>\n"},{"title":"设计模式学习简单总结","id":"1358","date":"2014-03-25T02:37:00.000Z","_content":"\n最近又把设计模式看了看，总感觉用上这东西设计类有着非常强大的作用，更加灵活。总结一下。\n\n**创建型**\n工厂模式（Factory）：switch\n单例模式（Singleton）：只有一个\n建造者模式（Builder）：多个方法的执行顺序\n原型模式（Prototype）：clone<!--more-->\n\n**结构型**\n桥接模式（Bridge）：\n适配器模式（Adapter）：新建一个子类，继承原有类，重写原有方法，在方法里实现新方法。用实现的子类替代父类做接口。\n装饰模式（Decorator）：新建一个类，继承原有类或原有类父类，重写原有方法，在方法里增加相应的新方法，参数为原有类\n外观模式（Facade）：相当于一个中介，把不同类的相同意义上的方法再封装到一个方法里，这样客户端调用时就不用考虑具体有哪些子类，直接调用中介就可以。就是作个接口，在接口里调用具体类的复杂方法，使用时直接调用接口的简单的方法。\n组合模式（Composite）：树的叶子与结点的组合\n享元模式（FlyWeight）：先把公共资源存起来，后期根据需要提取。\n代理模式 （Proxy）：在具体类和客户端之间又加了一层中介来保存具体类不让客户端知道，中介应和具体类有着相同的接口，并在内部调用具体类的相同的方法,还可以加入一些其它的如权限判断的特性。\n\n**行为型**\n模版模式（Template）：公共父类为模板，子类继承\n策略模式（Strategy）：决策做什么\n状态模式（State）：改变一个状态时触发另一个状态\n观察模式（Observer）：被观察的东西变化时，通知所有观察者\n备忘模式（Memento）：备份还原\n中介模式（Mediator）：把不同的类联系起来，这些样有着相同的父类。\n命令模式（Command）：发命令指挥\n访问者模式（Visitor）：\n职责链模式（Chain of Responsibility）：越级调用别的级别的方法\n迭代模式（Iterator）：List\n解释器模式（Interpreter）：解释一个对象\n\n**区别与联系：**\nStrategy &amp; Factory\n工厂相当于黑盒，策略相当于白盒\nAdapter &amp; Decorator\nDecorator 一般接口不变或增加，Adapter 用子类代替父类做接口，接口改变了。","source":"_posts/e8-ae-be-e8-ae-a1-e6-a8-a1-e5-bc-8f-e5-ad-a6-e4-b9-a0-e7-ae-80-e5-8d-95-e6-80-bb-e7-bb-93.md","raw":"---\ntitle: 设计模式学习简单总结\ntags:\n  - 设计模式\nid: 1358\ncategories:\n  - Java\ndate: 2014-03-25 10:37:00\n---\n\n最近又把设计模式看了看，总感觉用上这东西设计类有着非常强大的作用，更加灵活。总结一下。\n\n**创建型**\n工厂模式（Factory）：switch\n单例模式（Singleton）：只有一个\n建造者模式（Builder）：多个方法的执行顺序\n原型模式（Prototype）：clone<!--more-->\n\n**结构型**\n桥接模式（Bridge）：\n适配器模式（Adapter）：新建一个子类，继承原有类，重写原有方法，在方法里实现新方法。用实现的子类替代父类做接口。\n装饰模式（Decorator）：新建一个类，继承原有类或原有类父类，重写原有方法，在方法里增加相应的新方法，参数为原有类\n外观模式（Facade）：相当于一个中介，把不同类的相同意义上的方法再封装到一个方法里，这样客户端调用时就不用考虑具体有哪些子类，直接调用中介就可以。就是作个接口，在接口里调用具体类的复杂方法，使用时直接调用接口的简单的方法。\n组合模式（Composite）：树的叶子与结点的组合\n享元模式（FlyWeight）：先把公共资源存起来，后期根据需要提取。\n代理模式 （Proxy）：在具体类和客户端之间又加了一层中介来保存具体类不让客户端知道，中介应和具体类有着相同的接口，并在内部调用具体类的相同的方法,还可以加入一些其它的如权限判断的特性。\n\n**行为型**\n模版模式（Template）：公共父类为模板，子类继承\n策略模式（Strategy）：决策做什么\n状态模式（State）：改变一个状态时触发另一个状态\n观察模式（Observer）：被观察的东西变化时，通知所有观察者\n备忘模式（Memento）：备份还原\n中介模式（Mediator）：把不同的类联系起来，这些样有着相同的父类。\n命令模式（Command）：发命令指挥\n访问者模式（Visitor）：\n职责链模式（Chain of Responsibility）：越级调用别的级别的方法\n迭代模式（Iterator）：List\n解释器模式（Interpreter）：解释一个对象\n\n**区别与联系：**\nStrategy &amp; Factory\n工厂相当于黑盒，策略相当于白盒\nAdapter &amp; Decorator\nDecorator 一般接口不变或增加，Adapter 用子类代替父类做接口，接口改变了。","slug":"e8-ae-be-e8-ae-a1-e6-a8-a1-e5-bc-8f-e5-ad-a6-e4-b9-a0-e7-ae-80-e5-8d-95-e6-80-bb-e7-bb-93","published":1,"updated":"2018-01-13T05:07:00.490Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjccw7x9l003paqcr6ozvgimh","content":"<p>最近又把设计模式看了看，总感觉用上这东西设计类有着非常强大的作用，更加灵活。总结一下。</p>\n<p><strong>创建型</strong><br>工厂模式（Factory）：switch<br>单例模式（Singleton）：只有一个<br>建造者模式（Builder）：多个方法的执行顺序<br>原型模式（Prototype）：clone<a id=\"more\"></a></p>\n<p><strong>结构型</strong><br>桥接模式（Bridge）：<br>适配器模式（Adapter）：新建一个子类，继承原有类，重写原有方法，在方法里实现新方法。用实现的子类替代父类做接口。<br>装饰模式（Decorator）：新建一个类，继承原有类或原有类父类，重写原有方法，在方法里增加相应的新方法，参数为原有类<br>外观模式（Facade）：相当于一个中介，把不同类的相同意义上的方法再封装到一个方法里，这样客户端调用时就不用考虑具体有哪些子类，直接调用中介就可以。就是作个接口，在接口里调用具体类的复杂方法，使用时直接调用接口的简单的方法。<br>组合模式（Composite）：树的叶子与结点的组合<br>享元模式（FlyWeight）：先把公共资源存起来，后期根据需要提取。<br>代理模式 （Proxy）：在具体类和客户端之间又加了一层中介来保存具体类不让客户端知道，中介应和具体类有着相同的接口，并在内部调用具体类的相同的方法,还可以加入一些其它的如权限判断的特性。</p>\n<p><strong>行为型</strong><br>模版模式（Template）：公共父类为模板，子类继承<br>策略模式（Strategy）：决策做什么<br>状态模式（State）：改变一个状态时触发另一个状态<br>观察模式（Observer）：被观察的东西变化时，通知所有观察者<br>备忘模式（Memento）：备份还原<br>中介模式（Mediator）：把不同的类联系起来，这些样有着相同的父类。<br>命令模式（Command）：发命令指挥<br>访问者模式（Visitor）：<br>职责链模式（Chain of Responsibility）：越级调用别的级别的方法<br>迭代模式（Iterator）：List<br>解释器模式（Interpreter）：解释一个对象</p>\n<p><strong>区别与联系：</strong><br>Strategy &amp; Factory<br>工厂相当于黑盒，策略相当于白盒<br>Adapter &amp; Decorator<br>Decorator 一般接口不变或增加，Adapter 用子类代替父类做接口，接口改变了。</p>\n","site":{"data":{}},"excerpt":"<p>最近又把设计模式看了看，总感觉用上这东西设计类有着非常强大的作用，更加灵活。总结一下。</p>\n<p><strong>创建型</strong><br>工厂模式（Factory）：switch<br>单例模式（Singleton）：只有一个<br>建造者模式（Builder）：多个方法的执行顺序<br>原型模式（Prototype）：clone","more":"</p>\n<p><strong>结构型</strong><br>桥接模式（Bridge）：<br>适配器模式（Adapter）：新建一个子类，继承原有类，重写原有方法，在方法里实现新方法。用实现的子类替代父类做接口。<br>装饰模式（Decorator）：新建一个类，继承原有类或原有类父类，重写原有方法，在方法里增加相应的新方法，参数为原有类<br>外观模式（Facade）：相当于一个中介，把不同类的相同意义上的方法再封装到一个方法里，这样客户端调用时就不用考虑具体有哪些子类，直接调用中介就可以。就是作个接口，在接口里调用具体类的复杂方法，使用时直接调用接口的简单的方法。<br>组合模式（Composite）：树的叶子与结点的组合<br>享元模式（FlyWeight）：先把公共资源存起来，后期根据需要提取。<br>代理模式 （Proxy）：在具体类和客户端之间又加了一层中介来保存具体类不让客户端知道，中介应和具体类有着相同的接口，并在内部调用具体类的相同的方法,还可以加入一些其它的如权限判断的特性。</p>\n<p><strong>行为型</strong><br>模版模式（Template）：公共父类为模板，子类继承<br>策略模式（Strategy）：决策做什么<br>状态模式（State）：改变一个状态时触发另一个状态<br>观察模式（Observer）：被观察的东西变化时，通知所有观察者<br>备忘模式（Memento）：备份还原<br>中介模式（Mediator）：把不同的类联系起来，这些样有着相同的父类。<br>命令模式（Command）：发命令指挥<br>访问者模式（Visitor）：<br>职责链模式（Chain of Responsibility）：越级调用别的级别的方法<br>迭代模式（Iterator）：List<br>解释器模式（Interpreter）：解释一个对象</p>\n<p><strong>区别与联系：</strong><br>Strategy &amp; Factory<br>工厂相当于黑盒，策略相当于白盒<br>Adapter &amp; Decorator<br>Decorator 一般接口不变或增加，Adapter 用子类代替父类做接口，接口改变了。</p>"},{"title":"跳表 Skip List 的基本概念","id":"2006","date":"2014-05-12T08:03:31.000Z","_content":"\n跳表的原始表就是一个普通的链表，查找元素的时间复杂度为 O(N), 可以先看图中的原始表一行，其它先不管。那么查找117元素就要找8次才可以，如果这个链表超长的话当然时间也就会越多，这就体现出跳表的优点来。\n\n![skiplist](/wp-content/uploads/2014/05/197763f0779ab3aa29b081bbdf460d68.png)\n原始表生成跳表的方法是提取索引，第一是相隔一定个数后提取出跳表索引第0层，也就是\n7 -&gt; 21 -&gt; 37 -&gt; 71\n<!--more-->\n然后再根据第0层提取出第一层来。那么我们的top 指针也指向最高层的链表的头结点，也就是图中 跳表第1层的最左端。这里的提取密度和层数根据需要，当然还有一些说法，这里不讲，只说基本概念。\n\n那么我们再查找117就简单了，先比较第1层的第一个元素，37 &lt; 117，再找37下一个元素，没有，跳到 下一层的37的下一个元素71，71 &gt; 117，再跳到下一层，也就是最原始层71的下一个元素85。 85 &lt;117 ,再下一个，找到了。\n\n相应查找的算法为：\n`\np=top\nWhile(1){\n    while (p->next->key < x ) p=p->next;\n    If (p->down == NULL ) return p->next\n    p=p->down ;\n}\n`\n\n总结\n**跳表的构造过程是：**\n给定一个有序的链表。\n选择连表中最大和最小的元素，然后从其他元素中按照一定算法随即选出一些元素，将这些元素组成有序链表。这个新的链表称为一层，原链表称为其下一层。\n为刚选出的每个元素添加一个指针域，这个指针指向下一层中值同自己相等的元素。Top指针指向该层首元素\n重复2、3步，直到不再能选择出除最大最小元素以外的元素。\n\n**跳表的特征：**\n一个跳表应该有几个层（level）组成；\n跳表的第一层包含所有的元素；\n每一层都是一个有序的链表；\n如果元素x出现在第i层，则所有比i小的层都包含x；\n第i层的元素通过一个down指针指向下一层拥有相同值的元素；\n在每一层中，-1和1两个元素都出现(分别表示INT_MIN和INT_MAX)；\nTop指针指向最高层的第一个元素。","source":"_posts/e8-b7-b3-e8-a1-a8-skip-list-e7-9a-84-e5-9f-ba-e6-9c-ac-e6-a6-82-e5-bf-b5.md","raw":"---\ntitle: 跳表 Skip List 的基本概念\ntags:\n  - 算法\nid: 2006\ncategories:\n  - Algorithm\ndate: 2014-05-12 16:03:31\n---\n\n跳表的原始表就是一个普通的链表，查找元素的时间复杂度为 O(N), 可以先看图中的原始表一行，其它先不管。那么查找117元素就要找8次才可以，如果这个链表超长的话当然时间也就会越多，这就体现出跳表的优点来。\n\n![skiplist](/wp-content/uploads/2014/05/197763f0779ab3aa29b081bbdf460d68.png)\n原始表生成跳表的方法是提取索引，第一是相隔一定个数后提取出跳表索引第0层，也就是\n7 -&gt; 21 -&gt; 37 -&gt; 71\n<!--more-->\n然后再根据第0层提取出第一层来。那么我们的top 指针也指向最高层的链表的头结点，也就是图中 跳表第1层的最左端。这里的提取密度和层数根据需要，当然还有一些说法，这里不讲，只说基本概念。\n\n那么我们再查找117就简单了，先比较第1层的第一个元素，37 &lt; 117，再找37下一个元素，没有，跳到 下一层的37的下一个元素71，71 &gt; 117，再跳到下一层，也就是最原始层71的下一个元素85。 85 &lt;117 ,再下一个，找到了。\n\n相应查找的算法为：\n`\np=top\nWhile(1){\n    while (p->next->key < x ) p=p->next;\n    If (p->down == NULL ) return p->next\n    p=p->down ;\n}\n`\n\n总结\n**跳表的构造过程是：**\n给定一个有序的链表。\n选择连表中最大和最小的元素，然后从其他元素中按照一定算法随即选出一些元素，将这些元素组成有序链表。这个新的链表称为一层，原链表称为其下一层。\n为刚选出的每个元素添加一个指针域，这个指针指向下一层中值同自己相等的元素。Top指针指向该层首元素\n重复2、3步，直到不再能选择出除最大最小元素以外的元素。\n\n**跳表的特征：**\n一个跳表应该有几个层（level）组成；\n跳表的第一层包含所有的元素；\n每一层都是一个有序的链表；\n如果元素x出现在第i层，则所有比i小的层都包含x；\n第i层的元素通过一个down指针指向下一层拥有相同值的元素；\n在每一层中，-1和1两个元素都出现(分别表示INT_MIN和INT_MAX)；\nTop指针指向最高层的第一个元素。","slug":"e8-b7-b3-e8-a1-a8-skip-list-e7-9a-84-e5-9f-ba-e6-9c-ac-e6-a6-82-e5-bf-b5","published":1,"updated":"2018-01-13T05:07:00.446Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjccw7x9m003taqcr8vrn920y","content":"<p>跳表的原始表就是一个普通的链表，查找元素的时间复杂度为 O(N), 可以先看图中的原始表一行，其它先不管。那么查找117元素就要找8次才可以，如果这个链表超长的话当然时间也就会越多，这就体现出跳表的优点来。</p>\n<p><img src=\"/wp-content/uploads/2014/05/197763f0779ab3aa29b081bbdf460d68.png\" alt=\"skiplist\"><br>原始表生成跳表的方法是提取索引，第一是相隔一定个数后提取出跳表索引第0层，也就是<br>7 -&gt; 21 -&gt; 37 -&gt; 71<br><a id=\"more\"></a><br>然后再根据第0层提取出第一层来。那么我们的top 指针也指向最高层的链表的头结点，也就是图中 跳表第1层的最左端。这里的提取密度和层数根据需要，当然还有一些说法，这里不讲，只说基本概念。</p>\n<p>那么我们再查找117就简单了，先比较第1层的第一个元素，37 &lt; 117，再找37下一个元素，没有，跳到 下一层的37的下一个元素71，71 &gt; 117，再跳到下一层，也就是最原始层71的下一个元素85。 85 &lt;117 ,再下一个，找到了。</p>\n<p>相应查找的算法为：<br><code>p=top\nWhile(1){\n    while (p-&gt;next-&gt;key &lt; x ) p=p-&gt;next;\n    If (p-&gt;down == NULL ) return p-&gt;next\n    p=p-&gt;down ;\n}</code></p>\n<p>总结<br><strong>跳表的构造过程是：</strong><br>给定一个有序的链表。<br>选择连表中最大和最小的元素，然后从其他元素中按照一定算法随即选出一些元素，将这些元素组成有序链表。这个新的链表称为一层，原链表称为其下一层。<br>为刚选出的每个元素添加一个指针域，这个指针指向下一层中值同自己相等的元素。Top指针指向该层首元素<br>重复2、3步，直到不再能选择出除最大最小元素以外的元素。</p>\n<p><strong>跳表的特征：</strong><br>一个跳表应该有几个层（level）组成；<br>跳表的第一层包含所有的元素；<br>每一层都是一个有序的链表；<br>如果元素x出现在第i层，则所有比i小的层都包含x；<br>第i层的元素通过一个down指针指向下一层拥有相同值的元素；<br>在每一层中，-1和1两个元素都出现(分别表示INT_MIN和INT_MAX)；<br>Top指针指向最高层的第一个元素。</p>\n","site":{"data":{}},"excerpt":"<p>跳表的原始表就是一个普通的链表，查找元素的时间复杂度为 O(N), 可以先看图中的原始表一行，其它先不管。那么查找117元素就要找8次才可以，如果这个链表超长的话当然时间也就会越多，这就体现出跳表的优点来。</p>\n<p><img src=\"/wp-content/uploads/2014/05/197763f0779ab3aa29b081bbdf460d68.png\" alt=\"skiplist\"><br>原始表生成跳表的方法是提取索引，第一是相隔一定个数后提取出跳表索引第0层，也就是<br>7 -&gt; 21 -&gt; 37 -&gt; 71<br>","more":"<br>然后再根据第0层提取出第一层来。那么我们的top 指针也指向最高层的链表的头结点，也就是图中 跳表第1层的最左端。这里的提取密度和层数根据需要，当然还有一些说法，这里不讲，只说基本概念。</p>\n<p>那么我们再查找117就简单了，先比较第1层的第一个元素，37 &lt; 117，再找37下一个元素，没有，跳到 下一层的37的下一个元素71，71 &gt; 117，再跳到下一层，也就是最原始层71的下一个元素85。 85 &lt;117 ,再下一个，找到了。</p>\n<p>相应查找的算法为：<br><code>p=top\nWhile(1){\n    while (p-&gt;next-&gt;key &lt; x ) p=p-&gt;next;\n    If (p-&gt;down == NULL ) return p-&gt;next\n    p=p-&gt;down ;\n}</code></p>\n<p>总结<br><strong>跳表的构造过程是：</strong><br>给定一个有序的链表。<br>选择连表中最大和最小的元素，然后从其他元素中按照一定算法随即选出一些元素，将这些元素组成有序链表。这个新的链表称为一层，原链表称为其下一层。<br>为刚选出的每个元素添加一个指针域，这个指针指向下一层中值同自己相等的元素。Top指针指向该层首元素<br>重复2、3步，直到不再能选择出除最大最小元素以外的元素。</p>\n<p><strong>跳表的特征：</strong><br>一个跳表应该有几个层（level）组成；<br>跳表的第一层包含所有的元素；<br>每一层都是一个有序的链表；<br>如果元素x出现在第i层，则所有比i小的层都包含x；<br>第i层的元素通过一个down指针指向下一层拥有相同值的元素；<br>在每一层中，-1和1两个元素都出现(分别表示INT_MIN和INT_MAX)；<br>Top指针指向最高层的第一个元素。</p>"},{"title":"解析 Qt 程序在Windows 下发布","id":"945","date":"2012-03-24T09:51:36.000Z","_content":"\nQt 程序在Windows 下发布是本文要介绍的内容，不多说了，先来看内容，针对这个问题，其实 Qt 的 manual 中解释的已经比较清楚了。下面是我根据自己的理解和实验后写的东西，希望比Qt文档容易理解一点。\n\n下面不涉及静态编译(静态编译可以看看这儿)，只包含动态编译（也就是Qt默认的情况），主要又分 mingw 和 msvc 两种情况：\nMingw\n\n首先，我们需要生成 release 模式的可执行程序（不少同学抱怨，一个小小程序却需要100多M的动态库，就是因为用的debug）\nqmake\nmingw32-make release\n\n而后将 可执行文件 与 需要的动态库放到同一个文件夹下，一般需要\nmyprogram.exe\nmingwm10.dll\nlibgcc_s_dw2-1.dll\nqtcore4.dll\nqtgui4.dll\n\n有同学抱怨，动态库拷过去以后，程序报错 无法定位程序输入点于动态链接库QtCore4.dll上 ，这一般是由于系统中装了多套Qt的运行库，而你拷贝的不是Qt安装目录下的库所导致的。比如，当安装的是Qt SDK时，很容易导致这个问题，因为里面的Qt是mingw编译的，但里面的QtCreator是msvc编译的，所以不少人不小心就吧QtCreator带的Qt运行库拷过来了。<!--more-->\n\n如果你不需要其他的插件，那么就可以发布程序了，然而不少同学抱怨 jpg、gif、bmp 等格式的图片无法显示，这是因为 Qt 原生支持 png，而其他格式需要通过插件支持(插件在 %QTDIR%/pluginsimageformats 目录下)\n\n你只需将需要的插件拷贝到可执行程序所在的目录下的 imageformats 目录下即可\nmyprogram.exe\nimageformatsqjpeg4.dll\nimageformatsqgif4.dll\n\n同样，如果你的程序需要gb2312、gbk编码支持，那么需要将 %QTDIR%pluginscodecs 目录下的相应插件拷贝到可执行程序所在目录下的 codecs 目录下\nmyprogram.exe\ncodecsqcncodecs4.dll\n\n建议：不妨多看看Qt安装目录下的plugins目录，熟悉这些插件分别是做什么的，你发布的程序需要哪些。\n\n现在，程序可以发布了。你现在也可以通过 nsis 来制作一个安装包。\nmsvc\n\n如果用的VS2008 而不是mingw，发布的过程其实基本是一样的。\n\n首先生成 release 模式的 可执行文件\nqmake\nnmake release\n\n而后准备需要的动态库与插件\nmyprogram.exe\nqtcore4.dll\nqtgui4.dll\nimageformats*4.dll\n\n  因为是vc编译的，所以不需要mingw的 mingwm10.dll libgcc_s_dw2-1.dll ，取代他们的是VC2008的CC++ 运行库：\nMSVCR90.DLL\nMSVCP90.DLL\n\n如果你用的Windows xp 之前的系统，那么只要将这两个运行库和可执行程序放于同一个目录即可。\n\n但对于Windows xp (包括)之后的系统，这样做并不会正常工作，程序会报告：由于应用程序配置不正确，应用程序未能启动。这个问题有点复杂，其实解决方法很简单，只需在用户机器上安装1M多的VS2008可再发行包 vcredist_x86.exe 即可\n\n该包会将运行库安装到 window系统目录下的 WinSxS 目录下，对xp之前的系统，还会将运行库同时安装到path路径下的目录内。其实如果用户装过其他人编写的VC2008的程序，机器上很应该已经装过该包了。\n 或许你要问，如果不想安装 可再发行包怎么办，比如就想把需要dll一块和程序打包，我们可以这么做：\n\n将文件夹 (如果你用的VS2008 express，该文件夹不存在)\n<visual Studio Install Path>VCredist<architecture>Microsoft.VC90.CRT\n\n直接复制到可执行程序所在目录\nmyprogram.exe\nMicrosoft.VC90.CRT*\n\n注意：\n\n（1）如果用户机器上已经安装了可再发行包，程序将永远不会使用Microsoft.VC90.CRT下的库。\n\n（2）当采用这种方法时，如果同时发布插件（包括图片插件等），那么插件编译时必须：\nCONFIG-=embed_manifest_dll\n\n使得生成的插件中不嵌入manifest文件，否则插件不被程序识别(其实也可以识别，只要将 Microsoft.VC90.CRT 拷贝一份和插件放到同一文件夹即可，当然这种方式很不好，如果插件分布在几个目录下，要放置Microsoft.VC90.CRT的很多副本)。\n\n工具\n\n1\\. 一定要记住： Dependency Walker 是你的好帮手，它会告诉你你的 exe 和 dll需要哪些库，以及它加载的动态库都在哪个文件夹内 等\n\n2\\. 最好准备一个进程查看的工具，比如微软的 Process Explorer等，来查看你的程序到底加载了哪些动态库(加载了哪些插件等)\n\n小结：关于解析 Qt 程序在Windows 下发布的内容介绍完了，希望本文对你有所帮助。","source":"_posts/e8-a7-a3-e6-9e-90-qt-e7-a8-8b-e5-ba-8f-e5-9c-a8windows-e4-b8-8b-e5-8f-91-e5-b8-83.md","raw":"---\ntitle: 解析 Qt 程序在Windows 下发布\ntags:\n  - Qt\nid: 945\ncategories:\n  - Qt\ndate: 2012-03-24 17:51:36\n---\n\nQt 程序在Windows 下发布是本文要介绍的内容，不多说了，先来看内容，针对这个问题，其实 Qt 的 manual 中解释的已经比较清楚了。下面是我根据自己的理解和实验后写的东西，希望比Qt文档容易理解一点。\n\n下面不涉及静态编译(静态编译可以看看这儿)，只包含动态编译（也就是Qt默认的情况），主要又分 mingw 和 msvc 两种情况：\nMingw\n\n首先，我们需要生成 release 模式的可执行程序（不少同学抱怨，一个小小程序却需要100多M的动态库，就是因为用的debug）\nqmake\nmingw32-make release\n\n而后将 可执行文件 与 需要的动态库放到同一个文件夹下，一般需要\nmyprogram.exe\nmingwm10.dll\nlibgcc_s_dw2-1.dll\nqtcore4.dll\nqtgui4.dll\n\n有同学抱怨，动态库拷过去以后，程序报错 无法定位程序输入点于动态链接库QtCore4.dll上 ，这一般是由于系统中装了多套Qt的运行库，而你拷贝的不是Qt安装目录下的库所导致的。比如，当安装的是Qt SDK时，很容易导致这个问题，因为里面的Qt是mingw编译的，但里面的QtCreator是msvc编译的，所以不少人不小心就吧QtCreator带的Qt运行库拷过来了。<!--more-->\n\n如果你不需要其他的插件，那么就可以发布程序了，然而不少同学抱怨 jpg、gif、bmp 等格式的图片无法显示，这是因为 Qt 原生支持 png，而其他格式需要通过插件支持(插件在 %QTDIR%/pluginsimageformats 目录下)\n\n你只需将需要的插件拷贝到可执行程序所在的目录下的 imageformats 目录下即可\nmyprogram.exe\nimageformatsqjpeg4.dll\nimageformatsqgif4.dll\n\n同样，如果你的程序需要gb2312、gbk编码支持，那么需要将 %QTDIR%pluginscodecs 目录下的相应插件拷贝到可执行程序所在目录下的 codecs 目录下\nmyprogram.exe\ncodecsqcncodecs4.dll\n\n建议：不妨多看看Qt安装目录下的plugins目录，熟悉这些插件分别是做什么的，你发布的程序需要哪些。\n\n现在，程序可以发布了。你现在也可以通过 nsis 来制作一个安装包。\nmsvc\n\n如果用的VS2008 而不是mingw，发布的过程其实基本是一样的。\n\n首先生成 release 模式的 可执行文件\nqmake\nnmake release\n\n而后准备需要的动态库与插件\nmyprogram.exe\nqtcore4.dll\nqtgui4.dll\nimageformats*4.dll\n\n  因为是vc编译的，所以不需要mingw的 mingwm10.dll libgcc_s_dw2-1.dll ，取代他们的是VC2008的CC++ 运行库：\nMSVCR90.DLL\nMSVCP90.DLL\n\n如果你用的Windows xp 之前的系统，那么只要将这两个运行库和可执行程序放于同一个目录即可。\n\n但对于Windows xp (包括)之后的系统，这样做并不会正常工作，程序会报告：由于应用程序配置不正确，应用程序未能启动。这个问题有点复杂，其实解决方法很简单，只需在用户机器上安装1M多的VS2008可再发行包 vcredist_x86.exe 即可\n\n该包会将运行库安装到 window系统目录下的 WinSxS 目录下，对xp之前的系统，还会将运行库同时安装到path路径下的目录内。其实如果用户装过其他人编写的VC2008的程序，机器上很应该已经装过该包了。\n 或许你要问，如果不想安装 可再发行包怎么办，比如就想把需要dll一块和程序打包，我们可以这么做：\n\n将文件夹 (如果你用的VS2008 express，该文件夹不存在)\n<visual Studio Install Path>VCredist<architecture>Microsoft.VC90.CRT\n\n直接复制到可执行程序所在目录\nmyprogram.exe\nMicrosoft.VC90.CRT*\n\n注意：\n\n（1）如果用户机器上已经安装了可再发行包，程序将永远不会使用Microsoft.VC90.CRT下的库。\n\n（2）当采用这种方法时，如果同时发布插件（包括图片插件等），那么插件编译时必须：\nCONFIG-=embed_manifest_dll\n\n使得生成的插件中不嵌入manifest文件，否则插件不被程序识别(其实也可以识别，只要将 Microsoft.VC90.CRT 拷贝一份和插件放到同一文件夹即可，当然这种方式很不好，如果插件分布在几个目录下，要放置Microsoft.VC90.CRT的很多副本)。\n\n工具\n\n1\\. 一定要记住： Dependency Walker 是你的好帮手，它会告诉你你的 exe 和 dll需要哪些库，以及它加载的动态库都在哪个文件夹内 等\n\n2\\. 最好准备一个进程查看的工具，比如微软的 Process Explorer等，来查看你的程序到底加载了哪些动态库(加载了哪些插件等)\n\n小结：关于解析 Qt 程序在Windows 下发布的内容介绍完了，希望本文对你有所帮助。","slug":"e8-a7-a3-e6-9e-90-qt-e7-a8-8b-e5-ba-8f-e5-9c-a8windows-e4-b8-8b-e5-8f-91-e5-b8-83","published":1,"updated":"2018-01-13T05:07:00.491Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjccw7x9n003waqcr1zyc58ez","content":"<p>Qt 程序在Windows 下发布是本文要介绍的内容，不多说了，先来看内容，针对这个问题，其实 Qt 的 manual 中解释的已经比较清楚了。下面是我根据自己的理解和实验后写的东西，希望比Qt文档容易理解一点。</p>\n<p>下面不涉及静态编译(静态编译可以看看这儿)，只包含动态编译（也就是Qt默认的情况），主要又分 mingw 和 msvc 两种情况：<br>Mingw</p>\n<p>首先，我们需要生成 release 模式的可执行程序（不少同学抱怨，一个小小程序却需要100多M的动态库，就是因为用的debug）<br>qmake<br>mingw32-make release</p>\n<p>而后将 可执行文件 与 需要的动态库放到同一个文件夹下，一般需要<br>myprogram.exe<br>mingwm10.dll<br>libgcc_s_dw2-1.dll<br>qtcore4.dll<br>qtgui4.dll</p>\n<p>有同学抱怨，动态库拷过去以后，程序报错 无法定位程序输入点于动态链接库QtCore4.dll上 ，这一般是由于系统中装了多套Qt的运行库，而你拷贝的不是Qt安装目录下的库所导致的。比如，当安装的是Qt SDK时，很容易导致这个问题，因为里面的Qt是mingw编译的，但里面的QtCreator是msvc编译的，所以不少人不小心就吧QtCreator带的Qt运行库拷过来了。<a id=\"more\"></a></p>\n<p>如果你不需要其他的插件，那么就可以发布程序了，然而不少同学抱怨 jpg、gif、bmp 等格式的图片无法显示，这是因为 Qt 原生支持 png，而其他格式需要通过插件支持(插件在 %QTDIR%/pluginsimageformats 目录下)</p>\n<p>你只需将需要的插件拷贝到可执行程序所在的目录下的 imageformats 目录下即可<br>myprogram.exe<br>imageformatsqjpeg4.dll<br>imageformatsqgif4.dll</p>\n<p>同样，如果你的程序需要gb2312、gbk编码支持，那么需要将 %QTDIR%pluginscodecs 目录下的相应插件拷贝到可执行程序所在目录下的 codecs 目录下<br>myprogram.exe<br>codecsqcncodecs4.dll</p>\n<p>建议：不妨多看看Qt安装目录下的plugins目录，熟悉这些插件分别是做什么的，你发布的程序需要哪些。</p>\n<p>现在，程序可以发布了。你现在也可以通过 nsis 来制作一个安装包。<br>msvc</p>\n<p>如果用的VS2008 而不是mingw，发布的过程其实基本是一样的。</p>\n<p>首先生成 release 模式的 可执行文件<br>qmake<br>nmake release</p>\n<p>而后准备需要的动态库与插件<br>myprogram.exe<br>qtcore4.dll<br>qtgui4.dll<br>imageformats*4.dll</p>\n<p>  因为是vc编译的，所以不需要mingw的 mingwm10.dll libgcc_s_dw2-1.dll ，取代他们的是VC2008的CC++ 运行库：<br>MSVCR90.DLL<br>MSVCP90.DLL</p>\n<p>如果你用的Windows xp 之前的系统，那么只要将这两个运行库和可执行程序放于同一个目录即可。</p>\n<p>但对于Windows xp (包括)之后的系统，这样做并不会正常工作，程序会报告：由于应用程序配置不正确，应用程序未能启动。这个问题有点复杂，其实解决方法很简单，只需在用户机器上安装1M多的VS2008可再发行包 vcredist_x86.exe 即可</p>\n<p>该包会将运行库安装到 window系统目录下的 WinSxS 目录下，对xp之前的系统，还会将运行库同时安装到path路径下的目录内。其实如果用户装过其他人编写的VC2008的程序，机器上很应该已经装过该包了。<br> 或许你要问，如果不想安装 可再发行包怎么办，比如就想把需要dll一块和程序打包，我们可以这么做：</p>\n<p>将文件夹 (如果你用的VS2008 express，该文件夹不存在)</p>\n<p><visual studio=\"\" install=\"\" path=\"\">VCredist<architecture>Microsoft.VC90.CRT</architecture></visual></p>\n<p>直接复制到可执行程序所在目录<br>myprogram.exe<br>Microsoft.VC90.CRT*</p>\n<p>注意：</p>\n<p>（1）如果用户机器上已经安装了可再发行包，程序将永远不会使用Microsoft.VC90.CRT下的库。</p>\n<p>（2）当采用这种方法时，如果同时发布插件（包括图片插件等），那么插件编译时必须：<br>CONFIG-=embed_manifest_dll</p>\n<p>使得生成的插件中不嵌入manifest文件，否则插件不被程序识别(其实也可以识别，只要将 Microsoft.VC90.CRT 拷贝一份和插件放到同一文件夹即可，当然这种方式很不好，如果插件分布在几个目录下，要放置Microsoft.VC90.CRT的很多副本)。</p>\n<p>工具</p>\n<p>1. 一定要记住： Dependency Walker 是你的好帮手，它会告诉你你的 exe 和 dll需要哪些库，以及它加载的动态库都在哪个文件夹内 等</p>\n<p>2. 最好准备一个进程查看的工具，比如微软的 Process Explorer等，来查看你的程序到底加载了哪些动态库(加载了哪些插件等)</p>\n<p>小结：关于解析 Qt 程序在Windows 下发布的内容介绍完了，希望本文对你有所帮助。</p>\n","site":{"data":{}},"excerpt":"<p>Qt 程序在Windows 下发布是本文要介绍的内容，不多说了，先来看内容，针对这个问题，其实 Qt 的 manual 中解释的已经比较清楚了。下面是我根据自己的理解和实验后写的东西，希望比Qt文档容易理解一点。</p>\n<p>下面不涉及静态编译(静态编译可以看看这儿)，只包含动态编译（也就是Qt默认的情况），主要又分 mingw 和 msvc 两种情况：<br>Mingw</p>\n<p>首先，我们需要生成 release 模式的可执行程序（不少同学抱怨，一个小小程序却需要100多M的动态库，就是因为用的debug）<br>qmake<br>mingw32-make release</p>\n<p>而后将 可执行文件 与 需要的动态库放到同一个文件夹下，一般需要<br>myprogram.exe<br>mingwm10.dll<br>libgcc_s_dw2-1.dll<br>qtcore4.dll<br>qtgui4.dll</p>\n<p>有同学抱怨，动态库拷过去以后，程序报错 无法定位程序输入点于动态链接库QtCore4.dll上 ，这一般是由于系统中装了多套Qt的运行库，而你拷贝的不是Qt安装目录下的库所导致的。比如，当安装的是Qt SDK时，很容易导致这个问题，因为里面的Qt是mingw编译的，但里面的QtCreator是msvc编译的，所以不少人不小心就吧QtCreator带的Qt运行库拷过来了。","more":"</p>\n<p>如果你不需要其他的插件，那么就可以发布程序了，然而不少同学抱怨 jpg、gif、bmp 等格式的图片无法显示，这是因为 Qt 原生支持 png，而其他格式需要通过插件支持(插件在 %QTDIR%/pluginsimageformats 目录下)</p>\n<p>你只需将需要的插件拷贝到可执行程序所在的目录下的 imageformats 目录下即可<br>myprogram.exe<br>imageformatsqjpeg4.dll<br>imageformatsqgif4.dll</p>\n<p>同样，如果你的程序需要gb2312、gbk编码支持，那么需要将 %QTDIR%pluginscodecs 目录下的相应插件拷贝到可执行程序所在目录下的 codecs 目录下<br>myprogram.exe<br>codecsqcncodecs4.dll</p>\n<p>建议：不妨多看看Qt安装目录下的plugins目录，熟悉这些插件分别是做什么的，你发布的程序需要哪些。</p>\n<p>现在，程序可以发布了。你现在也可以通过 nsis 来制作一个安装包。<br>msvc</p>\n<p>如果用的VS2008 而不是mingw，发布的过程其实基本是一样的。</p>\n<p>首先生成 release 模式的 可执行文件<br>qmake<br>nmake release</p>\n<p>而后准备需要的动态库与插件<br>myprogram.exe<br>qtcore4.dll<br>qtgui4.dll<br>imageformats*4.dll</p>\n<p>  因为是vc编译的，所以不需要mingw的 mingwm10.dll libgcc_s_dw2-1.dll ，取代他们的是VC2008的CC++ 运行库：<br>MSVCR90.DLL<br>MSVCP90.DLL</p>\n<p>如果你用的Windows xp 之前的系统，那么只要将这两个运行库和可执行程序放于同一个目录即可。</p>\n<p>但对于Windows xp (包括)之后的系统，这样做并不会正常工作，程序会报告：由于应用程序配置不正确，应用程序未能启动。这个问题有点复杂，其实解决方法很简单，只需在用户机器上安装1M多的VS2008可再发行包 vcredist_x86.exe 即可</p>\n<p>该包会将运行库安装到 window系统目录下的 WinSxS 目录下，对xp之前的系统，还会将运行库同时安装到path路径下的目录内。其实如果用户装过其他人编写的VC2008的程序，机器上很应该已经装过该包了。<br> 或许你要问，如果不想安装 可再发行包怎么办，比如就想把需要dll一块和程序打包，我们可以这么做：</p>\n<p>将文件夹 (如果你用的VS2008 express，该文件夹不存在)</p>\n<p><visual studio=\"\" install=\"\" path=\"\">VCredist<architecture>Microsoft.VC90.CRT</architecture></visual></p>\n<p>直接复制到可执行程序所在目录<br>myprogram.exe<br>Microsoft.VC90.CRT*</p>\n<p>注意：</p>\n<p>（1）如果用户机器上已经安装了可再发行包，程序将永远不会使用Microsoft.VC90.CRT下的库。</p>\n<p>（2）当采用这种方法时，如果同时发布插件（包括图片插件等），那么插件编译时必须：<br>CONFIG-=embed_manifest_dll</p>\n<p>使得生成的插件中不嵌入manifest文件，否则插件不被程序识别(其实也可以识别，只要将 Microsoft.VC90.CRT 拷贝一份和插件放到同一文件夹即可，当然这种方式很不好，如果插件分布在几个目录下，要放置Microsoft.VC90.CRT的很多副本)。</p>\n<p>工具</p>\n<p>1. 一定要记住： Dependency Walker 是你的好帮手，它会告诉你你的 exe 和 dll需要哪些库，以及它加载的动态库都在哪个文件夹内 等</p>\n<p>2. 最好准备一个进程查看的工具，比如微软的 Process Explorer等，来查看你的程序到底加载了哪些动态库(加载了哪些插件等)</p>\n<p>小结：关于解析 Qt 程序在Windows 下发布的内容介绍完了，希望本文对你有所帮助。</p>"},{"title":"[转] 一道淘汰85%面试者的百度开发者面试题","id":"1784","date":"2014-05-05T02:45:21.000Z","_content":"\n> update : 原型看这里：[FizzBuzz](http://rosettacode.org/wiki/FizzBuzz#Java) 谢谢：[Yang Zhao](http://geniuscarrier.com/)\n\n最近在CSDN上看到一道题，据说淘汰了85%的面试者（只是据说而已）。心血来潮，随便写个算法，该算法很简单，主要就是考察应聘者是否注重细节。题干如下：\n\n依序遍历0到100闭区间内所有的正整数，如果该数字能被3整除，则输出该数字及‘*’标记；如果该数字能被5整除，则输出该数字及‘#’标记；如果该数字既能被3整除又能被5整除，则输出该数字及‘*#’标记。\n\n该题主要考察了如下几点。\n\n1\\. 正整数。不知这题怎么出了，这是数学的概念。看到有很多答案从0开始扫描，0是整数，非正非负，应该从1、2或3开始扫描都可以。\n\n2\\. 题目给出了3个条件，应该先考虑条件苛刻的，也就是同时被3和5整除的，然后再考虑被3或被5整除的。<!--more-->\n\n3\\. 闭区间（这TM的玩文字游戏呢！）。所以不能用for(int i = 0; i < 100;i++)。有很多家伙习惯了，条件都是用“<”。\n\n下面是题目的答案。\n\n`public class SF{\n    public static void main(String[] args)    {\n        for(int i = 1; i<= 100; i++)        {\n           // if(i % 3 == 0 && i % 5 ==0){\n             if(i%15==0){\n                System.out.print(\"*#\");\n            }else if(i % 3 == 0){\n                System.out.print(\"*\");\n            } else if(i % 5 == 0){\n                System.out.print(\"#\");\n            } \n        } \n    } \n}`\n\n题目并不难，主要是考察对需求的准确理解！\n原文链接：http://www.cnblogs.com/nokiaguy/p/3691921.html","source":"_posts/e8-bd-ac-e4-b8-80-e9-81-93-e6-b7-98-e6-b1-b085-e9-9d-a2-e8-af-95-e8-80-85-e7-9a-84-e7-99-be-e5-ba-a6-e5-bc-80-e5-8f-91-e8-80-85-e9-9d-a2-e8-af-95-e9-a2-98.md","raw":"---\ntitle: '[转] 一道淘汰85%面试者的百度开发者面试题'\ntags:\n  - 算法\nid: 1784\ncategories:\n  - Algorithm\ndate: 2014-05-05 10:45:21\n---\n\n> update : 原型看这里：[FizzBuzz](http://rosettacode.org/wiki/FizzBuzz#Java) 谢谢：[Yang Zhao](http://geniuscarrier.com/)\n\n最近在CSDN上看到一道题，据说淘汰了85%的面试者（只是据说而已）。心血来潮，随便写个算法，该算法很简单，主要就是考察应聘者是否注重细节。题干如下：\n\n依序遍历0到100闭区间内所有的正整数，如果该数字能被3整除，则输出该数字及‘*’标记；如果该数字能被5整除，则输出该数字及‘#’标记；如果该数字既能被3整除又能被5整除，则输出该数字及‘*#’标记。\n\n该题主要考察了如下几点。\n\n1\\. 正整数。不知这题怎么出了，这是数学的概念。看到有很多答案从0开始扫描，0是整数，非正非负，应该从1、2或3开始扫描都可以。\n\n2\\. 题目给出了3个条件，应该先考虑条件苛刻的，也就是同时被3和5整除的，然后再考虑被3或被5整除的。<!--more-->\n\n3\\. 闭区间（这TM的玩文字游戏呢！）。所以不能用for(int i = 0; i < 100;i++)。有很多家伙习惯了，条件都是用“<”。\n\n下面是题目的答案。\n\n`public class SF{\n    public static void main(String[] args)    {\n        for(int i = 1; i<= 100; i++)        {\n           // if(i % 3 == 0 && i % 5 ==0){\n             if(i%15==0){\n                System.out.print(\"*#\");\n            }else if(i % 3 == 0){\n                System.out.print(\"*\");\n            } else if(i % 5 == 0){\n                System.out.print(\"#\");\n            } \n        } \n    } \n}`\n\n题目并不难，主要是考察对需求的准确理解！\n原文链接：http://www.cnblogs.com/nokiaguy/p/3691921.html","slug":"e8-bd-ac-e4-b8-80-e9-81-93-e6-b7-98-e6-b1-b085-e9-9d-a2-e8-af-95-e8-80-85-e7-9a-84-e7-99-be-e5-ba-a6-e5-bc-80-e5-8f-91-e8-80-85-e9-9d-a2-e8-af-95-e9-a2-98","published":1,"updated":"2018-01-13T05:07:00.492Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjccw7x9q0040aqcrw6gk6akt","content":"<blockquote>\n<p>update : 原型看这里：<a href=\"http://rosettacode.org/wiki/FizzBuzz#Java\" target=\"_blank\" rel=\"noopener\">FizzBuzz</a> 谢谢：<a href=\"http://geniuscarrier.com/\" target=\"_blank\" rel=\"noopener\">Yang Zhao</a></p>\n</blockquote>\n<p>最近在CSDN上看到一道题，据说淘汰了85%的面试者（只是据说而已）。心血来潮，随便写个算法，该算法很简单，主要就是考察应聘者是否注重细节。题干如下：</p>\n<p>依序遍历0到100闭区间内所有的正整数，如果该数字能被3整除，则输出该数字及‘<em>’标记；如果该数字能被5整除，则输出该数字及‘#’标记；如果该数字既能被3整除又能被5整除，则输出该数字及‘</em>#’标记。</p>\n<p>该题主要考察了如下几点。</p>\n<p>1. 正整数。不知这题怎么出了，这是数学的概念。看到有很多答案从0开始扫描，0是整数，非正非负，应该从1、2或3开始扫描都可以。</p>\n<p>2. 题目给出了3个条件，应该先考虑条件苛刻的，也就是同时被3和5整除的，然后再考虑被3或被5整除的。<a id=\"more\"></a></p>\n<p>3. 闭区间（这TM的玩文字游戏呢！）。所以不能用for(int i = 0; i &lt; 100;i++)。有很多家伙习惯了，条件都是用“&lt;”。</p>\n<p>下面是题目的答案。</p>\n<p><code>public class SF{\n    public static void main(String[] args)    {\n        for(int i = 1; i&lt;= 100; i++)        {\n           // if(i % 3 == 0 &amp;&amp; i % 5 ==0){\n             if(i%15==0){\n                System.out.print(&quot;*#&quot;);\n            }else if(i % 3 == 0){\n                System.out.print(&quot;*&quot;);\n            } else if(i % 5 == 0){\n                System.out.print(&quot;#&quot;);\n            } \n        } \n    } \n}</code></p>\n<p>题目并不难，主要是考察对需求的准确理解！<br>原文链接：<a href=\"http://www.cnblogs.com/nokiaguy/p/3691921.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/nokiaguy/p/3691921.html</a></p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>update : 原型看这里：<a href=\"http://rosettacode.org/wiki/FizzBuzz#Java\" target=\"_blank\" rel=\"noopener\">FizzBuzz</a> 谢谢：<a href=\"http://geniuscarrier.com/\" target=\"_blank\" rel=\"noopener\">Yang Zhao</a></p>\n</blockquote>\n<p>最近在CSDN上看到一道题，据说淘汰了85%的面试者（只是据说而已）。心血来潮，随便写个算法，该算法很简单，主要就是考察应聘者是否注重细节。题干如下：</p>\n<p>依序遍历0到100闭区间内所有的正整数，如果该数字能被3整除，则输出该数字及‘<em>’标记；如果该数字能被5整除，则输出该数字及‘#’标记；如果该数字既能被3整除又能被5整除，则输出该数字及‘</em>#’标记。</p>\n<p>该题主要考察了如下几点。</p>\n<p>1. 正整数。不知这题怎么出了，这是数学的概念。看到有很多答案从0开始扫描，0是整数，非正非负，应该从1、2或3开始扫描都可以。</p>\n<p>2. 题目给出了3个条件，应该先考虑条件苛刻的，也就是同时被3和5整除的，然后再考虑被3或被5整除的。","more":"</p>\n<p>3. 闭区间（这TM的玩文字游戏呢！）。所以不能用for(int i = 0; i &lt; 100;i++)。有很多家伙习惯了，条件都是用“&lt;”。</p>\n<p>下面是题目的答案。</p>\n<p><code>public class SF{\n    public static void main(String[] args)    {\n        for(int i = 1; i&lt;= 100; i++)        {\n           // if(i % 3 == 0 &amp;&amp; i % 5 ==0){\n             if(i%15==0){\n                System.out.print(&quot;*#&quot;);\n            }else if(i % 3 == 0){\n                System.out.print(&quot;*&quot;);\n            } else if(i % 5 == 0){\n                System.out.print(&quot;#&quot;);\n            } \n        } \n    } \n}</code></p>\n<p>题目并不难，主要是考察对需求的准确理解！<br>原文链接：<a href=\"http://www.cnblogs.com/nokiaguy/p/3691921.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/nokiaguy/p/3691921.html</a></p>"},{"title":"[转] 图解https协议加密解密全过程","id":"1770","date":"2014-04-29T02:22:54.000Z","_content":"\n我们都知道HTTPS能够加密信息，以免敏感信息被第三方获取。所以很多银行网站或电子邮箱等等安全级别较高的服务都会采用HTTPS协议。\n\n　　**HTTPS简介**\n\n　　HTTPS其实是有两部分组成：HTTP + SSL / TLS，也就是在HTTP上又加了一层处理加密信息的模块。服务端和客户端的信息传输都会通过TLS进行加密，所以传输的数据都是加密后的数据。具体是如何进行加密，解密，验证的，且看下图。\n\n[![](/wp-content/uploads/2014/04/64c8b99adc8aa90f33f66fbc8288a82f.png \"在新窗口打开图片\")](/wp-content/uploads/2014/04/64c8b99adc8aa90f33f66fbc8288a82f.png)　　**1\\. 客户端发起HTTPS请求**<!--more-->\n\n　　这个没什么好说的，就是用户在浏览器里输入一个https网址，然后连接到server的443端口。\n\n　　**2\\. 服务端的配置**\n\n　　采用HTTPS协议的服务器必须要有一套数字证书，可以自己制作，也可以向组织申请。区别就是自己颁发的证书需要客户端验证通过，才可以继续访问，而使用受信任的公司申请的证书则不会弹出提示页面(startssl就是个不错的选择，有1年的免费服务)。这套证书其实就是一对公钥和私钥。如果对公钥和私钥不太理解，可以想象成一把钥匙和一个锁头，只是全世界只有你一个人有这把钥匙，你可以把锁头给别人，别人可以用这个锁把重要的东西锁起来，然后发给你，因为只有你一个人有这把钥匙，所以只有你才能看到被这把锁锁起来的东西。\n\n　　**3\\. 传送证书**\n\n　　这个证书其实就是公钥，只是包含了很多信息，如证书的颁发机构，过期时间等等。\n\n　　**4\\. 客户端解析证书**\n\n　　这部分工作是有客户端的TLS来完成的，首先会验证公钥是否有效，比如颁发机构，过期时间等等，如果发现异常，则会弹出一个警告框，提示证书存在问题。如果证书没有问题，那么就生成一个随机值。然后用证书对该随机值进行加密。就好像上面说的，把随机值用锁头锁起来，这样除非有钥匙，不然看不到被锁住的内容。\n\n　　**5\\. 传送加密信息**\n\n　　这部分传送的是用证书加密后的随机值，目的就是让服务端得到这个随机值，以后客户端和服务端的通信就可以通过这个随机值来进行加密解密了。\n\n　　**6\\. 服务段解密信息**\n\n　　服务端用私钥解密后，得到了客户端传过来的随机值(私钥)，然后把内容通过该值进行对称加密。所谓对称加密就是，将信息和私钥通过某种算法混合在一起，这样除非知道私钥，不然无法获取内容，而正好客户端和服务端都知道这个私钥，所以只要加密算法够彪悍，私钥够复杂，数据就够安全。\n\n　　**7\\. 传输加密后的信息**\n\n　　这部分信息是服务段用私钥加密后的信息，可以在客户端被还原。\n\n　　**8\\. 客户端解密信息**\n\n　　客户端用之前生成的私钥解密服务段传过来的信息，于是获取了解密后的内容。整个过程第三方即使监听到了数据，也束手无策。\n\n<span style=\"color: #666666;\">原文地址：</span>[http://www.jb51.net/network/68135.html](http://www.jb51.net/network/68135.html)","source":"_posts/e8-bd-ac-e5-9b-be-e8-a7-a3https-e5-8d-8f-e8-ae-ae-e5-8a-a0-e5-af-86-e8-a7-a3-e5-af-86-e5-85-a8-e8-bf-87-e7-a8-8b.md","raw":"---\ntitle: '[转] 图解https协议加密解密全过程'\ntags:\n  - https\nid: 1770\ncategories:\n  - Other\ndate: 2014-04-29 10:22:54\n---\n\n我们都知道HTTPS能够加密信息，以免敏感信息被第三方获取。所以很多银行网站或电子邮箱等等安全级别较高的服务都会采用HTTPS协议。\n\n　　**HTTPS简介**\n\n　　HTTPS其实是有两部分组成：HTTP + SSL / TLS，也就是在HTTP上又加了一层处理加密信息的模块。服务端和客户端的信息传输都会通过TLS进行加密，所以传输的数据都是加密后的数据。具体是如何进行加密，解密，验证的，且看下图。\n\n[![](/wp-content/uploads/2014/04/64c8b99adc8aa90f33f66fbc8288a82f.png \"在新窗口打开图片\")](/wp-content/uploads/2014/04/64c8b99adc8aa90f33f66fbc8288a82f.png)　　**1\\. 客户端发起HTTPS请求**<!--more-->\n\n　　这个没什么好说的，就是用户在浏览器里输入一个https网址，然后连接到server的443端口。\n\n　　**2\\. 服务端的配置**\n\n　　采用HTTPS协议的服务器必须要有一套数字证书，可以自己制作，也可以向组织申请。区别就是自己颁发的证书需要客户端验证通过，才可以继续访问，而使用受信任的公司申请的证书则不会弹出提示页面(startssl就是个不错的选择，有1年的免费服务)。这套证书其实就是一对公钥和私钥。如果对公钥和私钥不太理解，可以想象成一把钥匙和一个锁头，只是全世界只有你一个人有这把钥匙，你可以把锁头给别人，别人可以用这个锁把重要的东西锁起来，然后发给你，因为只有你一个人有这把钥匙，所以只有你才能看到被这把锁锁起来的东西。\n\n　　**3\\. 传送证书**\n\n　　这个证书其实就是公钥，只是包含了很多信息，如证书的颁发机构，过期时间等等。\n\n　　**4\\. 客户端解析证书**\n\n　　这部分工作是有客户端的TLS来完成的，首先会验证公钥是否有效，比如颁发机构，过期时间等等，如果发现异常，则会弹出一个警告框，提示证书存在问题。如果证书没有问题，那么就生成一个随机值。然后用证书对该随机值进行加密。就好像上面说的，把随机值用锁头锁起来，这样除非有钥匙，不然看不到被锁住的内容。\n\n　　**5\\. 传送加密信息**\n\n　　这部分传送的是用证书加密后的随机值，目的就是让服务端得到这个随机值，以后客户端和服务端的通信就可以通过这个随机值来进行加密解密了。\n\n　　**6\\. 服务段解密信息**\n\n　　服务端用私钥解密后，得到了客户端传过来的随机值(私钥)，然后把内容通过该值进行对称加密。所谓对称加密就是，将信息和私钥通过某种算法混合在一起，这样除非知道私钥，不然无法获取内容，而正好客户端和服务端都知道这个私钥，所以只要加密算法够彪悍，私钥够复杂，数据就够安全。\n\n　　**7\\. 传输加密后的信息**\n\n　　这部分信息是服务段用私钥加密后的信息，可以在客户端被还原。\n\n　　**8\\. 客户端解密信息**\n\n　　客户端用之前生成的私钥解密服务段传过来的信息，于是获取了解密后的内容。整个过程第三方即使监听到了数据，也束手无策。\n\n<span style=\"color: #666666;\">原文地址：</span>[http://www.jb51.net/network/68135.html](http://www.jb51.net/network/68135.html)","slug":"e8-bd-ac-e5-9b-be-e8-a7-a3https-e5-8d-8f-e8-ae-ae-e5-8a-a0-e5-af-86-e8-a7-a3-e5-af-86-e5-85-a8-e8-bf-87-e7-a8-8b","published":1,"updated":"2018-01-13T05:07:00.444Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjccw7x9s0043aqcrqek5o0tc","content":"<p>我们都知道HTTPS能够加密信息，以免敏感信息被第三方获取。所以很多银行网站或电子邮箱等等安全级别较高的服务都会采用HTTPS协议。</p>\n<p>　　<strong>HTTPS简介</strong></p>\n<p>　　HTTPS其实是有两部分组成：HTTP + SSL / TLS，也就是在HTTP上又加了一层处理加密信息的模块。服务端和客户端的信息传输都会通过TLS进行加密，所以传输的数据都是加密后的数据。具体是如何进行加密，解密，验证的，且看下图。</p>\n<p><a href=\"/wp-content/uploads/2014/04/64c8b99adc8aa90f33f66fbc8288a82f.png\"><img src=\"/wp-content/uploads/2014/04/64c8b99adc8aa90f33f66fbc8288a82f.png\" alt=\"\" title=\"在新窗口打开图片\"></a>　　<strong>1. 客户端发起HTTPS请求</strong><a id=\"more\"></a></p>\n<p>　　这个没什么好说的，就是用户在浏览器里输入一个https网址，然后连接到server的443端口。</p>\n<p>　　<strong>2. 服务端的配置</strong></p>\n<p>　　采用HTTPS协议的服务器必须要有一套数字证书，可以自己制作，也可以向组织申请。区别就是自己颁发的证书需要客户端验证通过，才可以继续访问，而使用受信任的公司申请的证书则不会弹出提示页面(startssl就是个不错的选择，有1年的免费服务)。这套证书其实就是一对公钥和私钥。如果对公钥和私钥不太理解，可以想象成一把钥匙和一个锁头，只是全世界只有你一个人有这把钥匙，你可以把锁头给别人，别人可以用这个锁把重要的东西锁起来，然后发给你，因为只有你一个人有这把钥匙，所以只有你才能看到被这把锁锁起来的东西。</p>\n<p>　　<strong>3. 传送证书</strong></p>\n<p>　　这个证书其实就是公钥，只是包含了很多信息，如证书的颁发机构，过期时间等等。</p>\n<p>　　<strong>4. 客户端解析证书</strong></p>\n<p>　　这部分工作是有客户端的TLS来完成的，首先会验证公钥是否有效，比如颁发机构，过期时间等等，如果发现异常，则会弹出一个警告框，提示证书存在问题。如果证书没有问题，那么就生成一个随机值。然后用证书对该随机值进行加密。就好像上面说的，把随机值用锁头锁起来，这样除非有钥匙，不然看不到被锁住的内容。</p>\n<p>　　<strong>5. 传送加密信息</strong></p>\n<p>　　这部分传送的是用证书加密后的随机值，目的就是让服务端得到这个随机值，以后客户端和服务端的通信就可以通过这个随机值来进行加密解密了。</p>\n<p>　　<strong>6. 服务段解密信息</strong></p>\n<p>　　服务端用私钥解密后，得到了客户端传过来的随机值(私钥)，然后把内容通过该值进行对称加密。所谓对称加密就是，将信息和私钥通过某种算法混合在一起，这样除非知道私钥，不然无法获取内容，而正好客户端和服务端都知道这个私钥，所以只要加密算法够彪悍，私钥够复杂，数据就够安全。</p>\n<p>　　<strong>7. 传输加密后的信息</strong></p>\n<p>　　这部分信息是服务段用私钥加密后的信息，可以在客户端被还原。</p>\n<p>　　<strong>8. 客户端解密信息</strong></p>\n<p>　　客户端用之前生成的私钥解密服务段传过来的信息，于是获取了解密后的内容。整个过程第三方即使监听到了数据，也束手无策。</p>\n<p><span style=\"color: #666666;\">原文地址：</span><a href=\"http://www.jb51.net/network/68135.html\" target=\"_blank\" rel=\"noopener\">http://www.jb51.net/network/68135.html</a></p>\n","site":{"data":{}},"excerpt":"<p>我们都知道HTTPS能够加密信息，以免敏感信息被第三方获取。所以很多银行网站或电子邮箱等等安全级别较高的服务都会采用HTTPS协议。</p>\n<p>　　<strong>HTTPS简介</strong></p>\n<p>　　HTTPS其实是有两部分组成：HTTP + SSL / TLS，也就是在HTTP上又加了一层处理加密信息的模块。服务端和客户端的信息传输都会通过TLS进行加密，所以传输的数据都是加密后的数据。具体是如何进行加密，解密，验证的，且看下图。</p>\n<p><a href=\"/wp-content/uploads/2014/04/64c8b99adc8aa90f33f66fbc8288a82f.png\"><img src=\"/wp-content/uploads/2014/04/64c8b99adc8aa90f33f66fbc8288a82f.png\" alt=\"\" title=\"在新窗口打开图片\"></a>　　<strong>1. 客户端发起HTTPS请求</strong>","more":"</p>\n<p>　　这个没什么好说的，就是用户在浏览器里输入一个https网址，然后连接到server的443端口。</p>\n<p>　　<strong>2. 服务端的配置</strong></p>\n<p>　　采用HTTPS协议的服务器必须要有一套数字证书，可以自己制作，也可以向组织申请。区别就是自己颁发的证书需要客户端验证通过，才可以继续访问，而使用受信任的公司申请的证书则不会弹出提示页面(startssl就是个不错的选择，有1年的免费服务)。这套证书其实就是一对公钥和私钥。如果对公钥和私钥不太理解，可以想象成一把钥匙和一个锁头，只是全世界只有你一个人有这把钥匙，你可以把锁头给别人，别人可以用这个锁把重要的东西锁起来，然后发给你，因为只有你一个人有这把钥匙，所以只有你才能看到被这把锁锁起来的东西。</p>\n<p>　　<strong>3. 传送证书</strong></p>\n<p>　　这个证书其实就是公钥，只是包含了很多信息，如证书的颁发机构，过期时间等等。</p>\n<p>　　<strong>4. 客户端解析证书</strong></p>\n<p>　　这部分工作是有客户端的TLS来完成的，首先会验证公钥是否有效，比如颁发机构，过期时间等等，如果发现异常，则会弹出一个警告框，提示证书存在问题。如果证书没有问题，那么就生成一个随机值。然后用证书对该随机值进行加密。就好像上面说的，把随机值用锁头锁起来，这样除非有钥匙，不然看不到被锁住的内容。</p>\n<p>　　<strong>5. 传送加密信息</strong></p>\n<p>　　这部分传送的是用证书加密后的随机值，目的就是让服务端得到这个随机值，以后客户端和服务端的通信就可以通过这个随机值来进行加密解密了。</p>\n<p>　　<strong>6. 服务段解密信息</strong></p>\n<p>　　服务端用私钥解密后，得到了客户端传过来的随机值(私钥)，然后把内容通过该值进行对称加密。所谓对称加密就是，将信息和私钥通过某种算法混合在一起，这样除非知道私钥，不然无法获取内容，而正好客户端和服务端都知道这个私钥，所以只要加密算法够彪悍，私钥够复杂，数据就够安全。</p>\n<p>　　<strong>7. 传输加密后的信息</strong></p>\n<p>　　这部分信息是服务段用私钥加密后的信息，可以在客户端被还原。</p>\n<p>　　<strong>8. 客户端解密信息</strong></p>\n<p>　　客户端用之前生成的私钥解密服务段传过来的信息，于是获取了解密后的内容。整个过程第三方即使监听到了数据，也束手无策。</p>\n<p><span style=\"color: #666666;\">原文地址：</span><a href=\"http://www.jb51.net/network/68135.html\" target=\"_blank\" rel=\"noopener\">http://www.jb51.net/network/68135.html</a></p>"},{"title":"[转]怎样理解阻塞非阻塞与同步异步的区别？","id":"1718","date":"2014-04-18T01:33:26.000Z","_content":"\n网上转的，很生动。\n\n老张爱喝茶，废话不说，煮开水。 出场人物：老张，水壶两把（普通水壶，简称水壶；会响的水壶，简称响水壶）。\n\n1 老张把水壶放到火上，立等水开。（同步阻塞） 老张觉得自己有点傻\n\n2 老张把水壶放到火上，去客厅看电视，时不时去厨房看看水开没有。（同步非阻塞） 老张还是觉得自己有点傻，于是变高端了，买了把会响笛的那种水壶。水开之后，能大声发出嘀~~~~的噪音。<!--more-->\n\n3 老张把响水壶放到火上，立等水开。（异步阻塞） 老张觉得这样傻等意义不大\n\n4 老张把响水壶放到火上，去客厅看电视，水壶响之前不再去看它了，响了再去拿壶。（异步非阻塞） 老张觉得自己聪明了。\n\n所谓同步异步，只是对于水壶而言。 普通水壶，同步；响水壶，异步。 虽然都能干活，但响水壶可以在自己完工之后，提示老张水开了。这是普通水壶所不能及的。 同步只能让调用者去轮询自己（情况2中），造成老张效率的低下。 所谓阻塞非阻塞，仅仅对于老张而言。 立等的老张，阻塞；看电视的老张，非阻塞。 情况1和情况3中老张就是阻塞的，媳妇喊他都不知道。虽然3中响水壶是异步的，可对于立等的老张没有太大的意义。所以一般异步是配合非阻塞使用的，这样才能发挥异步的效用。","source":"_posts/e8-bd-ac-e6-80-8e-e6-a0-b7-e7-90-86-e8-a7-a3-e9-98-bb-e5-a1-9e-e9-9d-9e-e9-98-bb-e5-a1-9e-e4-b8-8e-e5-90-8c-e6-ad-a5-e5-bc-82-e6-ad-a5-e7-9a-84-e5-8c-ba-e5-88-ab-ef-bc-9f.md","raw":"---\ntitle: '[转]怎样理解阻塞非阻塞与同步异步的区别？'\nid: 1718\ncategories:\n  - Other\ndate: 2014-04-18 09:33:26\ntags:\n---\n\n网上转的，很生动。\n\n老张爱喝茶，废话不说，煮开水。 出场人物：老张，水壶两把（普通水壶，简称水壶；会响的水壶，简称响水壶）。\n\n1 老张把水壶放到火上，立等水开。（同步阻塞） 老张觉得自己有点傻\n\n2 老张把水壶放到火上，去客厅看电视，时不时去厨房看看水开没有。（同步非阻塞） 老张还是觉得自己有点傻，于是变高端了，买了把会响笛的那种水壶。水开之后，能大声发出嘀~~~~的噪音。<!--more-->\n\n3 老张把响水壶放到火上，立等水开。（异步阻塞） 老张觉得这样傻等意义不大\n\n4 老张把响水壶放到火上，去客厅看电视，水壶响之前不再去看它了，响了再去拿壶。（异步非阻塞） 老张觉得自己聪明了。\n\n所谓同步异步，只是对于水壶而言。 普通水壶，同步；响水壶，异步。 虽然都能干活，但响水壶可以在自己完工之后，提示老张水开了。这是普通水壶所不能及的。 同步只能让调用者去轮询自己（情况2中），造成老张效率的低下。 所谓阻塞非阻塞，仅仅对于老张而言。 立等的老张，阻塞；看电视的老张，非阻塞。 情况1和情况3中老张就是阻塞的，媳妇喊他都不知道。虽然3中响水壶是异步的，可对于立等的老张没有太大的意义。所以一般异步是配合非阻塞使用的，这样才能发挥异步的效用。","slug":"e8-bd-ac-e6-80-8e-e6-a0-b7-e7-90-86-e8-a7-a3-e9-98-bb-e5-a1-9e-e9-9d-9e-e9-98-bb-e5-a1-9e-e4-b8-8e-e5-90-8c-e6-ad-a5-e5-bc-82-e6-ad-a5-e7-9a-84-e5-8c-ba-e5-88-ab-ef-bc-9f","published":1,"updated":"2018-01-13T05:07:00.494Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjccw7x9u0047aqcrzdqvmlb7","content":"<p>网上转的，很生动。</p>\n<p>老张爱喝茶，废话不说，煮开水。 出场人物：老张，水壶两把（普通水壶，简称水壶；会响的水壶，简称响水壶）。</p>\n<p>1 老张把水壶放到火上，立等水开。（同步阻塞） 老张觉得自己有点傻</p>\n<p>2 老张把水壶放到火上，去客厅看电视，时不时去厨房看看水开没有。（同步非阻塞） 老张还是觉得自己有点傻，于是变高端了，买了把会响笛的那种水壶。水开之后，能大声发出嘀~~~~的噪音。<a id=\"more\"></a></p>\n<p>3 老张把响水壶放到火上，立等水开。（异步阻塞） 老张觉得这样傻等意义不大</p>\n<p>4 老张把响水壶放到火上，去客厅看电视，水壶响之前不再去看它了，响了再去拿壶。（异步非阻塞） 老张觉得自己聪明了。</p>\n<p>所谓同步异步，只是对于水壶而言。 普通水壶，同步；响水壶，异步。 虽然都能干活，但响水壶可以在自己完工之后，提示老张水开了。这是普通水壶所不能及的。 同步只能让调用者去轮询自己（情况2中），造成老张效率的低下。 所谓阻塞非阻塞，仅仅对于老张而言。 立等的老张，阻塞；看电视的老张，非阻塞。 情况1和情况3中老张就是阻塞的，媳妇喊他都不知道。虽然3中响水壶是异步的，可对于立等的老张没有太大的意义。所以一般异步是配合非阻塞使用的，这样才能发挥异步的效用。</p>\n","site":{"data":{}},"excerpt":"<p>网上转的，很生动。</p>\n<p>老张爱喝茶，废话不说，煮开水。 出场人物：老张，水壶两把（普通水壶，简称水壶；会响的水壶，简称响水壶）。</p>\n<p>1 老张把水壶放到火上，立等水开。（同步阻塞） 老张觉得自己有点傻</p>\n<p>2 老张把水壶放到火上，去客厅看电视，时不时去厨房看看水开没有。（同步非阻塞） 老张还是觉得自己有点傻，于是变高端了，买了把会响笛的那种水壶。水开之后，能大声发出嘀~~~~的噪音。","more":"</p>\n<p>3 老张把响水壶放到火上，立等水开。（异步阻塞） 老张觉得这样傻等意义不大</p>\n<p>4 老张把响水壶放到火上，去客厅看电视，水壶响之前不再去看它了，响了再去拿壶。（异步非阻塞） 老张觉得自己聪明了。</p>\n<p>所谓同步异步，只是对于水壶而言。 普通水壶，同步；响水壶，异步。 虽然都能干活，但响水壶可以在自己完工之后，提示老张水开了。这是普通水壶所不能及的。 同步只能让调用者去轮询自己（情况2中），造成老张效率的低下。 所谓阻塞非阻塞，仅仅对于老张而言。 立等的老张，阻塞；看电视的老张，非阻塞。 情况1和情况3中老张就是阻塞的，媳妇喊他都不知道。虽然3中响水壶是异步的，可对于立等的老张没有太大的意义。所以一般异步是配合非阻塞使用的，这样才能发挥异步的效用。</p>"},{"title":"迁移网站到 Vultr VPS","id":"2417","date":"2015-01-17T07:29:19.000Z","_content":"\n在国内的虚拟空间快到期了，正好也发现了Vultr，一直观察了几天还不错，就入手。Plan是最低配的，内存768M，15G SSD ，1T带宽，就个人而言是够用了。\n\n[![pingawezomenet](/wp-content/uploads/2015/01/9cbb1307fcca68f305a39eec2e9e30be.png)](/wp-content/uploads/2015/01/9cbb1307fcca68f305a39eec2e9e30be.png)\n\nVultr 的推广链接：[http://www.vultr.com/?ref=6818817](http://www.vultr.com/?ref=6818817 \"http://www.vultr.com/?ref=6818817\")","source":"_posts/e8-bf-81-e7-a7-bb-e7-bd-91-e7-ab-99-e5-88-b0-vultr-vps.md","raw":"---\ntitle: 迁移网站到 Vultr VPS\ntags:\n  - vps\nid: 2417\ncategories:\n  - Linux\ndate: 2015-01-17 15:29:19\n---\n\n在国内的虚拟空间快到期了，正好也发现了Vultr，一直观察了几天还不错，就入手。Plan是最低配的，内存768M，15G SSD ，1T带宽，就个人而言是够用了。\n\n[![pingawezomenet](/wp-content/uploads/2015/01/9cbb1307fcca68f305a39eec2e9e30be.png)](/wp-content/uploads/2015/01/9cbb1307fcca68f305a39eec2e9e30be.png)\n\nVultr 的推广链接：[http://www.vultr.com/?ref=6818817](http://www.vultr.com/?ref=6818817 \"http://www.vultr.com/?ref=6818817\")","slug":"e8-bf-81-e7-a7-bb-e7-bd-91-e7-ab-99-e5-88-b0-vultr-vps","published":1,"updated":"2018-01-13T05:07:00.459Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjccw7x9w004aaqcr9xhcn72s","content":"<p>在国内的虚拟空间快到期了，正好也发现了Vultr，一直观察了几天还不错，就入手。Plan是最低配的，内存768M，15G SSD ，1T带宽，就个人而言是够用了。</p>\n<p><a href=\"/wp-content/uploads/2015/01/9cbb1307fcca68f305a39eec2e9e30be.png\"><img src=\"/wp-content/uploads/2015/01/9cbb1307fcca68f305a39eec2e9e30be.png\" alt=\"pingawezomenet\"></a></p>\n<p>Vultr 的推广链接：<a href=\"http://www.vultr.com/?ref=6818817\" title=\"http://www.vultr.com/?ref=6818817\" target=\"_blank\" rel=\"noopener\">http://www.vultr.com/?ref=6818817</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>在国内的虚拟空间快到期了，正好也发现了Vultr，一直观察了几天还不错，就入手。Plan是最低配的，内存768M，15G SSD ，1T带宽，就个人而言是够用了。</p>\n<p><a href=\"/wp-content/uploads/2015/01/9cbb1307fcca68f305a39eec2e9e30be.png\"><img src=\"/wp-content/uploads/2015/01/9cbb1307fcca68f305a39eec2e9e30be.png\" alt=\"pingawezomenet\"></a></p>\n<p>Vultr 的推广链接：<a href=\"http://www.vultr.com/?ref=6818817\" title=\"http://www.vultr.com/?ref=6818817\" target=\"_blank\" rel=\"noopener\">http://www.vultr.com/?ref=6818817</a></p>\n"},{"title":"[转] 程序设计竞赛ACM训练手册","id":"2154","date":"2014-05-28T01:21:59.000Z","_content":"\n> 首先说做ACM是个很锻炼人的过程，可以自已没正式训练过（中间做过很短很短的一段时间）。今天无意看到下面的文章，先不说要求自己几分钟内写多少码，至少这些算法得有空再研究研究，书也买来看看。\n\n首先是编程的能力，一般要做到50行以内的程序不用调试、100行以内的二分钟内调试成功。\n\n第一阶段：练经典常用算法，下面的每个算法给我打上十到二十遍，同时自己精简代码，因为太常用，所以要练到写时不用想，10-15分钟内打完。  \n1．最短路（Floyd、Dijstra、BellmanFord）；\n2．最小生成树（先写个prim，kruscal要用并查集，不好写）；\n3．大数（高精度）加减乘除；\n4．二分查找（代码可在五行以内）；\n5．叉乘、判线段相交、然后写个凸包；\n6．BFS、DFS，同时熟练hash表（要熟，要灵活,代码要简）；\n7．数学上的有：辗转相除（两行内），线段交点、多角形面积公式；\n8．调用系统的qsort, 技巧很多，慢慢掌握；\n9．任意进制间的转换......\n<!--more-->\n\n第二阶段：练习复杂一点，但也较常用的算法。 如：  \n1．二分图匹配（匈牙利），最小路径覆盖；\n2．网络流，最小费用流；\n3．线段树；\n4\\. 并查集；  \n5．熟悉动态规划的各个典型：LCS、最长递增子串、三角剖分、记忆化dp   ；\n6．博弈类算法。博弈树，二进制法等；\n7．最大团，最大独立集；\n8．判断点在多边形内；\n9．差分约束系统；  \n10．双向广度搜索、A*算法，最小耗散优先......\n\n算法书有很多可以参考：\n\n1、Concrete Mathematics --- A Foundation For Computer Science\nRonald L. Graham ， Donald E. Knuth ， Oren Patashnik\n这本书《具体数学》是Stanford计算机系的教材（1970 年开始给研究生授课），书的内容是Knuth的巨著TAOCP第一章的扩展，涉及了计算机科学领域内几乎所有可能遇到的数学知识。书中许多经典问题的解答比目前广泛流传的解法更易懂。对于提高大家的数学修养有很大帮助。\n\n2、Introduction to Algorithms\nThomas H. Cormen ，Charles E. Leiserson ，Ronald L. Rivest ，Clifford Stein\n《算法导论》MIT计算机系的经典算法教材。作者Rivest获得过ACM Turing Award，牛！本书内容全面，语言通俗，很适合大家入门。\n\n3、实用算法的分析和程序设计\n吴文虎 王建德\n大名鼎鼎的“黑书”。内容包括了竞赛需要的各种算法，各种层次的读者都适合。\n\n4、网络算法与复杂性理论\n谢政 李建平\n内容很丰富的图论教材\n\n5、算法+数据结构=程序\nN.Wirth\nPascal语言的发明人Wirth教授的名著，深入阐述了算法与数据结构的关系，对每个算法都提供详细的Pascal源程序，适合各种水平的读者。\n\n最后，在学习算法提升战斗力的同时，也要多做题目，实战是很有必要的。其实并不是所有的题目都是靠算法的，有一些题目是有多种可以优化的手段，也有一些工程性比较强的题目。上手做和把题做精还是有很大区别的（惭愧的说，我就是属于上手做，没有做精，所以……）。\n\n愿每一位程序设计竞赛爱好者挑战极限！ ","source":"_posts/e8-bd-ac-e7-a8-8b-e5-ba-8f-e8-ae-be-e8-ae-a1-e7-ab-9e-e8-b5-9bacm-e8-ae-ad-e7-bb-83-e6-89-8b-e5-86-8c.md","raw":"---\ntitle: '[转] 程序设计竞赛ACM训练手册'\ntags:\n  - 算法\nid: 2154\ncategories:\n  - Algorithm\ndate: 2014-05-28 09:21:59\n---\n\n> 首先说做ACM是个很锻炼人的过程，可以自已没正式训练过（中间做过很短很短的一段时间）。今天无意看到下面的文章，先不说要求自己几分钟内写多少码，至少这些算法得有空再研究研究，书也买来看看。\n\n首先是编程的能力，一般要做到50行以内的程序不用调试、100行以内的二分钟内调试成功。\n\n第一阶段：练经典常用算法，下面的每个算法给我打上十到二十遍，同时自己精简代码，因为太常用，所以要练到写时不用想，10-15分钟内打完。  \n1．最短路（Floyd、Dijstra、BellmanFord）；\n2．最小生成树（先写个prim，kruscal要用并查集，不好写）；\n3．大数（高精度）加减乘除；\n4．二分查找（代码可在五行以内）；\n5．叉乘、判线段相交、然后写个凸包；\n6．BFS、DFS，同时熟练hash表（要熟，要灵活,代码要简）；\n7．数学上的有：辗转相除（两行内），线段交点、多角形面积公式；\n8．调用系统的qsort, 技巧很多，慢慢掌握；\n9．任意进制间的转换......\n<!--more-->\n\n第二阶段：练习复杂一点，但也较常用的算法。 如：  \n1．二分图匹配（匈牙利），最小路径覆盖；\n2．网络流，最小费用流；\n3．线段树；\n4\\. 并查集；  \n5．熟悉动态规划的各个典型：LCS、最长递增子串、三角剖分、记忆化dp   ；\n6．博弈类算法。博弈树，二进制法等；\n7．最大团，最大独立集；\n8．判断点在多边形内；\n9．差分约束系统；  \n10．双向广度搜索、A*算法，最小耗散优先......\n\n算法书有很多可以参考：\n\n1、Concrete Mathematics --- A Foundation For Computer Science\nRonald L. Graham ， Donald E. Knuth ， Oren Patashnik\n这本书《具体数学》是Stanford计算机系的教材（1970 年开始给研究生授课），书的内容是Knuth的巨著TAOCP第一章的扩展，涉及了计算机科学领域内几乎所有可能遇到的数学知识。书中许多经典问题的解答比目前广泛流传的解法更易懂。对于提高大家的数学修养有很大帮助。\n\n2、Introduction to Algorithms\nThomas H. Cormen ，Charles E. Leiserson ，Ronald L. Rivest ，Clifford Stein\n《算法导论》MIT计算机系的经典算法教材。作者Rivest获得过ACM Turing Award，牛！本书内容全面，语言通俗，很适合大家入门。\n\n3、实用算法的分析和程序设计\n吴文虎 王建德\n大名鼎鼎的“黑书”。内容包括了竞赛需要的各种算法，各种层次的读者都适合。\n\n4、网络算法与复杂性理论\n谢政 李建平\n内容很丰富的图论教材\n\n5、算法+数据结构=程序\nN.Wirth\nPascal语言的发明人Wirth教授的名著，深入阐述了算法与数据结构的关系，对每个算法都提供详细的Pascal源程序，适合各种水平的读者。\n\n最后，在学习算法提升战斗力的同时，也要多做题目，实战是很有必要的。其实并不是所有的题目都是靠算法的，有一些题目是有多种可以优化的手段，也有一些工程性比较强的题目。上手做和把题做精还是有很大区别的（惭愧的说，我就是属于上手做，没有做精，所以……）。\n\n愿每一位程序设计竞赛爱好者挑战极限！ ","slug":"e8-bd-ac-e7-a8-8b-e5-ba-8f-e8-ae-be-e8-ae-a1-e7-ab-9e-e8-b5-9bacm-e8-ae-ad-e7-bb-83-e6-89-8b-e5-86-8c","published":1,"updated":"2018-01-13T05:07:00.441Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjccw7x9z004daqcrsr3rxrhe","content":"<blockquote>\n<p>首先说做ACM是个很锻炼人的过程，可以自已没正式训练过（中间做过很短很短的一段时间）。今天无意看到下面的文章，先不说要求自己几分钟内写多少码，至少这些算法得有空再研究研究，书也买来看看。</p>\n</blockquote>\n<p>首先是编程的能力，一般要做到50行以内的程序不用调试、100行以内的二分钟内调试成功。</p>\n<p>第一阶段：练经典常用算法，下面的每个算法给我打上十到二十遍，同时自己精简代码，因为太常用，所以要练到写时不用想，10-15分钟内打完。<br>1．最短路（Floyd、Dijstra、BellmanFord）；<br>2．最小生成树（先写个prim，kruscal要用并查集，不好写）；<br>3．大数（高精度）加减乘除；<br>4．二分查找（代码可在五行以内）；<br>5．叉乘、判线段相交、然后写个凸包；<br>6．BFS、DFS，同时熟练hash表（要熟，要灵活,代码要简）；<br>7．数学上的有：辗转相除（两行内），线段交点、多角形面积公式；<br>8．调用系统的qsort, 技巧很多，慢慢掌握；<br>9．任意进制间的转换……<br><a id=\"more\"></a></p>\n<p>第二阶段：练习复杂一点，但也较常用的算法。 如：<br>1．二分图匹配（匈牙利），最小路径覆盖；<br>2．网络流，最小费用流；<br>3．线段树；<br>4. 并查集；<br>5．熟悉动态规划的各个典型：LCS、最长递增子串、三角剖分、记忆化dp   ；<br>6．博弈类算法。博弈树，二进制法等；<br>7．最大团，最大独立集；<br>8．判断点在多边形内；<br>9．差分约束系统；<br>10．双向广度搜索、A*算法，最小耗散优先……</p>\n<p>算法书有很多可以参考：</p>\n<p>1、Concrete Mathematics — A Foundation For Computer Science<br>Ronald L. Graham ， Donald E. Knuth ， Oren Patashnik<br>这本书《具体数学》是Stanford计算机系的教材（1970 年开始给研究生授课），书的内容是Knuth的巨著TAOCP第一章的扩展，涉及了计算机科学领域内几乎所有可能遇到的数学知识。书中许多经典问题的解答比目前广泛流传的解法更易懂。对于提高大家的数学修养有很大帮助。</p>\n<p>2、Introduction to Algorithms<br>Thomas H. Cormen ，Charles E. Leiserson ，Ronald L. Rivest ，Clifford Stein<br>《算法导论》MIT计算机系的经典算法教材。作者Rivest获得过ACM Turing Award，牛！本书内容全面，语言通俗，很适合大家入门。</p>\n<p>3、实用算法的分析和程序设计<br>吴文虎 王建德<br>大名鼎鼎的“黑书”。内容包括了竞赛需要的各种算法，各种层次的读者都适合。</p>\n<p>4、网络算法与复杂性理论<br>谢政 李建平<br>内容很丰富的图论教材</p>\n<p>5、算法+数据结构=程序<br>N.Wirth<br>Pascal语言的发明人Wirth教授的名著，深入阐述了算法与数据结构的关系，对每个算法都提供详细的Pascal源程序，适合各种水平的读者。</p>\n<p>最后，在学习算法提升战斗力的同时，也要多做题目，实战是很有必要的。其实并不是所有的题目都是靠算法的，有一些题目是有多种可以优化的手段，也有一些工程性比较强的题目。上手做和把题做精还是有很大区别的（惭愧的说，我就是属于上手做，没有做精，所以……）。</p>\n<p>愿每一位程序设计竞赛爱好者挑战极限！ </p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>首先说做ACM是个很锻炼人的过程，可以自已没正式训练过（中间做过很短很短的一段时间）。今天无意看到下面的文章，先不说要求自己几分钟内写多少码，至少这些算法得有空再研究研究，书也买来看看。</p>\n</blockquote>\n<p>首先是编程的能力，一般要做到50行以内的程序不用调试、100行以内的二分钟内调试成功。</p>\n<p>第一阶段：练经典常用算法，下面的每个算法给我打上十到二十遍，同时自己精简代码，因为太常用，所以要练到写时不用想，10-15分钟内打完。<br>1．最短路（Floyd、Dijstra、BellmanFord）；<br>2．最小生成树（先写个prim，kruscal要用并查集，不好写）；<br>3．大数（高精度）加减乘除；<br>4．二分查找（代码可在五行以内）；<br>5．叉乘、判线段相交、然后写个凸包；<br>6．BFS、DFS，同时熟练hash表（要熟，要灵活,代码要简）；<br>7．数学上的有：辗转相除（两行内），线段交点、多角形面积公式；<br>8．调用系统的qsort, 技巧很多，慢慢掌握；<br>9．任意进制间的转换……<br>","more":"</p>\n<p>第二阶段：练习复杂一点，但也较常用的算法。 如：<br>1．二分图匹配（匈牙利），最小路径覆盖；<br>2．网络流，最小费用流；<br>3．线段树；<br>4. 并查集；<br>5．熟悉动态规划的各个典型：LCS、最长递增子串、三角剖分、记忆化dp   ；<br>6．博弈类算法。博弈树，二进制法等；<br>7．最大团，最大独立集；<br>8．判断点在多边形内；<br>9．差分约束系统；<br>10．双向广度搜索、A*算法，最小耗散优先……</p>\n<p>算法书有很多可以参考：</p>\n<p>1、Concrete Mathematics — A Foundation For Computer Science<br>Ronald L. Graham ， Donald E. Knuth ， Oren Patashnik<br>这本书《具体数学》是Stanford计算机系的教材（1970 年开始给研究生授课），书的内容是Knuth的巨著TAOCP第一章的扩展，涉及了计算机科学领域内几乎所有可能遇到的数学知识。书中许多经典问题的解答比目前广泛流传的解法更易懂。对于提高大家的数学修养有很大帮助。</p>\n<p>2、Introduction to Algorithms<br>Thomas H. Cormen ，Charles E. Leiserson ，Ronald L. Rivest ，Clifford Stein<br>《算法导论》MIT计算机系的经典算法教材。作者Rivest获得过ACM Turing Award，牛！本书内容全面，语言通俗，很适合大家入门。</p>\n<p>3、实用算法的分析和程序设计<br>吴文虎 王建德<br>大名鼎鼎的“黑书”。内容包括了竞赛需要的各种算法，各种层次的读者都适合。</p>\n<p>4、网络算法与复杂性理论<br>谢政 李建平<br>内容很丰富的图论教材</p>\n<p>5、算法+数据结构=程序<br>N.Wirth<br>Pascal语言的发明人Wirth教授的名著，深入阐述了算法与数据结构的关系，对每个算法都提供详细的Pascal源程序，适合各种水平的读者。</p>\n<p>最后，在学习算法提升战斗力的同时，也要多做题目，实战是很有必要的。其实并不是所有的题目都是靠算法的，有一些题目是有多种可以优化的手段，也有一些工程性比较强的题目。上手做和把题做精还是有很大区别的（惭愧的说，我就是属于上手做，没有做精，所以……）。</p>\n<p>愿每一位程序设计竞赛爱好者挑战极限！ </p>"},{"title":"[转] PhpStorm Tips and Tricks","id":"2187","date":"2014-08-25T03:18:10.000Z","_content":"\nPhpStorm is my code editor of choice and it’s robust. Almost to powerful because it has an immense set of features and settings. I wanted to show you some of the tips and tricks I have learned over the past few months and my workflow.\n\nKeymap\n\nPhpStorm allows you to rebind every keybinding and even add bindings to features that are not mapped. This means you can set it up to perfectly match your existing workflow, and if moving from another editor you will feel right at home with just a few minutes of setup time.\n\nWay back in 2001 is when I first started down the rabbit hole of web development. Since that time I’ve used a handful of primary editors with Sublime being the latest. I am so accustomed to it that I duplicated Sublimes keybindings to PhpStorm. Here is a full list of all my customized keys:\n\nCommand-p – Search Everywhere\nCommand-r – Methods in file\nAlt-Command-p – Switch Projects\nCommand-3 – Open the integrated terminal\nAs you can see I didn’t customize a lot, just made it more comfortable.\n\nPreferences\n<!--more-->\n\nThe preferences are vast, you can customize so much that it’s impossible to cover everything. Here are the custom changes I settled on:\n\nComing from Sublime Text a major feature I used was selecting a word and hitting a single quote or double quote to surround the selected text. PhpStorm enables this from the Preferences -> IDE -> Editor -> Smart Keys -> Surround Selection on typing quote or brace.\nPreferences -> IDE -> Editor -> Appearance -> Show method separators. This puts a line between methods to give them a more blocky feel. Reminds me of my old CodeIgniter days and its docblocks.\nPreferences -> IDE -> Editor -> Auto Import. I checked all these which will convert a full namespaces into use statements. For example typing: ShoppingPaymentGateway moves this into a use ShoppingPaymentGateway statement and leaves Gateway at the caret position. This makes the code feel cleaner to me.\nSetup Laravel live templates. Koomai keeps adding useful templates and pressing CMD+J will show the popup that you can easily search for what you are looking for.\nImproving the workflow\n\nMy current workflow is I open my project, launch the integrated terminal and run grunt watch. Next hide the terminal and start my day coding. I use the built-in VCS operations and I have tasks setup to pull issues from GitHub and Trello cards. From here it’s just basic operations. Open files, search, find usages, and go to declaration. Here is the list of features I use the most (Help -> Productivity Guide):\n\nPhpStorm Productivity Guide\nPhpStorm Productivity Guide\nNow that I have a few months of using it under my belt I’m ready to go to the next level. But the question I always have is what do I want? What would improve my personal workflow? What is the name of the option I’m looking for? Nine times out of ten PhpStorm has it, but I struggle articulating what I’m looking for to find it in the docs.\n\nTo help me improve and find some power features I decided to ask on Twitter and had some great responses that I’m going to share here:\n\nNithin Meppurathu\n\nSelect code in a method then hit ALT+CMD+M to create a new method from selection.\nYou can create an interface from any class. Refactor -> Extract -> Interface\nJeffrey Way\n\nCommand/Control+Shift+Backspace. This will take you to your last edit point.\n\nAbhimanyu Sharma\n\nPress Ctrl+Alt+L to reformat the code.\nUse ‘Source code Pro‘ font it’s looks great.\nUse ‘Key Promoter‘ plugin to get reminder of keyboard shortcuts\nRyan\n\nDouble press “Shift” brings up a global search. Very useful.\n\nKennon Bickhart\n\nThere are a few that I have found super useful so far.\n\nCMD+SHIFT+A – Find Action… It’s similar to CMD+SHIFT+P in Sublime. Allows you to search for functionality in the editor.\nSHIFT+SHIFT – Search Everywhere – A beefier version of Sublime’s CMD+P\nSetup your coding standards in Preferences > Code Style. Then when in a file, hit CMD+OPT+L to format the whole file, or selected code, to those standards. I still miss Sublime’s Abacus plugin, since PhpStorm isn’t as good as aligning variable signs, but it works well enough.\nCTRL+OPT+I – Auto-indent Lines. – Doesn’t tweak your coding style, just properly indents the code you have typed.\nGareth Evans\n\nThe remote bash commands are really useful. I have one set up with a key command that will start behat tests on a VM or remote machine of the feature file that’s currently in focus prompting you for additional params!\n\nPatrick Noonan\n\nIf your cursor is on a function or class name, hit command+B to jump to its declaration.\n\nThese are some great tips and I find it interesting how much different everyones workflow is. For me what made me switch to PhpStorm in the first place was not the PHP support. It was the CSS, HTML, JavaScript, and CoffeeScript. I love the CSS autocomplete, the showing applied styles, and the refactoring. These are powerful features you can’t get outside of an IDE.\n\nAnnoyances\n\nIt isn’t all cakes and pies, I do have some minor annoyances that I haven’t been able to adjust in the settings. The biggest is going to the top or bottom of a file. In most apps Command-Up or Command-Down takes you to the top or bottom. This is not the case for PhpStorm and I have no idea how to change it.\n\nOf course a big complaint I keep hearing is that PhpStorm is slow. At first I noticed those extra milliseconds but it more than makes up for this in all it’s other features. Now I am so accustomed that I rarely even notice.\n\nWrap Up\n\nAs you can see I’m fond of PhpStorm and the future looks bright. JetBrains are receptive to feedback and are always improving. This gives me reassurance that it isn’t going to be abandoned like some other editors. Cough\n\nfrom : http://laravel-news.com/2014/03/phpstorm-tips-and-tricks/","source":"_posts/e8-bd-ac-phpstorm-tips-and-tricks.md","raw":"---\ntitle: '[转] PhpStorm Tips and Tricks'\ntags:\n  - php\n  - phpstorm\nid: 2187\ncategories:\n  - PHP\ndate: 2014-08-25 11:18:10\n---\n\nPhpStorm is my code editor of choice and it’s robust. Almost to powerful because it has an immense set of features and settings. I wanted to show you some of the tips and tricks I have learned over the past few months and my workflow.\n\nKeymap\n\nPhpStorm allows you to rebind every keybinding and even add bindings to features that are not mapped. This means you can set it up to perfectly match your existing workflow, and if moving from another editor you will feel right at home with just a few minutes of setup time.\n\nWay back in 2001 is when I first started down the rabbit hole of web development. Since that time I’ve used a handful of primary editors with Sublime being the latest. I am so accustomed to it that I duplicated Sublimes keybindings to PhpStorm. Here is a full list of all my customized keys:\n\nCommand-p – Search Everywhere\nCommand-r – Methods in file\nAlt-Command-p – Switch Projects\nCommand-3 – Open the integrated terminal\nAs you can see I didn’t customize a lot, just made it more comfortable.\n\nPreferences\n<!--more-->\n\nThe preferences are vast, you can customize so much that it’s impossible to cover everything. Here are the custom changes I settled on:\n\nComing from Sublime Text a major feature I used was selecting a word and hitting a single quote or double quote to surround the selected text. PhpStorm enables this from the Preferences -> IDE -> Editor -> Smart Keys -> Surround Selection on typing quote or brace.\nPreferences -> IDE -> Editor -> Appearance -> Show method separators. This puts a line between methods to give them a more blocky feel. Reminds me of my old CodeIgniter days and its docblocks.\nPreferences -> IDE -> Editor -> Auto Import. I checked all these which will convert a full namespaces into use statements. For example typing: ShoppingPaymentGateway moves this into a use ShoppingPaymentGateway statement and leaves Gateway at the caret position. This makes the code feel cleaner to me.\nSetup Laravel live templates. Koomai keeps adding useful templates and pressing CMD+J will show the popup that you can easily search for what you are looking for.\nImproving the workflow\n\nMy current workflow is I open my project, launch the integrated terminal and run grunt watch. Next hide the terminal and start my day coding. I use the built-in VCS operations and I have tasks setup to pull issues from GitHub and Trello cards. From here it’s just basic operations. Open files, search, find usages, and go to declaration. Here is the list of features I use the most (Help -> Productivity Guide):\n\nPhpStorm Productivity Guide\nPhpStorm Productivity Guide\nNow that I have a few months of using it under my belt I’m ready to go to the next level. But the question I always have is what do I want? What would improve my personal workflow? What is the name of the option I’m looking for? Nine times out of ten PhpStorm has it, but I struggle articulating what I’m looking for to find it in the docs.\n\nTo help me improve and find some power features I decided to ask on Twitter and had some great responses that I’m going to share here:\n\nNithin Meppurathu\n\nSelect code in a method then hit ALT+CMD+M to create a new method from selection.\nYou can create an interface from any class. Refactor -> Extract -> Interface\nJeffrey Way\n\nCommand/Control+Shift+Backspace. This will take you to your last edit point.\n\nAbhimanyu Sharma\n\nPress Ctrl+Alt+L to reformat the code.\nUse ‘Source code Pro‘ font it’s looks great.\nUse ‘Key Promoter‘ plugin to get reminder of keyboard shortcuts\nRyan\n\nDouble press “Shift” brings up a global search. Very useful.\n\nKennon Bickhart\n\nThere are a few that I have found super useful so far.\n\nCMD+SHIFT+A – Find Action… It’s similar to CMD+SHIFT+P in Sublime. Allows you to search for functionality in the editor.\nSHIFT+SHIFT – Search Everywhere – A beefier version of Sublime’s CMD+P\nSetup your coding standards in Preferences > Code Style. Then when in a file, hit CMD+OPT+L to format the whole file, or selected code, to those standards. I still miss Sublime’s Abacus plugin, since PhpStorm isn’t as good as aligning variable signs, but it works well enough.\nCTRL+OPT+I – Auto-indent Lines. – Doesn’t tweak your coding style, just properly indents the code you have typed.\nGareth Evans\n\nThe remote bash commands are really useful. I have one set up with a key command that will start behat tests on a VM or remote machine of the feature file that’s currently in focus prompting you for additional params!\n\nPatrick Noonan\n\nIf your cursor is on a function or class name, hit command+B to jump to its declaration.\n\nThese are some great tips and I find it interesting how much different everyones workflow is. For me what made me switch to PhpStorm in the first place was not the PHP support. It was the CSS, HTML, JavaScript, and CoffeeScript. I love the CSS autocomplete, the showing applied styles, and the refactoring. These are powerful features you can’t get outside of an IDE.\n\nAnnoyances\n\nIt isn’t all cakes and pies, I do have some minor annoyances that I haven’t been able to adjust in the settings. The biggest is going to the top or bottom of a file. In most apps Command-Up or Command-Down takes you to the top or bottom. This is not the case for PhpStorm and I have no idea how to change it.\n\nOf course a big complaint I keep hearing is that PhpStorm is slow. At first I noticed those extra milliseconds but it more than makes up for this in all it’s other features. Now I am so accustomed that I rarely even notice.\n\nWrap Up\n\nAs you can see I’m fond of PhpStorm and the future looks bright. JetBrains are receptive to feedback and are always improving. This gives me reassurance that it isn’t going to be abandoned like some other editors. Cough\n\nfrom : http://laravel-news.com/2014/03/phpstorm-tips-and-tricks/","slug":"e8-bd-ac-phpstorm-tips-and-tricks","published":1,"updated":"2018-01-13T05:07:00.493Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjccw7xa1004gaqcrl8ft32nm","content":"<p>PhpStorm is my code editor of choice and it’s robust. Almost to powerful because it has an immense set of features and settings. I wanted to show you some of the tips and tricks I have learned over the past few months and my workflow.</p>\n<p>Keymap</p>\n<p>PhpStorm allows you to rebind every keybinding and even add bindings to features that are not mapped. This means you can set it up to perfectly match your existing workflow, and if moving from another editor you will feel right at home with just a few minutes of setup time.</p>\n<p>Way back in 2001 is when I first started down the rabbit hole of web development. Since that time I’ve used a handful of primary editors with Sublime being the latest. I am so accustomed to it that I duplicated Sublimes keybindings to PhpStorm. Here is a full list of all my customized keys:</p>\n<p>Command-p – Search Everywhere<br>Command-r – Methods in file<br>Alt-Command-p – Switch Projects<br>Command-3 – Open the integrated terminal<br>As you can see I didn’t customize a lot, just made it more comfortable.</p>\n<p>Preferences<br><a id=\"more\"></a></p>\n<p>The preferences are vast, you can customize so much that it’s impossible to cover everything. Here are the custom changes I settled on:</p>\n<p>Coming from Sublime Text a major feature I used was selecting a word and hitting a single quote or double quote to surround the selected text. PhpStorm enables this from the Preferences -&gt; IDE -&gt; Editor -&gt; Smart Keys -&gt; Surround Selection on typing quote or brace.<br>Preferences -&gt; IDE -&gt; Editor -&gt; Appearance -&gt; Show method separators. This puts a line between methods to give them a more blocky feel. Reminds me of my old CodeIgniter days and its docblocks.<br>Preferences -&gt; IDE -&gt; Editor -&gt; Auto Import. I checked all these which will convert a full namespaces into use statements. For example typing: ShoppingPaymentGateway moves this into a use ShoppingPaymentGateway statement and leaves Gateway at the caret position. This makes the code feel cleaner to me.<br>Setup Laravel live templates. Koomai keeps adding useful templates and pressing CMD+J will show the popup that you can easily search for what you are looking for.<br>Improving the workflow</p>\n<p>My current workflow is I open my project, launch the integrated terminal and run grunt watch. Next hide the terminal and start my day coding. I use the built-in VCS operations and I have tasks setup to pull issues from GitHub and Trello cards. From here it’s just basic operations. Open files, search, find usages, and go to declaration. Here is the list of features I use the most (Help -&gt; Productivity Guide):</p>\n<p>PhpStorm Productivity Guide<br>PhpStorm Productivity Guide<br>Now that I have a few months of using it under my belt I’m ready to go to the next level. But the question I always have is what do I want? What would improve my personal workflow? What is the name of the option I’m looking for? Nine times out of ten PhpStorm has it, but I struggle articulating what I’m looking for to find it in the docs.</p>\n<p>To help me improve and find some power features I decided to ask on Twitter and had some great responses that I’m going to share here:</p>\n<p>Nithin Meppurathu</p>\n<p>Select code in a method then hit ALT+CMD+M to create a new method from selection.<br>You can create an interface from any class. Refactor -&gt; Extract -&gt; Interface<br>Jeffrey Way</p>\n<p>Command/Control+Shift+Backspace. This will take you to your last edit point.</p>\n<p>Abhimanyu Sharma</p>\n<p>Press Ctrl+Alt+L to reformat the code.<br>Use ‘Source code Pro‘ font it’s looks great.<br>Use ‘Key Promoter‘ plugin to get reminder of keyboard shortcuts<br>Ryan</p>\n<p>Double press “Shift” brings up a global search. Very useful.</p>\n<p>Kennon Bickhart</p>\n<p>There are a few that I have found super useful so far.</p>\n<p>CMD+SHIFT+A – Find Action… It’s similar to CMD+SHIFT+P in Sublime. Allows you to search for functionality in the editor.<br>SHIFT+SHIFT – Search Everywhere – A beefier version of Sublime’s CMD+P<br>Setup your coding standards in Preferences &gt; Code Style. Then when in a file, hit CMD+OPT+L to format the whole file, or selected code, to those standards. I still miss Sublime’s Abacus plugin, since PhpStorm isn’t as good as aligning variable signs, but it works well enough.<br>CTRL+OPT+I – Auto-indent Lines. – Doesn’t tweak your coding style, just properly indents the code you have typed.<br>Gareth Evans</p>\n<p>The remote bash commands are really useful. I have one set up with a key command that will start behat tests on a VM or remote machine of the feature file that’s currently in focus prompting you for additional params!</p>\n<p>Patrick Noonan</p>\n<p>If your cursor is on a function or class name, hit command+B to jump to its declaration.</p>\n<p>These are some great tips and I find it interesting how much different everyones workflow is. For me what made me switch to PhpStorm in the first place was not the PHP support. It was the CSS, HTML, JavaScript, and CoffeeScript. I love the CSS autocomplete, the showing applied styles, and the refactoring. These are powerful features you can’t get outside of an IDE.</p>\n<p>Annoyances</p>\n<p>It isn’t all cakes and pies, I do have some minor annoyances that I haven’t been able to adjust in the settings. The biggest is going to the top or bottom of a file. In most apps Command-Up or Command-Down takes you to the top or bottom. This is not the case for PhpStorm and I have no idea how to change it.</p>\n<p>Of course a big complaint I keep hearing is that PhpStorm is slow. At first I noticed those extra milliseconds but it more than makes up for this in all it’s other features. Now I am so accustomed that I rarely even notice.</p>\n<p>Wrap Up</p>\n<p>As you can see I’m fond of PhpStorm and the future looks bright. JetBrains are receptive to feedback and are always improving. This gives me reassurance that it isn’t going to be abandoned like some other editors. Cough</p>\n<p>from : <a href=\"http://laravel-news.com/2014/03/phpstorm-tips-and-tricks/\" target=\"_blank\" rel=\"noopener\">http://laravel-news.com/2014/03/phpstorm-tips-and-tricks/</a></p>\n","site":{"data":{}},"excerpt":"<p>PhpStorm is my code editor of choice and it’s robust. Almost to powerful because it has an immense set of features and settings. I wanted to show you some of the tips and tricks I have learned over the past few months and my workflow.</p>\n<p>Keymap</p>\n<p>PhpStorm allows you to rebind every keybinding and even add bindings to features that are not mapped. This means you can set it up to perfectly match your existing workflow, and if moving from another editor you will feel right at home with just a few minutes of setup time.</p>\n<p>Way back in 2001 is when I first started down the rabbit hole of web development. Since that time I’ve used a handful of primary editors with Sublime being the latest. I am so accustomed to it that I duplicated Sublimes keybindings to PhpStorm. Here is a full list of all my customized keys:</p>\n<p>Command-p – Search Everywhere<br>Command-r – Methods in file<br>Alt-Command-p – Switch Projects<br>Command-3 – Open the integrated terminal<br>As you can see I didn’t customize a lot, just made it more comfortable.</p>\n<p>Preferences<br>","more":"</p>\n<p>The preferences are vast, you can customize so much that it’s impossible to cover everything. Here are the custom changes I settled on:</p>\n<p>Coming from Sublime Text a major feature I used was selecting a word and hitting a single quote or double quote to surround the selected text. PhpStorm enables this from the Preferences -&gt; IDE -&gt; Editor -&gt; Smart Keys -&gt; Surround Selection on typing quote or brace.<br>Preferences -&gt; IDE -&gt; Editor -&gt; Appearance -&gt; Show method separators. This puts a line between methods to give them a more blocky feel. Reminds me of my old CodeIgniter days and its docblocks.<br>Preferences -&gt; IDE -&gt; Editor -&gt; Auto Import. I checked all these which will convert a full namespaces into use statements. For example typing: ShoppingPaymentGateway moves this into a use ShoppingPaymentGateway statement and leaves Gateway at the caret position. This makes the code feel cleaner to me.<br>Setup Laravel live templates. Koomai keeps adding useful templates and pressing CMD+J will show the popup that you can easily search for what you are looking for.<br>Improving the workflow</p>\n<p>My current workflow is I open my project, launch the integrated terminal and run grunt watch. Next hide the terminal and start my day coding. I use the built-in VCS operations and I have tasks setup to pull issues from GitHub and Trello cards. From here it’s just basic operations. Open files, search, find usages, and go to declaration. Here is the list of features I use the most (Help -&gt; Productivity Guide):</p>\n<p>PhpStorm Productivity Guide<br>PhpStorm Productivity Guide<br>Now that I have a few months of using it under my belt I’m ready to go to the next level. But the question I always have is what do I want? What would improve my personal workflow? What is the name of the option I’m looking for? Nine times out of ten PhpStorm has it, but I struggle articulating what I’m looking for to find it in the docs.</p>\n<p>To help me improve and find some power features I decided to ask on Twitter and had some great responses that I’m going to share here:</p>\n<p>Nithin Meppurathu</p>\n<p>Select code in a method then hit ALT+CMD+M to create a new method from selection.<br>You can create an interface from any class. Refactor -&gt; Extract -&gt; Interface<br>Jeffrey Way</p>\n<p>Command/Control+Shift+Backspace. This will take you to your last edit point.</p>\n<p>Abhimanyu Sharma</p>\n<p>Press Ctrl+Alt+L to reformat the code.<br>Use ‘Source code Pro‘ font it’s looks great.<br>Use ‘Key Promoter‘ plugin to get reminder of keyboard shortcuts<br>Ryan</p>\n<p>Double press “Shift” brings up a global search. Very useful.</p>\n<p>Kennon Bickhart</p>\n<p>There are a few that I have found super useful so far.</p>\n<p>CMD+SHIFT+A – Find Action… It’s similar to CMD+SHIFT+P in Sublime. Allows you to search for functionality in the editor.<br>SHIFT+SHIFT – Search Everywhere – A beefier version of Sublime’s CMD+P<br>Setup your coding standards in Preferences &gt; Code Style. Then when in a file, hit CMD+OPT+L to format the whole file, or selected code, to those standards. I still miss Sublime’s Abacus plugin, since PhpStorm isn’t as good as aligning variable signs, but it works well enough.<br>CTRL+OPT+I – Auto-indent Lines. – Doesn’t tweak your coding style, just properly indents the code you have typed.<br>Gareth Evans</p>\n<p>The remote bash commands are really useful. I have one set up with a key command that will start behat tests on a VM or remote machine of the feature file that’s currently in focus prompting you for additional params!</p>\n<p>Patrick Noonan</p>\n<p>If your cursor is on a function or class name, hit command+B to jump to its declaration.</p>\n<p>These are some great tips and I find it interesting how much different everyones workflow is. For me what made me switch to PhpStorm in the first place was not the PHP support. It was the CSS, HTML, JavaScript, and CoffeeScript. I love the CSS autocomplete, the showing applied styles, and the refactoring. These are powerful features you can’t get outside of an IDE.</p>\n<p>Annoyances</p>\n<p>It isn’t all cakes and pies, I do have some minor annoyances that I haven’t been able to adjust in the settings. The biggest is going to the top or bottom of a file. In most apps Command-Up or Command-Down takes you to the top or bottom. This is not the case for PhpStorm and I have no idea how to change it.</p>\n<p>Of course a big complaint I keep hearing is that PhpStorm is slow. At first I noticed those extra milliseconds but it more than makes up for this in all it’s other features. Now I am so accustomed that I rarely even notice.</p>\n<p>Wrap Up</p>\n<p>As you can see I’m fond of PhpStorm and the future looks bright. JetBrains are receptive to feedback and are always improving. This gives me reassurance that it isn’t going to be abandoned like some other editors. Cough</p>\n<p>from : <a href=\"http://laravel-news.com/2014/03/phpstorm-tips-and-tricks/\" target=\"_blank\" rel=\"noopener\">http://laravel-news.com/2014/03/phpstorm-tips-and-tricks/</a></p>"},{"title":"PHP 零碎知识总结","id":"1517","date":"2014-03-25T07:59:01.000Z","_content":"\n1\\. 8%(-2)=0 ， 8%(-3.1)=2 ，8%(-3.9)=2\nphp在模运算时会先对除数取整，3.1为3，3.9也为3\\. 8=（-2）*（-4），所以为0\n2\\. 用PHP打印出前一天的时间格式是2006-5-10 22:21:21\necho date('Y-m-d H:i:s',strtotime('-1 day'));","source":"_posts/e9-9b-b6-e7-a2-8e-e7-9f-a5-e8-af-86-e6-80-bb-e7-bb-93php.md","raw":"---\ntitle: PHP 零碎知识总结\nid: 1517\ncategories:\n  - PHP\ndate: 2014-03-25 15:59:01\ntags:\n---\n\n1\\. 8%(-2)=0 ， 8%(-3.1)=2 ，8%(-3.9)=2\nphp在模运算时会先对除数取整，3.1为3，3.9也为3\\. 8=（-2）*（-4），所以为0\n2\\. 用PHP打印出前一天的时间格式是2006-5-10 22:21:21\necho date('Y-m-d H:i:s',strtotime('-1 day'));","slug":"e9-9b-b6-e7-a2-8e-e7-9f-a5-e8-af-86-e6-80-bb-e7-bb-93php","published":1,"updated":"2018-01-13T05:07:00.455Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjccw7xa3004kaqcrh3lwglel","content":"<p>1. 8%(-2)=0 ， 8%(-3.1)=2 ，8%(-3.9)=2<br>php在模运算时会先对除数取整，3.1为3，3.9也为3. 8=（-2）*（-4），所以为0<br>2. 用PHP打印出前一天的时间格式是2006-5-10 22:21:21<br>echo date(‘Y-m-d H:i:s’,strtotime(‘-1 day’));</p>\n","site":{"data":{}},"excerpt":"","more":"<p>1. 8%(-2)=0 ， 8%(-3.1)=2 ，8%(-3.9)=2<br>php在模运算时会先对除数取整，3.1为3，3.9也为3. 8=（-2）*（-4），所以为0<br>2. 用PHP打印出前一天的时间格式是2006-5-10 22:21:21<br>echo date(‘Y-m-d H:i:s’,strtotime(‘-1 day’));</p>\n"},{"title":"[转] React/React Native 的ES5 ES6写法对照表","id":"2595","date":"2016-06-10T01:25:57.000Z","_content":"\n很多React/React Native的初学者都被ES6的问题迷惑：各路大神都建议我们直接学习ES6的语法(class Foo extends React.Component)，然而网上搜到的很多教程和例子都是ES5版本的，所以很多人在学习的时候连照猫画虎都不知道怎么做。今天在此整理了一些ES5和ES6的写法对照表，希望大家以后读到ES5的代码，也能通过对照，在ES6下实现相同的功能。\n\n模块\n引用\n在ES5里，如果使用CommonJS标准，引入React包基本通过require进行，代码类似这样：\n\n`//ES5\nvar React = require(\"react\");\nvar {\n    Component,\n    PropTypes\n} = React;  //引用React抽象组件\n\nvar ReactNative = require(\"react-native\");\nvar {\n    Image,\n    Text,\n} = ReactNative;  //引用具体的React Native组件`\n在ES6里，import写法更为标准\n\n`//ES6\nimport React, { \n    Component,\n    PropTypes,\n} from 'react';\nimport {\n    Image,\n    Text\n} from 'react-native'`\n注意在React Native里，import直到0.12+才能正常运作。\n\n导出单个类\n在ES5里，要导出一个类给别的模块用，一般通过module.exports来导出\n<!--more-->\n\n`//ES5\nvar MyComponent = React.createClass({\n    ...\n});\nmodule.exports = MyComponent;`\n在ES6里，通常用export default来实现相同的功能：\n\n`//ES6\nexport default class MyComponent extends Component{\n    ...\n}`\n引用的时候也类似：\n\n`//ES5\nvar MyComponent = require('./MyComponent');\n\n//ES6\nimport MyComponent from './MyComponent';`\n定义组件\n在ES5里，通常通过React.createClass来定义一个组件类，像这样：\n\n`//ES5\nvar Photo = React.createClass({\n    render: function() {\n        return (\n            <Image source={this.props.source} />\n        );\n    },\n});`\n在ES6里，我们通过定义一个继承自React.Component的class来定义一个组件类，像这样：\n\n`//ES6\nclass Photo extends React.Component {\n    render() {\n        return (\n            <Image source={this.props.source} />\n        );\n    }\n}`\n给组件定义方法\n从上面的例子里可以看到，给组件定义方法不再用 名字: function()的写法，而是直接用名字()，在方法的最后也不能有逗号了。\n\n`//ES5 \nvar Photo = React.createClass({\n    componentWillMount: function(){\n\n    },\n    render: function() {\n        return (\n            <Image source={this.props.source} />\n        );\n    },\n});\n//ES6\nclass Photo extends React.Component {\n    componentWillMount() {\n\n    }\n    render() {\n        return (\n            <Image source={this.props.source} />\n        );\n    }\n}`\n定义组件的属性类型和默认属性\n在ES5里，属性类型和默认属性分别通过propTypes成员和getDefaultProps方法来实现\n\n`//ES5 \nvar Video = React.createClass({\n    getDefaultProps: function() {\n        return {\n            autoPlay: false,\n            maxLoops: 10,\n        };\n    },\n    propTypes: {\n        autoPlay: React.PropTypes.bool.isRequired,\n        maxLoops: React.PropTypes.number.isRequired,\n        posterFrameSrc: React.PropTypes.string.isRequired,\n        videoSrc: React.PropTypes.string.isRequired,\n    },\n    render: function() {\n        return (\n            <View />\n        );\n    },\n});`\n在ES6里，可以统一使用static成员来实现\n\n`//ES6\nclass Video extends React.Component {\n    static defaultProps = {\n        autoPlay: false,\n        maxLoops: 10,\n    };  // 注意这里有分号\n    static propTypes = {\n        autoPlay: React.PropTypes.bool.isRequired,\n        maxLoops: React.PropTypes.number.isRequired,\n        posterFrameSrc: React.PropTypes.string.isRequired,\n        videoSrc: React.PropTypes.string.isRequired,\n    };  // 注意这里有分号\n    render() {\n        return (\n            <View />\n        );\n    } // 注意这里既没有分号也没有逗号\n}`\n也有人这么写，虽然不推荐，但读到代码的时候你应当能明白它的意思：\n\n`//ES6\nclass Video extends React.Component {\n    render() {\n        return (\n            <View />\n        );\n    }\n}\nVideo.defaultProps = {\n    autoPlay: false,\n    maxLoops: 10,\n};\nVideo.propTypes = {\n    autoPlay: React.PropTypes.bool.isRequired,\n    maxLoops: React.PropTypes.number.isRequired,\n    posterFrameSrc: React.PropTypes.string.isRequired,\n    videoSrc: React.PropTypes.string.isRequired,\n};`\n注意: 对React开发者而言，static成员在IE10及之前版本不能被继承，而在IE11和其它浏览器上可以，这有时候会带来一些问题。React Native开发者可以不用担心这个问题。\n\n初始化state\nES5下情况类似，\n\n`//ES5 \nvar Video = React.createClass({\n    getInitialState: function() {\n        return {\n            loopsRemaining: this.props.maxLoops,\n        };\n    },\n})`\nES6下，有两种写法：\n`\n//ES6\nclass Video extends React.Component {\n    state = {\n        loopsRemaining: this.props.maxLoops,\n    }\n}`\n不过我们推荐更易理解的在构造函数中初始化（这样你还可以根据需要做一些计算）：\n\n`//ES6\nclass Video extends React.Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            loopsRemaining: this.props.maxLoops,\n        };\n    }\n}`\n把方法作为回调提供\n很多习惯于ES6的用户反而不理解在ES5下可以这么做：\n\n`//ES5\nvar PostInfo = React.createClass({\n    handleOptionsButtonClick: function(e) {\n        // Here, 'this' refers to the component instance.\n        this.setState({showOptionsModal: true});\n    },\n    render: function(){\n        return (\n            <TouchableHighlight onPress={this.handleOptionsButtonClick}>\n                <Text>{this.props.label}</Text>\n            </TouchableHighlight>\n        )\n    },\n});`\n在ES5下，React.createClass会把所有的方法都bind一遍，这样可以提交到任意的地方作为回调函数，而this不会变化。但官方现在逐步认为这反而是不标准、不易理解的。\n\n在ES6下，你需要通过bind来绑定this引用，或者使用箭头函数（它会绑定当前scope的this引用）来调用\n`\n//ES6\nclass PostInfo extends React.Component\n{\n    handleOptionsButtonClick(e){\n        this.setState({showOptionsModal: true});\n    }\n    render(){\n        return (\n            <TouchableHighlight \n                onPress={this.handleOptionsButtonClick.bind(this)}\n                onPress={e=>this.handleOptionsButtonClick(e)}\n                >\n                <Text>{this.props.label}</Text>\n            </TouchableHighlight>\n        )\n    },\n}`\n箭头函数实际上是在这里定义了一个临时的函数，箭头函数的箭头=>之前是一个空括号、单个的参数名、或用括号括起的多个参数名，而箭头之后可以是一个表达式（作为函数的返回值），或者是用花括号括起的函数体（需要自行通过return来返回值，否则返回的是undefined）。\n`\n// 箭头函数的例子\n()=>1\nv=>v+1\n(a,b)=>a+b\n()=>{\n    alert(\"foo\");\n}\ne=>{\n    if (e == 0){\n        return 0;\n    }\n    return 1000/e;\n}`\n需要注意的是，不论是bind还是箭头函数，每次被执行都返回的是一个新的函数引用，因此如果你还需要函数的引用去做一些别的事情（譬如卸载监听器），那么你必须自己保存这个引用\n\n`// 错误的做法\nclass PauseMenu extends React.Component{\n    componentWillMount(){\n        AppStateIOS.addEventListener('change', this.onAppPaused.bind(this));\n    }\n    componentDidUnmount(){\n        AppStateIOS.removeEventListener('change', this.onAppPaused.bind(this));\n    }\n    onAppPaused(event){\n    }\n}\n// 正确的做法\nclass PauseMenu extends React.Component{\n    constructor(props){\n        super(props);\n        this._onAppPaused = this.onAppPaused.bind(this);\n    }\n    componentWillMount(){\n        AppStateIOS.addEventListener('change', this._onAppPaused);\n    }\n    componentDidUnmount(){\n        AppStateIOS.removeEventListener('change', this._onAppPaused);\n    }\n    onAppPaused(event){\n    }\n}\n从`这个帖子中我们还学习到一种新的做法：\n\n`// 正确的做法\nclass PauseMenu extends React.Component{\n    componentWillMount(){\n        AppStateIOS.addEventListener('change', this.onAppPaused);\n    }\n    componentDidUnmount(){\n        AppStateIOS.removeEventListener('change', this.onAppPaused);\n    }\n    onAppPaused = (event) => {\n        //把方法直接作为一个arrow function的属性来定义，初始化的时候就绑定好了this指针\n    }\n}`\nMixins\n在ES5下，我们经常使用mixin来为我们的类添加一些新的方法，譬如PureRenderMixin\n\n`var PureRenderMixin = require('react-addons-pure-render-mixin');\nReact.createClass({\n  mixins: [PureRenderMixin],\n\n  render: function() {\n    return <div className={this.props.className}>foo</div>;\n  }\n});`\n然而现在官方已经不再打算在ES6里继续推行Mixin，他们说：Mixins Are Dead. Long Live Composition。\n\n尽管如果要继续使用mixin，还是有一些第三方的方案可以用，譬如这个方案\n\n不过官方推荐，对于库编写者而言，应当尽快放弃Mixin的编写方式，上文中提到Sebastian Markbåge的一段代码推荐了一种新的编码方式：\n\n`//Enhance.js\nimport { Component } from \"React\";\n\nexport var Enhance = ComposedComponent => class extends Component {\n    constructor() {\n        this.state = { data: null };\n    }\n    componentDidMount() {\n        this.setState({ data: 'Hello' });\n    }\n    render() {\n        return <ComposedComponent {...this.props} data={this.state.data} />;\n    }\n};\n//HigherOrderComponent.js\nimport { Enhance } from \"./Enhance\";\n\nclass MyComponent {\n    render() {\n        if (!this.data) return <div>Waiting...</div>;\n        return <div>{this.data}</div>;\n    }\n}\n\nexport default Enhance(MyComponent); // Enhanced component`\n用一个“增强函数”，来某个类增加一些方法，并且返回一个新类，这无疑能实现mixin所实现的大部分需求。\n\nES6+带来的其它好处\n解构&属性延展\n结合使用ES6+的解构和属性延展，我们给孩子传递一批属性更为方便了。这个例子把className以外的所有属性传递给div标签：\n`\nclass AutoloadingPostsGrid extends React.Component {\n    render() {\n        var {\n            className,\n            ...others,  // contains all properties of this.props except for className\n        } = this.props;\n        return (\n            <div className={className}>\n                <PostsGrid {...others} />\n                <button onClick={this.handleLoadMoreClick}>Load more</button>\n            </div>\n        );\n    }\n}`\n下面这种写法，则是传递所有属性的同时，用覆盖新的className值：\n`\n<div {...this.props} className=\"override\">\n    …\n</div>`\n这个例子则相反，如果属性中没有包含className，则提供默认的值，而如果属性中已经包含了，则使用属性中的值\n\n`<div className=\"base\" {...this.props}>\n    …\n</div>`\n\nfrom http://reactnative.cn/post/15","source":"_posts/e8-bd-ac-reactreact-native-e7-9a-84es5-es6-e5-86-99-e6-b3-95-e5-af-b9-e7-85-a7-e8-a1-a8.md","raw":"---\ntitle: '[转] React/React Native 的ES5 ES6写法对照表'\ntags:\n  - react\n  - react-native\nid: 2595\ncategories:\n  - React\ndate: 2016-06-10 09:25:57\n---\n\n很多React/React Native的初学者都被ES6的问题迷惑：各路大神都建议我们直接学习ES6的语法(class Foo extends React.Component)，然而网上搜到的很多教程和例子都是ES5版本的，所以很多人在学习的时候连照猫画虎都不知道怎么做。今天在此整理了一些ES5和ES6的写法对照表，希望大家以后读到ES5的代码，也能通过对照，在ES6下实现相同的功能。\n\n模块\n引用\n在ES5里，如果使用CommonJS标准，引入React包基本通过require进行，代码类似这样：\n\n`//ES5\nvar React = require(\"react\");\nvar {\n    Component,\n    PropTypes\n} = React;  //引用React抽象组件\n\nvar ReactNative = require(\"react-native\");\nvar {\n    Image,\n    Text,\n} = ReactNative;  //引用具体的React Native组件`\n在ES6里，import写法更为标准\n\n`//ES6\nimport React, { \n    Component,\n    PropTypes,\n} from 'react';\nimport {\n    Image,\n    Text\n} from 'react-native'`\n注意在React Native里，import直到0.12+才能正常运作。\n\n导出单个类\n在ES5里，要导出一个类给别的模块用，一般通过module.exports来导出\n<!--more-->\n\n`//ES5\nvar MyComponent = React.createClass({\n    ...\n});\nmodule.exports = MyComponent;`\n在ES6里，通常用export default来实现相同的功能：\n\n`//ES6\nexport default class MyComponent extends Component{\n    ...\n}`\n引用的时候也类似：\n\n`//ES5\nvar MyComponent = require('./MyComponent');\n\n//ES6\nimport MyComponent from './MyComponent';`\n定义组件\n在ES5里，通常通过React.createClass来定义一个组件类，像这样：\n\n`//ES5\nvar Photo = React.createClass({\n    render: function() {\n        return (\n            <Image source={this.props.source} />\n        );\n    },\n});`\n在ES6里，我们通过定义一个继承自React.Component的class来定义一个组件类，像这样：\n\n`//ES6\nclass Photo extends React.Component {\n    render() {\n        return (\n            <Image source={this.props.source} />\n        );\n    }\n}`\n给组件定义方法\n从上面的例子里可以看到，给组件定义方法不再用 名字: function()的写法，而是直接用名字()，在方法的最后也不能有逗号了。\n\n`//ES5 \nvar Photo = React.createClass({\n    componentWillMount: function(){\n\n    },\n    render: function() {\n        return (\n            <Image source={this.props.source} />\n        );\n    },\n});\n//ES6\nclass Photo extends React.Component {\n    componentWillMount() {\n\n    }\n    render() {\n        return (\n            <Image source={this.props.source} />\n        );\n    }\n}`\n定义组件的属性类型和默认属性\n在ES5里，属性类型和默认属性分别通过propTypes成员和getDefaultProps方法来实现\n\n`//ES5 \nvar Video = React.createClass({\n    getDefaultProps: function() {\n        return {\n            autoPlay: false,\n            maxLoops: 10,\n        };\n    },\n    propTypes: {\n        autoPlay: React.PropTypes.bool.isRequired,\n        maxLoops: React.PropTypes.number.isRequired,\n        posterFrameSrc: React.PropTypes.string.isRequired,\n        videoSrc: React.PropTypes.string.isRequired,\n    },\n    render: function() {\n        return (\n            <View />\n        );\n    },\n});`\n在ES6里，可以统一使用static成员来实现\n\n`//ES6\nclass Video extends React.Component {\n    static defaultProps = {\n        autoPlay: false,\n        maxLoops: 10,\n    };  // 注意这里有分号\n    static propTypes = {\n        autoPlay: React.PropTypes.bool.isRequired,\n        maxLoops: React.PropTypes.number.isRequired,\n        posterFrameSrc: React.PropTypes.string.isRequired,\n        videoSrc: React.PropTypes.string.isRequired,\n    };  // 注意这里有分号\n    render() {\n        return (\n            <View />\n        );\n    } // 注意这里既没有分号也没有逗号\n}`\n也有人这么写，虽然不推荐，但读到代码的时候你应当能明白它的意思：\n\n`//ES6\nclass Video extends React.Component {\n    render() {\n        return (\n            <View />\n        );\n    }\n}\nVideo.defaultProps = {\n    autoPlay: false,\n    maxLoops: 10,\n};\nVideo.propTypes = {\n    autoPlay: React.PropTypes.bool.isRequired,\n    maxLoops: React.PropTypes.number.isRequired,\n    posterFrameSrc: React.PropTypes.string.isRequired,\n    videoSrc: React.PropTypes.string.isRequired,\n};`\n注意: 对React开发者而言，static成员在IE10及之前版本不能被继承，而在IE11和其它浏览器上可以，这有时候会带来一些问题。React Native开发者可以不用担心这个问题。\n\n初始化state\nES5下情况类似，\n\n`//ES5 \nvar Video = React.createClass({\n    getInitialState: function() {\n        return {\n            loopsRemaining: this.props.maxLoops,\n        };\n    },\n})`\nES6下，有两种写法：\n`\n//ES6\nclass Video extends React.Component {\n    state = {\n        loopsRemaining: this.props.maxLoops,\n    }\n}`\n不过我们推荐更易理解的在构造函数中初始化（这样你还可以根据需要做一些计算）：\n\n`//ES6\nclass Video extends React.Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            loopsRemaining: this.props.maxLoops,\n        };\n    }\n}`\n把方法作为回调提供\n很多习惯于ES6的用户反而不理解在ES5下可以这么做：\n\n`//ES5\nvar PostInfo = React.createClass({\n    handleOptionsButtonClick: function(e) {\n        // Here, 'this' refers to the component instance.\n        this.setState({showOptionsModal: true});\n    },\n    render: function(){\n        return (\n            <TouchableHighlight onPress={this.handleOptionsButtonClick}>\n                <Text>{this.props.label}</Text>\n            </TouchableHighlight>\n        )\n    },\n});`\n在ES5下，React.createClass会把所有的方法都bind一遍，这样可以提交到任意的地方作为回调函数，而this不会变化。但官方现在逐步认为这反而是不标准、不易理解的。\n\n在ES6下，你需要通过bind来绑定this引用，或者使用箭头函数（它会绑定当前scope的this引用）来调用\n`\n//ES6\nclass PostInfo extends React.Component\n{\n    handleOptionsButtonClick(e){\n        this.setState({showOptionsModal: true});\n    }\n    render(){\n        return (\n            <TouchableHighlight \n                onPress={this.handleOptionsButtonClick.bind(this)}\n                onPress={e=>this.handleOptionsButtonClick(e)}\n                >\n                <Text>{this.props.label}</Text>\n            </TouchableHighlight>\n        )\n    },\n}`\n箭头函数实际上是在这里定义了一个临时的函数，箭头函数的箭头=>之前是一个空括号、单个的参数名、或用括号括起的多个参数名，而箭头之后可以是一个表达式（作为函数的返回值），或者是用花括号括起的函数体（需要自行通过return来返回值，否则返回的是undefined）。\n`\n// 箭头函数的例子\n()=>1\nv=>v+1\n(a,b)=>a+b\n()=>{\n    alert(\"foo\");\n}\ne=>{\n    if (e == 0){\n        return 0;\n    }\n    return 1000/e;\n}`\n需要注意的是，不论是bind还是箭头函数，每次被执行都返回的是一个新的函数引用，因此如果你还需要函数的引用去做一些别的事情（譬如卸载监听器），那么你必须自己保存这个引用\n\n`// 错误的做法\nclass PauseMenu extends React.Component{\n    componentWillMount(){\n        AppStateIOS.addEventListener('change', this.onAppPaused.bind(this));\n    }\n    componentDidUnmount(){\n        AppStateIOS.removeEventListener('change', this.onAppPaused.bind(this));\n    }\n    onAppPaused(event){\n    }\n}\n// 正确的做法\nclass PauseMenu extends React.Component{\n    constructor(props){\n        super(props);\n        this._onAppPaused = this.onAppPaused.bind(this);\n    }\n    componentWillMount(){\n        AppStateIOS.addEventListener('change', this._onAppPaused);\n    }\n    componentDidUnmount(){\n        AppStateIOS.removeEventListener('change', this._onAppPaused);\n    }\n    onAppPaused(event){\n    }\n}\n从`这个帖子中我们还学习到一种新的做法：\n\n`// 正确的做法\nclass PauseMenu extends React.Component{\n    componentWillMount(){\n        AppStateIOS.addEventListener('change', this.onAppPaused);\n    }\n    componentDidUnmount(){\n        AppStateIOS.removeEventListener('change', this.onAppPaused);\n    }\n    onAppPaused = (event) => {\n        //把方法直接作为一个arrow function的属性来定义，初始化的时候就绑定好了this指针\n    }\n}`\nMixins\n在ES5下，我们经常使用mixin来为我们的类添加一些新的方法，譬如PureRenderMixin\n\n`var PureRenderMixin = require('react-addons-pure-render-mixin');\nReact.createClass({\n  mixins: [PureRenderMixin],\n\n  render: function() {\n    return <div className={this.props.className}>foo</div>;\n  }\n});`\n然而现在官方已经不再打算在ES6里继续推行Mixin，他们说：Mixins Are Dead. Long Live Composition。\n\n尽管如果要继续使用mixin，还是有一些第三方的方案可以用，譬如这个方案\n\n不过官方推荐，对于库编写者而言，应当尽快放弃Mixin的编写方式，上文中提到Sebastian Markbåge的一段代码推荐了一种新的编码方式：\n\n`//Enhance.js\nimport { Component } from \"React\";\n\nexport var Enhance = ComposedComponent => class extends Component {\n    constructor() {\n        this.state = { data: null };\n    }\n    componentDidMount() {\n        this.setState({ data: 'Hello' });\n    }\n    render() {\n        return <ComposedComponent {...this.props} data={this.state.data} />;\n    }\n};\n//HigherOrderComponent.js\nimport { Enhance } from \"./Enhance\";\n\nclass MyComponent {\n    render() {\n        if (!this.data) return <div>Waiting...</div>;\n        return <div>{this.data}</div>;\n    }\n}\n\nexport default Enhance(MyComponent); // Enhanced component`\n用一个“增强函数”，来某个类增加一些方法，并且返回一个新类，这无疑能实现mixin所实现的大部分需求。\n\nES6+带来的其它好处\n解构&属性延展\n结合使用ES6+的解构和属性延展，我们给孩子传递一批属性更为方便了。这个例子把className以外的所有属性传递给div标签：\n`\nclass AutoloadingPostsGrid extends React.Component {\n    render() {\n        var {\n            className,\n            ...others,  // contains all properties of this.props except for className\n        } = this.props;\n        return (\n            <div className={className}>\n                <PostsGrid {...others} />\n                <button onClick={this.handleLoadMoreClick}>Load more</button>\n            </div>\n        );\n    }\n}`\n下面这种写法，则是传递所有属性的同时，用覆盖新的className值：\n`\n<div {...this.props} className=\"override\">\n    …\n</div>`\n这个例子则相反，如果属性中没有包含className，则提供默认的值，而如果属性中已经包含了，则使用属性中的值\n\n`<div className=\"base\" {...this.props}>\n    …\n</div>`\n\nfrom http://reactnative.cn/post/15","slug":"e8-bd-ac-reactreact-native-e7-9a-84es5-es6-e5-86-99-e6-b3-95-e5-af-b9-e7-85-a7-e8-a1-a8","published":1,"updated":"2018-01-13T05:07:00.496Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjccw7xa5004naqcrmwdn20pt","content":"<p>很多React/React Native的初学者都被ES6的问题迷惑：各路大神都建议我们直接学习ES6的语法(class Foo extends React.Component)，然而网上搜到的很多教程和例子都是ES5版本的，所以很多人在学习的时候连照猫画虎都不知道怎么做。今天在此整理了一些ES5和ES6的写法对照表，希望大家以后读到ES5的代码，也能通过对照，在ES6下实现相同的功能。</p>\n<p>模块<br>引用<br>在ES5里，如果使用CommonJS标准，引入React包基本通过require进行，代码类似这样：</p>\n<p>`//ES5<br>var React = require(“react”);<br>var {<br>    Component,<br>    PropTypes<br>} = React;  //引用React抽象组件</p>\n<p>var ReactNative = require(“react-native”);<br>var {<br>    Image,<br>    Text,<br>} = ReactNative;  //引用具体的React Native组件`<br>在ES6里，import写法更为标准</p>\n<p><code>//ES6\nimport React, { \n    Component,\n    PropTypes,\n} from &#39;react&#39;;\nimport {\n    Image,\n    Text\n} from &#39;react-native&#39;</code><br>注意在React Native里，import直到0.12+才能正常运作。</p>\n<p>导出单个类<br>在ES5里，要导出一个类给别的模块用，一般通过module.exports来导出<br><a id=\"more\"></a></p>\n<p><code>//ES5\nvar MyComponent = React.createClass({\n    ...\n});\nmodule.exports = MyComponent;</code><br>在ES6里，通常用export default来实现相同的功能：</p>\n<p><code>//ES6\nexport default class MyComponent extends Component{\n    ...\n}</code><br>引用的时候也类似：</p>\n<p>`//ES5<br>var MyComponent = require(‘./MyComponent’);</p>\n<p>//ES6<br>import MyComponent from ‘./MyComponent’;`<br>定义组件<br>在ES5里，通常通过React.createClass来定义一个组件类，像这样：</p>\n<p><code>//ES5\nvar Photo = React.createClass({\n    render: function() {\n        return (\n            &lt;Image source={this.props.source} /&gt;\n        );\n    },\n});</code><br>在ES6里，我们通过定义一个继承自React.Component的class来定义一个组件类，像这样：</p>\n<p><code>//ES6\nclass Photo extends React.Component {\n    render() {\n        return (\n            &lt;Image source={this.props.source} /&gt;\n        );\n    }\n}</code><br>给组件定义方法<br>从上面的例子里可以看到，给组件定义方法不再用 名字: function()的写法，而是直接用名字()，在方法的最后也不能有逗号了。</p>\n<p>`//ES5<br>var Photo = React.createClass({<br>    componentWillMount: function(){</p>\n<pre><code>},\nrender: function() {\n    return (\n        &lt;Image source={this.props.source} /&gt;\n    );\n},\n</code></pre><p>});<br>//ES6<br>class Photo extends React.Component {<br>    componentWillMount() {</p>\n<pre><code>}\nrender() {\n    return (\n        &lt;Image source={this.props.source} /&gt;\n    );\n}\n</code></pre><p>}`<br>定义组件的属性类型和默认属性<br>在ES5里，属性类型和默认属性分别通过propTypes成员和getDefaultProps方法来实现</p>\n<p><code>//ES5 \nvar Video = React.createClass({\n    getDefaultProps: function() {\n        return {\n            autoPlay: false,\n            maxLoops: 10,\n        };\n    },\n    propTypes: {\n        autoPlay: React.PropTypes.bool.isRequired,\n        maxLoops: React.PropTypes.number.isRequired,\n        posterFrameSrc: React.PropTypes.string.isRequired,\n        videoSrc: React.PropTypes.string.isRequired,\n    },\n    render: function() {\n        return (\n            &lt;View /&gt;\n        );\n    },\n});</code><br>在ES6里，可以统一使用static成员来实现</p>\n<p><code>//ES6\nclass Video extends React.Component {\n    static defaultProps = {\n        autoPlay: false,\n        maxLoops: 10,\n    };  // 注意这里有分号\n    static propTypes = {\n        autoPlay: React.PropTypes.bool.isRequired,\n        maxLoops: React.PropTypes.number.isRequired,\n        posterFrameSrc: React.PropTypes.string.isRequired,\n        videoSrc: React.PropTypes.string.isRequired,\n    };  // 注意这里有分号\n    render() {\n        return (\n            &lt;View /&gt;\n        );\n    } // 注意这里既没有分号也没有逗号\n}</code><br>也有人这么写，虽然不推荐，但读到代码的时候你应当能明白它的意思：</p>\n<p><code>//ES6\nclass Video extends React.Component {\n    render() {\n        return (\n            &lt;View /&gt;\n        );\n    }\n}\nVideo.defaultProps = {\n    autoPlay: false,\n    maxLoops: 10,\n};\nVideo.propTypes = {\n    autoPlay: React.PropTypes.bool.isRequired,\n    maxLoops: React.PropTypes.number.isRequired,\n    posterFrameSrc: React.PropTypes.string.isRequired,\n    videoSrc: React.PropTypes.string.isRequired,\n};</code><br>注意: 对React开发者而言，static成员在IE10及之前版本不能被继承，而在IE11和其它浏览器上可以，这有时候会带来一些问题。React Native开发者可以不用担心这个问题。</p>\n<p>初始化state<br>ES5下情况类似，</p>\n<p><code>//ES5 \nvar Video = React.createClass({\n    getInitialState: function() {\n        return {\n            loopsRemaining: this.props.maxLoops,\n        };\n    },\n})</code><br>ES6下，有两种写法：<br><code>//ES6\nclass Video extends React.Component {\n    state = {\n        loopsRemaining: this.props.maxLoops,\n    }\n}</code><br>不过我们推荐更易理解的在构造函数中初始化（这样你还可以根据需要做一些计算）：</p>\n<p><code>//ES6\nclass Video extends React.Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            loopsRemaining: this.props.maxLoops,\n        };\n    }\n}</code><br>把方法作为回调提供<br>很多习惯于ES6的用户反而不理解在ES5下可以这么做：</p>\n<p><code>//ES5\nvar PostInfo = React.createClass({\n    handleOptionsButtonClick: function(e) {\n        // Here, &#39;this&#39; refers to the component instance.\n        this.setState({showOptionsModal: true});\n    },\n    render: function(){\n        return (\n            &lt;TouchableHighlight onPress={this.handleOptionsButtonClick}&gt;\n                &lt;Text&gt;{this.props.label}&lt;/Text&gt;\n            &lt;/TouchableHighlight&gt;\n        )\n    },\n});</code><br>在ES5下，React.createClass会把所有的方法都bind一遍，这样可以提交到任意的地方作为回调函数，而this不会变化。但官方现在逐步认为这反而是不标准、不易理解的。</p>\n<p>在ES6下，你需要通过bind来绑定this引用，或者使用箭头函数（它会绑定当前scope的this引用）来调用<br><code>//ES6\nclass PostInfo extends React.Component\n{\n    handleOptionsButtonClick(e){\n        this.setState({showOptionsModal: true});\n    }\n    render(){\n        return (\n            &lt;TouchableHighlight \n                onPress={this.handleOptionsButtonClick.bind(this)}\n                onPress={e=&gt;this.handleOptionsButtonClick(e)}\n                &gt;\n                &lt;Text&gt;{this.props.label}&lt;/Text&gt;\n            &lt;/TouchableHighlight&gt;\n        )\n    },\n}</code><br>箭头函数实际上是在这里定义了一个临时的函数，箭头函数的箭头=&gt;之前是一个空括号、单个的参数名、或用括号括起的多个参数名，而箭头之后可以是一个表达式（作为函数的返回值），或者是用花括号括起的函数体（需要自行通过return来返回值，否则返回的是undefined）。<br><code>// 箭头函数的例子\n()=&gt;1\nv=&gt;v+1\n(a,b)=&gt;a+b\n()=&gt;{\n    alert(&quot;foo&quot;);\n}\ne=&gt;{\n    if (e == 0){\n        return 0;\n    }\n    return 1000/e;\n}</code><br>需要注意的是，不论是bind还是箭头函数，每次被执行都返回的是一个新的函数引用，因此如果你还需要函数的引用去做一些别的事情（譬如卸载监听器），那么你必须自己保存这个引用</p>\n<p><code>// 错误的做法\nclass PauseMenu extends React.Component{\n    componentWillMount(){\n        AppStateIOS.addEventListener(&#39;change&#39;, this.onAppPaused.bind(this));\n    }\n    componentDidUnmount(){\n        AppStateIOS.removeEventListener(&#39;change&#39;, this.onAppPaused.bind(this));\n    }\n    onAppPaused(event){\n    }\n}\n// 正确的做法\nclass PauseMenu extends React.Component{\n    constructor(props){\n        super(props);\n        this._onAppPaused = this.onAppPaused.bind(this);\n    }\n    componentWillMount(){\n        AppStateIOS.addEventListener(&#39;change&#39;, this._onAppPaused);\n    }\n    componentDidUnmount(){\n        AppStateIOS.removeEventListener(&#39;change&#39;, this._onAppPaused);\n    }\n    onAppPaused(event){\n    }\n}\n从</code>这个帖子中我们还学习到一种新的做法：</p>\n<p><code>// 正确的做法\nclass PauseMenu extends React.Component{\n    componentWillMount(){\n        AppStateIOS.addEventListener(&#39;change&#39;, this.onAppPaused);\n    }\n    componentDidUnmount(){\n        AppStateIOS.removeEventListener(&#39;change&#39;, this.onAppPaused);\n    }\n    onAppPaused = (event) =&gt; {\n        //把方法直接作为一个arrow function的属性来定义，初始化的时候就绑定好了this指针\n    }\n}</code><br>Mixins<br>在ES5下，我们经常使用mixin来为我们的类添加一些新的方法，譬如PureRenderMixin</p>\n<p>`var PureRenderMixin = require(‘react-addons-pure-render-mixin’);<br>React.createClass({<br>  mixins: [PureRenderMixin],</p>\n<p>  render: function() {<br>    return <div classname=\"{this.props.className}\">foo</div>;<br>  }<br>});`<br>然而现在官方已经不再打算在ES6里继续推行Mixin，他们说：Mixins Are Dead. Long Live Composition。</p>\n<p>尽管如果要继续使用mixin，还是有一些第三方的方案可以用，譬如这个方案</p>\n<p>不过官方推荐，对于库编写者而言，应当尽快放弃Mixin的编写方式，上文中提到Sebastian Markbåge的一段代码推荐了一种新的编码方式：</p>\n<p>`//Enhance.js<br>import { Component } from “React”;</p>\n<p>export var Enhance = ComposedComponent =&gt; class extends Component {<br>    constructor() {<br>        this.state = { data: null };<br>    }<br>    componentDidMount() {<br>        this.setState({ data: ‘Hello’ });<br>    }<br>    render() {<br>        return <composedcomponent {...this.props}=\"\" data=\"{this.state.data}\">;<br>    }<br>};<br>//HigherOrderComponent.js<br>import { Enhance } from “./Enhance”;</composedcomponent></p>\n<p>class MyComponent {<br>    render() {<br>        if (!this.data) return <div>Waiting…</div>;<br>        return <div>{this.data}</div>;<br>    }<br>}</p>\n<p>export default Enhance(MyComponent); // Enhanced component`<br>用一个“增强函数”，来某个类增加一些方法，并且返回一个新类，这无疑能实现mixin所实现的大部分需求。</p>\n<p>ES6+带来的其它好处<br>解构&amp;属性延展<br>结合使用ES6+的解构和属性延展，我们给孩子传递一批属性更为方便了。这个例子把className以外的所有属性传递给div标签：<br><code>class AutoloadingPostsGrid extends React.Component {\n    render() {\n        var {\n            className,\n            ...others,  // contains all properties of this.props except for className\n        } = this.props;\n        return (\n            &lt;div className={className}&gt;\n                &lt;PostsGrid {...others} /&gt;\n                &lt;button onClick={this.handleLoadMoreClick}&gt;Load more&lt;/button&gt;\n            &lt;/div&gt;\n        );\n    }\n}</code><br>下面这种写法，则是传递所有属性的同时，用覆盖新的className值：<br>`</p>\n<p><div {...this.props}=\"\" classname=\"override\"><br>    …<br></div>`<br>这个例子则相反，如果属性中没有包含className，则提供默认的值，而如果属性中已经包含了，则使用属性中的值</p>\n<p><code>&lt;div className=&quot;base&quot; {...this.props}&gt;\n    …\n&lt;/div&gt;</code></p>\n<p>from <a href=\"http://reactnative.cn/post/15\" target=\"_blank\" rel=\"noopener\">http://reactnative.cn/post/15</a></p>\n","site":{"data":{}},"excerpt":"<p>很多React/React Native的初学者都被ES6的问题迷惑：各路大神都建议我们直接学习ES6的语法(class Foo extends React.Component)，然而网上搜到的很多教程和例子都是ES5版本的，所以很多人在学习的时候连照猫画虎都不知道怎么做。今天在此整理了一些ES5和ES6的写法对照表，希望大家以后读到ES5的代码，也能通过对照，在ES6下实现相同的功能。</p>\n<p>模块<br>引用<br>在ES5里，如果使用CommonJS标准，引入React包基本通过require进行，代码类似这样：</p>\n<p>`//ES5<br>var React = require(“react”);<br>var {<br>    Component,<br>    PropTypes<br>} = React;  //引用React抽象组件</p>\n<p>var ReactNative = require(“react-native”);<br>var {<br>    Image,<br>    Text,<br>} = ReactNative;  //引用具体的React Native组件`<br>在ES6里，import写法更为标准</p>\n<p><code>//ES6\nimport React, { \n    Component,\n    PropTypes,\n} from &#39;react&#39;;\nimport {\n    Image,\n    Text\n} from &#39;react-native&#39;</code><br>注意在React Native里，import直到0.12+才能正常运作。</p>\n<p>导出单个类<br>在ES5里，要导出一个类给别的模块用，一般通过module.exports来导出<br>","more":"</p>\n<p><code>//ES5\nvar MyComponent = React.createClass({\n    ...\n});\nmodule.exports = MyComponent;</code><br>在ES6里，通常用export default来实现相同的功能：</p>\n<p><code>//ES6\nexport default class MyComponent extends Component{\n    ...\n}</code><br>引用的时候也类似：</p>\n<p>`//ES5<br>var MyComponent = require(‘./MyComponent’);</p>\n<p>//ES6<br>import MyComponent from ‘./MyComponent’;`<br>定义组件<br>在ES5里，通常通过React.createClass来定义一个组件类，像这样：</p>\n<p><code>//ES5\nvar Photo = React.createClass({\n    render: function() {\n        return (\n            &lt;Image source={this.props.source} /&gt;\n        );\n    },\n});</code><br>在ES6里，我们通过定义一个继承自React.Component的class来定义一个组件类，像这样：</p>\n<p><code>//ES6\nclass Photo extends React.Component {\n    render() {\n        return (\n            &lt;Image source={this.props.source} /&gt;\n        );\n    }\n}</code><br>给组件定义方法<br>从上面的例子里可以看到，给组件定义方法不再用 名字: function()的写法，而是直接用名字()，在方法的最后也不能有逗号了。</p>\n<p>`//ES5<br>var Photo = React.createClass({<br>    componentWillMount: function(){</p>\n<pre><code>},\nrender: function() {\n    return (\n        &lt;Image source={this.props.source} /&gt;\n    );\n},\n</code></pre><p>});<br>//ES6<br>class Photo extends React.Component {<br>    componentWillMount() {</p>\n<pre><code>}\nrender() {\n    return (\n        &lt;Image source={this.props.source} /&gt;\n    );\n}\n</code></pre><p>}`<br>定义组件的属性类型和默认属性<br>在ES5里，属性类型和默认属性分别通过propTypes成员和getDefaultProps方法来实现</p>\n<p><code>//ES5 \nvar Video = React.createClass({\n    getDefaultProps: function() {\n        return {\n            autoPlay: false,\n            maxLoops: 10,\n        };\n    },\n    propTypes: {\n        autoPlay: React.PropTypes.bool.isRequired,\n        maxLoops: React.PropTypes.number.isRequired,\n        posterFrameSrc: React.PropTypes.string.isRequired,\n        videoSrc: React.PropTypes.string.isRequired,\n    },\n    render: function() {\n        return (\n            &lt;View /&gt;\n        );\n    },\n});</code><br>在ES6里，可以统一使用static成员来实现</p>\n<p><code>//ES6\nclass Video extends React.Component {\n    static defaultProps = {\n        autoPlay: false,\n        maxLoops: 10,\n    };  // 注意这里有分号\n    static propTypes = {\n        autoPlay: React.PropTypes.bool.isRequired,\n        maxLoops: React.PropTypes.number.isRequired,\n        posterFrameSrc: React.PropTypes.string.isRequired,\n        videoSrc: React.PropTypes.string.isRequired,\n    };  // 注意这里有分号\n    render() {\n        return (\n            &lt;View /&gt;\n        );\n    } // 注意这里既没有分号也没有逗号\n}</code><br>也有人这么写，虽然不推荐，但读到代码的时候你应当能明白它的意思：</p>\n<p><code>//ES6\nclass Video extends React.Component {\n    render() {\n        return (\n            &lt;View /&gt;\n        );\n    }\n}\nVideo.defaultProps = {\n    autoPlay: false,\n    maxLoops: 10,\n};\nVideo.propTypes = {\n    autoPlay: React.PropTypes.bool.isRequired,\n    maxLoops: React.PropTypes.number.isRequired,\n    posterFrameSrc: React.PropTypes.string.isRequired,\n    videoSrc: React.PropTypes.string.isRequired,\n};</code><br>注意: 对React开发者而言，static成员在IE10及之前版本不能被继承，而在IE11和其它浏览器上可以，这有时候会带来一些问题。React Native开发者可以不用担心这个问题。</p>\n<p>初始化state<br>ES5下情况类似，</p>\n<p><code>//ES5 \nvar Video = React.createClass({\n    getInitialState: function() {\n        return {\n            loopsRemaining: this.props.maxLoops,\n        };\n    },\n})</code><br>ES6下，有两种写法：<br><code>//ES6\nclass Video extends React.Component {\n    state = {\n        loopsRemaining: this.props.maxLoops,\n    }\n}</code><br>不过我们推荐更易理解的在构造函数中初始化（这样你还可以根据需要做一些计算）：</p>\n<p><code>//ES6\nclass Video extends React.Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            loopsRemaining: this.props.maxLoops,\n        };\n    }\n}</code><br>把方法作为回调提供<br>很多习惯于ES6的用户反而不理解在ES5下可以这么做：</p>\n<p><code>//ES5\nvar PostInfo = React.createClass({\n    handleOptionsButtonClick: function(e) {\n        // Here, &#39;this&#39; refers to the component instance.\n        this.setState({showOptionsModal: true});\n    },\n    render: function(){\n        return (\n            &lt;TouchableHighlight onPress={this.handleOptionsButtonClick}&gt;\n                &lt;Text&gt;{this.props.label}&lt;/Text&gt;\n            &lt;/TouchableHighlight&gt;\n        )\n    },\n});</code><br>在ES5下，React.createClass会把所有的方法都bind一遍，这样可以提交到任意的地方作为回调函数，而this不会变化。但官方现在逐步认为这反而是不标准、不易理解的。</p>\n<p>在ES6下，你需要通过bind来绑定this引用，或者使用箭头函数（它会绑定当前scope的this引用）来调用<br><code>//ES6\nclass PostInfo extends React.Component\n{\n    handleOptionsButtonClick(e){\n        this.setState({showOptionsModal: true});\n    }\n    render(){\n        return (\n            &lt;TouchableHighlight \n                onPress={this.handleOptionsButtonClick.bind(this)}\n                onPress={e=&gt;this.handleOptionsButtonClick(e)}\n                &gt;\n                &lt;Text&gt;{this.props.label}&lt;/Text&gt;\n            &lt;/TouchableHighlight&gt;\n        )\n    },\n}</code><br>箭头函数实际上是在这里定义了一个临时的函数，箭头函数的箭头=&gt;之前是一个空括号、单个的参数名、或用括号括起的多个参数名，而箭头之后可以是一个表达式（作为函数的返回值），或者是用花括号括起的函数体（需要自行通过return来返回值，否则返回的是undefined）。<br><code>// 箭头函数的例子\n()=&gt;1\nv=&gt;v+1\n(a,b)=&gt;a+b\n()=&gt;{\n    alert(&quot;foo&quot;);\n}\ne=&gt;{\n    if (e == 0){\n        return 0;\n    }\n    return 1000/e;\n}</code><br>需要注意的是，不论是bind还是箭头函数，每次被执行都返回的是一个新的函数引用，因此如果你还需要函数的引用去做一些别的事情（譬如卸载监听器），那么你必须自己保存这个引用</p>\n<p><code>// 错误的做法\nclass PauseMenu extends React.Component{\n    componentWillMount(){\n        AppStateIOS.addEventListener(&#39;change&#39;, this.onAppPaused.bind(this));\n    }\n    componentDidUnmount(){\n        AppStateIOS.removeEventListener(&#39;change&#39;, this.onAppPaused.bind(this));\n    }\n    onAppPaused(event){\n    }\n}\n// 正确的做法\nclass PauseMenu extends React.Component{\n    constructor(props){\n        super(props);\n        this._onAppPaused = this.onAppPaused.bind(this);\n    }\n    componentWillMount(){\n        AppStateIOS.addEventListener(&#39;change&#39;, this._onAppPaused);\n    }\n    componentDidUnmount(){\n        AppStateIOS.removeEventListener(&#39;change&#39;, this._onAppPaused);\n    }\n    onAppPaused(event){\n    }\n}\n从</code>这个帖子中我们还学习到一种新的做法：</p>\n<p><code>// 正确的做法\nclass PauseMenu extends React.Component{\n    componentWillMount(){\n        AppStateIOS.addEventListener(&#39;change&#39;, this.onAppPaused);\n    }\n    componentDidUnmount(){\n        AppStateIOS.removeEventListener(&#39;change&#39;, this.onAppPaused);\n    }\n    onAppPaused = (event) =&gt; {\n        //把方法直接作为一个arrow function的属性来定义，初始化的时候就绑定好了this指针\n    }\n}</code><br>Mixins<br>在ES5下，我们经常使用mixin来为我们的类添加一些新的方法，譬如PureRenderMixin</p>\n<p>`var PureRenderMixin = require(‘react-addons-pure-render-mixin’);<br>React.createClass({<br>  mixins: [PureRenderMixin],</p>\n<p>  render: function() {<br>    return <div classname=\"{this.props.className}\">foo</div>;<br>  }<br>});`<br>然而现在官方已经不再打算在ES6里继续推行Mixin，他们说：Mixins Are Dead. Long Live Composition。</p>\n<p>尽管如果要继续使用mixin，还是有一些第三方的方案可以用，譬如这个方案</p>\n<p>不过官方推荐，对于库编写者而言，应当尽快放弃Mixin的编写方式，上文中提到Sebastian Markbåge的一段代码推荐了一种新的编码方式：</p>\n<p>`//Enhance.js<br>import { Component } from “React”;</p>\n<p>export var Enhance = ComposedComponent =&gt; class extends Component {<br>    constructor() {<br>        this.state = { data: null };<br>    }<br>    componentDidMount() {<br>        this.setState({ data: ‘Hello’ });<br>    }<br>    render() {<br>        return <composedcomponent {...this.props}=\"\" data=\"{this.state.data}\">;<br>    }<br>};<br>//HigherOrderComponent.js<br>import { Enhance } from “./Enhance”;</composedcomponent></p>\n<p>class MyComponent {<br>    render() {<br>        if (!this.data) return <div>Waiting…</div>;<br>        return <div>{this.data}</div>;<br>    }<br>}</p>\n<p>export default Enhance(MyComponent); // Enhanced component`<br>用一个“增强函数”，来某个类增加一些方法，并且返回一个新类，这无疑能实现mixin所实现的大部分需求。</p>\n<p>ES6+带来的其它好处<br>解构&amp;属性延展<br>结合使用ES6+的解构和属性延展，我们给孩子传递一批属性更为方便了。这个例子把className以外的所有属性传递给div标签：<br><code>class AutoloadingPostsGrid extends React.Component {\n    render() {\n        var {\n            className,\n            ...others,  // contains all properties of this.props except for className\n        } = this.props;\n        return (\n            &lt;div className={className}&gt;\n                &lt;PostsGrid {...others} /&gt;\n                &lt;button onClick={this.handleLoadMoreClick}&gt;Load more&lt;/button&gt;\n            &lt;/div&gt;\n        );\n    }\n}</code><br>下面这种写法，则是传递所有属性的同时，用覆盖新的className值：<br>`</p>\n<p><div {...this.props}=\"\" classname=\"override\"><br>    …<br></div>`<br>这个例子则相反，如果属性中没有包含className，则提供默认的值，而如果属性中已经包含了，则使用属性中的值</p>\n<p><code>&lt;div className=&quot;base&quot; {...this.props}&gt;\n    …\n&lt;/div&gt;</code></p>\n<p>from <a href=\"http://reactnative.cn/post/15\" target=\"_blank\" rel=\"noopener\">http://reactnative.cn/post/15</a></p>"},{"title":"phpmyadmin '链接表的附加功能尚未激活'的解决方法","id":"271","date":"2011-09-03T00:29:53.000Z","_content":"\n最近重新安装了XAMPP 1.7.4，结果打开phpMyAdmin发现页面底部提示：\n\n“链接表的附加功能尚未激活。要查出原因，请点击此处。”\n\n点进去一看，原来是：\n\n$cfg['Servers'][$i]['tracking'] ... 错误\n\n搜索了一下解决办法，千奇百怪，而且很多都不适合。\n\n最终找到一个有效的方法：\n\n第一步，请确认phpMyAdmin文件夹下的config.inc.php里面是否有这么一行：\n\n$cfg['Servers'][$i]['tracking'] = 'pma_tracking';\n\n如果没有，可以在下面添加并保存。\n\n第二步，确认左侧数据库列表中是否有名为“ phpmyadmin”的数据库，\n\n<!--more-->\n\n如果有“ phpmyadmin”数据库，再看有没有下图的这几个表：\n\n如果没有数据库或者少了pma_tracking这张表，那就需要重新导入数据库了。\n\n导入的表在：phpMyAdmin目录下的scripts文件内，名为：create_tables.sql\n\n然后重启Apache，最好再清除浏览器缓存，\n\n再打开phpMyAdmin就没有“链接表的附加功能尚未激活”报错了。","source":"_posts/e9-93-be-e6-8e-a5-e8-a1-a8-e7-9a-84-e9-99-84-e5-8a-a0-e5-8a-9f-e8-83-bd-e5-b0-9a-e6-9c-aa-e6-bf-80-e6-b4-bb-e7-9a-84-e8-a7-a3-e5-86-b3-e6-96-b9-e6-b3-95phpmyadmin.md","raw":"---\ntitle: phpmyadmin '链接表的附加功能尚未激活'的解决方法\ntags:\n  - phpmyadmin\nid: 271\ncategories:\n  - PHP\ndate: 2011-09-03 08:29:53\n---\n\n最近重新安装了XAMPP 1.7.4，结果打开phpMyAdmin发现页面底部提示：\n\n“链接表的附加功能尚未激活。要查出原因，请点击此处。”\n\n点进去一看，原来是：\n\n$cfg['Servers'][$i]['tracking'] ... 错误\n\n搜索了一下解决办法，千奇百怪，而且很多都不适合。\n\n最终找到一个有效的方法：\n\n第一步，请确认phpMyAdmin文件夹下的config.inc.php里面是否有这么一行：\n\n$cfg['Servers'][$i]['tracking'] = 'pma_tracking';\n\n如果没有，可以在下面添加并保存。\n\n第二步，确认左侧数据库列表中是否有名为“ phpmyadmin”的数据库，\n\n<!--more-->\n\n如果有“ phpmyadmin”数据库，再看有没有下图的这几个表：\n\n如果没有数据库或者少了pma_tracking这张表，那就需要重新导入数据库了。\n\n导入的表在：phpMyAdmin目录下的scripts文件内，名为：create_tables.sql\n\n然后重启Apache，最好再清除浏览器缓存，\n\n再打开phpMyAdmin就没有“链接表的附加功能尚未激活”报错了。","slug":"e9-93-be-e6-8e-a5-e8-a1-a8-e7-9a-84-e9-99-84-e5-8a-a0-e5-8a-9f-e8-83-bd-e5-b0-9a-e6-9c-aa-e6-bf-80-e6-b4-bb-e7-9a-84-e8-a7-a3-e5-86-b3-e6-96-b9-e6-b3-95phpmyadmin","published":1,"updated":"2018-01-13T05:07:00.481Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjccw7xad004paqcrtxy7vxx0","content":"<p>最近重新安装了XAMPP 1.7.4，结果打开phpMyAdmin发现页面底部提示：</p>\n<p>“链接表的附加功能尚未激活。要查出原因，请点击此处。”</p>\n<p>点进去一看，原来是：</p>\n<p>$cfg[‘Servers’][$i][‘tracking’] … 错误</p>\n<p>搜索了一下解决办法，千奇百怪，而且很多都不适合。</p>\n<p>最终找到一个有效的方法：</p>\n<p>第一步，请确认phpMyAdmin文件夹下的config.inc.php里面是否有这么一行：</p>\n<p>$cfg[‘Servers’][$i][‘tracking’] = ‘pma_tracking’;</p>\n<p>如果没有，可以在下面添加并保存。</p>\n<p>第二步，确认左侧数据库列表中是否有名为“ phpmyadmin”的数据库，</p>\n<a id=\"more\"></a>\n<p>如果有“ phpmyadmin”数据库，再看有没有下图的这几个表：</p>\n<p>如果没有数据库或者少了pma_tracking这张表，那就需要重新导入数据库了。</p>\n<p>导入的表在：phpMyAdmin目录下的scripts文件内，名为：create_tables.sql</p>\n<p>然后重启Apache，最好再清除浏览器缓存，</p>\n<p>再打开phpMyAdmin就没有“链接表的附加功能尚未激活”报错了。</p>\n","site":{"data":{}},"excerpt":"<p>最近重新安装了XAMPP 1.7.4，结果打开phpMyAdmin发现页面底部提示：</p>\n<p>“链接表的附加功能尚未激活。要查出原因，请点击此处。”</p>\n<p>点进去一看，原来是：</p>\n<p>$cfg[‘Servers’][$i][‘tracking’] … 错误</p>\n<p>搜索了一下解决办法，千奇百怪，而且很多都不适合。</p>\n<p>最终找到一个有效的方法：</p>\n<p>第一步，请确认phpMyAdmin文件夹下的config.inc.php里面是否有这么一行：</p>\n<p>$cfg[‘Servers’][$i][‘tracking’] = ‘pma_tracking’;</p>\n<p>如果没有，可以在下面添加并保存。</p>\n<p>第二步，确认左侧数据库列表中是否有名为“ phpmyadmin”的数据库，</p>","more":"<p>如果有“ phpmyadmin”数据库，再看有没有下图的这几个表：</p>\n<p>如果没有数据库或者少了pma_tracking这张表，那就需要重新导入数据库了。</p>\n<p>导入的表在：phpMyAdmin目录下的scripts文件内，名为：create_tables.sql</p>\n<p>然后重启Apache，最好再清除浏览器缓存，</p>\n<p>再打开phpMyAdmin就没有“链接表的附加功能尚未激活”报错了。</p>"},{"title":"Fedora 安装 Rewiew Board","id":"1620","date":"2014-04-07T03:50:14.000Z","_content":"\n安装 Rewiew Board太复杂，依赖很多，嫌麻烦有个一键安装：https://bitnami.com/stack/reviewboard。下面是手动安装过程\n**安装**\n`$ yum install httpd mod_wsgi\n$ yum install mysql mysql-server mysql-devel\n$ yum install memcached\n$ yum install patch\n$ yum install subversion pysvn\n$ yum install rpm-build gcc-c++ gcc\n$ yum install python-setuptools\n$ yum install python-devel\n$ easy_install -U setuptools\n$ easy_install python-memcached\n$ easy_install mysql-python\n$ easy_install ReviewBoard`<!--more-->\n极有可能还要装\n`easy_install markdown\neasy_install docutils\neasy_install \"django-pipeline<1.3\"\neasy_install \"Djblets<0.8\"\neasy_install \"django-evolution<0.7\"\neasy_install \"Django<1.5\"\neasy_install ecdsa\n`\n**创建**\n`memcached -d -m 64m -p 11211 //不要sudo\nservice httpd start\nsystemctl start mysqld.service\n`\n数据库设置`\n设置编码：http://www.awezome.net/1640/\n创建数据库 reviewboard\nmysql> create database reviewboard default charset utf8 collate utf8_general_ci;\n`\n**安装**\n`rb-site install /var/www/reviewboard`\n`\nDomain = localhost\nRoot Path = /\nsimple media url=static/\nupload Media URL = media/\nDatabase Type = mysql\nDatabase Name = reviewboard\nDatabase server = localhost\nDatabase username = ''\nDatabase password = ''\nCache Type = memcache\nMemcache Server = memcached://localhost:11211/\nWebserver = apache\nPython loader = wsgi`\n**配置**\n`$ chown -R 777 /var/www/reviewboard/htdocs/media/uploaded\n$ chown -R 777 /var/www/reviewboard/data\ncp /var/www/reviewboard/conf/apache-wsgi.conf /etc/httpd/conf.d/reviewboard.conf`\n**问题**\n`Setup script exited with error: command 'gcc' failed with exit status 1\n$ yum install rpm-build gcc-c++ gcc`\n\n`error: Could not find suitable distribution for Requirement.parse('mysql-python')\n再试一次`\n\n`pkg_resources.DistributionNotFound: Djblets\n$ easy_install --upgrade Djblets`\n\n`Review Board is taking a nap\n修改/etc/selinux/config 文件,将SELINUX=enforcing改为SELINUX=disabled .重启`\n\n参考\nhttp://www.reviewboard.org/\nhttp://www.reviewboard.org/docs/manual/1.7/admin/installation/linux/#installing-python-setuptools\nhttp://www.reviewboard.org/docs/manual/dev/admin/sites/rb-site/\nhttp://blog.csdn.net/shencaifeixia1/article/category/1280711","source":"_posts/fedora-e5-ae-89-e8-a3-85-rewiew-board.md","raw":"---\ntitle: Fedora 安装 Rewiew Board\ntags:\n  - fedora\n  - Linux &amp; Fedora\n  - reviewboard\nid: 1620\ncategories:\n  - Linux\ndate: 2014-04-07 11:50:14\n---\n\n安装 Rewiew Board太复杂，依赖很多，嫌麻烦有个一键安装：https://bitnami.com/stack/reviewboard。下面是手动安装过程\n**安装**\n`$ yum install httpd mod_wsgi\n$ yum install mysql mysql-server mysql-devel\n$ yum install memcached\n$ yum install patch\n$ yum install subversion pysvn\n$ yum install rpm-build gcc-c++ gcc\n$ yum install python-setuptools\n$ yum install python-devel\n$ easy_install -U setuptools\n$ easy_install python-memcached\n$ easy_install mysql-python\n$ easy_install ReviewBoard`<!--more-->\n极有可能还要装\n`easy_install markdown\neasy_install docutils\neasy_install \"django-pipeline<1.3\"\neasy_install \"Djblets<0.8\"\neasy_install \"django-evolution<0.7\"\neasy_install \"Django<1.5\"\neasy_install ecdsa\n`\n**创建**\n`memcached -d -m 64m -p 11211 //不要sudo\nservice httpd start\nsystemctl start mysqld.service\n`\n数据库设置`\n设置编码：http://www.awezome.net/1640/\n创建数据库 reviewboard\nmysql> create database reviewboard default charset utf8 collate utf8_general_ci;\n`\n**安装**\n`rb-site install /var/www/reviewboard`\n`\nDomain = localhost\nRoot Path = /\nsimple media url=static/\nupload Media URL = media/\nDatabase Type = mysql\nDatabase Name = reviewboard\nDatabase server = localhost\nDatabase username = ''\nDatabase password = ''\nCache Type = memcache\nMemcache Server = memcached://localhost:11211/\nWebserver = apache\nPython loader = wsgi`\n**配置**\n`$ chown -R 777 /var/www/reviewboard/htdocs/media/uploaded\n$ chown -R 777 /var/www/reviewboard/data\ncp /var/www/reviewboard/conf/apache-wsgi.conf /etc/httpd/conf.d/reviewboard.conf`\n**问题**\n`Setup script exited with error: command 'gcc' failed with exit status 1\n$ yum install rpm-build gcc-c++ gcc`\n\n`error: Could not find suitable distribution for Requirement.parse('mysql-python')\n再试一次`\n\n`pkg_resources.DistributionNotFound: Djblets\n$ easy_install --upgrade Djblets`\n\n`Review Board is taking a nap\n修改/etc/selinux/config 文件,将SELINUX=enforcing改为SELINUX=disabled .重启`\n\n参考\nhttp://www.reviewboard.org/\nhttp://www.reviewboard.org/docs/manual/1.7/admin/installation/linux/#installing-python-setuptools\nhttp://www.reviewboard.org/docs/manual/dev/admin/sites/rb-site/\nhttp://blog.csdn.net/shencaifeixia1/article/category/1280711","slug":"fedora-e5-ae-89-e8-a3-85-rewiew-board","published":1,"updated":"2018-01-13T05:07:00.471Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjccw7xaf004uaqcrhep7zsp5","content":"<p>安装 Rewiew Board太复杂，依赖很多，嫌麻烦有个一键安装：<a href=\"https://bitnami.com/stack/reviewboard。下面是手动安装过程\" target=\"_blank\" rel=\"noopener\">https://bitnami.com/stack/reviewboard。下面是手动安装过程</a><br><strong>安装</strong><br><code>$ yum install httpd mod_wsgi\n$ yum install mysql mysql-server mysql-devel\n$ yum install memcached\n$ yum install patch\n$ yum install subversion pysvn\n$ yum install rpm-build gcc-c++ gcc\n$ yum install python-setuptools\n$ yum install python-devel\n$ easy_install -U setuptools\n$ easy_install python-memcached\n$ easy_install mysql-python\n$ easy_install ReviewBoard</code><a id=\"more\"></a><br>极有可能还要装<br><code>easy_install markdown\neasy_install docutils\neasy_install &quot;django-pipeline&lt;1.3&quot;\neasy_install &quot;Djblets&lt;0.8&quot;\neasy_install &quot;django-evolution&lt;0.7&quot;\neasy_install &quot;Django&lt;1.5&quot;\neasy_install ecdsa</code><br><strong>创建</strong><br><code>memcached -d -m 64m -p 11211 //不要sudo\nservice httpd start\nsystemctl start mysqld.service</code><br>数据库设置<code>设置编码：http://www.awezome.net/1640/\n创建数据库 reviewboard\nmysql&gt; create database reviewboard default charset utf8 collate utf8_general_ci;</code><br><strong>安装</strong><br><code>rb-site install /var/www/reviewboard</code><br><code>Domain = localhost\nRoot Path = /\nsimple media url=static/\nupload Media URL = media/\nDatabase Type = mysql\nDatabase Name = reviewboard\nDatabase server = localhost\nDatabase username = &#39;&#39;\nDatabase password = &#39;&#39;\nCache Type = memcache\nMemcache Server = memcached://localhost:11211/\nWebserver = apache\nPython loader = wsgi</code><br><strong>配置</strong><br><code>$ chown -R 777 /var/www/reviewboard/htdocs/media/uploaded\n$ chown -R 777 /var/www/reviewboard/data\ncp /var/www/reviewboard/conf/apache-wsgi.conf /etc/httpd/conf.d/reviewboard.conf</code><br><strong>问题</strong><br><code>Setup script exited with error: command &#39;gcc&#39; failed with exit status 1\n$ yum install rpm-build gcc-c++ gcc</code></p>\n<p><code>error: Could not find suitable distribution for Requirement.parse(&#39;mysql-python&#39;)\n再试一次</code></p>\n<p><code>pkg_resources.DistributionNotFound: Djblets\n$ easy_install --upgrade Djblets</code></p>\n<p><code>Review Board is taking a nap\n修改/etc/selinux/config 文件,将SELINUX=enforcing改为SELINUX=disabled .重启</code></p>\n<p>参考<br><a href=\"http://www.reviewboard.org/\" target=\"_blank\" rel=\"noopener\">http://www.reviewboard.org/</a><br><a href=\"http://www.reviewboard.org/docs/manual/1.7/admin/installation/linux/#installing-python-setuptools\" target=\"_blank\" rel=\"noopener\">http://www.reviewboard.org/docs/manual/1.7/admin/installation/linux/#installing-python-setuptools</a><br><a href=\"http://www.reviewboard.org/docs/manual/dev/admin/sites/rb-site/\" target=\"_blank\" rel=\"noopener\">http://www.reviewboard.org/docs/manual/dev/admin/sites/rb-site/</a><br><a href=\"http://blog.csdn.net/shencaifeixia1/article/category/1280711\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/shencaifeixia1/article/category/1280711</a></p>\n","site":{"data":{}},"excerpt":"<p>安装 Rewiew Board太复杂，依赖很多，嫌麻烦有个一键安装：<a href=\"https://bitnami.com/stack/reviewboard。下面是手动安装过程\" target=\"_blank\" rel=\"noopener\">https://bitnami.com/stack/reviewboard。下面是手动安装过程</a><br><strong>安装</strong><br><code>$ yum install httpd mod_wsgi\n$ yum install mysql mysql-server mysql-devel\n$ yum install memcached\n$ yum install patch\n$ yum install subversion pysvn\n$ yum install rpm-build gcc-c++ gcc\n$ yum install python-setuptools\n$ yum install python-devel\n$ easy_install -U setuptools\n$ easy_install python-memcached\n$ easy_install mysql-python\n$ easy_install ReviewBoard</code>","more":"<br>极有可能还要装<br><code>easy_install markdown\neasy_install docutils\neasy_install &quot;django-pipeline&lt;1.3&quot;\neasy_install &quot;Djblets&lt;0.8&quot;\neasy_install &quot;django-evolution&lt;0.7&quot;\neasy_install &quot;Django&lt;1.5&quot;\neasy_install ecdsa</code><br><strong>创建</strong><br><code>memcached -d -m 64m -p 11211 //不要sudo\nservice httpd start\nsystemctl start mysqld.service</code><br>数据库设置<code>设置编码：http://www.awezome.net/1640/\n创建数据库 reviewboard\nmysql&gt; create database reviewboard default charset utf8 collate utf8_general_ci;</code><br><strong>安装</strong><br><code>rb-site install /var/www/reviewboard</code><br><code>Domain = localhost\nRoot Path = /\nsimple media url=static/\nupload Media URL = media/\nDatabase Type = mysql\nDatabase Name = reviewboard\nDatabase server = localhost\nDatabase username = &#39;&#39;\nDatabase password = &#39;&#39;\nCache Type = memcache\nMemcache Server = memcached://localhost:11211/\nWebserver = apache\nPython loader = wsgi</code><br><strong>配置</strong><br><code>$ chown -R 777 /var/www/reviewboard/htdocs/media/uploaded\n$ chown -R 777 /var/www/reviewboard/data\ncp /var/www/reviewboard/conf/apache-wsgi.conf /etc/httpd/conf.d/reviewboard.conf</code><br><strong>问题</strong><br><code>Setup script exited with error: command &#39;gcc&#39; failed with exit status 1\n$ yum install rpm-build gcc-c++ gcc</code></p>\n<p><code>error: Could not find suitable distribution for Requirement.parse(&#39;mysql-python&#39;)\n再试一次</code></p>\n<p><code>pkg_resources.DistributionNotFound: Djblets\n$ easy_install --upgrade Djblets</code></p>\n<p><code>Review Board is taking a nap\n修改/etc/selinux/config 文件,将SELINUX=enforcing改为SELINUX=disabled .重启</code></p>\n<p>参考<br><a href=\"http://www.reviewboard.org/\" target=\"_blank\" rel=\"noopener\">http://www.reviewboard.org/</a><br><a href=\"http://www.reviewboard.org/docs/manual/1.7/admin/installation/linux/#installing-python-setuptools\" target=\"_blank\" rel=\"noopener\">http://www.reviewboard.org/docs/manual/1.7/admin/installation/linux/#installing-python-setuptools</a><br><a href=\"http://www.reviewboard.org/docs/manual/dev/admin/sites/rb-site/\" target=\"_blank\" rel=\"noopener\">http://www.reviewboard.org/docs/manual/dev/admin/sites/rb-site/</a><br><a href=\"http://blog.csdn.net/shencaifeixia1/article/category/1280711\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/shencaifeixia1/article/category/1280711</a></p>"},{"title":"Easy Install 几个有用的命令","id":"1626","date":"2014-04-07T03:59:14.000Z","_content":"\n安装\n`easy_install SQLObject\neasy_install -f http://pythonpaste.org/package_index.html SQLObject\neasy_install http://example.com/path/to/MyPackage-1.2.3.tgz\neasy_install /my_downloads/OtherPackage-3.2.1-py2.3.egg`\n\n版本\n`easy_install \"SQLObject==1.13\"\neasy_install \"SQLObject<1.13\"`\n\n删除\n`easy_install -m SQLObject`\n\n升级\n`easy_install --upgrade PyProtocols`\n\n官方手册\n`https://pythonhosted.org/setuptools/easy_install.html`","source":"_posts/easy-install-e5-87-a0-e4-b8-aa-e6-9c-89-e7-94-a8-e7-9a-84-e5-91-bd-e4-bb-a4.md","raw":"---\ntitle: Easy Install 几个有用的命令\ntags:\n  - easy_install\n  - Python\nid: 1626\ncategories:\n  - Other\ndate: 2014-04-07 11:59:14\n---\n\n安装\n`easy_install SQLObject\neasy_install -f http://pythonpaste.org/package_index.html SQLObject\neasy_install http://example.com/path/to/MyPackage-1.2.3.tgz\neasy_install /my_downloads/OtherPackage-3.2.1-py2.3.egg`\n\n版本\n`easy_install \"SQLObject==1.13\"\neasy_install \"SQLObject<1.13\"`\n\n删除\n`easy_install -m SQLObject`\n\n升级\n`easy_install --upgrade PyProtocols`\n\n官方手册\n`https://pythonhosted.org/setuptools/easy_install.html`","slug":"easy-install-e5-87-a0-e4-b8-aa-e6-9c-89-e7-94-a8-e7-9a-84-e5-91-bd-e4-bb-a4","published":1,"updated":"2018-01-13T05:07:00.479Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjccw7xag004waqcr9xg0km7p","content":"<p>安装<br><code>easy_install SQLObject\neasy_install -f http://pythonpaste.org/package_index.html SQLObject\neasy_install http://example.com/path/to/MyPackage-1.2.3.tgz\neasy_install /my_downloads/OtherPackage-3.2.1-py2.3.egg</code></p>\n<p>版本<br><code>easy_install &quot;SQLObject==1.13&quot;\neasy_install &quot;SQLObject&lt;1.13&quot;</code></p>\n<p>删除<br><code>easy_install -m SQLObject</code></p>\n<p>升级<br><code>easy_install --upgrade PyProtocols</code></p>\n<p>官方手册<br><code>https://pythonhosted.org/setuptools/easy_install.html</code></p>\n","site":{"data":{}},"excerpt":"","more":"<p>安装<br><code>easy_install SQLObject\neasy_install -f http://pythonpaste.org/package_index.html SQLObject\neasy_install http://example.com/path/to/MyPackage-1.2.3.tgz\neasy_install /my_downloads/OtherPackage-3.2.1-py2.3.egg</code></p>\n<p>版本<br><code>easy_install &quot;SQLObject==1.13&quot;\neasy_install &quot;SQLObject&lt;1.13&quot;</code></p>\n<p>删除<br><code>easy_install -m SQLObject</code></p>\n<p>升级<br><code>easy_install --upgrade PyProtocols</code></p>\n<p>官方手册<br><code>https://pythonhosted.org/setuptools/easy_install.html</code></p>\n"},{"title":"FLASH中背景音乐声音变小","id":"910","date":"2012-02-24T03:49:20.000Z","_content":"\n一，菜鸟做法，声音编辑器，直接更改声音大小，重新导入声音\n二，声音放在帧上播放的话，则选中当前帧，在属性面板中点击[效果]右边的“笔”进入声音的编辑，将声音最前面的两个“口”向下拉（调小），确定\n三，声音是用as来播放的。先将声音放入一个影辑里的第二帧，在第三帧写上stop()，声音同步事件是“停止”，影辑拉到场景，命名。则在new Sound的时候加上影辑名。如new Sound(\"bgs\");其它照旧，这样用setVolume来设置他音量的话，不会影响到其它声音，这样的做法是一对一的设置","source":"_posts/flash-e4-b8-ad-e8-83-8c-e6-99-af-e9-9f-b3-e4-b9-90-e5-a3-b0-e9-9f-b3-e5-8f-98-e5-b0-8f.md","raw":"---\ntitle: FLASH中背景音乐声音变小\nid: 910\ncategories:\n  - Other\ndate: 2012-02-24 11:49:20\ntags:\n---\n\n一，菜鸟做法，声音编辑器，直接更改声音大小，重新导入声音\n二，声音放在帧上播放的话，则选中当前帧，在属性面板中点击[效果]右边的“笔”进入声音的编辑，将声音最前面的两个“口”向下拉（调小），确定\n三，声音是用as来播放的。先将声音放入一个影辑里的第二帧，在第三帧写上stop()，声音同步事件是“停止”，影辑拉到场景，命名。则在new Sound的时候加上影辑名。如new Sound(\"bgs\");其它照旧，这样用setVolume来设置他音量的话，不会影响到其它声音，这样的做法是一对一的设置","slug":"flash-e4-b8-ad-e8-83-8c-e6-99-af-e9-9f-b3-e4-b9-90-e5-a3-b0-e9-9f-b3-e5-8f-98-e5-b0-8f","published":1,"updated":"2018-01-13T05:07:00.461Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjccw7xah004zaqcr5ll2u3i6","content":"<p>一，菜鸟做法，声音编辑器，直接更改声音大小，重新导入声音<br>二，声音放在帧上播放的话，则选中当前帧，在属性面板中点击[效果]右边的“笔”进入声音的编辑，将声音最前面的两个“口”向下拉（调小），确定<br>三，声音是用as来播放的。先将声音放入一个影辑里的第二帧，在第三帧写上stop()，声音同步事件是“停止”，影辑拉到场景，命名。则在new Sound的时候加上影辑名。如new Sound(“bgs”);其它照旧，这样用setVolume来设置他音量的话，不会影响到其它声音，这样的做法是一对一的设置</p>\n","site":{"data":{}},"excerpt":"","more":"<p>一，菜鸟做法，声音编辑器，直接更改声音大小，重新导入声音<br>二，声音放在帧上播放的话，则选中当前帧，在属性面板中点击[效果]右边的“笔”进入声音的编辑，将声音最前面的两个“口”向下拉（调小），确定<br>三，声音是用as来播放的。先将声音放入一个影辑里的第二帧，在第三帧写上stop()，声音同步事件是“停止”，影辑拉到场景，命名。则在new Sound的时候加上影辑名。如new Sound(“bgs”);其它照旧，这样用setVolume来设置他音量的话，不会影响到其它声音，这样的做法是一对一的设置</p>\n"},{"title":"Gentoo apache2 启动失败解决办法","id":"1656","date":"2014-04-09T14:39:44.000Z","_content":"\ngentoo 装个软件真麻烦。/etc/init.d/apache2 start 结果出现：\n`* Starting apache2 ...\napache2: apr_sockaddr_info_get() failed for gentoo\napache2: Could not reliably determine the server's fully qualified domain name, using 127.0.0.1 for ServerName\n* start-stop-daemon: failed to start `/usr/sbin/apache2'\n`\n\n解决：\n`命令 hostname 查看当前主机名，比如为 ggeenn ;\ncat /etc/hosts\n127.0.0.1       localhost\n::1             localhost`\n修改为\n`127.0.0.1       ggeenn localhost\n::1             ggeenn localhost`","source":"_posts/gentoo-apache2-e5-90-af-e5-8a-a8-e5-a4-b1-e8-b4-a5-e8-a7-a3-e5-86-b3-e5-8a-9e-e6-b3-95.md","raw":"---\ntitle: Gentoo apache2 启动失败解决办法\ntags:\n  - apache\n  - gentoo\nid: 1656\ncategories:\n  - Linux\ndate: 2014-04-09 22:39:44\n---\n\ngentoo 装个软件真麻烦。/etc/init.d/apache2 start 结果出现：\n`* Starting apache2 ...\napache2: apr_sockaddr_info_get() failed for gentoo\napache2: Could not reliably determine the server's fully qualified domain name, using 127.0.0.1 for ServerName\n* start-stop-daemon: failed to start `/usr/sbin/apache2'\n`\n\n解决：\n`命令 hostname 查看当前主机名，比如为 ggeenn ;\ncat /etc/hosts\n127.0.0.1       localhost\n::1             localhost`\n修改为\n`127.0.0.1       ggeenn localhost\n::1             ggeenn localhost`","slug":"gentoo-apache2-e5-90-af-e5-8a-a8-e5-a4-b1-e8-b4-a5-e8-a7-a3-e5-86-b3-e5-8a-9e-e6-b3-95","published":1,"updated":"2018-01-13T05:07:00.454Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjccw7xaj0051aqcrqssu69th","content":"<p>gentoo 装个软件真麻烦。/etc/init.d/apache2 start 结果出现：<br>`* Starting apache2 …<br>apache2: apr_sockaddr_info_get() failed for gentoo<br>apache2: Could not reliably determine the server’s fully qualified domain name, using 127.0.0.1 for ServerName</p>\n<ul>\n<li>start-stop-daemon: failed to start <code>/usr/sbin/apache2&#39;</code></li>\n</ul>\n<p>解决：<br><code>命令 hostname 查看当前主机名，比如为 ggeenn ;\ncat /etc/hosts\n127.0.0.1       localhost\n::1             localhost</code><br>修改为<br><code>127.0.0.1       ggeenn localhost\n::1             ggeenn localhost</code></p>\n","site":{"data":{}},"excerpt":"","more":"<p>gentoo 装个软件真麻烦。/etc/init.d/apache2 start 结果出现：<br>`* Starting apache2 …<br>apache2: apr_sockaddr_info_get() failed for gentoo<br>apache2: Could not reliably determine the server’s fully qualified domain name, using 127.0.0.1 for ServerName</p>\n<ul>\n<li>start-stop-daemon: failed to start <code>/usr/sbin/apache2&#39;</code></li>\n</ul>\n<p>解决：<br><code>命令 hostname 查看当前主机名，比如为 ggeenn ;\ncat /etc/hosts\n127.0.0.1       localhost\n::1             localhost</code><br>修改为<br><code>127.0.0.1       ggeenn localhost\n::1             ggeenn localhost</code></p>\n"},{"title":"Flash声音处理基础AS代码","id":"913","date":"2012-02-24T05:10:38.000Z","_content":"\nvar mysound:Sound = new Sound();\n\n//让mysound具有Sound类的属性和方法\n\nmysound.attachSound(\"Cannon\");\n\n//mysound链接到库中名为\"Cannon\"的声音元件\n\nStart_Point = 0;\n\n//设置播放的起点位置\n\nplay_btn.onRelease = function() {\nmysound.start(Start_Point/1000);};\n\n//播放按钮：从起点位置开始播放声音，因为要接收秒数，所以要除1000\n\npause_btn.onRelease = function() {\nStart_Point = mysound.position;\nmysound.stop();};\n\n//暂停按钮：先保存当前播放到的位置为起点，然后停止播放\n\nstop_btn.onRelease = function() {<!--more-->\nStart_Point = 0;\nmysound.stop();};\n\n//停止按钮：将起点位置设为0，然后停止播放\n\nFlash充电：Sound类常用属性和方法\n\n（1）Sound.attachSound(\"idName\"):声音对象依附声音元件\n\nmysound.attachSound(\"Cannon\")\n\n（2）Sound.start(播放起点,循环次数)：开始播放声音\n\nmysound.start(5,3)\n\n//从5秒钟位置开始播放，循环三次\n\nmysound.start()\n\n//从0秒钟位置开始播放，循环一次\n\n（3）Sound.stop(\"idName\"):停止播放声音\n\nmysound.stop()\n\n//停止全部声音\n\n（4）Sound.setVolume(1～100)：设定音量\n\nmysound.setVolume(50)\n\n//设置音量为50\n\n（5）Sound.getVolume():取得音量设定值\n\nmysound.setVolume(33)\n\ntrace(mysound.getVolume())\n\n//返回33","source":"_posts/flash-e5-a3-b0-e9-9f-b3-e5-a4-84-e7-90-86-e5-9f-ba-e7-a1-80as-e4-bb-a3-e7-a0-81.md","raw":"---\ntitle: Flash声音处理基础AS代码\nid: 913\ncategories:\n  - Other\ndate: 2012-02-24 13:10:38\ntags:\n---\n\nvar mysound:Sound = new Sound();\n\n//让mysound具有Sound类的属性和方法\n\nmysound.attachSound(\"Cannon\");\n\n//mysound链接到库中名为\"Cannon\"的声音元件\n\nStart_Point = 0;\n\n//设置播放的起点位置\n\nplay_btn.onRelease = function() {\nmysound.start(Start_Point/1000);};\n\n//播放按钮：从起点位置开始播放声音，因为要接收秒数，所以要除1000\n\npause_btn.onRelease = function() {\nStart_Point = mysound.position;\nmysound.stop();};\n\n//暂停按钮：先保存当前播放到的位置为起点，然后停止播放\n\nstop_btn.onRelease = function() {<!--more-->\nStart_Point = 0;\nmysound.stop();};\n\n//停止按钮：将起点位置设为0，然后停止播放\n\nFlash充电：Sound类常用属性和方法\n\n（1）Sound.attachSound(\"idName\"):声音对象依附声音元件\n\nmysound.attachSound(\"Cannon\")\n\n（2）Sound.start(播放起点,循环次数)：开始播放声音\n\nmysound.start(5,3)\n\n//从5秒钟位置开始播放，循环三次\n\nmysound.start()\n\n//从0秒钟位置开始播放，循环一次\n\n（3）Sound.stop(\"idName\"):停止播放声音\n\nmysound.stop()\n\n//停止全部声音\n\n（4）Sound.setVolume(1～100)：设定音量\n\nmysound.setVolume(50)\n\n//设置音量为50\n\n（5）Sound.getVolume():取得音量设定值\n\nmysound.setVolume(33)\n\ntrace(mysound.getVolume())\n\n//返回33","slug":"flash-e5-a3-b0-e9-9f-b3-e5-a4-84-e7-90-86-e5-9f-ba-e7-a1-80as-e4-bb-a3-e7-a0-81","published":1,"updated":"2018-01-13T05:07:00.482Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjccw7xak0054aqcrrkme5kw0","content":"<p>var mysound:Sound = new Sound();</p>\n<p>//让mysound具有Sound类的属性和方法</p>\n<p>mysound.attachSound(“Cannon”);</p>\n<p>//mysound链接到库中名为”Cannon”的声音元件</p>\n<p>Start_Point = 0;</p>\n<p>//设置播放的起点位置</p>\n<p>play_btn.onRelease = function() {<br>mysound.start(Start_Point/1000);};</p>\n<p>//播放按钮：从起点位置开始播放声音，因为要接收秒数，所以要除1000</p>\n<p>pause_btn.onRelease = function() {<br>Start_Point = mysound.position;<br>mysound.stop();};</p>\n<p>//暂停按钮：先保存当前播放到的位置为起点，然后停止播放</p>\n<p>stop_btn.onRelease = function() {<a id=\"more\"></a><br>Start_Point = 0;<br>mysound.stop();};</p>\n<p>//停止按钮：将起点位置设为0，然后停止播放</p>\n<p>Flash充电：Sound类常用属性和方法</p>\n<p>（1）Sound.attachSound(“idName”):声音对象依附声音元件</p>\n<p>mysound.attachSound(“Cannon”)</p>\n<p>（2）Sound.start(播放起点,循环次数)：开始播放声音</p>\n<p>mysound.start(5,3)</p>\n<p>//从5秒钟位置开始播放，循环三次</p>\n<p>mysound.start()</p>\n<p>//从0秒钟位置开始播放，循环一次</p>\n<p>（3）Sound.stop(“idName”):停止播放声音</p>\n<p>mysound.stop()</p>\n<p>//停止全部声音</p>\n<p>（4）Sound.setVolume(1～100)：设定音量</p>\n<p>mysound.setVolume(50)</p>\n<p>//设置音量为50</p>\n<p>（5）Sound.getVolume():取得音量设定值</p>\n<p>mysound.setVolume(33)</p>\n<p>trace(mysound.getVolume())</p>\n<p>//返回33</p>\n","site":{"data":{}},"excerpt":"<p>var mysound:Sound = new Sound();</p>\n<p>//让mysound具有Sound类的属性和方法</p>\n<p>mysound.attachSound(“Cannon”);</p>\n<p>//mysound链接到库中名为”Cannon”的声音元件</p>\n<p>Start_Point = 0;</p>\n<p>//设置播放的起点位置</p>\n<p>play_btn.onRelease = function() {<br>mysound.start(Start_Point/1000);};</p>\n<p>//播放按钮：从起点位置开始播放声音，因为要接收秒数，所以要除1000</p>\n<p>pause_btn.onRelease = function() {<br>Start_Point = mysound.position;<br>mysound.stop();};</p>\n<p>//暂停按钮：先保存当前播放到的位置为起点，然后停止播放</p>\n<p>stop_btn.onRelease = function() {","more":"<br>Start_Point = 0;<br>mysound.stop();};</p>\n<p>//停止按钮：将起点位置设为0，然后停止播放</p>\n<p>Flash充电：Sound类常用属性和方法</p>\n<p>（1）Sound.attachSound(“idName”):声音对象依附声音元件</p>\n<p>mysound.attachSound(“Cannon”)</p>\n<p>（2）Sound.start(播放起点,循环次数)：开始播放声音</p>\n<p>mysound.start(5,3)</p>\n<p>//从5秒钟位置开始播放，循环三次</p>\n<p>mysound.start()</p>\n<p>//从0秒钟位置开始播放，循环一次</p>\n<p>（3）Sound.stop(“idName”):停止播放声音</p>\n<p>mysound.stop()</p>\n<p>//停止全部声音</p>\n<p>（4）Sound.setVolume(1～100)：设定音量</p>\n<p>mysound.setVolume(50)</p>\n<p>//设置音量为50</p>\n<p>（5）Sound.getVolume():取得音量设定值</p>\n<p>mysound.setVolume(33)</p>\n<p>trace(mysound.getVolume())</p>\n<p>//返回33</p>"},{"title":"Gentoo 国内源","id":"1675","date":"2014-04-10T02:05:51.000Z","_content":"\n修改 etc/make.conf\n\n`GENTOO_MIRRORS=\"http://mirrors.163.com/gentoo/\"\nSYNC=\"rsync://mirrors.163.com/gentoo-portage\"\n#GENTOO_MIRRORS=\"http://mirrors.xmu.edu.cn/gentoo/\"\n#SYNC=\"rsync://mirrors.xmu.edu.cn/gentoo\"\n#GENTOO_MIRRORS=\"http://dev.gentoo.org/~vapier/dist/\"`","source":"_posts/gentoo-e5-9b-bd-e5-86-85-e6-ba-90.md","raw":"---\ntitle: Gentoo 国内源\ntags:\n  - gentoo\nid: 1675\ncategories:\n  - Linux\ndate: 2014-04-10 10:05:51\n---\n\n修改 etc/make.conf\n\n`GENTOO_MIRRORS=\"http://mirrors.163.com/gentoo/\"\nSYNC=\"rsync://mirrors.163.com/gentoo-portage\"\n#GENTOO_MIRRORS=\"http://mirrors.xmu.edu.cn/gentoo/\"\n#SYNC=\"rsync://mirrors.xmu.edu.cn/gentoo\"\n#GENTOO_MIRRORS=\"http://dev.gentoo.org/~vapier/dist/\"`","slug":"gentoo-e5-9b-bd-e5-86-85-e6-ba-90","published":1,"updated":"2018-01-13T05:07:00.445Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjccw7xam0056aqcr0wbhqahl","content":"<p>修改 etc/make.conf</p>\n<p>`GENTOO_MIRRORS=”<a href=\"http://mirrors.163.com/gentoo/\" target=\"_blank\" rel=\"noopener\">http://mirrors.163.com/gentoo/</a>“<br>SYNC=”rsync://mirrors.163.com/gentoo-portage”</p>\n<p>#GENTOO_MIRRORS=”<a href=\"http://mirrors.xmu.edu.cn/gentoo/\" target=\"_blank\" rel=\"noopener\">http://mirrors.xmu.edu.cn/gentoo/</a>“</p>\n<p>#SYNC=”rsync://mirrors.xmu.edu.cn/gentoo”</p>\n<p>#GENTOO_MIRRORS=”<a href=\"http://dev.gentoo.org/~vapier/dist/&quot;`\" target=\"_blank\" rel=\"noopener\">http://dev.gentoo.org/~vapier/dist/&quot;`</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>修改 etc/make.conf</p>\n<p>`GENTOO_MIRRORS=”<a href=\"http://mirrors.163.com/gentoo/\" target=\"_blank\" rel=\"noopener\">http://mirrors.163.com/gentoo/</a>“<br>SYNC=”rsync://mirrors.163.com/gentoo-portage”</p>\n<p>#GENTOO_MIRRORS=”<a href=\"http://mirrors.xmu.edu.cn/gentoo/\" target=\"_blank\" rel=\"noopener\">http://mirrors.xmu.edu.cn/gentoo/</a>“</p>\n<p>#SYNC=”rsync://mirrors.xmu.edu.cn/gentoo”</p>\n<p>#GENTOO_MIRRORS=”<a href=\"http://dev.gentoo.org/~vapier/dist/&quot;`\" target=\"_blank\" rel=\"noopener\">http://dev.gentoo.org/~vapier/dist/&quot;`</a></p>\n"},{"title":"Gentoo Apache 加载mod_wsgi Invalid command 'WSGIPassAuthorization' 解决办法","id":"1658","date":"2014-04-10T00:57:32.000Z","_content":"\nGentoo Apache 加载mod_wsgi 启动apache 出现  Invalid command 'WSGIPassAuthorization' ，就是mod_wsgi没 load 上，于是在 /etc/apache2/apache2.conf 加上 \n`LoadModule wsgi_module modules/mod_wsgi.so`\n还不行，版本问题？于是重新编译了一个老版本的，还是不行，后来发现 文件改错了，应该在\n`/etc/apache2/httpd.conf` 加上。重启ok","source":"_posts/gentoo-apache-e5-8a-a0-e8-bd-bdmod-wsgi-invalid-command-wsgipassauthorization-e8-a7-a3-e5-86-b3-e5-8a-9e-e6-b3-95.md","raw":"---\ntitle: Gentoo Apache 加载mod_wsgi Invalid command 'WSGIPassAuthorization' 解决办法\ntags:\n  - apache\n  - gentoo\n  - mod_wsgi\nid: 1658\ncategories:\n  - Linux\ndate: 2014-04-10 08:57:32\n---\n\nGentoo Apache 加载mod_wsgi 启动apache 出现  Invalid command 'WSGIPassAuthorization' ，就是mod_wsgi没 load 上，于是在 /etc/apache2/apache2.conf 加上 \n`LoadModule wsgi_module modules/mod_wsgi.so`\n还不行，版本问题？于是重新编译了一个老版本的，还是不行，后来发现 文件改错了，应该在\n`/etc/apache2/httpd.conf` 加上。重启ok","slug":"gentoo-apache-e5-8a-a0-e8-bd-bdmod-wsgi-invalid-command-wsgipassauthorization-e8-a7-a3-e5-86-b3-e5-8a-9e-e6-b3-95","published":1,"updated":"2018-01-13T05:07:00.497Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjccw7xan0059aqcreqn0orxq","content":"<p>Gentoo Apache 加载mod_wsgi 启动apache 出现  Invalid command ‘WSGIPassAuthorization’ ，就是mod_wsgi没 load 上，于是在 /etc/apache2/apache2.conf 加上<br><code>LoadModule wsgi_module modules/mod_wsgi.so</code><br>还不行，版本问题？于是重新编译了一个老版本的，还是不行，后来发现 文件改错了，应该在<br><code>/etc/apache2/httpd.conf</code> 加上。重启ok</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Gentoo Apache 加载mod_wsgi 启动apache 出现  Invalid command ‘WSGIPassAuthorization’ ，就是mod_wsgi没 load 上，于是在 /etc/apache2/apache2.conf 加上<br><code>LoadModule wsgi_module modules/mod_wsgi.so</code><br>还不行，版本问题？于是重新编译了一个老版本的，还是不行，后来发现 文件改错了，应该在<br><code>/etc/apache2/httpd.conf</code> 加上。重启ok</p>\n"},{"title":"Hadoop与Hive的单机配置","id":"2194","date":"2014-10-04T02:32:49.000Z","_content":"\n**Download**\nwget http://mirrors.hust.edu.cn/apache/hadoop/common/hadoop-2.5.1/hadoop-2.5.1.tar.gz\nwget http://mirrors.hust.edu.cn/apache/hive/hive-0.13.1/apache-hive-0.13.1-bin.tar.gz\n\n**Java**\nyum install java java-1.7.0-openjdk-devel \nexport JAVA_HOME=/usr/lib/jvm/java-1.7.0-openjdk-1.7.0.25.x86_64\n\n**Hadoop**\n解压hadoop并进入\n编辑conf/hadoop-env.sh，whereis 查看java，不用包含bin\n`export JAVA_HOME=/usr`\n\n修改etc/hadoop/core-site.xml：\n`\n<configuration>\n  <property>\n    <name>fs.defaultFS</name>\n    <value>hdfs://localhost:9000</value>\n    <description>The name of the default file system.</description>\n  </property>\n\n  <property>\n    <name>hadoop.tmp.dir</name>\n    <value>/home/hadoop/tmp/hadoop</value>\n    <description>A base for other temporary directories.</description>\n  </property>\n\n  <property>\n    <name>io.native.lib.available</name>\n    <value>false</value>\n    <description>default value is true:Should native hadoop libraries, if present, be used.</description>\n  </property>\n</configuration>\n`\n\n修改etc/hadoop/hdfs-site.xml：\n`\n<configuration>\n<property>  \n  <name>dfs.namenode.name.dir</name>  \n  <value>file:/home/hadoop/dfs/name</value>  \n</property>  \n<property>  \n  <name>dfs.namenode.data.dir</name>  \n  <value>file:/home/hadoop/dfs/data</value>  \n</property>\n <property>\n  <name>dfs.replication</name>\n  <value>1</value>\n </property>\n<configuration>\n`\n\n修改etc/hadoop/mapred-site.xml：\n`\n<configuration>\n <property>\n  <name>mapred.job.tracker</name>\n  <value>localhost:9001</value>\n </property>\n</configuration>`\n\n初始化 ./bin/hadoop namenode –format<!--more-->\n\n启动\nsbin/start-dfs.sh\nsbin/start-yarn.sh\njps命令检查运行的程序有哪些\n4287 DataNode\n4543 TaskTracker\n4192 NameNode\n4444 JobTracker\n4380 SecondaryNameNode\n\n**Hive**\n#关闭hadoop安全模式 ./bin/hadoop dfsadmin -safemode leave\n环境变量\n`echo \"export HADOOP_HOME=$PWD\" >> /etc/profile.d/hadoop.sh\necho \"PATH=$PATH:$HADOOP_HOME/bin\" >> /etc/profile.d/hadoop.sh\n. /etc/profile\necho $HADOOP_HOME`\n\n建立hive要用的目录\n`./bin/hadoop fs -mkdir /tmp\n./bin/hadoop fs -mkdir /user/hive/warehouse\n./bin/hadoop fs -chmod g+w /tmp\n./bin/hadoop fs -chmod g+w /user/hive/warehouse`\n\n解压Hive进入\n运行 ./bin/hive\n最后加个命令吧\nln -s /home/vagrant/apache-hive-0.13.1-bin/bin/hive /usr/bin\n\n**More**\n另外，可以自行下载已经配置好的box\n`http://hortonworks.com/products/hortonworks-sandbox/\nhttp://www.cloudera.com/content/cloudera/en/downloads/quickstart_vms/cdh-5-1-x1.html`","source":"_posts/hadoop-e4-b8-8ehive-e7-9a-84-e5-8d-95-e6-9c-ba-e9-85-8d-e7-bd-ae.md","raw":"---\ntitle: Hadoop与Hive的单机配置\ntags:\n  - hadoop\n  - hive\nid: 2194\ncategories:\n  - Hadoop\ndate: 2014-10-04 10:32:49\n---\n\n**Download**\nwget http://mirrors.hust.edu.cn/apache/hadoop/common/hadoop-2.5.1/hadoop-2.5.1.tar.gz\nwget http://mirrors.hust.edu.cn/apache/hive/hive-0.13.1/apache-hive-0.13.1-bin.tar.gz\n\n**Java**\nyum install java java-1.7.0-openjdk-devel \nexport JAVA_HOME=/usr/lib/jvm/java-1.7.0-openjdk-1.7.0.25.x86_64\n\n**Hadoop**\n解压hadoop并进入\n编辑conf/hadoop-env.sh，whereis 查看java，不用包含bin\n`export JAVA_HOME=/usr`\n\n修改etc/hadoop/core-site.xml：\n`\n<configuration>\n  <property>\n    <name>fs.defaultFS</name>\n    <value>hdfs://localhost:9000</value>\n    <description>The name of the default file system.</description>\n  </property>\n\n  <property>\n    <name>hadoop.tmp.dir</name>\n    <value>/home/hadoop/tmp/hadoop</value>\n    <description>A base for other temporary directories.</description>\n  </property>\n\n  <property>\n    <name>io.native.lib.available</name>\n    <value>false</value>\n    <description>default value is true:Should native hadoop libraries, if present, be used.</description>\n  </property>\n</configuration>\n`\n\n修改etc/hadoop/hdfs-site.xml：\n`\n<configuration>\n<property>  \n  <name>dfs.namenode.name.dir</name>  \n  <value>file:/home/hadoop/dfs/name</value>  \n</property>  \n<property>  \n  <name>dfs.namenode.data.dir</name>  \n  <value>file:/home/hadoop/dfs/data</value>  \n</property>\n <property>\n  <name>dfs.replication</name>\n  <value>1</value>\n </property>\n<configuration>\n`\n\n修改etc/hadoop/mapred-site.xml：\n`\n<configuration>\n <property>\n  <name>mapred.job.tracker</name>\n  <value>localhost:9001</value>\n </property>\n</configuration>`\n\n初始化 ./bin/hadoop namenode –format<!--more-->\n\n启动\nsbin/start-dfs.sh\nsbin/start-yarn.sh\njps命令检查运行的程序有哪些\n4287 DataNode\n4543 TaskTracker\n4192 NameNode\n4444 JobTracker\n4380 SecondaryNameNode\n\n**Hive**\n#关闭hadoop安全模式 ./bin/hadoop dfsadmin -safemode leave\n环境变量\n`echo \"export HADOOP_HOME=$PWD\" >> /etc/profile.d/hadoop.sh\necho \"PATH=$PATH:$HADOOP_HOME/bin\" >> /etc/profile.d/hadoop.sh\n. /etc/profile\necho $HADOOP_HOME`\n\n建立hive要用的目录\n`./bin/hadoop fs -mkdir /tmp\n./bin/hadoop fs -mkdir /user/hive/warehouse\n./bin/hadoop fs -chmod g+w /tmp\n./bin/hadoop fs -chmod g+w /user/hive/warehouse`\n\n解压Hive进入\n运行 ./bin/hive\n最后加个命令吧\nln -s /home/vagrant/apache-hive-0.13.1-bin/bin/hive /usr/bin\n\n**More**\n另外，可以自行下载已经配置好的box\n`http://hortonworks.com/products/hortonworks-sandbox/\nhttp://www.cloudera.com/content/cloudera/en/downloads/quickstart_vms/cdh-5-1-x1.html`","slug":"hadoop-e4-b8-8ehive-e7-9a-84-e5-8d-95-e6-9c-ba-e9-85-8d-e7-bd-ae","published":1,"updated":"2018-01-13T05:07:00.466Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjccw7xao005caqcrottoqg89","content":"<p><strong>Download</strong><br>wget <a href=\"http://mirrors.hust.edu.cn/apache/hadoop/common/hadoop-2.5.1/hadoop-2.5.1.tar.gz\" target=\"_blank\" rel=\"noopener\">http://mirrors.hust.edu.cn/apache/hadoop/common/hadoop-2.5.1/hadoop-2.5.1.tar.gz</a><br>wget <a href=\"http://mirrors.hust.edu.cn/apache/hive/hive-0.13.1/apache-hive-0.13.1-bin.tar.gz\" target=\"_blank\" rel=\"noopener\">http://mirrors.hust.edu.cn/apache/hive/hive-0.13.1/apache-hive-0.13.1-bin.tar.gz</a></p>\n<p><strong>Java</strong><br>yum install java java-1.7.0-openjdk-devel<br>export JAVA_HOME=/usr/lib/jvm/java-1.7.0-openjdk-1.7.0.25.x86_64</p>\n<p><strong>Hadoop</strong><br>解压hadoop并进入<br>编辑conf/hadoop-env.sh，whereis 查看java，不用包含bin<br><code>export JAVA_HOME=/usr</code></p>\n<p>修改etc/hadoop/core-site.xml：<br>`</p>\n<p><configuration><br>  <property><br>    <name>fs.defaultFS</name><br>    <value>hdfs://localhost:9000</value><br>    <description>The name of the default file system.</description><br>  </property></configuration></p>\n  <property><br>    <name>hadoop.tmp.dir</name><br>    <value>/home/hadoop/tmp/hadoop</value><br>    <description>A base for other temporary directories.</description><br>  </property>\n\n<p>  <property><br>    <name>io.native.lib.available</name><br>    <value>false</value><br>    <description>default value is true:Should native hadoop libraries, if present, be used.</description><br>  </property><br><br>`</p>\n<p>修改etc/hadoop/hdfs-site.xml：<br>`</p>\n<p><configuration></configuration></p>\n<p><property><br>  <name>dfs.namenode.name.dir</name><br>  <value>file:/home/hadoop/dfs/name</value><br></property>  </p>\n<p><property><br>  <name>dfs.namenode.data.dir</name><br>  <value>file:/home/hadoop/dfs/data</value><br></property><br> <property><br>  <name>dfs.replication</name><br>  <value>1</value><br> </property></p>\n<p><configuration><br>`</configuration></p>\n<p>修改etc/hadoop/mapred-site.xml：<br>`</p>\n<p><configuration><br> <property><br>  <name>mapred.job.tracker</name><br>  <value>localhost:9001</value><br> </property><br></configuration>`</p>\n<p>初始化 ./bin/hadoop namenode –format<a id=\"more\"></a></p>\n<p>启动<br>sbin/start-dfs.sh<br>sbin/start-yarn.sh<br>jps命令检查运行的程序有哪些<br>4287 DataNode<br>4543 TaskTracker<br>4192 NameNode<br>4444 JobTracker<br>4380 SecondaryNameNode</p>\n<p><strong>Hive</strong></p>\n<p>#关闭hadoop安全模式 ./bin/hadoop dfsadmin -safemode leave<br>环境变量<br><code>echo &quot;export HADOOP_HOME=$PWD&quot; &gt;&gt; /etc/profile.d/hadoop.sh\necho &quot;PATH=$PATH:$HADOOP_HOME/bin&quot; &gt;&gt; /etc/profile.d/hadoop.sh\n. /etc/profile\necho $HADOOP_HOME</code></p>\n<p>建立hive要用的目录<br><code>./bin/hadoop fs -mkdir /tmp\n./bin/hadoop fs -mkdir /user/hive/warehouse\n./bin/hadoop fs -chmod g+w /tmp\n./bin/hadoop fs -chmod g+w /user/hive/warehouse</code></p>\n<p>解压Hive进入<br>运行 ./bin/hive<br>最后加个命令吧<br>ln -s /home/vagrant/apache-hive-0.13.1-bin/bin/hive /usr/bin</p>\n<p><strong>More</strong><br>另外，可以自行下载已经配置好的box<br><code>http://hortonworks.com/products/hortonworks-sandbox/\nhttp://www.cloudera.com/content/cloudera/en/downloads/quickstart_vms/cdh-5-1-x1.html</code></p>\n","site":{"data":{}},"excerpt":"<p><strong>Download</strong><br>wget <a href=\"http://mirrors.hust.edu.cn/apache/hadoop/common/hadoop-2.5.1/hadoop-2.5.1.tar.gz\" target=\"_blank\" rel=\"noopener\">http://mirrors.hust.edu.cn/apache/hadoop/common/hadoop-2.5.1/hadoop-2.5.1.tar.gz</a><br>wget <a href=\"http://mirrors.hust.edu.cn/apache/hive/hive-0.13.1/apache-hive-0.13.1-bin.tar.gz\" target=\"_blank\" rel=\"noopener\">http://mirrors.hust.edu.cn/apache/hive/hive-0.13.1/apache-hive-0.13.1-bin.tar.gz</a></p>\n<p><strong>Java</strong><br>yum install java java-1.7.0-openjdk-devel<br>export JAVA_HOME=/usr/lib/jvm/java-1.7.0-openjdk-1.7.0.25.x86_64</p>\n<p><strong>Hadoop</strong><br>解压hadoop并进入<br>编辑conf/hadoop-env.sh，whereis 查看java，不用包含bin<br><code>export JAVA_HOME=/usr</code></p>\n<p>修改etc/hadoop/core-site.xml：<br>`</p>\n<p><configuration><br>  <property><br>    <name>fs.defaultFS</name><br>    <value>hdfs://localhost:9000</value><br>    <description>The name of the default file system.</description><br>  </property></configuration></p>\n  <property><br>    <name>hadoop.tmp.dir</name><br>    <value>/home/hadoop/tmp/hadoop</value><br>    <description>A base for other temporary directories.</description><br>  </property>\n\n<p>  <property><br>    <name>io.native.lib.available</name><br>    <value>false</value><br>    <description>default value is true:Should native hadoop libraries, if present, be used.</description><br>  </property><br><br>`</p>\n<p>修改etc/hadoop/hdfs-site.xml：<br>`</p>\n<p><configuration></configuration></p>\n<p><property><br>  <name>dfs.namenode.name.dir</name><br>  <value>file:/home/hadoop/dfs/name</value><br></property>  </p>\n<p><property><br>  <name>dfs.namenode.data.dir</name><br>  <value>file:/home/hadoop/dfs/data</value><br></property><br> <property><br>  <name>dfs.replication</name><br>  <value>1</value><br> </property></p>\n<p><configuration><br>`</configuration></p>\n<p>修改etc/hadoop/mapred-site.xml：<br>`</p>\n<p><configuration><br> <property><br>  <name>mapred.job.tracker</name><br>  <value>localhost:9001</value><br> </property><br></configuration>`</p>\n<p>初始化 ./bin/hadoop namenode –format","more":"</p>\n<p>启动<br>sbin/start-dfs.sh<br>sbin/start-yarn.sh<br>jps命令检查运行的程序有哪些<br>4287 DataNode<br>4543 TaskTracker<br>4192 NameNode<br>4444 JobTracker<br>4380 SecondaryNameNode</p>\n<p><strong>Hive</strong></p>\n<p>#关闭hadoop安全模式 ./bin/hadoop dfsadmin -safemode leave<br>环境变量<br><code>echo &quot;export HADOOP_HOME=$PWD&quot; &gt;&gt; /etc/profile.d/hadoop.sh\necho &quot;PATH=$PATH:$HADOOP_HOME/bin&quot; &gt;&gt; /etc/profile.d/hadoop.sh\n. /etc/profile\necho $HADOOP_HOME</code></p>\n<p>建立hive要用的目录<br><code>./bin/hadoop fs -mkdir /tmp\n./bin/hadoop fs -mkdir /user/hive/warehouse\n./bin/hadoop fs -chmod g+w /tmp\n./bin/hadoop fs -chmod g+w /user/hive/warehouse</code></p>\n<p>解压Hive进入<br>运行 ./bin/hive<br>最后加个命令吧<br>ln -s /home/vagrant/apache-hive-0.13.1-bin/bin/hive /usr/bin</p>\n<p><strong>More</strong><br>另外，可以自行下载已经配置好的box<br><code>http://hortonworks.com/products/hortonworks-sandbox/\nhttp://www.cloudera.com/content/cloudera/en/downloads/quickstart_vms/cdh-5-1-x1.html</code></p>"},{"title":"Getting things done-GTD的理念","id":"62","date":"2010-06-22T08:51:53.000Z","_content":"\n![](http://filer.blogbus.com/5599785/559978512771969202.jpg)\n\nGTD的核心理念在于只有将你心中所想的所有的事情都写下来并且安排好下一步的计划，你才能够心无挂念，全力以赴地做好目前的工作，提高效率。 \n　　而当你总是有些事萦绕在心头，悬而未决的时候，你要么就是会不时地想起它而影响现在的工作，要么就是会忘记了去做。 \n　　而GTD通过将所有的这些事都罗列出来再进行分类，确定下一步的处理方法，将所有这些悬而未决之事都纳入我们可控制的一个管理体系中。","source":"_posts/getting-things-done-gtd-e7-9a-84-e7-90-86-e5-bf-b5.md","raw":"---\ntitle: Getting things done-GTD的理念\nid: 62\ncategories:\n  - Other\ndate: 2010-06-22 16:51:53\ntags:\n---\n\n![](http://filer.blogbus.com/5599785/559978512771969202.jpg)\n\nGTD的核心理念在于只有将你心中所想的所有的事情都写下来并且安排好下一步的计划，你才能够心无挂念，全力以赴地做好目前的工作，提高效率。 \n　　而当你总是有些事萦绕在心头，悬而未决的时候，你要么就是会不时地想起它而影响现在的工作，要么就是会忘记了去做。 \n　　而GTD通过将所有的这些事都罗列出来再进行分类，确定下一步的处理方法，将所有这些悬而未决之事都纳入我们可控制的一个管理体系中。","slug":"getting-things-done-gtd-e7-9a-84-e7-90-86-e5-bf-b5","published":1,"updated":"2018-01-13T05:07:00.475Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjccw7xap005faqcrpc6ncamb","content":"<p><img src=\"http://filer.blogbus.com/5599785/559978512771969202.jpg\" alt=\"\"></p>\n<p>GTD的核心理念在于只有将你心中所想的所有的事情都写下来并且安排好下一步的计划，你才能够心无挂念，全力以赴地做好目前的工作，提高效率。<br>　　而当你总是有些事萦绕在心头，悬而未决的时候，你要么就是会不时地想起它而影响现在的工作，要么就是会忘记了去做。<br>　　而GTD通过将所有的这些事都罗列出来再进行分类，确定下一步的处理方法，将所有这些悬而未决之事都纳入我们可控制的一个管理体系中。</p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"http://filer.blogbus.com/5599785/559978512771969202.jpg\" alt=\"\"></p>\n<p>GTD的核心理念在于只有将你心中所想的所有的事情都写下来并且安排好下一步的计划，你才能够心无挂念，全力以赴地做好目前的工作，提高效率。<br>　　而当你总是有些事萦绕在心头，悬而未决的时候，你要么就是会不时地想起它而影响现在的工作，要么就是会忘记了去做。<br>　　而GTD通过将所有的这些事都罗列出来再进行分类，确定下一步的处理方法，将所有这些悬而未决之事都纳入我们可控制的一个管理体系中。</p>\n"},{"title":"Gentoo 安装全过程记录","id":"1646","date":"2014-04-08T07:32:57.000Z","_content":"\n英文安装手册 http://www.gentoo.org/doc/en/gentoo-x86-quickinstall.xml\n\n下载：http://mirrors.163.com/gentoo/releases/x86/current-iso/install-x86-minimal-20140401.iso\n\n引导启动：出现： boot 输入\"gentoo nox\" , 等一会，出现livecd 则以root 进行livecd\n\n网络连接\n输入“ifconfig“回车，如果显示结果中有eth0，则表明已建好了网络连接。如果没有输入”net-setup eth0“回车 ，选择有线连接，自动DHCP\n\nroot用户的密码\n输入“passwd“ 再输入两次密码\n\n打开ssh\n输入“/etc/init.d/sshd start”\n\n分区\nLivecd ~ # fdisk /dev/sda\n<!--more-->\nCommand (m for help): 输入n\nCommand action\nextended\nprimary partition\n输入p\nPartition number (1-4): 输入1\nFirst cylinder (15-10443, default 15): 默认回车\nLast cylinder, +cylinders or +size{K,M,G} (15-10443, default 10443):+100M\n以下同理 n p 2 +2G\n以下同理 n p 3 默认回车（即默认剩余大小分给root）\n设置2为swap\nCommand (m for help): t\nPartition number (1-4): 2\nHex code (type L to list codes): 82\nChanged system type of partition 2 to 82 (Linux swap / Solaris)\n查看分区\nCommand (m for help): p\nDevice Boot    Start    End    Blocks   Id   System\n/dev/sda1    1    14    112423+   83   Linux\n/dev/sda2    15    146    1060290   82   Linux swap / Solaris\n/dev/sda3    147    10443    82710652+   83   Linux\n格式化分区\nCommand (m for help): wq\nmkfs.ext3 /dev/sda1\nmkswap /dev/sda2\nmkfs.ext4 /dev/sda3\n挂载分区\nswapon /dev/sda2\nmount /dev/sda3 /mnt/gentoo\nmkdir /mnt/gentoo/boot\nmount /dev/sda1 /mnt/gentoo/boot\n\n进入Gentoo的挂载点\n# cd /mnt/gentoo\n\n下载Stage Portage\nwget http://tel.mirrors.163.com/gentoo/releases/x86/current-iso/stage3-i686-20140401.tar.bz2\n# tar xvjpf stage3-*.tar.bz2\nwget http://tel.mirrors.163.com/gentoo/snapshots/portage-latest.tar.bz2\n# tar xvjf /mnt/gentoo/portage-latest.tar.bz2 -C /mnt/gentoo/usr\n\n配置编译选项\n/mnt/gentoo/etc/make.conf\n加入\nCFLAGS=\"-O2 -march=i686 -pipe\"\nCXXFLAGS=\"${CFLAGS}\"\n\n选择境像及rsync站点\n# mirrorselect -i -o >> /mnt/gentoo/etc/make.conf\n# mirrorselect -i -r -o >> /mnt/gentoo/etc/make.conf\n\n复制DNS信息 （参数\"-L\"是必须的，用来确保我们拷贝的不是一个符号链接）\n# cp -L /etc/resolv.conf /mnt/gentoo/etc/\n\n挂载/proc和/dev\n# mount -t proc none /mnt/gentoo/proc\n# mount -o bind /dev /mnt/gentoo/dev\n\nchroot到新环境里\n# chroot /mnt/gentoo /bin/bash\n# env-update\n>> Regenerating /etc/ld.so.cache...\n# source /etc/profile\n# export PS1=\"(chroot) $PS1\"\n\n更新Portage\n# emerge --sync\n(如果你在使用一个慢速终端比如一些帧缓冲或者是串口的控制台，你可以添加--quiet选项来加速这个过程:)\n# emerge --sync --quiet\n\n验证系统profile\n# eselect profile list\nAvailable profile symlink targets:\n [1]   default/linux/x86/10.0 *\n [2]   default/linux/x86/10.0/desktop\n\n切换profile （根据实际需求选择）\n# eselect profile set 3\n\nUSE设置\n# nano -w /etc/make.conf\nUSE=\"-gtk -gnome qt3 qt4 kde dvd alsa cdr\"\n\n指定你的locale\n# nano -w /etc/locale.gen\nen_US ISO-8859-1\nen_US.UTF-8 UTF-8\nzh_CN UTF-8\nzh_CN GBK\n\n设置时区 （用Hongkong）\n# ls /usr/share/zoneinfo\n# cp /usr/share/zoneinfo/Hongkong /etc/localtime\n\n安装内核源码 （这一步很慢,如果下载过程中断了，多重试几次）\n# emerge gentoo-sources\n\n设置menuconfig\n# cd /usr/src/linux\n# make menuconfig\nFile systems --->Pseudo Filesystems --->\n    [*] /proc file system support\n    [*]tmpfs Virtual memory file system support (former shm fs)\next3和ext4都必须选上\nDevice Drivers --->\n  Networking Support --->\n    <*> PPP (point-to-point protocol) support\n    <*>   PPP support for async serial ports\n    <*>   PPP support for sync tty ports\n\n复制安装光盘的配置文件\n# zcat /proc/config.gz > /usr/share/genkernel/arch/x86/kernel-config\n\n建立kernel\n# emerge genkernel\n# genkernel all (这一步很慢)\n\n查看内核和initrd的名字\n# ls /boot/kernel* /boot/initramfs* （找个记事本记下来，等会有用）\n/boot/initramfs-genkernel-x86-3.12.13-gentoo  /boot/kernel-genkernel-x86-3.12.13-gentoo\n\n修改/etc/fstab\n# nano -w /etc/fstab\n/dev/sda1 /boot   ext3    defaults 1 2\n/dev/sda2 none   swap   sw    0 0\n/dev/sda3 /    ext4    defaults 0 1\n\n让eth0自动获得IP地址\n# nano -w /etc/conf.d/net\n加上\nconfig_eth0=( \"dhcp\" )\n\n自动启用网络\n# cd /etc/init.d\n# ln -s net.lo net.eth0\n# rc-update add net.eth0 default\n\n设置root密码\n# passwd\n\n添加一个用户\n# useradd –m –G users yourname\n# passwd yourname\n\n安装系统日志工具\n# emerge syslog-ng\n# rc-update add syslog-ng default\n\n安装GRUB，设置引导\n# emerge grub\n\n启动GRUB\n# grub\ngrub> root (hd0,0)\ngrub> setup (hd0)\ngrub> quit\n\nbash: emergdd: command not found ,刚开始时grub不能用，用了下面这个命令就可以了。\nemerge grub-static\n\n创建/boot/grub/grub.conf\n# nano -w /boot/grub/grub.conf\n输入\ndefault 0\ntimeout 30\n#splashimage=(hd0,0)/boot/grub/splash.xpm.gz\ntitle Gentoo\nroot (hd0,0)\nkernel /boot/kernel-genkernel-x86-3.12.13-gentoo root=/dev/ram0 init=/linuxrc ramdisk=8192 real_root=/dev/sda3 \ninitrd /boot/initramfs-genkernel-x86-3.12.13-gentoo\n\nexit退出系统环境，reboot重启系统，卸载iso镜像，如果进入不了系统，可以在引导grub界面使用,e编辑，b启动修改grub.conf\nOK","source":"_posts/gentoo-e5-ae-89-e8-a3-85-e5-85-a8-e8-bf-87-e7-a8-8b-e8-ae-b0-e5-bd-95.md","raw":"---\ntitle: Gentoo 安装全过程记录\ntags:\n  - gentoo\n  - Linux &amp; Fedora\nid: 1646\ncategories:\n  - Linux\ndate: 2014-04-08 15:32:57\n---\n\n英文安装手册 http://www.gentoo.org/doc/en/gentoo-x86-quickinstall.xml\n\n下载：http://mirrors.163.com/gentoo/releases/x86/current-iso/install-x86-minimal-20140401.iso\n\n引导启动：出现： boot 输入\"gentoo nox\" , 等一会，出现livecd 则以root 进行livecd\n\n网络连接\n输入“ifconfig“回车，如果显示结果中有eth0，则表明已建好了网络连接。如果没有输入”net-setup eth0“回车 ，选择有线连接，自动DHCP\n\nroot用户的密码\n输入“passwd“ 再输入两次密码\n\n打开ssh\n输入“/etc/init.d/sshd start”\n\n分区\nLivecd ~ # fdisk /dev/sda\n<!--more-->\nCommand (m for help): 输入n\nCommand action\nextended\nprimary partition\n输入p\nPartition number (1-4): 输入1\nFirst cylinder (15-10443, default 15): 默认回车\nLast cylinder, +cylinders or +size{K,M,G} (15-10443, default 10443):+100M\n以下同理 n p 2 +2G\n以下同理 n p 3 默认回车（即默认剩余大小分给root）\n设置2为swap\nCommand (m for help): t\nPartition number (1-4): 2\nHex code (type L to list codes): 82\nChanged system type of partition 2 to 82 (Linux swap / Solaris)\n查看分区\nCommand (m for help): p\nDevice Boot    Start    End    Blocks   Id   System\n/dev/sda1    1    14    112423+   83   Linux\n/dev/sda2    15    146    1060290   82   Linux swap / Solaris\n/dev/sda3    147    10443    82710652+   83   Linux\n格式化分区\nCommand (m for help): wq\nmkfs.ext3 /dev/sda1\nmkswap /dev/sda2\nmkfs.ext4 /dev/sda3\n挂载分区\nswapon /dev/sda2\nmount /dev/sda3 /mnt/gentoo\nmkdir /mnt/gentoo/boot\nmount /dev/sda1 /mnt/gentoo/boot\n\n进入Gentoo的挂载点\n# cd /mnt/gentoo\n\n下载Stage Portage\nwget http://tel.mirrors.163.com/gentoo/releases/x86/current-iso/stage3-i686-20140401.tar.bz2\n# tar xvjpf stage3-*.tar.bz2\nwget http://tel.mirrors.163.com/gentoo/snapshots/portage-latest.tar.bz2\n# tar xvjf /mnt/gentoo/portage-latest.tar.bz2 -C /mnt/gentoo/usr\n\n配置编译选项\n/mnt/gentoo/etc/make.conf\n加入\nCFLAGS=\"-O2 -march=i686 -pipe\"\nCXXFLAGS=\"${CFLAGS}\"\n\n选择境像及rsync站点\n# mirrorselect -i -o >> /mnt/gentoo/etc/make.conf\n# mirrorselect -i -r -o >> /mnt/gentoo/etc/make.conf\n\n复制DNS信息 （参数\"-L\"是必须的，用来确保我们拷贝的不是一个符号链接）\n# cp -L /etc/resolv.conf /mnt/gentoo/etc/\n\n挂载/proc和/dev\n# mount -t proc none /mnt/gentoo/proc\n# mount -o bind /dev /mnt/gentoo/dev\n\nchroot到新环境里\n# chroot /mnt/gentoo /bin/bash\n# env-update\n>> Regenerating /etc/ld.so.cache...\n# source /etc/profile\n# export PS1=\"(chroot) $PS1\"\n\n更新Portage\n# emerge --sync\n(如果你在使用一个慢速终端比如一些帧缓冲或者是串口的控制台，你可以添加--quiet选项来加速这个过程:)\n# emerge --sync --quiet\n\n验证系统profile\n# eselect profile list\nAvailable profile symlink targets:\n [1]   default/linux/x86/10.0 *\n [2]   default/linux/x86/10.0/desktop\n\n切换profile （根据实际需求选择）\n# eselect profile set 3\n\nUSE设置\n# nano -w /etc/make.conf\nUSE=\"-gtk -gnome qt3 qt4 kde dvd alsa cdr\"\n\n指定你的locale\n# nano -w /etc/locale.gen\nen_US ISO-8859-1\nen_US.UTF-8 UTF-8\nzh_CN UTF-8\nzh_CN GBK\n\n设置时区 （用Hongkong）\n# ls /usr/share/zoneinfo\n# cp /usr/share/zoneinfo/Hongkong /etc/localtime\n\n安装内核源码 （这一步很慢,如果下载过程中断了，多重试几次）\n# emerge gentoo-sources\n\n设置menuconfig\n# cd /usr/src/linux\n# make menuconfig\nFile systems --->Pseudo Filesystems --->\n    [*] /proc file system support\n    [*]tmpfs Virtual memory file system support (former shm fs)\next3和ext4都必须选上\nDevice Drivers --->\n  Networking Support --->\n    <*> PPP (point-to-point protocol) support\n    <*>   PPP support for async serial ports\n    <*>   PPP support for sync tty ports\n\n复制安装光盘的配置文件\n# zcat /proc/config.gz > /usr/share/genkernel/arch/x86/kernel-config\n\n建立kernel\n# emerge genkernel\n# genkernel all (这一步很慢)\n\n查看内核和initrd的名字\n# ls /boot/kernel* /boot/initramfs* （找个记事本记下来，等会有用）\n/boot/initramfs-genkernel-x86-3.12.13-gentoo  /boot/kernel-genkernel-x86-3.12.13-gentoo\n\n修改/etc/fstab\n# nano -w /etc/fstab\n/dev/sda1 /boot   ext3    defaults 1 2\n/dev/sda2 none   swap   sw    0 0\n/dev/sda3 /    ext4    defaults 0 1\n\n让eth0自动获得IP地址\n# nano -w /etc/conf.d/net\n加上\nconfig_eth0=( \"dhcp\" )\n\n自动启用网络\n# cd /etc/init.d\n# ln -s net.lo net.eth0\n# rc-update add net.eth0 default\n\n设置root密码\n# passwd\n\n添加一个用户\n# useradd –m –G users yourname\n# passwd yourname\n\n安装系统日志工具\n# emerge syslog-ng\n# rc-update add syslog-ng default\n\n安装GRUB，设置引导\n# emerge grub\n\n启动GRUB\n# grub\ngrub> root (hd0,0)\ngrub> setup (hd0)\ngrub> quit\n\nbash: emergdd: command not found ,刚开始时grub不能用，用了下面这个命令就可以了。\nemerge grub-static\n\n创建/boot/grub/grub.conf\n# nano -w /boot/grub/grub.conf\n输入\ndefault 0\ntimeout 30\n#splashimage=(hd0,0)/boot/grub/splash.xpm.gz\ntitle Gentoo\nroot (hd0,0)\nkernel /boot/kernel-genkernel-x86-3.12.13-gentoo root=/dev/ram0 init=/linuxrc ramdisk=8192 real_root=/dev/sda3 \ninitrd /boot/initramfs-genkernel-x86-3.12.13-gentoo\n\nexit退出系统环境，reboot重启系统，卸载iso镜像，如果进入不了系统，可以在引导grub界面使用,e编辑，b启动修改grub.conf\nOK","slug":"gentoo-e5-ae-89-e8-a3-85-e5-85-a8-e8-bf-87-e7-a8-8b-e8-ae-b0-e5-bd-95","published":1,"updated":"2018-01-13T05:07:00.466Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjccw7xar005kaqcr0ewjp6il","content":"<p>英文安装手册 <a href=\"http://www.gentoo.org/doc/en/gentoo-x86-quickinstall.xml\" target=\"_blank\" rel=\"noopener\">http://www.gentoo.org/doc/en/gentoo-x86-quickinstall.xml</a></p>\n<p>下载：<a href=\"http://mirrors.163.com/gentoo/releases/x86/current-iso/install-x86-minimal-20140401.iso\" target=\"_blank\" rel=\"noopener\">http://mirrors.163.com/gentoo/releases/x86/current-iso/install-x86-minimal-20140401.iso</a></p>\n<p>引导启动：出现： boot 输入”gentoo nox” , 等一会，出现livecd 则以root 进行livecd</p>\n<p>网络连接<br>输入“ifconfig“回车，如果显示结果中有eth0，则表明已建好了网络连接。如果没有输入”net-setup eth0“回车 ，选择有线连接，自动DHCP</p>\n<p>root用户的密码<br>输入“passwd“ 再输入两次密码</p>\n<p>打开ssh<br>输入“/etc/init.d/sshd start”</p>\n<p>分区<br>Livecd ~ # fdisk /dev/sda<br><a id=\"more\"></a><br>Command (m for help): 输入n<br>Command action<br>extended<br>primary partition<br>输入p<br>Partition number (1-4): 输入1<br>First cylinder (15-10443, default 15): 默认回车<br>Last cylinder, +cylinders or +size{K,M,G} (15-10443, default 10443):+100M<br>以下同理 n p 2 +2G<br>以下同理 n p 3 默认回车（即默认剩余大小分给root）<br>设置2为swap<br>Command (m for help): t<br>Partition number (1-4): 2<br>Hex code (type L to list codes): 82<br>Changed system type of partition 2 to 82 (Linux swap / Solaris)<br>查看分区<br>Command (m for help): p<br>Device Boot    Start    End    Blocks   Id   System<br>/dev/sda1    1    14    112423+   83   Linux<br>/dev/sda2    15    146    1060290   82   Linux swap / Solaris<br>/dev/sda3    147    10443    82710652+   83   Linux<br>格式化分区<br>Command (m for help): wq<br>mkfs.ext3 /dev/sda1<br>mkswap /dev/sda2<br>mkfs.ext4 /dev/sda3<br>挂载分区<br>swapon /dev/sda2<br>mount /dev/sda3 /mnt/gentoo<br>mkdir /mnt/gentoo/boot<br>mount /dev/sda1 /mnt/gentoo/boot</p>\n<p>进入Gentoo的挂载点</p>\n<h1 id=\"cd-mnt-gentoo\"><a href=\"#cd-mnt-gentoo\" class=\"headerlink\" title=\"cd /mnt/gentoo\"></a>cd /mnt/gentoo</h1><p>下载Stage Portage<br>wget <a href=\"http://tel.mirrors.163.com/gentoo/releases/x86/current-iso/stage3-i686-20140401.tar.bz2\" target=\"_blank\" rel=\"noopener\">http://tel.mirrors.163.com/gentoo/releases/x86/current-iso/stage3-i686-20140401.tar.bz2</a></p>\n<h1 id=\"tar-xvjpf-stage3-tar-bz2\"><a href=\"#tar-xvjpf-stage3-tar-bz2\" class=\"headerlink\" title=\"tar xvjpf stage3-*.tar.bz2\"></a>tar xvjpf stage3-*.tar.bz2</h1><p>wget <a href=\"http://tel.mirrors.163.com/gentoo/snapshots/portage-latest.tar.bz2\" target=\"_blank\" rel=\"noopener\">http://tel.mirrors.163.com/gentoo/snapshots/portage-latest.tar.bz2</a></p>\n<h1 id=\"tar-xvjf-mnt-gentoo-portage-latest-tar-bz2-C-mnt-gentoo-usr\"><a href=\"#tar-xvjf-mnt-gentoo-portage-latest-tar-bz2-C-mnt-gentoo-usr\" class=\"headerlink\" title=\"tar xvjf /mnt/gentoo/portage-latest.tar.bz2 -C /mnt/gentoo/usr\"></a>tar xvjf /mnt/gentoo/portage-latest.tar.bz2 -C /mnt/gentoo/usr</h1><p>配置编译选项<br>/mnt/gentoo/etc/make.conf<br>加入<br>CFLAGS=”-O2 -march=i686 -pipe”<br>CXXFLAGS=”${CFLAGS}”</p>\n<p>选择境像及rsync站点</p>\n<h1 id=\"mirrorselect-i-o-gt-gt-mnt-gentoo-etc-make-conf\"><a href=\"#mirrorselect-i-o-gt-gt-mnt-gentoo-etc-make-conf\" class=\"headerlink\" title=\"mirrorselect -i -o &gt;&gt; /mnt/gentoo/etc/make.conf\"></a>mirrorselect -i -o &gt;&gt; /mnt/gentoo/etc/make.conf</h1><h1 id=\"mirrorselect-i-r-o-gt-gt-mnt-gentoo-etc-make-conf\"><a href=\"#mirrorselect-i-r-o-gt-gt-mnt-gentoo-etc-make-conf\" class=\"headerlink\" title=\"mirrorselect -i -r -o &gt;&gt; /mnt/gentoo/etc/make.conf\"></a>mirrorselect -i -r -o &gt;&gt; /mnt/gentoo/etc/make.conf</h1><p>复制DNS信息 （参数”-L”是必须的，用来确保我们拷贝的不是一个符号链接）</p>\n<h1 id=\"cp-L-etc-resolv-conf-mnt-gentoo-etc\"><a href=\"#cp-L-etc-resolv-conf-mnt-gentoo-etc\" class=\"headerlink\" title=\"cp -L /etc/resolv.conf /mnt/gentoo/etc/\"></a>cp -L /etc/resolv.conf /mnt/gentoo/etc/</h1><p>挂载/proc和/dev</p>\n<h1 id=\"mount-t-proc-none-mnt-gentoo-proc\"><a href=\"#mount-t-proc-none-mnt-gentoo-proc\" class=\"headerlink\" title=\"mount -t proc none /mnt/gentoo/proc\"></a>mount -t proc none /mnt/gentoo/proc</h1><h1 id=\"mount-o-bind-dev-mnt-gentoo-dev\"><a href=\"#mount-o-bind-dev-mnt-gentoo-dev\" class=\"headerlink\" title=\"mount -o bind /dev /mnt/gentoo/dev\"></a>mount -o bind /dev /mnt/gentoo/dev</h1><p>chroot到新环境里</p>\n<h1 id=\"chroot-mnt-gentoo-bin-bash\"><a href=\"#chroot-mnt-gentoo-bin-bash\" class=\"headerlink\" title=\"chroot /mnt/gentoo /bin/bash\"></a>chroot /mnt/gentoo /bin/bash</h1><h1 id=\"env-update\"><a href=\"#env-update\" class=\"headerlink\" title=\"env-update\"></a>env-update</h1><blockquote>\n<blockquote>\n<p>Regenerating /etc/ld.so.cache…</p>\n<h1 id=\"source-etc-profile\"><a href=\"#source-etc-profile\" class=\"headerlink\" title=\"source /etc/profile\"></a>source /etc/profile</h1><h1 id=\"export-PS1-”-chroot-PS1”\"><a href=\"#export-PS1-”-chroot-PS1”\" class=\"headerlink\" title=\"export PS1=”(chroot) $PS1”\"></a>export PS1=”(chroot) $PS1”</h1></blockquote>\n</blockquote>\n<p>更新Portage</p>\n<h1 id=\"emerge-–sync\"><a href=\"#emerge-–sync\" class=\"headerlink\" title=\"emerge –sync\"></a>emerge –sync</h1><p>(如果你在使用一个慢速终端比如一些帧缓冲或者是串口的控制台，你可以添加–quiet选项来加速这个过程:)</p>\n<h1 id=\"emerge-–sync-–quiet\"><a href=\"#emerge-–sync-–quiet\" class=\"headerlink\" title=\"emerge –sync –quiet\"></a>emerge –sync –quiet</h1><p>验证系统profile</p>\n<h1 id=\"eselect-profile-list\"><a href=\"#eselect-profile-list\" class=\"headerlink\" title=\"eselect profile list\"></a>eselect profile list</h1><p>Available profile symlink targets:<br> [1]   default/linux/x86/10.0 *<br> [2]   default/linux/x86/10.0/desktop</p>\n<p>切换profile （根据实际需求选择）</p>\n<h1 id=\"eselect-profile-set-3\"><a href=\"#eselect-profile-set-3\" class=\"headerlink\" title=\"eselect profile set 3\"></a>eselect profile set 3</h1><p>USE设置</p>\n<h1 id=\"nano-w-etc-make-conf\"><a href=\"#nano-w-etc-make-conf\" class=\"headerlink\" title=\"nano -w /etc/make.conf\"></a>nano -w /etc/make.conf</h1><p>USE=”-gtk -gnome qt3 qt4 kde dvd alsa cdr”</p>\n<p>指定你的locale</p>\n<h1 id=\"nano-w-etc-locale-gen\"><a href=\"#nano-w-etc-locale-gen\" class=\"headerlink\" title=\"nano -w /etc/locale.gen\"></a>nano -w /etc/locale.gen</h1><p>en_US ISO-8859-1<br>en_US.UTF-8 UTF-8<br>zh_CN UTF-8<br>zh_CN GBK</p>\n<p>设置时区 （用Hongkong）</p>\n<h1 id=\"ls-usr-share-zoneinfo\"><a href=\"#ls-usr-share-zoneinfo\" class=\"headerlink\" title=\"ls /usr/share/zoneinfo\"></a>ls /usr/share/zoneinfo</h1><h1 id=\"cp-usr-share-zoneinfo-Hongkong-etc-localtime\"><a href=\"#cp-usr-share-zoneinfo-Hongkong-etc-localtime\" class=\"headerlink\" title=\"cp /usr/share/zoneinfo/Hongkong /etc/localtime\"></a>cp /usr/share/zoneinfo/Hongkong /etc/localtime</h1><p>安装内核源码 （这一步很慢,如果下载过程中断了，多重试几次）</p>\n<h1 id=\"emerge-gentoo-sources\"><a href=\"#emerge-gentoo-sources\" class=\"headerlink\" title=\"emerge gentoo-sources\"></a>emerge gentoo-sources</h1><p>设置menuconfig</p>\n<h1 id=\"cd-usr-src-linux\"><a href=\"#cd-usr-src-linux\" class=\"headerlink\" title=\"cd /usr/src/linux\"></a>cd /usr/src/linux</h1><h1 id=\"make-menuconfig\"><a href=\"#make-menuconfig\" class=\"headerlink\" title=\"make menuconfig\"></a>make menuconfig</h1><p>File systems —&gt;Pseudo Filesystems —&gt;<br>    [<em>] /proc file system support<br>    [</em>]tmpfs Virtual memory file system support (former shm fs)<br>ext3和ext4都必须选上<br>Device Drivers —&gt;<br>  Networking Support —&gt;<br>    &lt;<em>&gt; PPP (point-to-point protocol) support<br>    &lt;</em>&gt;   PPP support for async serial ports<br>    &lt;*&gt;   PPP support for sync tty ports</p>\n<p>复制安装光盘的配置文件</p>\n<h1 id=\"zcat-proc-config-gz-gt-usr-share-genkernel-arch-x86-kernel-config\"><a href=\"#zcat-proc-config-gz-gt-usr-share-genkernel-arch-x86-kernel-config\" class=\"headerlink\" title=\"zcat /proc/config.gz &gt; /usr/share/genkernel/arch/x86/kernel-config\"></a>zcat /proc/config.gz &gt; /usr/share/genkernel/arch/x86/kernel-config</h1><p>建立kernel</p>\n<h1 id=\"emerge-genkernel\"><a href=\"#emerge-genkernel\" class=\"headerlink\" title=\"emerge genkernel\"></a>emerge genkernel</h1><h1 id=\"genkernel-all-这一步很慢\"><a href=\"#genkernel-all-这一步很慢\" class=\"headerlink\" title=\"genkernel all (这一步很慢)\"></a>genkernel all (这一步很慢)</h1><p>查看内核和initrd的名字</p>\n<h1 id=\"ls-boot-kernel-boot-initramfs-（找个记事本记下来，等会有用）\"><a href=\"#ls-boot-kernel-boot-initramfs-（找个记事本记下来，等会有用）\" class=\"headerlink\" title=\"ls /boot/kernel /boot/initramfs （找个记事本记下来，等会有用）\"></a>ls /boot/kernel<em> /boot/initramfs</em> （找个记事本记下来，等会有用）</h1><p>/boot/initramfs-genkernel-x86-3.12.13-gentoo  /boot/kernel-genkernel-x86-3.12.13-gentoo</p>\n<p>修改/etc/fstab</p>\n<h1 id=\"nano-w-etc-fstab\"><a href=\"#nano-w-etc-fstab\" class=\"headerlink\" title=\"nano -w /etc/fstab\"></a>nano -w /etc/fstab</h1><p>/dev/sda1 /boot   ext3    defaults 1 2<br>/dev/sda2 none   swap   sw    0 0<br>/dev/sda3 /    ext4    defaults 0 1</p>\n<p>让eth0自动获得IP地址</p>\n<h1 id=\"nano-w-etc-conf-d-net\"><a href=\"#nano-w-etc-conf-d-net\" class=\"headerlink\" title=\"nano -w /etc/conf.d/net\"></a>nano -w /etc/conf.d/net</h1><p>加上<br>config_eth0=( “dhcp” )</p>\n<p>自动启用网络</p>\n<h1 id=\"cd-etc-init-d\"><a href=\"#cd-etc-init-d\" class=\"headerlink\" title=\"cd /etc/init.d\"></a>cd /etc/init.d</h1><h1 id=\"ln-s-net-lo-net-eth0\"><a href=\"#ln-s-net-lo-net-eth0\" class=\"headerlink\" title=\"ln -s net.lo net.eth0\"></a>ln -s net.lo net.eth0</h1><h1 id=\"rc-update-add-net-eth0-default\"><a href=\"#rc-update-add-net-eth0-default\" class=\"headerlink\" title=\"rc-update add net.eth0 default\"></a>rc-update add net.eth0 default</h1><p>设置root密码</p>\n<h1 id=\"passwd\"><a href=\"#passwd\" class=\"headerlink\" title=\"passwd\"></a>passwd</h1><p>添加一个用户</p>\n<h1 id=\"useradd-–m-–G-users-yourname\"><a href=\"#useradd-–m-–G-users-yourname\" class=\"headerlink\" title=\"useradd –m –G users yourname\"></a>useradd –m –G users yourname</h1><h1 id=\"passwd-yourname\"><a href=\"#passwd-yourname\" class=\"headerlink\" title=\"passwd yourname\"></a>passwd yourname</h1><p>安装系统日志工具</p>\n<h1 id=\"emerge-syslog-ng\"><a href=\"#emerge-syslog-ng\" class=\"headerlink\" title=\"emerge syslog-ng\"></a>emerge syslog-ng</h1><h1 id=\"rc-update-add-syslog-ng-default\"><a href=\"#rc-update-add-syslog-ng-default\" class=\"headerlink\" title=\"rc-update add syslog-ng default\"></a>rc-update add syslog-ng default</h1><p>安装GRUB，设置引导</p>\n<h1 id=\"emerge-grub\"><a href=\"#emerge-grub\" class=\"headerlink\" title=\"emerge grub\"></a>emerge grub</h1><p>启动GRUB</p>\n<h1 id=\"grub\"><a href=\"#grub\" class=\"headerlink\" title=\"grub\"></a>grub</h1><p>grub&gt; root (hd0,0)<br>grub&gt; setup (hd0)<br>grub&gt; quit</p>\n<p>bash: emergdd: command not found ,刚开始时grub不能用，用了下面这个命令就可以了。<br>emerge grub-static</p>\n<p>创建/boot/grub/grub.conf</p>\n<h1 id=\"nano-w-boot-grub-grub-conf\"><a href=\"#nano-w-boot-grub-grub-conf\" class=\"headerlink\" title=\"nano -w /boot/grub/grub.conf\"></a>nano -w /boot/grub/grub.conf</h1><p>输入<br>default 0<br>timeout 30</p>\n<p>#splashimage=(hd0,0)/boot/grub/splash.xpm.gz<br>title Gentoo<br>root (hd0,0)<br>kernel /boot/kernel-genkernel-x86-3.12.13-gentoo root=/dev/ram0 init=/linuxrc ramdisk=8192 real_root=/dev/sda3<br>initrd /boot/initramfs-genkernel-x86-3.12.13-gentoo</p>\n<p>exit退出系统环境，reboot重启系统，卸载iso镜像，如果进入不了系统，可以在引导grub界面使用,e编辑，b启动修改grub.conf<br>OK</p>\n","site":{"data":{}},"excerpt":"<p>英文安装手册 <a href=\"http://www.gentoo.org/doc/en/gentoo-x86-quickinstall.xml\" target=\"_blank\" rel=\"noopener\">http://www.gentoo.org/doc/en/gentoo-x86-quickinstall.xml</a></p>\n<p>下载：<a href=\"http://mirrors.163.com/gentoo/releases/x86/current-iso/install-x86-minimal-20140401.iso\" target=\"_blank\" rel=\"noopener\">http://mirrors.163.com/gentoo/releases/x86/current-iso/install-x86-minimal-20140401.iso</a></p>\n<p>引导启动：出现： boot 输入”gentoo nox” , 等一会，出现livecd 则以root 进行livecd</p>\n<p>网络连接<br>输入“ifconfig“回车，如果显示结果中有eth0，则表明已建好了网络连接。如果没有输入”net-setup eth0“回车 ，选择有线连接，自动DHCP</p>\n<p>root用户的密码<br>输入“passwd“ 再输入两次密码</p>\n<p>打开ssh<br>输入“/etc/init.d/sshd start”</p>\n<p>分区<br>Livecd ~ # fdisk /dev/sda<br>","more":"<br>Command (m for help): 输入n<br>Command action<br>extended<br>primary partition<br>输入p<br>Partition number (1-4): 输入1<br>First cylinder (15-10443, default 15): 默认回车<br>Last cylinder, +cylinders or +size{K,M,G} (15-10443, default 10443):+100M<br>以下同理 n p 2 +2G<br>以下同理 n p 3 默认回车（即默认剩余大小分给root）<br>设置2为swap<br>Command (m for help): t<br>Partition number (1-4): 2<br>Hex code (type L to list codes): 82<br>Changed system type of partition 2 to 82 (Linux swap / Solaris)<br>查看分区<br>Command (m for help): p<br>Device Boot    Start    End    Blocks   Id   System<br>/dev/sda1    1    14    112423+   83   Linux<br>/dev/sda2    15    146    1060290   82   Linux swap / Solaris<br>/dev/sda3    147    10443    82710652+   83   Linux<br>格式化分区<br>Command (m for help): wq<br>mkfs.ext3 /dev/sda1<br>mkswap /dev/sda2<br>mkfs.ext4 /dev/sda3<br>挂载分区<br>swapon /dev/sda2<br>mount /dev/sda3 /mnt/gentoo<br>mkdir /mnt/gentoo/boot<br>mount /dev/sda1 /mnt/gentoo/boot</p>\n<p>进入Gentoo的挂载点</p>\n<h1 id=\"cd-mnt-gentoo\"><a href=\"#cd-mnt-gentoo\" class=\"headerlink\" title=\"cd /mnt/gentoo\"></a>cd /mnt/gentoo</h1><p>下载Stage Portage<br>wget <a href=\"http://tel.mirrors.163.com/gentoo/releases/x86/current-iso/stage3-i686-20140401.tar.bz2\" target=\"_blank\" rel=\"noopener\">http://tel.mirrors.163.com/gentoo/releases/x86/current-iso/stage3-i686-20140401.tar.bz2</a></p>\n<h1 id=\"tar-xvjpf-stage3-tar-bz2\"><a href=\"#tar-xvjpf-stage3-tar-bz2\" class=\"headerlink\" title=\"tar xvjpf stage3-*.tar.bz2\"></a>tar xvjpf stage3-*.tar.bz2</h1><p>wget <a href=\"http://tel.mirrors.163.com/gentoo/snapshots/portage-latest.tar.bz2\" target=\"_blank\" rel=\"noopener\">http://tel.mirrors.163.com/gentoo/snapshots/portage-latest.tar.bz2</a></p>\n<h1 id=\"tar-xvjf-mnt-gentoo-portage-latest-tar-bz2-C-mnt-gentoo-usr\"><a href=\"#tar-xvjf-mnt-gentoo-portage-latest-tar-bz2-C-mnt-gentoo-usr\" class=\"headerlink\" title=\"tar xvjf /mnt/gentoo/portage-latest.tar.bz2 -C /mnt/gentoo/usr\"></a>tar xvjf /mnt/gentoo/portage-latest.tar.bz2 -C /mnt/gentoo/usr</h1><p>配置编译选项<br>/mnt/gentoo/etc/make.conf<br>加入<br>CFLAGS=”-O2 -march=i686 -pipe”<br>CXXFLAGS=”${CFLAGS}”</p>\n<p>选择境像及rsync站点</p>\n<h1 id=\"mirrorselect-i-o-gt-gt-mnt-gentoo-etc-make-conf\"><a href=\"#mirrorselect-i-o-gt-gt-mnt-gentoo-etc-make-conf\" class=\"headerlink\" title=\"mirrorselect -i -o &gt;&gt; /mnt/gentoo/etc/make.conf\"></a>mirrorselect -i -o &gt;&gt; /mnt/gentoo/etc/make.conf</h1><h1 id=\"mirrorselect-i-r-o-gt-gt-mnt-gentoo-etc-make-conf\"><a href=\"#mirrorselect-i-r-o-gt-gt-mnt-gentoo-etc-make-conf\" class=\"headerlink\" title=\"mirrorselect -i -r -o &gt;&gt; /mnt/gentoo/etc/make.conf\"></a>mirrorselect -i -r -o &gt;&gt; /mnt/gentoo/etc/make.conf</h1><p>复制DNS信息 （参数”-L”是必须的，用来确保我们拷贝的不是一个符号链接）</p>\n<h1 id=\"cp-L-etc-resolv-conf-mnt-gentoo-etc\"><a href=\"#cp-L-etc-resolv-conf-mnt-gentoo-etc\" class=\"headerlink\" title=\"cp -L /etc/resolv.conf /mnt/gentoo/etc/\"></a>cp -L /etc/resolv.conf /mnt/gentoo/etc/</h1><p>挂载/proc和/dev</p>\n<h1 id=\"mount-t-proc-none-mnt-gentoo-proc\"><a href=\"#mount-t-proc-none-mnt-gentoo-proc\" class=\"headerlink\" title=\"mount -t proc none /mnt/gentoo/proc\"></a>mount -t proc none /mnt/gentoo/proc</h1><h1 id=\"mount-o-bind-dev-mnt-gentoo-dev\"><a href=\"#mount-o-bind-dev-mnt-gentoo-dev\" class=\"headerlink\" title=\"mount -o bind /dev /mnt/gentoo/dev\"></a>mount -o bind /dev /mnt/gentoo/dev</h1><p>chroot到新环境里</p>\n<h1 id=\"chroot-mnt-gentoo-bin-bash\"><a href=\"#chroot-mnt-gentoo-bin-bash\" class=\"headerlink\" title=\"chroot /mnt/gentoo /bin/bash\"></a>chroot /mnt/gentoo /bin/bash</h1><h1 id=\"env-update\"><a href=\"#env-update\" class=\"headerlink\" title=\"env-update\"></a>env-update</h1><blockquote>\n<blockquote>\n<p>Regenerating /etc/ld.so.cache…</p>\n<h1 id=\"source-etc-profile\"><a href=\"#source-etc-profile\" class=\"headerlink\" title=\"source /etc/profile\"></a>source /etc/profile</h1><h1 id=\"export-PS1-”-chroot-PS1”\"><a href=\"#export-PS1-”-chroot-PS1”\" class=\"headerlink\" title=\"export PS1=”(chroot) $PS1”\"></a>export PS1=”(chroot) $PS1”</h1></blockquote>\n</blockquote>\n<p>更新Portage</p>\n<h1 id=\"emerge-–sync\"><a href=\"#emerge-–sync\" class=\"headerlink\" title=\"emerge –sync\"></a>emerge –sync</h1><p>(如果你在使用一个慢速终端比如一些帧缓冲或者是串口的控制台，你可以添加–quiet选项来加速这个过程:)</p>\n<h1 id=\"emerge-–sync-–quiet\"><a href=\"#emerge-–sync-–quiet\" class=\"headerlink\" title=\"emerge –sync –quiet\"></a>emerge –sync –quiet</h1><p>验证系统profile</p>\n<h1 id=\"eselect-profile-list\"><a href=\"#eselect-profile-list\" class=\"headerlink\" title=\"eselect profile list\"></a>eselect profile list</h1><p>Available profile symlink targets:<br> [1]   default/linux/x86/10.0 *<br> [2]   default/linux/x86/10.0/desktop</p>\n<p>切换profile （根据实际需求选择）</p>\n<h1 id=\"eselect-profile-set-3\"><a href=\"#eselect-profile-set-3\" class=\"headerlink\" title=\"eselect profile set 3\"></a>eselect profile set 3</h1><p>USE设置</p>\n<h1 id=\"nano-w-etc-make-conf\"><a href=\"#nano-w-etc-make-conf\" class=\"headerlink\" title=\"nano -w /etc/make.conf\"></a>nano -w /etc/make.conf</h1><p>USE=”-gtk -gnome qt3 qt4 kde dvd alsa cdr”</p>\n<p>指定你的locale</p>\n<h1 id=\"nano-w-etc-locale-gen\"><a href=\"#nano-w-etc-locale-gen\" class=\"headerlink\" title=\"nano -w /etc/locale.gen\"></a>nano -w /etc/locale.gen</h1><p>en_US ISO-8859-1<br>en_US.UTF-8 UTF-8<br>zh_CN UTF-8<br>zh_CN GBK</p>\n<p>设置时区 （用Hongkong）</p>\n<h1 id=\"ls-usr-share-zoneinfo\"><a href=\"#ls-usr-share-zoneinfo\" class=\"headerlink\" title=\"ls /usr/share/zoneinfo\"></a>ls /usr/share/zoneinfo</h1><h1 id=\"cp-usr-share-zoneinfo-Hongkong-etc-localtime\"><a href=\"#cp-usr-share-zoneinfo-Hongkong-etc-localtime\" class=\"headerlink\" title=\"cp /usr/share/zoneinfo/Hongkong /etc/localtime\"></a>cp /usr/share/zoneinfo/Hongkong /etc/localtime</h1><p>安装内核源码 （这一步很慢,如果下载过程中断了，多重试几次）</p>\n<h1 id=\"emerge-gentoo-sources\"><a href=\"#emerge-gentoo-sources\" class=\"headerlink\" title=\"emerge gentoo-sources\"></a>emerge gentoo-sources</h1><p>设置menuconfig</p>\n<h1 id=\"cd-usr-src-linux\"><a href=\"#cd-usr-src-linux\" class=\"headerlink\" title=\"cd /usr/src/linux\"></a>cd /usr/src/linux</h1><h1 id=\"make-menuconfig\"><a href=\"#make-menuconfig\" class=\"headerlink\" title=\"make menuconfig\"></a>make menuconfig</h1><p>File systems —&gt;Pseudo Filesystems —&gt;<br>    [<em>] /proc file system support<br>    [</em>]tmpfs Virtual memory file system support (former shm fs)<br>ext3和ext4都必须选上<br>Device Drivers —&gt;<br>  Networking Support —&gt;<br>    &lt;<em>&gt; PPP (point-to-point protocol) support<br>    &lt;</em>&gt;   PPP support for async serial ports<br>    &lt;*&gt;   PPP support for sync tty ports</p>\n<p>复制安装光盘的配置文件</p>\n<h1 id=\"zcat-proc-config-gz-gt-usr-share-genkernel-arch-x86-kernel-config\"><a href=\"#zcat-proc-config-gz-gt-usr-share-genkernel-arch-x86-kernel-config\" class=\"headerlink\" title=\"zcat /proc/config.gz &gt; /usr/share/genkernel/arch/x86/kernel-config\"></a>zcat /proc/config.gz &gt; /usr/share/genkernel/arch/x86/kernel-config</h1><p>建立kernel</p>\n<h1 id=\"emerge-genkernel\"><a href=\"#emerge-genkernel\" class=\"headerlink\" title=\"emerge genkernel\"></a>emerge genkernel</h1><h1 id=\"genkernel-all-这一步很慢\"><a href=\"#genkernel-all-这一步很慢\" class=\"headerlink\" title=\"genkernel all (这一步很慢)\"></a>genkernel all (这一步很慢)</h1><p>查看内核和initrd的名字</p>\n<h1 id=\"ls-boot-kernel-boot-initramfs-（找个记事本记下来，等会有用）\"><a href=\"#ls-boot-kernel-boot-initramfs-（找个记事本记下来，等会有用）\" class=\"headerlink\" title=\"ls /boot/kernel /boot/initramfs （找个记事本记下来，等会有用）\"></a>ls /boot/kernel<em> /boot/initramfs</em> （找个记事本记下来，等会有用）</h1><p>/boot/initramfs-genkernel-x86-3.12.13-gentoo  /boot/kernel-genkernel-x86-3.12.13-gentoo</p>\n<p>修改/etc/fstab</p>\n<h1 id=\"nano-w-etc-fstab\"><a href=\"#nano-w-etc-fstab\" class=\"headerlink\" title=\"nano -w /etc/fstab\"></a>nano -w /etc/fstab</h1><p>/dev/sda1 /boot   ext3    defaults 1 2<br>/dev/sda2 none   swap   sw    0 0<br>/dev/sda3 /    ext4    defaults 0 1</p>\n<p>让eth0自动获得IP地址</p>\n<h1 id=\"nano-w-etc-conf-d-net\"><a href=\"#nano-w-etc-conf-d-net\" class=\"headerlink\" title=\"nano -w /etc/conf.d/net\"></a>nano -w /etc/conf.d/net</h1><p>加上<br>config_eth0=( “dhcp” )</p>\n<p>自动启用网络</p>\n<h1 id=\"cd-etc-init-d\"><a href=\"#cd-etc-init-d\" class=\"headerlink\" title=\"cd /etc/init.d\"></a>cd /etc/init.d</h1><h1 id=\"ln-s-net-lo-net-eth0\"><a href=\"#ln-s-net-lo-net-eth0\" class=\"headerlink\" title=\"ln -s net.lo net.eth0\"></a>ln -s net.lo net.eth0</h1><h1 id=\"rc-update-add-net-eth0-default\"><a href=\"#rc-update-add-net-eth0-default\" class=\"headerlink\" title=\"rc-update add net.eth0 default\"></a>rc-update add net.eth0 default</h1><p>设置root密码</p>\n<h1 id=\"passwd\"><a href=\"#passwd\" class=\"headerlink\" title=\"passwd\"></a>passwd</h1><p>添加一个用户</p>\n<h1 id=\"useradd-–m-–G-users-yourname\"><a href=\"#useradd-–m-–G-users-yourname\" class=\"headerlink\" title=\"useradd –m –G users yourname\"></a>useradd –m –G users yourname</h1><h1 id=\"passwd-yourname\"><a href=\"#passwd-yourname\" class=\"headerlink\" title=\"passwd yourname\"></a>passwd yourname</h1><p>安装系统日志工具</p>\n<h1 id=\"emerge-syslog-ng\"><a href=\"#emerge-syslog-ng\" class=\"headerlink\" title=\"emerge syslog-ng\"></a>emerge syslog-ng</h1><h1 id=\"rc-update-add-syslog-ng-default\"><a href=\"#rc-update-add-syslog-ng-default\" class=\"headerlink\" title=\"rc-update add syslog-ng default\"></a>rc-update add syslog-ng default</h1><p>安装GRUB，设置引导</p>\n<h1 id=\"emerge-grub\"><a href=\"#emerge-grub\" class=\"headerlink\" title=\"emerge grub\"></a>emerge grub</h1><p>启动GRUB</p>\n<h1 id=\"grub\"><a href=\"#grub\" class=\"headerlink\" title=\"grub\"></a>grub</h1><p>grub&gt; root (hd0,0)<br>grub&gt; setup (hd0)<br>grub&gt; quit</p>\n<p>bash: emergdd: command not found ,刚开始时grub不能用，用了下面这个命令就可以了。<br>emerge grub-static</p>\n<p>创建/boot/grub/grub.conf</p>\n<h1 id=\"nano-w-boot-grub-grub-conf\"><a href=\"#nano-w-boot-grub-grub-conf\" class=\"headerlink\" title=\"nano -w /boot/grub/grub.conf\"></a>nano -w /boot/grub/grub.conf</h1><p>输入<br>default 0<br>timeout 30</p>\n<p>#splashimage=(hd0,0)/boot/grub/splash.xpm.gz<br>title Gentoo<br>root (hd0,0)<br>kernel /boot/kernel-genkernel-x86-3.12.13-gentoo root=/dev/ram0 init=/linuxrc ramdisk=8192 real_root=/dev/sda3<br>initrd /boot/initramfs-genkernel-x86-3.12.13-gentoo</p>\n<p>exit退出系统环境，reboot重启系统，卸载iso镜像，如果进入不了系统，可以在引导grub界面使用,e编辑，b启动修改grub.conf<br>OK</p>"},{"title":"git bash  中文支持","id":"1740","date":"2014-04-21T08:58:43.000Z","_content":"\n1. ls 命令\n修改%Gi%t\\etc\\git-completion.bash\n加上：\n`alias ls='ls --show-control-chars --color=auto'`\n2\\. 在Git Bash显示中文：\n修改%Git%\\etc\\inputrc\n`\n# disable/enable 8bitinput\nset meta-flag on\nset input-meta on\nset output-meta on\nset convert-meta off\n`\n3\\. 日志\n修改%Git%\\etc\\profile\n加上\n`export LESSCHARSET=utf-8`\n4\\. git gui \n修改%Git%\\etc\\gitconfig\n`[gui]\nencoding = utf-8`\n5。 正常显示推、拉中文修订说明\n修改%Git%\\etc\\gitconfig\n`[i18n]\ncommitencoding = GB2312`\n6\\. 分页显示\n分页显示时不出现乱码，需在 GitBash 中设置属性“LESSCHARSET=utf-8”\n`$export LESSCHARSET=utf-8`","source":"_posts/git-bash-e4-b8-ad-e6-96-87-e6-94-af-e6-8c-81.md","raw":"---\ntitle: git bash  中文支持\ntags:\n  - git\nid: 1740\ncategories:\n  - Other\ndate: 2014-04-21 16:58:43\n---\n\n1. ls 命令\n修改%Gi%t\\etc\\git-completion.bash\n加上：\n`alias ls='ls --show-control-chars --color=auto'`\n2\\. 在Git Bash显示中文：\n修改%Git%\\etc\\inputrc\n`\n# disable/enable 8bitinput\nset meta-flag on\nset input-meta on\nset output-meta on\nset convert-meta off\n`\n3\\. 日志\n修改%Git%\\etc\\profile\n加上\n`export LESSCHARSET=utf-8`\n4\\. git gui \n修改%Git%\\etc\\gitconfig\n`[gui]\nencoding = utf-8`\n5。 正常显示推、拉中文修订说明\n修改%Git%\\etc\\gitconfig\n`[i18n]\ncommitencoding = GB2312`\n6\\. 分页显示\n分页显示时不出现乱码，需在 GitBash 中设置属性“LESSCHARSET=utf-8”\n`$export LESSCHARSET=utf-8`","slug":"git-bash-e4-b8-ad-e6-96-87-e6-94-af-e6-8c-81","published":1,"updated":"2018-01-13T05:07:00.485Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjccw7xas005naqcrjxfzqxj0","content":"<ol>\n<li>ls 命令<br>修改%Gi%t\\etc\\git-completion.bash<br>加上：<br><code>alias ls=&#39;ls --show-control-chars --color=auto&#39;</code><br>2. 在Git Bash显示中文：<br>修改%Git%\\etc\\inputrc<br>`<h1 id=\"disable-enable-8bitinput\"><a href=\"#disable-enable-8bitinput\" class=\"headerlink\" title=\"disable/enable 8bitinput\"></a>disable/enable 8bitinput</h1>set meta-flag on<br>set input-meta on<br>set output-meta on<br>set convert-meta off<br><code>3\\. 日志\n修改%Git%\\etc\\profile\n加上</code>export LESSCHARSET=utf-8<code>4\\. git gui \n修改%Git%\\etc\\gitconfig</code>[gui]<br>encoding = utf-8<code>5。 正常显示推、拉中文修订说明\n修改%Git%\\etc\\gitconfig</code>[i18n]<br>commitencoding = GB2312<code>6\\. 分页显示\n分页显示时不出现乱码，需在 GitBash 中设置属性“LESSCHARSET=utf-8”</code>$export LESSCHARSET=utf-8`</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<ol>\n<li>ls 命令<br>修改%Gi%t\\etc\\git-completion.bash<br>加上：<br><code>alias ls=&#39;ls --show-control-chars --color=auto&#39;</code><br>2. 在Git Bash显示中文：<br>修改%Git%\\etc\\inputrc<br>`<h1 id=\"disable-enable-8bitinput\"><a href=\"#disable-enable-8bitinput\" class=\"headerlink\" title=\"disable/enable 8bitinput\"></a>disable/enable 8bitinput</h1>set meta-flag on<br>set input-meta on<br>set output-meta on<br>set convert-meta off<br><code>3\\. 日志\n修改%Git%\\etc\\profile\n加上</code>export LESSCHARSET=utf-8<code>4\\. git gui \n修改%Git%\\etc\\gitconfig</code>[gui]<br>encoding = utf-8<code>5。 正常显示推、拉中文修订说明\n修改%Git%\\etc\\gitconfig</code>[i18n]<br>commitencoding = GB2312<code>6\\. 分页显示\n分页显示时不出现乱码，需在 GitBash 中设置属性“LESSCHARSET=utf-8”</code>$export LESSCHARSET=utf-8`</li>\n</ol>\n"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2018-01-13T05:07:00.449Z","updated":"2018-01-13T05:07:00.450Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjccw7xav005qaqcrs96ltq8t","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n"},{"title":"htmlspecialchars 和 htmlentities 的区别","id":"529","date":"2012-01-13T14:16:39.000Z","_content":"\nPHP 手册中对 htmlspecialchars 写道\n\n> The translations performed are:\n> '&' (ampersand) becomes '&amp;'\n> '\"' (double quote) becomes '&quot;' when ENT_NOQUOTES is not set.\n> ''' (single quote) becomes '&#039;' only when ENT_QUOTES is set.\n> '<' (less than) becomes '&lt;'\n> '>' (greater than) becomes '&gt;'\n\nhtmlspecialchars 只转化上面这几个html代码，而 htmlentities 却会转化所有的html代码，连同里面的它无法识别的中文字符也给转化了。\n\n我们可以拿一个简单的例子来做比较：\n> $str='[测试页面](test.html)';\n> echo htmlentities($str);\n> // &lt;a href=&quot;test.html&quot;&gt;&sup2;&acirc;&Ecirc;&Ocirc;&Ograve;&sup3;&Atilde;&aelig;&lt;/a&gt;\n> \n> $str='[测试页面](test.html)';\n> echo htmlspecialchars($str);\n> // &lt;a href=&quot;test.html&quot;&gt;测试页面&lt;/a&gt;\n<!--more-->\n\n结论是，有中文的时候，最好用 htmlspecialchars ，否则可能乱码\n\n另外参考一下这个自定义函数\n\n> function my_excerpt( $html, $len ) {\n>     // $html 应包含一个 HTML 文档。\n>     // 本例将去掉 HTML 标记，javascript 代码\n>     // 和空白字符。还会将一些通用的\n>     // HTML 实体转换成相应的文本。\n>     $search = array (\"'<script[^>]*?>.*?</script>'si\",  // 去掉 javascript\n>                     \"'<[/!]*?[^<>]*?>'si\",           // 去掉 HTML 标记\n>                     \"'([rn])[s]+'\",                 // 去掉空白字符\n>                     \"'&(quot|#34);'i\",                 // 替换 HTML 实体\n>                     \"'&(amp|#38);'i\",\n>                     \"'&(lt|#60);'i\",\n>                     \"'&(gt|#62);'i\",\n>                     \"'&(nbsp|#160);'i\",\n>                     \"'&(iexcl|#161);'i\",\n>                     \"'&(cent|#162);'i\",\n>                     \"'&(pound|#163);'i\",\n>                     \"'&(copy|#169);'i\",\n>                     \"'&#(d+);'e\");                    // 作为 PHP 代码运行\n>     $replace = array (\"\",\n>                      \"\",\n>                      \"1\",\n>                      \"\"\",\n>                      \"&\",\n>                      \"<\",\n>                      \">\",\n>                      \" \",\n>                      chr(161),\n>                      chr(162),\n>                      chr(163),\n>                      chr(169),\n>                      \"chr(1)\");\n>     $text = preg_replace ($search, $replace, $html);\n>     $text = trim($text);</code>\n>     return mb_strlen($text) >= $len ? mb_substr($text, 0, $len) : '';\n> }","source":"_posts/htmlspecialchars-e5-92-8c-htmlentities-e7-9a-84-e5-8c-ba-e5-88-ab.md","raw":"---\ntitle: htmlspecialchars 和 htmlentities 的区别\nid: 529\ncategories:\n  - PHP\ndate: 2012-01-13 22:16:39\ntags:\n---\n\nPHP 手册中对 htmlspecialchars 写道\n\n> The translations performed are:\n> '&' (ampersand) becomes '&amp;'\n> '\"' (double quote) becomes '&quot;' when ENT_NOQUOTES is not set.\n> ''' (single quote) becomes '&#039;' only when ENT_QUOTES is set.\n> '<' (less than) becomes '&lt;'\n> '>' (greater than) becomes '&gt;'\n\nhtmlspecialchars 只转化上面这几个html代码，而 htmlentities 却会转化所有的html代码，连同里面的它无法识别的中文字符也给转化了。\n\n我们可以拿一个简单的例子来做比较：\n> $str='[测试页面](test.html)';\n> echo htmlentities($str);\n> // &lt;a href=&quot;test.html&quot;&gt;&sup2;&acirc;&Ecirc;&Ocirc;&Ograve;&sup3;&Atilde;&aelig;&lt;/a&gt;\n> \n> $str='[测试页面](test.html)';\n> echo htmlspecialchars($str);\n> // &lt;a href=&quot;test.html&quot;&gt;测试页面&lt;/a&gt;\n<!--more-->\n\n结论是，有中文的时候，最好用 htmlspecialchars ，否则可能乱码\n\n另外参考一下这个自定义函数\n\n> function my_excerpt( $html, $len ) {\n>     // $html 应包含一个 HTML 文档。\n>     // 本例将去掉 HTML 标记，javascript 代码\n>     // 和空白字符。还会将一些通用的\n>     // HTML 实体转换成相应的文本。\n>     $search = array (\"'<script[^>]*?>.*?</script>'si\",  // 去掉 javascript\n>                     \"'<[/!]*?[^<>]*?>'si\",           // 去掉 HTML 标记\n>                     \"'([rn])[s]+'\",                 // 去掉空白字符\n>                     \"'&(quot|#34);'i\",                 // 替换 HTML 实体\n>                     \"'&(amp|#38);'i\",\n>                     \"'&(lt|#60);'i\",\n>                     \"'&(gt|#62);'i\",\n>                     \"'&(nbsp|#160);'i\",\n>                     \"'&(iexcl|#161);'i\",\n>                     \"'&(cent|#162);'i\",\n>                     \"'&(pound|#163);'i\",\n>                     \"'&(copy|#169);'i\",\n>                     \"'&#(d+);'e\");                    // 作为 PHP 代码运行\n>     $replace = array (\"\",\n>                      \"\",\n>                      \"1\",\n>                      \"\"\",\n>                      \"&\",\n>                      \"<\",\n>                      \">\",\n>                      \" \",\n>                      chr(161),\n>                      chr(162),\n>                      chr(163),\n>                      chr(169),\n>                      \"chr(1)\");\n>     $text = preg_replace ($search, $replace, $html);\n>     $text = trim($text);</code>\n>     return mb_strlen($text) >= $len ? mb_substr($text, 0, $len) : '';\n> }","slug":"htmlspecialchars-e5-92-8c-htmlentities-e7-9a-84-e5-8c-ba-e5-88-ab","published":1,"updated":"2018-01-13T05:07:00.465Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjccw7xaw005taqcrerp55rj2","content":"<p>PHP 手册中对 htmlspecialchars 写道</p>\n<blockquote>\n<p>The translations performed are:<br>‘&amp;’ (ampersand) becomes ‘&amp;’<br>‘“‘ (double quote) becomes ‘&quot;’ when ENT_NOQUOTES is not set.<br>‘’’ (single quote) becomes ‘&#039;’ only when ENT_QUOTES is set.<br>‘&lt;’ (less than) becomes ‘&lt;’<br>‘&gt;’ (greater than) becomes ‘&gt;’</p>\n</blockquote>\n<p>htmlspecialchars 只转化上面这几个html代码，而 htmlentities 却会转化所有的html代码，连同里面的它无法识别的中文字符也给转化了。</p>\n<p>我们可以拿一个简单的例子来做比较：</p>\n<blockquote>\n<p>$str=’<a href=\"test.html\">测试页面</a>‘;<br>echo htmlentities($str);<br>// &lt;a href=&quot;test.html&quot;&gt;&sup2;&acirc;&Ecirc;&Ocirc;&Ograve;&sup3;&Atilde;&aelig;&lt;/a&gt;</p>\n<p>$str=’<a href=\"test.html\">测试页面</a>‘;<br>echo htmlspecialchars($str);<br>// &lt;a href=&quot;test.html&quot;&gt;测试页面&lt;/a&gt;<br><a id=\"more\"></a></p>\n</blockquote>\n<p>结论是，有中文的时候，最好用 htmlspecialchars ，否则可能乱码</p>\n<p>另外参考一下这个自定义函数</p>\n<blockquote>\n<p>function my_excerpt( $html, $len ) {<br>    // $html 应包含一个 HTML 文档。<br>    // 本例将去掉 HTML 标记，javascript 代码<br>    // 和空白字符。还会将一些通用的<br>    // HTML 实体转换成相应的文本。<br>    $search = array (“‘<script[^>]<em>?&gt;.</em>?‘si”,  // 去掉 javascript<br>                    “‘&lt;[/!]<em>?[^&lt;&gt;]</em>?&gt;’si”,           // 去掉 HTML 标记<br>                    “‘([rn])[s]+’”,                 // 去掉空白字符<br>                    “‘&amp;(quot|#34);’i”,                 // 替换 HTML 实体<br>                    “‘&amp;(amp|#38);’i”,<br>                    “‘&amp;(lt|#60);’i”,<br>                    “‘&amp;(gt|#62);’i”,<br>                    “‘&amp;(nbsp|#160);’i”,<br>                    “‘&amp;(iexcl|#161);’i”,<br>                    “‘&amp;(cent|#162);’i”,<br>                    “‘&amp;(pound|#163);’i”,<br>                    “‘&amp;(copy|#169);’i”,<br>                    “‘&amp;#(d+);’e”);                    // 作为 PHP 代码运行<br>    $replace = array (“”,<br>                     “”,<br>                     “1”,<br>                     “””,<br>                     “&amp;”,<br>                     “&lt;”,<br>                     “&gt;”,<br>                     “ “,<br>                     chr(161),<br>                     chr(162),<br>                     chr(163),<br>                     chr(169),<br>                     “chr(1)”);<br>    $text = preg_replace ($search, $replace, $html);<br>    $text = trim($text);<br>    return mb_strlen($text) &gt;= $len ? mb_substr($text, 0, $len) : ‘’;<br>}</script[^></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p>PHP 手册中对 htmlspecialchars 写道</p>\n<blockquote>\n<p>The translations performed are:<br>‘&amp;’ (ampersand) becomes ‘&amp;’<br>‘“‘ (double quote) becomes ‘&quot;’ when ENT_NOQUOTES is not set.<br>‘’’ (single quote) becomes ‘&#039;’ only when ENT_QUOTES is set.<br>‘&lt;’ (less than) becomes ‘&lt;’<br>‘&gt;’ (greater than) becomes ‘&gt;’</p>\n</blockquote>\n<p>htmlspecialchars 只转化上面这几个html代码，而 htmlentities 却会转化所有的html代码，连同里面的它无法识别的中文字符也给转化了。</p>\n<p>我们可以拿一个简单的例子来做比较：</p>\n<blockquote>\n<p>$str=’<a href=\"test.html\">测试页面</a>‘;<br>echo htmlentities($str);<br>// &lt;a href=&quot;test.html&quot;&gt;&sup2;&acirc;&Ecirc;&Ocirc;&Ograve;&sup3;&Atilde;&aelig;&lt;/a&gt;</p>\n<p>$str=’<a href=\"test.html\">测试页面</a>‘;<br>echo htmlspecialchars($str);<br>// &lt;a href=&quot;test.html&quot;&gt;测试页面&lt;/a&gt;<br>","more":"</p>\n</blockquote>\n<p>结论是，有中文的时候，最好用 htmlspecialchars ，否则可能乱码</p>\n<p>另外参考一下这个自定义函数</p>\n<blockquote>\n<p>function my_excerpt( $html, $len ) {<br>    // $html 应包含一个 HTML 文档。<br>    // 本例将去掉 HTML 标记，javascript 代码<br>    // 和空白字符。还会将一些通用的<br>    // HTML 实体转换成相应的文本。<br>    $search = array (“‘<script[^>]<em>?&gt;.</em>?‘si”,  // 去掉 javascript<br>                    “‘&lt;[/!]<em>?[^&lt;&gt;]</em>?&gt;’si”,           // 去掉 HTML 标记<br>                    “‘([rn])[s]+’”,                 // 去掉空白字符<br>                    “‘&amp;(quot|#34);’i”,                 // 替换 HTML 实体<br>                    “‘&amp;(amp|#38);’i”,<br>                    “‘&amp;(lt|#60);’i”,<br>                    “‘&amp;(gt|#62);’i”,<br>                    “‘&amp;(nbsp|#160);’i”,<br>                    “‘&amp;(iexcl|#161);’i”,<br>                    “‘&amp;(cent|#162);’i”,<br>                    “‘&amp;(pound|#163);’i”,<br>                    “‘&amp;(copy|#169);’i”,<br>                    “‘&amp;#(d+);’e”);                    // 作为 PHP 代码运行<br>    $replace = array (“”,<br>                     “”,<br>                     “1”,<br>                     “””,<br>                     “&amp;”,<br>                     “&lt;”,<br>                     “&gt;”,<br>                     “ “,<br>                     chr(161),<br>                     chr(162),<br>                     chr(163),<br>                     chr(169),<br>                     “chr(1)”);<br>    $text = preg_replace ($search, $replace, $html);<br>    $text = trim($text);<br>    return mb_strlen($text) &gt;= $len ? mb_substr($text, 0, $len) : ‘’;<br>}</script[^></p>\n</blockquote>"},{"title":"Hive && Hadoop FAQ","id":"2202","date":"2014-10-04T12:38:29.000Z","_content":"\nError while run yarn task, \"org.apache.hadoop.yarn.exceptions.InvalidAuxServiceException: The Service:mapreduce_shuffle does not exist\"\nA: Add following configurations to yarn-site.xml\n\n`\n<property>\n    <name>yarn.nodemanager.aux-services</name>\n    <value>mapreduce_shuffle</value>\n</property>\n<property>\n    <name>yarn.nodemanager.aux-services.mapreduce_shuffle.class</name>\n    <value>org.apache.hadoop.mapred.ShuffleHandler</value>\n</property>\n`","source":"_posts/hive-hadoop-faq.md","raw":"---\ntitle: Hive && Hadoop FAQ\ntags:\n  - hadoop\n  - hive\nid: 2202\ncategories:\n  - Hadoop\ndate: 2014-10-04 20:38:29\n---\n\nError while run yarn task, \"org.apache.hadoop.yarn.exceptions.InvalidAuxServiceException: The Service:mapreduce_shuffle does not exist\"\nA: Add following configurations to yarn-site.xml\n\n`\n<property>\n    <name>yarn.nodemanager.aux-services</name>\n    <value>mapreduce_shuffle</value>\n</property>\n<property>\n    <name>yarn.nodemanager.aux-services.mapreduce_shuffle.class</name>\n    <value>org.apache.hadoop.mapred.ShuffleHandler</value>\n</property>\n`","slug":"hive-hadoop-faq","published":1,"updated":"2018-01-13T05:07:00.491Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjccw7xax005waqcrxcek1uxx","content":"<p>Error while run yarn task, “org.apache.hadoop.yarn.exceptions.InvalidAuxServiceException: The Service:mapreduce_shuffle does not exist”<br>A: Add following configurations to yarn-site.xml</p>\n<p>`</p>\n<p><property><br>    <name>yarn.nodemanager.aux-services</name><br>    <value>mapreduce_shuffle</value><br></property></p>\n<p><property><br>    <name>yarn.nodemanager.aux-services.mapreduce_shuffle.class</name><br>    <value>org.apache.hadoop.mapred.ShuffleHandler</value><br></property><br>`</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Error while run yarn task, “org.apache.hadoop.yarn.exceptions.InvalidAuxServiceException: The Service:mapreduce_shuffle does not exist”<br>A: Add following configurations to yarn-site.xml</p>\n<p>`</p>\n<p><property><br>    <name>yarn.nodemanager.aux-services</name><br>    <value>mapreduce_shuffle</value><br></property></p>\n<p><property><br>    <name>yarn.nodemanager.aux-services.mapreduce_shuffle.class</name><br>    <value>org.apache.hadoop.mapred.ShuffleHandler</value><br></property><br>`</p>\n"},{"title":"HTC Mytouch 4G G键改为锁屏键","id":"1023","date":"2012-05-13T02:03:20.000Z","_content":"\n. 打开R.E.管理器，打开到/system/usr/keylayout\n 2\\. 挂载读/写(R/W) ，最上面有个按键，就是左侧文字显示为“挂载为读写（R/W）\n ”，按键上显示“挂载读写（Mount R/O）”\n 3\\. 长点文件glacier-keypad.kl    ，选择以 “文本编辑方式打开”\n 4.key 217  改为POWER    后加 WAKE_DROPPED\n    key 183 改为 ENDCALL 后加 WAKE_DROPPED\nfrom:http://bbs.gfan.com/android-3946662-1-1.html","source":"_posts/htc-mytouch-4g-g-e9-94-ae-e6-94-b9-e4-b8-ba-e9-94-81-e5-b1-8f-e9-94-ae.md","raw":"---\ntitle: HTC Mytouch 4G G键改为锁屏键\nid: 1023\ncategories:\n  - Other\ndate: 2012-05-13 10:03:20\ntags:\n---\n\n. 打开R.E.管理器，打开到/system/usr/keylayout\n 2\\. 挂载读/写(R/W) ，最上面有个按键，就是左侧文字显示为“挂载为读写（R/W）\n ”，按键上显示“挂载读写（Mount R/O）”\n 3\\. 长点文件glacier-keypad.kl    ，选择以 “文本编辑方式打开”\n 4.key 217  改为POWER    后加 WAKE_DROPPED\n    key 183 改为 ENDCALL 后加 WAKE_DROPPED\nfrom:http://bbs.gfan.com/android-3946662-1-1.html","slug":"htc-mytouch-4g-g-e9-94-ae-e6-94-b9-e4-b8-ba-e9-94-81-e5-b1-8f-e9-94-ae","published":1,"updated":"2018-01-13T05:07:00.463Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjccw7xay005zaqcrwy1wgmz2","content":"<p>. 打开R.E.管理器，打开到/system/usr/keylayout<br> 2. 挂载读/写(R/W) ，最上面有个按键，就是左侧文字显示为“挂载为读写（R/W）<br> ”，按键上显示“挂载读写（Mount R/O）”<br> 3. 长点文件glacier-keypad.kl    ，选择以 “文本编辑方式打开”<br> 4.key 217  改为POWER    后加 WAKE_DROPPED<br>    key 183 改为 ENDCALL 后加 WAKE_DROPPED<br>from:<a href=\"http://bbs.gfan.com/android-3946662-1-1.html\" target=\"_blank\" rel=\"noopener\">http://bbs.gfan.com/android-3946662-1-1.html</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>. 打开R.E.管理器，打开到/system/usr/keylayout<br> 2. 挂载读/写(R/W) ，最上面有个按键，就是左侧文字显示为“挂载为读写（R/W）<br> ”，按键上显示“挂载读写（Mount R/O）”<br> 3. 长点文件glacier-keypad.kl    ，选择以 “文本编辑方式打开”<br> 4.key 217  改为POWER    后加 WAKE_DROPPED<br>    key 183 改为 ENDCALL 后加 WAKE_DROPPED<br>from:<a href=\"http://bbs.gfan.com/android-3946662-1-1.html\" target=\"_blank\" rel=\"noopener\">http://bbs.gfan.com/android-3946662-1-1.html</a></p>\n"},{"title":"ibus下安装98五笔的方法","id":"408","date":"2011-11-16T07:23:19.000Z","_content":"\n1、下载[ibus-table-wubi](http://ibus.googlecode.com/files/ibus-table-wubi-1.2.0.20091227.tar.gz \"ibus-table-wubi-1.2.0.20091227.tar.gz\")进行解压后，到table文件夹中找到wubi98.txt;\n 2、在终端运行cd 切换到wubi98.txt所在的文件夹\n 3、运行ibus-table-createdb -s wubi98.txt编译wubi98.db文件\n 4、运行sudo cp wubi98.db /usr/share/ibus-table/tables 把wubi98.db复制到系统位置\n 5、运行cd 切换到解压后的icons文件夹\n 6、运行sudo cp wubi98.svg /usr/share/ibus-table/icons 复制图标\n 7、重启ibus首选项输入选择输入法汉语五笔98添加，再重启ibus。\n\n后又参照“将海峰五笔码表转到ibus下使用”（http://blog.linjian.org/articles/sunwb-ibus/）把海峰五笔98也安装成功。\n 下面网上安装方法\n “1、下载 wget http://ibus.googlecode.com/files/ibus-t ... 219.tar.gz 2、tar -zxvf ibus-table-wubi-1.1.0.20090219.tar.gz 3、cd ibus-table-wubi-1.1.0.20090219 4、./configure --prefix=/usr --enable-wubi98 --disable-wubi86 5、sudo make install 6、系统 － 首选项 － iBus首选项中添98五笔”","source":"_posts/ibus-e4-b8-8b-e5-ae-89-e8-a3-8598-e4-ba-94-e7-ac-94-e7-9a-84-e6-96-b9-e6-b3-95.md","raw":"---\ntitle: ibus下安装98五笔的方法\ntags:\n  - Linux\nid: 408\ncategories:\n  - Linux\ndate: 2011-11-16 15:23:19\n---\n\n1、下载[ibus-table-wubi](http://ibus.googlecode.com/files/ibus-table-wubi-1.2.0.20091227.tar.gz \"ibus-table-wubi-1.2.0.20091227.tar.gz\")进行解压后，到table文件夹中找到wubi98.txt;\n 2、在终端运行cd 切换到wubi98.txt所在的文件夹\n 3、运行ibus-table-createdb -s wubi98.txt编译wubi98.db文件\n 4、运行sudo cp wubi98.db /usr/share/ibus-table/tables 把wubi98.db复制到系统位置\n 5、运行cd 切换到解压后的icons文件夹\n 6、运行sudo cp wubi98.svg /usr/share/ibus-table/icons 复制图标\n 7、重启ibus首选项输入选择输入法汉语五笔98添加，再重启ibus。\n\n后又参照“将海峰五笔码表转到ibus下使用”（http://blog.linjian.org/articles/sunwb-ibus/）把海峰五笔98也安装成功。\n 下面网上安装方法\n “1、下载 wget http://ibus.googlecode.com/files/ibus-t ... 219.tar.gz 2、tar -zxvf ibus-table-wubi-1.1.0.20090219.tar.gz 3、cd ibus-table-wubi-1.1.0.20090219 4、./configure --prefix=/usr --enable-wubi98 --disable-wubi86 5、sudo make install 6、系统 － 首选项 － iBus首选项中添98五笔”","slug":"ibus-e4-b8-8b-e5-ae-89-e8-a3-8598-e4-ba-94-e7-ac-94-e7-9a-84-e6-96-b9-e6-b3-95","published":1,"updated":"2018-01-13T05:07:00.454Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjccw7xaz0062aqcreorbezx9","content":"<p>1、下载<a href=\"http://ibus.googlecode.com/files/ibus-table-wubi-1.2.0.20091227.tar.gz\" title=\"ibus-table-wubi-1.2.0.20091227.tar.gz\" target=\"_blank\" rel=\"noopener\">ibus-table-wubi</a>进行解压后，到table文件夹中找到wubi98.txt;<br> 2、在终端运行cd 切换到wubi98.txt所在的文件夹<br> 3、运行ibus-table-createdb -s wubi98.txt编译wubi98.db文件<br> 4、运行sudo cp wubi98.db /usr/share/ibus-table/tables 把wubi98.db复制到系统位置<br> 5、运行cd 切换到解压后的icons文件夹<br> 6、运行sudo cp wubi98.svg /usr/share/ibus-table/icons 复制图标<br> 7、重启ibus首选项输入选择输入法汉语五笔98添加，再重启ibus。</p>\n<p>后又参照“将海峰五笔码表转到ibus下使用”（<a href=\"http://blog.linjian.org/articles/sunwb-ibus/）把海峰五笔98也安装成功。\" target=\"_blank\" rel=\"noopener\">http://blog.linjian.org/articles/sunwb-ibus/）把海峰五笔98也安装成功。</a><br> 下面网上安装方法<br> “1、下载 wget <a href=\"http://ibus.googlecode.com/files/ibus-t\" target=\"_blank\" rel=\"noopener\">http://ibus.googlecode.com/files/ibus-t</a> … 219.tar.gz 2、tar -zxvf ibus-table-wubi-1.1.0.20090219.tar.gz 3、cd ibus-table-wubi-1.1.0.20090219 4、./configure –prefix=/usr –enable-wubi98 –disable-wubi86 5、sudo make install 6、系统 － 首选项 － iBus首选项中添98五笔”</p>\n","site":{"data":{}},"excerpt":"","more":"<p>1、下载<a href=\"http://ibus.googlecode.com/files/ibus-table-wubi-1.2.0.20091227.tar.gz\" title=\"ibus-table-wubi-1.2.0.20091227.tar.gz\" target=\"_blank\" rel=\"noopener\">ibus-table-wubi</a>进行解压后，到table文件夹中找到wubi98.txt;<br> 2、在终端运行cd 切换到wubi98.txt所在的文件夹<br> 3、运行ibus-table-createdb -s wubi98.txt编译wubi98.db文件<br> 4、运行sudo cp wubi98.db /usr/share/ibus-table/tables 把wubi98.db复制到系统位置<br> 5、运行cd 切换到解压后的icons文件夹<br> 6、运行sudo cp wubi98.svg /usr/share/ibus-table/icons 复制图标<br> 7、重启ibus首选项输入选择输入法汉语五笔98添加，再重启ibus。</p>\n<p>后又参照“将海峰五笔码表转到ibus下使用”（<a href=\"http://blog.linjian.org/articles/sunwb-ibus/）把海峰五笔98也安装成功。\" target=\"_blank\" rel=\"noopener\">http://blog.linjian.org/articles/sunwb-ibus/）把海峰五笔98也安装成功。</a><br> 下面网上安装方法<br> “1、下载 wget <a href=\"http://ibus.googlecode.com/files/ibus-t\" target=\"_blank\" rel=\"noopener\">http://ibus.googlecode.com/files/ibus-t</a> … 219.tar.gz 2、tar -zxvf ibus-table-wubi-1.1.0.20090219.tar.gz 3、cd ibus-table-wubi-1.1.0.20090219 4、./configure –prefix=/usr –enable-wubi98 –disable-wubi86 5、sudo make install 6、系统 － 首选项 － iBus首选项中添98五笔”</p>\n"},{"title":"IE position:fixed 解决办法","id":"1233","date":"2014-03-17T08:26:35.000Z","_content":"\n> 最近怎么老是写前端。。。\n先来个例子：让元素固定在浏览器的底部和距离右边的20个像素\n<pre>#top{\nposition:fixed;\n_position:absolute;\nbottom:0;\nright:20px;\n_bottom:auto;\n_top:expression(eval(document.documentElement.scrollTop+document.documentElement.clientHeight-this.offsetHeight-(parseInt(this.currentStyle.marginTop,10)||0)-(parseInt(this.currentStyle.marginBottom,10)||0)));\n}</pre>\n来两个具体的\n<!--more-->\n<pre class=\"lang:default decode:true \">//使元素固定在浏览器的顶部\n #top{\n_position:absolute;\n_bottom:auto;\n_top:expression(eval(document.documentElement.scrollTop));\n}\n//使元素固定在浏览器的底部\n #top{\n_position:absolute;\n_bottom:auto;\n_top:expression(eval(document.documentElement.scrollTop+document.documentElement.clientHeight-this.offsetHeight-(parseInt(this.currentStyle.marginTop,10)||0)-(parseInt(this.currentStyle.marginBottom,10)||0)));\n}</pre>\n如果固定定位的元素在滚动滚动条的时候会闪动，加入：\n<pre> *html{\nbackground-image:url(about:blank);\nbackground-attachment:fixed;\n}\n\n</pre>\n`//js 方式\n&lt;style type=\"text/css\"&gt;\n#showTopDiv{position: fixed;_position: absolute;bottom: 0;right:0;z-index:101;height:auto;width:300px;color:#000;padding:10px;border:2px solid #F1D031;background-color: #FFFFA3;}\n#showTopDiv a{color:#000;text-decoration:none;position:absolute;right:6px;top:0px;}\n&lt;/style&gt;\n&lt;span id=\"showTop\"&gt;lalala&lt;/span&gt;\n&lt;script type=\"text/javascript\"&gt;\nwindow.onload=function(){\nshowTop('showTop');\n}\nfunction showTop(id){\nvar divContent=document.getElementById(id).innerHTML;\nvar divStr=\"&lt;a href=\\\"#\\\" onclick=\\\"parentNode.style.display='none';\\\"&gt;x&lt;/a&gt;\";\nvar div =document.createElement(\"div\");\ndiv.id=\"showTopDiv\";\ndiv.innerHTML=divStr+divContent;\ndocument.body.appendChild(div);\n}\n&lt;/script&gt;\n\n//css 方式\n&lt;style type=\"text/css\"&gt;\n#showTopDiv{position: fixed;_position: absolute;_bottom:atuo;_top:expression(offsetParent.scrollTop+document.documentElement.clientHeight+document.body.clientHeight-this.offsetHeight-10);bottom: 10;right:0;z-index:101;height:auto;width:300px;color:#000;padding:10px;border:2px solid #F1D031;background-color: #FFFFA3;background-attachment:fixed;background-image:url(about:blank);}\n#showTopClose{color:#000;text-decoration:none;position:absolute;right:6px;top:0px;}\n&lt;/style&gt;\n&lt;div id=\"showTopDiv\"&gt;\n&lt;a href=\"#\" id=\"showTopClose\" onclick=\"parentNode.style.display='none';\"&gt;x&lt;/a&gt;\n&lt;a href=\"#\"&gt;lalala\n&lt;/div&gt;`","source":"_posts/ie-positionfixed-e8-a7-a3-e5-86-b3-e5-8a-9e-e6-b3-95.md","raw":"---\ntitle: 'IE position:fixed 解决办法'\nid: 1233\ncategories:\n  - JQuery\ndate: 2014-03-17 16:26:35\ntags:\n---\n\n> 最近怎么老是写前端。。。\n先来个例子：让元素固定在浏览器的底部和距离右边的20个像素\n<pre>#top{\nposition:fixed;\n_position:absolute;\nbottom:0;\nright:20px;\n_bottom:auto;\n_top:expression(eval(document.documentElement.scrollTop+document.documentElement.clientHeight-this.offsetHeight-(parseInt(this.currentStyle.marginTop,10)||0)-(parseInt(this.currentStyle.marginBottom,10)||0)));\n}</pre>\n来两个具体的\n<!--more-->\n<pre class=\"lang:default decode:true \">//使元素固定在浏览器的顶部\n #top{\n_position:absolute;\n_bottom:auto;\n_top:expression(eval(document.documentElement.scrollTop));\n}\n//使元素固定在浏览器的底部\n #top{\n_position:absolute;\n_bottom:auto;\n_top:expression(eval(document.documentElement.scrollTop+document.documentElement.clientHeight-this.offsetHeight-(parseInt(this.currentStyle.marginTop,10)||0)-(parseInt(this.currentStyle.marginBottom,10)||0)));\n}</pre>\n如果固定定位的元素在滚动滚动条的时候会闪动，加入：\n<pre> *html{\nbackground-image:url(about:blank);\nbackground-attachment:fixed;\n}\n\n</pre>\n`//js 方式\n&lt;style type=\"text/css\"&gt;\n#showTopDiv{position: fixed;_position: absolute;bottom: 0;right:0;z-index:101;height:auto;width:300px;color:#000;padding:10px;border:2px solid #F1D031;background-color: #FFFFA3;}\n#showTopDiv a{color:#000;text-decoration:none;position:absolute;right:6px;top:0px;}\n&lt;/style&gt;\n&lt;span id=\"showTop\"&gt;lalala&lt;/span&gt;\n&lt;script type=\"text/javascript\"&gt;\nwindow.onload=function(){\nshowTop('showTop');\n}\nfunction showTop(id){\nvar divContent=document.getElementById(id).innerHTML;\nvar divStr=\"&lt;a href=\\\"#\\\" onclick=\\\"parentNode.style.display='none';\\\"&gt;x&lt;/a&gt;\";\nvar div =document.createElement(\"div\");\ndiv.id=\"showTopDiv\";\ndiv.innerHTML=divStr+divContent;\ndocument.body.appendChild(div);\n}\n&lt;/script&gt;\n\n//css 方式\n&lt;style type=\"text/css\"&gt;\n#showTopDiv{position: fixed;_position: absolute;_bottom:atuo;_top:expression(offsetParent.scrollTop+document.documentElement.clientHeight+document.body.clientHeight-this.offsetHeight-10);bottom: 10;right:0;z-index:101;height:auto;width:300px;color:#000;padding:10px;border:2px solid #F1D031;background-color: #FFFFA3;background-attachment:fixed;background-image:url(about:blank);}\n#showTopClose{color:#000;text-decoration:none;position:absolute;right:6px;top:0px;}\n&lt;/style&gt;\n&lt;div id=\"showTopDiv\"&gt;\n&lt;a href=\"#\" id=\"showTopClose\" onclick=\"parentNode.style.display='none';\"&gt;x&lt;/a&gt;\n&lt;a href=\"#\"&gt;lalala\n&lt;/div&gt;`","slug":"ie-positionfixed-e8-a7-a3-e5-86-b3-e5-8a-9e-e6-b3-95","published":1,"updated":"2018-01-13T05:07:00.457Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjccw7xb10065aqcr17ksr198","content":"<blockquote>\n<p>最近怎么老是写前端。。。<br>先来个例子：让元素固定在浏览器的底部和距离右边的20个像素</p>\n<p><pre>#top{<br>position:fixed;<br>_position:absolute;<br>bottom:0;<br>right:20px;<br>_bottom:auto;<br>_top:expression(eval(document.documentElement.scrollTop+document.documentElement.clientHeight-this.offsetHeight-(parseInt(this.currentStyle.marginTop,10)||0)-(parseInt(this.currentStyle.marginBottom,10)||0)));<br>}</pre><br>来两个具体的<br><a id=\"more\"></a></p>\n<p><pre class=\"lang:default decode:true \">//使元素固定在浏览器的顶部</pre></p>\n<p> #top{<br>_position:absolute;<br>_bottom:auto;<br>_top:expression(eval(document.documentElement.scrollTop));<br>}<br>//使元素固定在浏览器的底部</p>\n<p> #top{<br>_position:absolute;<br>_bottom:auto;<br>_top:expression(eval(document.documentElement.scrollTop+document.documentElement.clientHeight-this.offsetHeight-(parseInt(this.currentStyle.marginTop,10)||0)-(parseInt(this.currentStyle.marginBottom,10)||0)));<br>}<br>如果固定定位的元素在滚动滚动条的时候会闪动，加入：</p>\n<p><pre> *html{<br>background-image:url(about:blank);<br>background-attachment:fixed;<br>}</pre></p>\n</blockquote>\n<p><br>`//js 方式<br>&lt;style type=”text/css”&gt;</p>\n<p>#showTopDiv{position: fixed;_position: absolute;bottom: 0;right:0;z-index:101;height:auto;width:300px;color:#000;padding:10px;border:2px solid #F1D031;background-color: #FFFFA3;}</p>\n<p>#showTopDiv a{color:#000;text-decoration:none;position:absolute;right:6px;top:0px;}<br>&lt;/style&gt;<br>&lt;span id=”showTop”&gt;lalala&lt;/span&gt;<br>&lt;script type=”text/javascript”&gt;<br>window.onload=function(){<br>showTop(‘showTop’);<br>}<br>function showTop(id){<br>var divContent=document.getElementById(id).innerHTML;<br>var divStr=”&lt;a href=\\”#\\” onclick=\\”parentNode.style.display=’none’;\\”&gt;x&lt;/a&gt;”;<br>var div =document.createElement(“div”);<br>div.id=”showTopDiv”;<br>div.innerHTML=divStr+divContent;<br>document.body.appendChild(div);<br>}<br>&lt;/script&gt;</p>\n<p>//css 方式<br>&lt;style type=”text/css”&gt;</p>\n<p>#showTopDiv{position: fixed;_position: absolute;_bottom:atuo;_top:expression(offsetParent.scrollTop+document.documentElement.clientHeight+document.body.clientHeight-this.offsetHeight-10);bottom: 10;right:0;z-index:101;height:auto;width:300px;color:#000;padding:10px;border:2px solid #F1D031;background-color: #FFFFA3;background-attachment:fixed;background-image:url(about:blank);}</p>\n<p>#showTopClose{color:#000;text-decoration:none;position:absolute;right:6px;top:0px;}<br>&lt;/style&gt;<br>&lt;div id=”showTopDiv”&gt;<br>&lt;a href=”#” id=”showTopClose” onclick=”parentNode.style.display=’none’;”&gt;x&lt;/a&gt;<br>&lt;a href=”#”&gt;lalala<br>&lt;/div&gt;`</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>最近怎么老是写前端。。。<br>先来个例子：让元素固定在浏览器的底部和距离右边的20个像素</p>\n<p><pre>#top{<br>position:fixed;<br>_position:absolute;<br>bottom:0;<br>right:20px;<br>_bottom:auto;<br>_top:expression(eval(document.documentElement.scrollTop+document.documentElement.clientHeight-this.offsetHeight-(parseInt(this.currentStyle.marginTop,10)||0)-(parseInt(this.currentStyle.marginBottom,10)||0)));<br>}</pre><br>来两个具体的<br>","more":"</p>\n<p><pre class=\"lang:default decode:true \">//使元素固定在浏览器的顶部</pre></p>\n<p> #top{<br>_position:absolute;<br>_bottom:auto;<br>_top:expression(eval(document.documentElement.scrollTop));<br>}<br>//使元素固定在浏览器的底部</p>\n<p> #top{<br>_position:absolute;<br>_bottom:auto;<br>_top:expression(eval(document.documentElement.scrollTop+document.documentElement.clientHeight-this.offsetHeight-(parseInt(this.currentStyle.marginTop,10)||0)-(parseInt(this.currentStyle.marginBottom,10)||0)));<br>}<br>如果固定定位的元素在滚动滚动条的时候会闪动，加入：</p>\n<p><pre> *html{<br>background-image:url(about:blank);<br>background-attachment:fixed;<br>}</pre></p>\n</blockquote>\n<p><br>`//js 方式<br>&lt;style type=”text/css”&gt;</p>\n<p>#showTopDiv{position: fixed;_position: absolute;bottom: 0;right:0;z-index:101;height:auto;width:300px;color:#000;padding:10px;border:2px solid #F1D031;background-color: #FFFFA3;}</p>\n<p>#showTopDiv a{color:#000;text-decoration:none;position:absolute;right:6px;top:0px;}<br>&lt;/style&gt;<br>&lt;span id=”showTop”&gt;lalala&lt;/span&gt;<br>&lt;script type=”text/javascript”&gt;<br>window.onload=function(){<br>showTop(‘showTop’);<br>}<br>function showTop(id){<br>var divContent=document.getElementById(id).innerHTML;<br>var divStr=”&lt;a href=\\”#\\” onclick=\\”parentNode.style.display=’none’;\\”&gt;x&lt;/a&gt;”;<br>var div =document.createElement(“div”);<br>div.id=”showTopDiv”;<br>div.innerHTML=divStr+divContent;<br>document.body.appendChild(div);<br>}<br>&lt;/script&gt;</p>\n<p>//css 方式<br>&lt;style type=”text/css”&gt;</p>\n<p>#showTopDiv{position: fixed;_position: absolute;_bottom:atuo;_top:expression(offsetParent.scrollTop+document.documentElement.clientHeight+document.body.clientHeight-this.offsetHeight-10);bottom: 10;right:0;z-index:101;height:auto;width:300px;color:#000;padding:10px;border:2px solid #F1D031;background-color: #FFFFA3;background-attachment:fixed;background-image:url(about:blank);}</p>\n<p>#showTopClose{color:#000;text-decoration:none;position:absolute;right:6px;top:0px;}<br>&lt;/style&gt;<br>&lt;div id=”showTopDiv”&gt;<br>&lt;a href=”#” id=”showTopClose” onclick=”parentNode.style.display=’none’;”&gt;x&lt;/a&gt;<br>&lt;a href=”#”&gt;lalala<br>&lt;/div&gt;`</p>"},{"title":"iFrame高度自适应内容","id":"2209","date":"2014-10-16T09:20:18.000Z","_content":"\n`function SetWinHeight(obj) {\n    var win = obj;\n    if (document.getElementById) {\n        if (win && !window.opera) {\n            if (win.contentDocument && win.contentDocument.body.offsetHeight)\n                win.height = win.contentDocument.body.offsetHeight;\n            else if (win.Document && win.Document.body.scrollHeight)\n                win.height = win.Document.body.scrollHeight;\n        }\n    }\n}`\n\n`<iframe src=\"backtop.html\" frameborder=\"0\" scrolling=\"no\" id=\"external-frame\" onload=\"SetWinHeight(this)\"></iframe>`","source":"_posts/iframe-e9-ab-98-e5-ba-a6-e8-87-aa-e9-80-82-e5-ba-94-e5-86-85-e5-ae-b9.md","raw":"---\ntitle: iFrame高度自适应内容\ntags:\n  - html\nid: 2209\ncategories:\n  - Html\ndate: 2014-10-16 17:20:18\n---\n\n`function SetWinHeight(obj) {\n    var win = obj;\n    if (document.getElementById) {\n        if (win && !window.opera) {\n            if (win.contentDocument && win.contentDocument.body.offsetHeight)\n                win.height = win.contentDocument.body.offsetHeight;\n            else if (win.Document && win.Document.body.scrollHeight)\n                win.height = win.Document.body.scrollHeight;\n        }\n    }\n}`\n\n`<iframe src=\"backtop.html\" frameborder=\"0\" scrolling=\"no\" id=\"external-frame\" onload=\"SetWinHeight(this)\"></iframe>`","slug":"iframe-e9-ab-98-e5-ba-a6-e8-87-aa-e9-80-82-e5-ba-94-e5-86-85-e5-ae-b9","published":1,"updated":"2018-01-13T05:07:00.468Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjccw7xb30068aqcr0zudbwrb","content":"<p><code>function SetWinHeight(obj) {\n    var win = obj;\n    if (document.getElementById) {\n        if (win &amp;&amp; !window.opera) {\n            if (win.contentDocument &amp;&amp; win.contentDocument.body.offsetHeight)\n                win.height = win.contentDocument.body.offsetHeight;\n            else if (win.Document &amp;&amp; win.Document.body.scrollHeight)\n                win.height = win.Document.body.scrollHeight;\n        }\n    }\n}</code></p>\n<p><code>&lt;iframe src=&quot;backtop.html&quot; frameborder=&quot;0&quot; scrolling=&quot;no&quot; id=&quot;external-frame&quot; onload=&quot;SetWinHeight(this)&quot;&gt;&lt;/iframe&gt;</code></p>\n","site":{"data":{}},"excerpt":"","more":"<p><code>function SetWinHeight(obj) {\n    var win = obj;\n    if (document.getElementById) {\n        if (win &amp;&amp; !window.opera) {\n            if (win.contentDocument &amp;&amp; win.contentDocument.body.offsetHeight)\n                win.height = win.contentDocument.body.offsetHeight;\n            else if (win.Document &amp;&amp; win.Document.body.scrollHeight)\n                win.height = win.Document.body.scrollHeight;\n        }\n    }\n}</code></p>\n<p><code>&lt;iframe src=&quot;backtop.html&quot; frameborder=&quot;0&quot; scrolling=&quot;no&quot; id=&quot;external-frame&quot; onload=&quot;SetWinHeight(this)&quot;&gt;&lt;/iframe&gt;</code></p>\n"},{"title":"phpMyAdmin显示“MySQL返回:无法连接:无效的设置'解决方法","id":"265","date":"2011-09-03T00:18:28.000Z","_content":"\nphpMyAdmin的index页面只显示“MySQL返回：无法连接：无效的设置。”解决方法：\n找到phpMyAdmin的配置文件config.inc.php\n将其中的\n> $cfg['Servers'][$i]['auth_type'] = 'config';\n改为：\n> $cfg['Servers'][$i]['auth_type'] = 'cookie';\n就OK了~","source":"_posts/index-e9-a1-b5-e9-9d-a2-e5-8f-aa-e6-98-be-e7-a4-bamysql-e8-bf-94-e5-9b-9e-ef-bc-9a-e6-97-a0-e6-b3-95-e8-bf-9e-e6-8e-a5-ef-bc-9a-e6-97-a0-e6-95-88-e7-9a-84-e8-ae-be-e7-bd-aephpmyadmin.md","raw":"---\ntitle: 'phpMyAdmin显示“MySQL返回:无法连接:无效的设置''解决方法'\ntags:\n  - phpmyadmin\nid: 265\ncategories:\n  - PHP\ndate: 2011-09-03 08:18:28\n---\n\nphpMyAdmin的index页面只显示“MySQL返回：无法连接：无效的设置。”解决方法：\n找到phpMyAdmin的配置文件config.inc.php\n将其中的\n> $cfg['Servers'][$i]['auth_type'] = 'config';\n改为：\n> $cfg['Servers'][$i]['auth_type'] = 'cookie';\n就OK了~","slug":"index-e9-a1-b5-e9-9d-a2-e5-8f-aa-e6-98-be-e7-a4-bamysql-e8-bf-94-e5-9b-9e-ef-bc-9a-e6-97-a0-e6-b3-95-e8-bf-9e-e6-8e-a5-ef-bc-9a-e6-97-a0-e6-95-88-e7-9a-84-e8-ae-be-e7-bd-aephpmyadmin","published":1,"updated":"2018-01-13T05:07:00.445Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjccw7xb4006aaqcrk953ayxw","content":"<p>phpMyAdmin的index页面只显示“MySQL返回：无法连接：无效的设置。”解决方法：<br>找到phpMyAdmin的配置文件config.inc.php<br>将其中的</p>\n<blockquote>\n<p>$cfg[‘Servers’][$i][‘auth_type’] = ‘config’;<br>改为：<br>$cfg[‘Servers’][$i][‘auth_type’] = ‘cookie’;<br>就OK了~</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>phpMyAdmin的index页面只显示“MySQL返回：无法连接：无效的设置。”解决方法：<br>找到phpMyAdmin的配置文件config.inc.php<br>将其中的</p>\n<blockquote>\n<p>$cfg[‘Servers’][$i][‘auth_type’] = ‘config’;<br>改为：<br>$cfg[‘Servers’][$i][‘auth_type’] = ‘cookie’;<br>就OK了~</p>\n</blockquote>\n"},{"title":"Java Substring 两个参数的坑","id":"2173","date":"2014-06-07T15:04:53.000Z","_content":"\n搞了一天的elasticsearch，中间过程确是用大量时间处理java的几个字符串的问题。本来以为 java 里 String substring(int beginIndex, int endIndex) 的开始位置比0小时会自动为0，第二个参数大于总长度时会自动填长度，结果不是，为什么不这样做？\n\n最后还是看源码吧：\n` public String substring(int beginIndex, int endIndex) {\n\tif (beginIndex < 0) {\n\t    throw new StringIndexOutOfBoundsException(beginIndex);\n\t}\n\tif (endIndex > count) {\n\t    throw new StringIndexOutOfBoundsException(endIndex);\n\t}\n\tif (beginIndex > endIndex) {\n\t    throw new StringIndexOutOfBoundsException(endIndex - beginIndex);\n\t}\n\treturn ((beginIndex == 0) && (endIndex == count)) ? this :\n\t    new String(offset + beginIndex, endIndex - beginIndex, value);\n}\n`","source":"_posts/java-substring-e4-b8-a4-e4-b8-aa-e5-8f-82-e6-95-b0-e7-9a-84-e5-9d-91.md","raw":"---\ntitle: Java Substring 两个参数的坑\ntags:\n  - java\nid: 2173\ncategories:\n  - Java\ndate: 2014-06-07 23:04:53\n---\n\n搞了一天的elasticsearch，中间过程确是用大量时间处理java的几个字符串的问题。本来以为 java 里 String substring(int beginIndex, int endIndex) 的开始位置比0小时会自动为0，第二个参数大于总长度时会自动填长度，结果不是，为什么不这样做？\n\n最后还是看源码吧：\n` public String substring(int beginIndex, int endIndex) {\n\tif (beginIndex < 0) {\n\t    throw new StringIndexOutOfBoundsException(beginIndex);\n\t}\n\tif (endIndex > count) {\n\t    throw new StringIndexOutOfBoundsException(endIndex);\n\t}\n\tif (beginIndex > endIndex) {\n\t    throw new StringIndexOutOfBoundsException(endIndex - beginIndex);\n\t}\n\treturn ((beginIndex == 0) && (endIndex == count)) ? this :\n\t    new String(offset + beginIndex, endIndex - beginIndex, value);\n}\n`","slug":"java-substring-e4-b8-a4-e4-b8-aa-e5-8f-82-e6-95-b0-e7-9a-84-e5-9d-91","published":1,"updated":"2018-01-13T05:07:00.454Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjccw7xb5006daqcrao3lvzt8","content":"<p>搞了一天的elasticsearch，中间过程确是用大量时间处理java的几个字符串的问题。本来以为 java 里 String substring(int beginIndex, int endIndex) 的开始位置比0小时会自动为0，第二个参数大于总长度时会自动填长度，结果不是，为什么不这样做？</p>\n<p>最后还是看源码吧：<br><code>public String substring(int beginIndex, int endIndex) {\n    if (beginIndex &lt; 0) {\n        throw new StringIndexOutOfBoundsException(beginIndex);\n    }\n    if (endIndex &gt; count) {\n        throw new StringIndexOutOfBoundsException(endIndex);\n    }\n    if (beginIndex &gt; endIndex) {\n        throw new StringIndexOutOfBoundsException(endIndex - beginIndex);\n    }\n    return ((beginIndex == 0) &amp;&amp; (endIndex == count)) ? this :\n        new String(offset + beginIndex, endIndex - beginIndex, value);\n}</code></p>\n","site":{"data":{}},"excerpt":"","more":"<p>搞了一天的elasticsearch，中间过程确是用大量时间处理java的几个字符串的问题。本来以为 java 里 String substring(int beginIndex, int endIndex) 的开始位置比0小时会自动为0，第二个参数大于总长度时会自动填长度，结果不是，为什么不这样做？</p>\n<p>最后还是看源码吧：<br><code>public String substring(int beginIndex, int endIndex) {\n    if (beginIndex &lt; 0) {\n        throw new StringIndexOutOfBoundsException(beginIndex);\n    }\n    if (endIndex &gt; count) {\n        throw new StringIndexOutOfBoundsException(endIndex);\n    }\n    if (beginIndex &gt; endIndex) {\n        throw new StringIndexOutOfBoundsException(endIndex - beginIndex);\n    }\n    return ((beginIndex == 0) &amp;&amp; (endIndex == count)) ? this :\n        new String(offset + beginIndex, endIndex - beginIndex, value);\n}</code></p>\n"},{"title":"java 用Socket获取网页内容","id":"1168","date":"2013-09-19T02:56:43.000Z","_content":"\nTestSocket.java\n\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.InputStreamReader;\nimport java.io.OutputStreamWriter;\nimport java.net.HttpURLConnection;\nimport java.net.InetAddress;\nimport java.net.Socket;\nimport java.net.URL;\n\n/**\n*\n* @author Dao\n*/\npublic class TestSocket\n{\n\n    public TestSocket()\n    {\n    }\n\n    public static void main(String args[])\n    {\n        //你想获取代码的网站\n        String strServer = www.baidu.com;\n        //起始页面，/为根页\n        String strPage = \"/\";\n\n        try\n        {\n            //设置端口，通常http端口不就是80罗，你在地址栏上没输就是这个值\n            int port = 80;\n            //用域名反向获得IP地址\n            InetAddress addr = InetAddress.getByName(strServer);\n\n            //建立一个Socket\n            Socket socket = new Socket(addr, port);\n\n            //发送命令,无非就是在Socket发送流的基础上加多一些握手信息，详情请了解HTTP协议\n            BufferedWriter wr = new BufferedWriter(new OutputStreamWriter(socket.getOutputStream(), \"UTF-8\"));\n            wr.write(\"GET \" + strPage + \" HTTP/1.0rn\");\n            wr.write(\"HOST:\" + strServer + \"rn\");\n            wr.write(\"Accept:*/*rn\");\n            wr.write(\"rn\");\n            wr.flush();\n\n            //接收Socket返回的结果,并打印出来\n            BufferedReader rd = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n            String line;\n            while ((line = rd.readLine()) != null)\n            {\n                System.out.println(line);\n            }\n            wr.close();\n            rd.close();\n        }\n        catch (Exception e)\n        {\n            e.printStackTrace();\n        }\n    }\n}\n\n/**from http://gavin-chen.javaeye.com/blog/240422*/","source":"_posts/java-e7-94-a8socket-e8-8e-b7-e5-8f-96-e7-bd-91-e9-a1-b5-e5-86-85-e5-ae-b9.md","raw":"---\ntitle: java 用Socket获取网页内容\nid: 1168\ncategories:\n  - Java\ndate: 2013-09-19 10:56:43\ntags:\n---\n\nTestSocket.java\n\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.InputStreamReader;\nimport java.io.OutputStreamWriter;\nimport java.net.HttpURLConnection;\nimport java.net.InetAddress;\nimport java.net.Socket;\nimport java.net.URL;\n\n/**\n*\n* @author Dao\n*/\npublic class TestSocket\n{\n\n    public TestSocket()\n    {\n    }\n\n    public static void main(String args[])\n    {\n        //你想获取代码的网站\n        String strServer = www.baidu.com;\n        //起始页面，/为根页\n        String strPage = \"/\";\n\n        try\n        {\n            //设置端口，通常http端口不就是80罗，你在地址栏上没输就是这个值\n            int port = 80;\n            //用域名反向获得IP地址\n            InetAddress addr = InetAddress.getByName(strServer);\n\n            //建立一个Socket\n            Socket socket = new Socket(addr, port);\n\n            //发送命令,无非就是在Socket发送流的基础上加多一些握手信息，详情请了解HTTP协议\n            BufferedWriter wr = new BufferedWriter(new OutputStreamWriter(socket.getOutputStream(), \"UTF-8\"));\n            wr.write(\"GET \" + strPage + \" HTTP/1.0rn\");\n            wr.write(\"HOST:\" + strServer + \"rn\");\n            wr.write(\"Accept:*/*rn\");\n            wr.write(\"rn\");\n            wr.flush();\n\n            //接收Socket返回的结果,并打印出来\n            BufferedReader rd = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n            String line;\n            while ((line = rd.readLine()) != null)\n            {\n                System.out.println(line);\n            }\n            wr.close();\n            rd.close();\n        }\n        catch (Exception e)\n        {\n            e.printStackTrace();\n        }\n    }\n}\n\n/**from http://gavin-chen.javaeye.com/blog/240422*/","slug":"java-e7-94-a8socket-e8-8e-b7-e5-8f-96-e7-bd-91-e9-a1-b5-e5-86-85-e5-ae-b9","published":1,"updated":"2018-01-13T05:07:00.455Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjccw7xb6006haqcrborhs8qh","content":"<p>TestSocket.java</p>\n<p>import java.io.BufferedReader;<br>import java.io.BufferedWriter;<br>import java.io.InputStreamReader;<br>import java.io.OutputStreamWriter;<br>import java.net.HttpURLConnection;<br>import java.net.InetAddress;<br>import java.net.Socket;<br>import java.net.URL;</p>\n<p>/<em>*\n</em></p>\n<ul>\n<li><p>@author Dao<br>*/<br>public class TestSocket<br>{</p>\n<p>  public TestSocket()<br>  {<br>  }</p>\n<p>  public static void main(String args[])<br>  {</p>\n<pre><code>//你想获取代码的网站\nString strServer = www.baidu.com;\n//起始页面，/为根页\nString strPage = &quot;/&quot;;\n\ntry\n{\n    //设置端口，通常http端口不就是80罗，你在地址栏上没输就是这个值\n    int port = 80;\n    //用域名反向获得IP地址\n    InetAddress addr = InetAddress.getByName(strServer);\n\n    //建立一个Socket\n    Socket socket = new Socket(addr, port);\n\n    //发送命令,无非就是在Socket发送流的基础上加多一些握手信息，详情请了解HTTP协议\n    BufferedWriter wr = new BufferedWriter(new OutputStreamWriter(socket.getOutputStream(), &quot;UTF-8&quot;));\n    wr.write(&quot;GET &quot; + strPage + &quot; HTTP/1.0rn&quot;);\n    wr.write(&quot;HOST:&quot; + strServer + &quot;rn&quot;);\n    wr.write(&quot;Accept:*/*rn&quot;);\n    wr.write(&quot;rn&quot;);\n    wr.flush();\n\n    //接收Socket返回的结果,并打印出来\n    BufferedReader rd = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n    String line;\n    while ((line = rd.readLine()) != null)\n    {\n        System.out.println(line);\n    }\n    wr.close();\n    rd.close();\n}\ncatch (Exception e)\n{\n    e.printStackTrace();\n}\n</code></pre><p>  }<br>}</p>\n</li>\n</ul>\n<p>/<em>*from <a href=\"http://gavin-chen.javaeye.com/blog/240422\" target=\"_blank\" rel=\"noopener\">http://gavin-chen.javaeye.com/blog/240422</a></em>/</p>\n","site":{"data":{}},"excerpt":"","more":"<p>TestSocket.java</p>\n<p>import java.io.BufferedReader;<br>import java.io.BufferedWriter;<br>import java.io.InputStreamReader;<br>import java.io.OutputStreamWriter;<br>import java.net.HttpURLConnection;<br>import java.net.InetAddress;<br>import java.net.Socket;<br>import java.net.URL;</p>\n<p>/<em>*\n</em></p>\n<ul>\n<li><p>@author Dao<br>*/<br>public class TestSocket<br>{</p>\n<p>  public TestSocket()<br>  {<br>  }</p>\n<p>  public static void main(String args[])<br>  {</p>\n<pre><code>//你想获取代码的网站\nString strServer = www.baidu.com;\n//起始页面，/为根页\nString strPage = &quot;/&quot;;\n\ntry\n{\n    //设置端口，通常http端口不就是80罗，你在地址栏上没输就是这个值\n    int port = 80;\n    //用域名反向获得IP地址\n    InetAddress addr = InetAddress.getByName(strServer);\n\n    //建立一个Socket\n    Socket socket = new Socket(addr, port);\n\n    //发送命令,无非就是在Socket发送流的基础上加多一些握手信息，详情请了解HTTP协议\n    BufferedWriter wr = new BufferedWriter(new OutputStreamWriter(socket.getOutputStream(), &quot;UTF-8&quot;));\n    wr.write(&quot;GET &quot; + strPage + &quot; HTTP/1.0rn&quot;);\n    wr.write(&quot;HOST:&quot; + strServer + &quot;rn&quot;);\n    wr.write(&quot;Accept:*/*rn&quot;);\n    wr.write(&quot;rn&quot;);\n    wr.flush();\n\n    //接收Socket返回的结果,并打印出来\n    BufferedReader rd = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n    String line;\n    while ((line = rd.readLine()) != null)\n    {\n        System.out.println(line);\n    }\n    wr.close();\n    rd.close();\n}\ncatch (Exception e)\n{\n    e.printStackTrace();\n}\n</code></pre><p>  }<br>}</p>\n</li>\n</ul>\n<p>/<em>*from <a href=\"http://gavin-chen.javaeye.com/blog/240422\" target=\"_blank\" rel=\"noopener\">http://gavin-chen.javaeye.com/blog/240422</a></em>/</p>\n"},{"title":"jdk path classpath 记录","id":"1186","date":"2013-12-03T03:14:51.000Z","_content":"\n`JAVA_HOME=C:\\jdk1.5.0_06\nPATH=%JAVA_HOME%\\bin;%PATH%\nCLASSPATH=.;%JAVA_HOME%\\lib;%JAVA_HOME%\\lib\\tools.jar`","source":"_posts/jdk-path-classpath-e8-ae-b0-e5-bd-95.md","raw":"---\ntitle: jdk path classpath 记录\nid: 1186\ncategories:\n  - Java\ndate: 2013-12-03 11:14:51\ntags:\n---\n\n`JAVA_HOME=C:\\jdk1.5.0_06\nPATH=%JAVA_HOME%\\bin;%PATH%\nCLASSPATH=.;%JAVA_HOME%\\lib;%JAVA_HOME%\\lib\\tools.jar`","slug":"jdk-path-classpath-e8-ae-b0-e5-bd-95","published":1,"updated":"2018-01-13T05:07:00.471Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjccw7xb7006kaqcrcnxvjetq","content":"<p><code>JAVA_HOME=C:\\jdk1.5.0_06\nPATH=%JAVA_HOME%\\bin;%PATH%\nCLASSPATH=.;%JAVA_HOME%\\lib;%JAVA_HOME%\\lib\\tools.jar</code></p>\n","site":{"data":{}},"excerpt":"","more":"<p><code>JAVA_HOME=C:\\jdk1.5.0_06\nPATH=%JAVA_HOME%\\bin;%PATH%\nCLASSPATH=.;%JAVA_HOME%\\lib;%JAVA_HOME%\\lib\\tools.jar</code></p>\n"},{"title":"JQuery ready , load和windows.load的关系","id":"1225","date":"2014-03-17T01:36:39.000Z","_content":"\n> 前两天遇到一个问题：页面需要弹出一个dialog, dialog里要执行一个显示tips, 在chrome显示没有问题，但是到了firefox下就一直不能显示，后来才知道，加载这个tips插件时页面内容没有显示全，页面内容是通过json读的后台，所以不能显示。\n默认调用这个显示tips的函数是用 jQuery.ready() 后来换成 windows.load就可以了，实在不行就再加个时间：\n`\nwindow.onload=function(){\nsetTimeout('joyride()',200);\n}\n`\n这里找到了关于这几个函数的理解说明：\n\nwindow.onload方法是在网页中所有的元素（包括元素的所有关联文件）完全加载到浏览器后才执行，即JavaScript此时才可以访问网页中的任何元素。\n\n过jQuery中的$(document).ready()方法注册的事件处理程序，在DOM完全就绪时就可以被调用。只要DOM就绪就会被执行，因此可能此时元素的关联文件末下载完。<!--more-->\n\njQuery load()方法会在元素的onload事件中绑定一个处理函数。如果处理函数绑定给window对象，则会在所有内容（包括窗口、框架、对象和图像等）加载完毕后触发，如果处理函数绑定在元素上，则会在元素的内容加载完毕后触发。\n`\n$(window).load(function(){\n// 编写代码\n})\n`\n等价于JavaScript中的以下代码：\n`\nwindow.onload = function(){\n// 编写代码\n})\n`\n另外：\n`\n$(document).ready(function(){\n// 编写代码\n})\n\n$(function(){\n// 编写代码\n})\n\n$().ready(function(){\n// 编写代码 当$()不带参数时，默认参数就是“document”\n})\n`\n是相同\n\n详细：http://www.nowamagic.net/librarys/posts/jquery/71","source":"_posts/jquery-ready-load-e5-92-8cwindows-load-e7-9a-84-e5-85-b3-e7-b3-bb.md","raw":"---\ntitle: 'JQuery ready , load和windows.load的关系'\nid: 1225\ncategories:\n  - JQuery\ndate: 2014-03-17 09:36:39\ntags:\n---\n\n> 前两天遇到一个问题：页面需要弹出一个dialog, dialog里要执行一个显示tips, 在chrome显示没有问题，但是到了firefox下就一直不能显示，后来才知道，加载这个tips插件时页面内容没有显示全，页面内容是通过json读的后台，所以不能显示。\n默认调用这个显示tips的函数是用 jQuery.ready() 后来换成 windows.load就可以了，实在不行就再加个时间：\n`\nwindow.onload=function(){\nsetTimeout('joyride()',200);\n}\n`\n这里找到了关于这几个函数的理解说明：\n\nwindow.onload方法是在网页中所有的元素（包括元素的所有关联文件）完全加载到浏览器后才执行，即JavaScript此时才可以访问网页中的任何元素。\n\n过jQuery中的$(document).ready()方法注册的事件处理程序，在DOM完全就绪时就可以被调用。只要DOM就绪就会被执行，因此可能此时元素的关联文件末下载完。<!--more-->\n\njQuery load()方法会在元素的onload事件中绑定一个处理函数。如果处理函数绑定给window对象，则会在所有内容（包括窗口、框架、对象和图像等）加载完毕后触发，如果处理函数绑定在元素上，则会在元素的内容加载完毕后触发。\n`\n$(window).load(function(){\n// 编写代码\n})\n`\n等价于JavaScript中的以下代码：\n`\nwindow.onload = function(){\n// 编写代码\n})\n`\n另外：\n`\n$(document).ready(function(){\n// 编写代码\n})\n\n$(function(){\n// 编写代码\n})\n\n$().ready(function(){\n// 编写代码 当$()不带参数时，默认参数就是“document”\n})\n`\n是相同\n\n详细：http://www.nowamagic.net/librarys/posts/jquery/71","slug":"jquery-ready-load-e5-92-8cwindows-load-e7-9a-84-e5-85-b3-e7-b3-bb","published":1,"updated":"2018-01-13T05:07:00.486Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjccw7xb9006oaqcrpgf8x1b2","content":"<blockquote>\n<p>前两天遇到一个问题：页面需要弹出一个dialog, dialog里要执行一个显示tips, 在chrome显示没有问题，但是到了firefox下就一直不能显示，后来才知道，加载这个tips插件时页面内容没有显示全，页面内容是通过json读的后台，所以不能显示。<br>默认调用这个显示tips的函数是用 jQuery.ready() 后来换成 windows.load就可以了，实在不行就再加个时间：<br><code>window.onload=function(){\nsetTimeout(&#39;joyride()&#39;,200);\n}</code><br>这里找到了关于这几个函数的理解说明：</p>\n</blockquote>\n<p>window.onload方法是在网页中所有的元素（包括元素的所有关联文件）完全加载到浏览器后才执行，即JavaScript此时才可以访问网页中的任何元素。</p>\n<p>过jQuery中的$(document).ready()方法注册的事件处理程序，在DOM完全就绪时就可以被调用。只要DOM就绪就会被执行，因此可能此时元素的关联文件末下载完。<a id=\"more\"></a></p>\n<p>jQuery load()方法会在元素的onload事件中绑定一个处理函数。如果处理函数绑定给window对象，则会在所有内容（包括窗口、框架、对象和图像等）加载完毕后触发，如果处理函数绑定在元素上，则会在元素的内容加载完毕后触发。<br><code>$(window).load(function(){\n// 编写代码\n})</code><br>等价于JavaScript中的以下代码：<br><code>window.onload = function(){\n// 编写代码\n})</code><br>另外：<br>`<br>$(document).ready(function(){<br>// 编写代码<br>})</p>\n<p>$(function(){<br>// 编写代码<br>})</p>\n<p>$().ready(function(){<br>// 编写代码 当$()不带参数时，默认参数就是“document”<br>})<br>`<br>是相同</p>\n<p>详细：<a href=\"http://www.nowamagic.net/librarys/posts/jquery/71\" target=\"_blank\" rel=\"noopener\">http://www.nowamagic.net/librarys/posts/jquery/71</a></p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>前两天遇到一个问题：页面需要弹出一个dialog, dialog里要执行一个显示tips, 在chrome显示没有问题，但是到了firefox下就一直不能显示，后来才知道，加载这个tips插件时页面内容没有显示全，页面内容是通过json读的后台，所以不能显示。<br>默认调用这个显示tips的函数是用 jQuery.ready() 后来换成 windows.load就可以了，实在不行就再加个时间：<br><code>window.onload=function(){\nsetTimeout(&#39;joyride()&#39;,200);\n}</code><br>这里找到了关于这几个函数的理解说明：</p>\n</blockquote>\n<p>window.onload方法是在网页中所有的元素（包括元素的所有关联文件）完全加载到浏览器后才执行，即JavaScript此时才可以访问网页中的任何元素。</p>\n<p>过jQuery中的$(document).ready()方法注册的事件处理程序，在DOM完全就绪时就可以被调用。只要DOM就绪就会被执行，因此可能此时元素的关联文件末下载完。","more":"</p>\n<p>jQuery load()方法会在元素的onload事件中绑定一个处理函数。如果处理函数绑定给window对象，则会在所有内容（包括窗口、框架、对象和图像等）加载完毕后触发，如果处理函数绑定在元素上，则会在元素的内容加载完毕后触发。<br><code>$(window).load(function(){\n// 编写代码\n})</code><br>等价于JavaScript中的以下代码：<br><code>window.onload = function(){\n// 编写代码\n})</code><br>另外：<br>`<br>$(document).ready(function(){<br>// 编写代码<br>})</p>\n<p>$(function(){<br>// 编写代码<br>})</p>\n<p>$().ready(function(){<br>// 编写代码 当$()不带参数时，默认参数就是“document”<br>})<br>`<br>是相同</p>\n<p>详细：<a href=\"http://www.nowamagic.net/librarys/posts/jquery/71\" target=\"_blank\" rel=\"noopener\">http://www.nowamagic.net/librarys/posts/jquery/71</a></p>"},{"title":"Java栈与堆","id":"1161","date":"2013-09-29T02:50:03.000Z","_content":"\n1\\. 栈(stack)与堆(heap)都是Java用来在Ram中存放数据的地方。与C++不同，Java自动管理栈和堆，程序员不能直接地设置栈或堆。\n\n2\\. 栈的优势是，存取速度比堆要快，仅次于直接位于CPU中的寄存器。但缺点是，存在栈中的数据大小与生存期必须是确定的，缺乏灵活性。另外，栈数据可以共享，详见第3点。堆的优势是可以动态地分配内存大小，生存期也不必事先告诉编译器，Java的垃圾收集器会自动收走这些不再使用的数据。但缺点是，由于要在运行时动态分配内存，存取速度较慢。\n\n3\\. Java中的数据类型有两种。\n\n一种是基本类型(primitive types), 共有8种，即int, short, long, byte, float, double, boolean, char(注意，并没有string的基本类型)。这种类型的定义是通过诸如int a = 3; long b = 255L;的形式来定义的，称为自动变量。值得注意的是，自动变量存的是字面值，不是类的实例，即不是类的引用，这里并没有类的存在。如int a = 3; 这里的a是一个指向int类型的引用，指向3这个字面值。这些字面值的数据，由于大小可知，生存期可知(这些字面值固定定义在某个程序块里面，程序块退出后，字段值就消失了)，出于追求速度的原因，就存在于栈中。\n\n另外，栈有一个很重要的特殊性，就是存在栈中的数据可以共享。假设我们同时定义：\n复制内容到剪贴板代码:\nint a = 3;\nint b = 3；\n编译器先处理int a = 3；首先它会在栈中创建一个变量为a的引用，然后查找有没有字面值为3的地址，没找到，就开辟一个存放3这个字面值的地址，然后将a指向3的地址。接着处理int b = 3；在创建完b的引用变量后，由于在栈中已经有3这个字面值，便将b直接指向3的地址。这样，就出现了a与b同时均指向3的情况。\n\n特别注意的是，这种字面值的引用与类对象的引用不同。假定两个类对象的引用同时指向一个对象，如果一个对象引用变量修改了这个对象的内部状态，那么另一个对象引用变量也即刻反映出这个变化。相反，通过字面值的引用来修改其值，不会导致另一个指向此字面值的引用的值也跟着改变的情况。如上例，我们定义完a与b的值后，再令a=4；那么，b不会等于4，还是等于3。在编译器内部，遇到a=4；时，它就会重新搜索栈中是否有4的字面值，如果没有，重新开辟地址存放4的值；如果已经有了，则直接将a指向这个地址。因此a值的改变不会影响到b的值。\n\n另一种是包装类数据，如Integer, String, Double等将相应的基本数据类型包装起来的类。这些类数据全部存在于堆中，Java用new()语句来显示地告诉编译器，在运行时才根据需要动态创建，因此比较灵活，但缺点是要占用更多的时间。 4\\. String是一个特殊的包装类数据。即可以用String str = new String(\"abc\");的形式来创建，也可以用String str = \"abc\"；的形式来创建(作为对比，在JDK 5.0之前，你从未见过Integer i = 3;的表达式，因为类与字面值是不能通用的，除了String。而在JDK 5.0中，这种表达式是可以的！因为编译器在后台进行Integer i = new Integer(3)的转换)。前者是规范的类的创建过程，即在Java中，一切都是对象，而对象是类的实例，全部通过new()的形式来创建。Java中的有些类，如DateFormat类，可以通过该类的getInstance()方法来返回一个新创建的类，似乎违反了此原则。其实不然。该类运用了单例模式来返回类的实例，只不过这个实例是在该类内部通过new()来创建的，而getInstance()向外部隐藏了此细节。那为什么在String str = \"abc\"；中，并没有通过new()来创建实例，是不是违反了上述原则？其实没有。\n\n5\\. 关于String str = \"abc\"的内部工作。Java内部将此语句转化为以下几个步骤：\n\n(1)先定义一个名为str的对String类的对象引用变量：String str；\n\n(2)在栈中查找有没有存放值为\"abc\"的地址，如果没有，则开辟一个存放字面值为\"abc\"的地址，接着创建一个新的String类的对象o，并将o的字符串值指向这个地址，而且在栈中这个地址旁边记下这个引用的对象o。如果已经有了值为\"abc\"的地址，则查找对象o，并返回o的地址。\n\n(3)将str指向对象o的地址。\n\n值得注意的是，一般String类中字符串值都是直接存值的。但像String str = \"abc\"；这种场合下，其字符串值却是保存了一个指向存在栈中数据的引用！\n\n为了更好地说明这个问题，我们可以通过以下的几个代码进行验证。\n复制内容到剪贴板代码:\nString str1 = \"abc\";\nString str2 = \"abc\";\nSystem.out.println(str1==str2); //true\n注意，我们这里并不用str1.equals(str2)；的方式，因为这将比较两个字符串的值是否相等。==号，根据JDK的说明，只有在两个引用都指向了同一个对象时才返回真值。而我们在这里要看的是，str1与str2是否都指向了同一个对象。\n结果说明，JVM创建了两个引用str1和str2，但只创建了一个对象，而且两个引用都指向了这个对象。\n\n我们再来更进一步，将以上代码改成：\n复制内容到剪贴板代码:\nString str1 = \"abc\";\nString str2 = \"abc\";\nstr1 = \"bcd\";\nSystem.out.println(str1 + \",\" + str2); //bcd, abc\nSystem.out.println(str1==str2); //false\n这就是说，赋值的变化导致了类对象引用的变化，str1指向了另外一个新对象！而str2仍旧指向原来的对象。上例中，当我们将str1的值改为\"bcd\"时，JVM发现在栈中没有存放该值的地址，便开辟了这个地址，并创建了一个新的对象，其字符串的值指向这个地址。\n\n事实上，String类被设计成为不可改变(immutable)的类。如果你要改变其值，可以，但JVM在运行时根据新值悄悄创建了一个新对象，然后将这个对象的地址返回给原来类的引用。这个创建过程虽说是完全自动进行的，但它毕竟占用了更多的时间。在对时间要求比较敏感的环境中，会带有一定的不良影响。\n\n再修改原来代码：\n复制内容到剪贴板代码:\nString str1 = \"abc\";\nString str2 = \"abc\";\n\nstr1 = \"bcd\";\n\nString str3 = str1;\nSystem.out.println(str3); //bcd\n\nString str4 = \"bcd\";\nSystem.out.println(str1 == str4); //true\nstr3这个对象的引用直接指向str1所指向的对象(注意，str3并没有创建新对象)。当str1改完其值后，再创建一个String的引用str4，并指向因str1修改值而创建的新的对象。可以发现，这回str4也没有创建新的对象，从而再次实现栈中数据的共享。\n\n我们再接着看以下的代码。\n复制内容到剪贴板代码:\nString str1 = new String(\"abc\");\nString str2 = \"abc\";\nSystem.out.println(str1==str2); //false 创建了两个引用。创建了两个对象。两个引用分别指向不同的两个对象。\n\nString str1 = \"abc\";\nString str2 = new String(\"abc\");\nSystem.out.println(str1==str2); //false\n创建了两个引用。创建了两个对象。两个引用分别指向不同的两个对象。\n\n以上两段代码说明，只要是用new()来新建对象的，都会在堆中创建，而且其字符串是单独存值的，即使与栈中的数据相同，也不会与栈中的数据共享。\n\n6\\. 数据类型包装类的值不可修改。不仅仅是String类的值不可修改，所有的数据类型包装类都不能更改其内部的值。 7\\. 结论与建议：\n\n(1)我们在使用诸如String str = \"abc\"；的格式定义类时，总是想当然地认为，我们创建了String类的对象str。担心陷阱！对象可能并没有被创建！唯一可以肯定的是，指向String类的引用被创建了。至于这个引用到底是否指向了一个新的对象，必须根据上下文来考虑，除非你通过new()方法来显要地创建一个新的对象。因此，更为准确的说法是，我们创建了一个指向String类的对象的引用变量str，这个对象引用变量指向了某个值为\"abc\"的String类。清醒地认识到这一点对排除程序中难以发现的bug是很有帮助的。\n\n(2)使用String str = \"abc\"；的方式，可以在一定程度上提高程序的运行速度，因为JVM会自动根据栈中数据的实际情况来决定是否有必要创建新对象。而对于String str = new String(\"abc\")；的代码，则一概在堆中创建新对象，而不管其字符串值是否相等，是否有必要创建新对象，从而加重了程序的负担。这个思想应该是享元模式的思想，但JDK的内部在这里实现是否应用了这个模式，不得而知。\n\n(3)当比较包装类里面的数值是否相等时，用equals()方法；当测试两个包装类的引用是否指向同一个对象时，用==。\n\n(4)由于String类的immutable性质，当String变量需要经常变换其值时，应该考虑使用StringBuffer类，以提高程序效率。","source":"_posts/java-e6-a0-88-e4-b8-8e-e5-a0-86.md","raw":"---\ntitle: Java栈与堆\nid: 1161\ncategories:\n  - Java\ndate: 2013-09-29 10:50:03\ntags:\n---\n\n1\\. 栈(stack)与堆(heap)都是Java用来在Ram中存放数据的地方。与C++不同，Java自动管理栈和堆，程序员不能直接地设置栈或堆。\n\n2\\. 栈的优势是，存取速度比堆要快，仅次于直接位于CPU中的寄存器。但缺点是，存在栈中的数据大小与生存期必须是确定的，缺乏灵活性。另外，栈数据可以共享，详见第3点。堆的优势是可以动态地分配内存大小，生存期也不必事先告诉编译器，Java的垃圾收集器会自动收走这些不再使用的数据。但缺点是，由于要在运行时动态分配内存，存取速度较慢。\n\n3\\. Java中的数据类型有两种。\n\n一种是基本类型(primitive types), 共有8种，即int, short, long, byte, float, double, boolean, char(注意，并没有string的基本类型)。这种类型的定义是通过诸如int a = 3; long b = 255L;的形式来定义的，称为自动变量。值得注意的是，自动变量存的是字面值，不是类的实例，即不是类的引用，这里并没有类的存在。如int a = 3; 这里的a是一个指向int类型的引用，指向3这个字面值。这些字面值的数据，由于大小可知，生存期可知(这些字面值固定定义在某个程序块里面，程序块退出后，字段值就消失了)，出于追求速度的原因，就存在于栈中。\n\n另外，栈有一个很重要的特殊性，就是存在栈中的数据可以共享。假设我们同时定义：\n复制内容到剪贴板代码:\nint a = 3;\nint b = 3；\n编译器先处理int a = 3；首先它会在栈中创建一个变量为a的引用，然后查找有没有字面值为3的地址，没找到，就开辟一个存放3这个字面值的地址，然后将a指向3的地址。接着处理int b = 3；在创建完b的引用变量后，由于在栈中已经有3这个字面值，便将b直接指向3的地址。这样，就出现了a与b同时均指向3的情况。\n\n特别注意的是，这种字面值的引用与类对象的引用不同。假定两个类对象的引用同时指向一个对象，如果一个对象引用变量修改了这个对象的内部状态，那么另一个对象引用变量也即刻反映出这个变化。相反，通过字面值的引用来修改其值，不会导致另一个指向此字面值的引用的值也跟着改变的情况。如上例，我们定义完a与b的值后，再令a=4；那么，b不会等于4，还是等于3。在编译器内部，遇到a=4；时，它就会重新搜索栈中是否有4的字面值，如果没有，重新开辟地址存放4的值；如果已经有了，则直接将a指向这个地址。因此a值的改变不会影响到b的值。\n\n另一种是包装类数据，如Integer, String, Double等将相应的基本数据类型包装起来的类。这些类数据全部存在于堆中，Java用new()语句来显示地告诉编译器，在运行时才根据需要动态创建，因此比较灵活，但缺点是要占用更多的时间。 4\\. String是一个特殊的包装类数据。即可以用String str = new String(\"abc\");的形式来创建，也可以用String str = \"abc\"；的形式来创建(作为对比，在JDK 5.0之前，你从未见过Integer i = 3;的表达式，因为类与字面值是不能通用的，除了String。而在JDK 5.0中，这种表达式是可以的！因为编译器在后台进行Integer i = new Integer(3)的转换)。前者是规范的类的创建过程，即在Java中，一切都是对象，而对象是类的实例，全部通过new()的形式来创建。Java中的有些类，如DateFormat类，可以通过该类的getInstance()方法来返回一个新创建的类，似乎违反了此原则。其实不然。该类运用了单例模式来返回类的实例，只不过这个实例是在该类内部通过new()来创建的，而getInstance()向外部隐藏了此细节。那为什么在String str = \"abc\"；中，并没有通过new()来创建实例，是不是违反了上述原则？其实没有。\n\n5\\. 关于String str = \"abc\"的内部工作。Java内部将此语句转化为以下几个步骤：\n\n(1)先定义一个名为str的对String类的对象引用变量：String str；\n\n(2)在栈中查找有没有存放值为\"abc\"的地址，如果没有，则开辟一个存放字面值为\"abc\"的地址，接着创建一个新的String类的对象o，并将o的字符串值指向这个地址，而且在栈中这个地址旁边记下这个引用的对象o。如果已经有了值为\"abc\"的地址，则查找对象o，并返回o的地址。\n\n(3)将str指向对象o的地址。\n\n值得注意的是，一般String类中字符串值都是直接存值的。但像String str = \"abc\"；这种场合下，其字符串值却是保存了一个指向存在栈中数据的引用！\n\n为了更好地说明这个问题，我们可以通过以下的几个代码进行验证。\n复制内容到剪贴板代码:\nString str1 = \"abc\";\nString str2 = \"abc\";\nSystem.out.println(str1==str2); //true\n注意，我们这里并不用str1.equals(str2)；的方式，因为这将比较两个字符串的值是否相等。==号，根据JDK的说明，只有在两个引用都指向了同一个对象时才返回真值。而我们在这里要看的是，str1与str2是否都指向了同一个对象。\n结果说明，JVM创建了两个引用str1和str2，但只创建了一个对象，而且两个引用都指向了这个对象。\n\n我们再来更进一步，将以上代码改成：\n复制内容到剪贴板代码:\nString str1 = \"abc\";\nString str2 = \"abc\";\nstr1 = \"bcd\";\nSystem.out.println(str1 + \",\" + str2); //bcd, abc\nSystem.out.println(str1==str2); //false\n这就是说，赋值的变化导致了类对象引用的变化，str1指向了另外一个新对象！而str2仍旧指向原来的对象。上例中，当我们将str1的值改为\"bcd\"时，JVM发现在栈中没有存放该值的地址，便开辟了这个地址，并创建了一个新的对象，其字符串的值指向这个地址。\n\n事实上，String类被设计成为不可改变(immutable)的类。如果你要改变其值，可以，但JVM在运行时根据新值悄悄创建了一个新对象，然后将这个对象的地址返回给原来类的引用。这个创建过程虽说是完全自动进行的，但它毕竟占用了更多的时间。在对时间要求比较敏感的环境中，会带有一定的不良影响。\n\n再修改原来代码：\n复制内容到剪贴板代码:\nString str1 = \"abc\";\nString str2 = \"abc\";\n\nstr1 = \"bcd\";\n\nString str3 = str1;\nSystem.out.println(str3); //bcd\n\nString str4 = \"bcd\";\nSystem.out.println(str1 == str4); //true\nstr3这个对象的引用直接指向str1所指向的对象(注意，str3并没有创建新对象)。当str1改完其值后，再创建一个String的引用str4，并指向因str1修改值而创建的新的对象。可以发现，这回str4也没有创建新的对象，从而再次实现栈中数据的共享。\n\n我们再接着看以下的代码。\n复制内容到剪贴板代码:\nString str1 = new String(\"abc\");\nString str2 = \"abc\";\nSystem.out.println(str1==str2); //false 创建了两个引用。创建了两个对象。两个引用分别指向不同的两个对象。\n\nString str1 = \"abc\";\nString str2 = new String(\"abc\");\nSystem.out.println(str1==str2); //false\n创建了两个引用。创建了两个对象。两个引用分别指向不同的两个对象。\n\n以上两段代码说明，只要是用new()来新建对象的，都会在堆中创建，而且其字符串是单独存值的，即使与栈中的数据相同，也不会与栈中的数据共享。\n\n6\\. 数据类型包装类的值不可修改。不仅仅是String类的值不可修改，所有的数据类型包装类都不能更改其内部的值。 7\\. 结论与建议：\n\n(1)我们在使用诸如String str = \"abc\"；的格式定义类时，总是想当然地认为，我们创建了String类的对象str。担心陷阱！对象可能并没有被创建！唯一可以肯定的是，指向String类的引用被创建了。至于这个引用到底是否指向了一个新的对象，必须根据上下文来考虑，除非你通过new()方法来显要地创建一个新的对象。因此，更为准确的说法是，我们创建了一个指向String类的对象的引用变量str，这个对象引用变量指向了某个值为\"abc\"的String类。清醒地认识到这一点对排除程序中难以发现的bug是很有帮助的。\n\n(2)使用String str = \"abc\"；的方式，可以在一定程度上提高程序的运行速度，因为JVM会自动根据栈中数据的实际情况来决定是否有必要创建新对象。而对于String str = new String(\"abc\")；的代码，则一概在堆中创建新对象，而不管其字符串值是否相等，是否有必要创建新对象，从而加重了程序的负担。这个思想应该是享元模式的思想，但JDK的内部在这里实现是否应用了这个模式，不得而知。\n\n(3)当比较包装类里面的数值是否相等时，用equals()方法；当测试两个包装类的引用是否指向同一个对象时，用==。\n\n(4)由于String类的immutable性质，当String变量需要经常变换其值时，应该考虑使用StringBuffer类，以提高程序效率。","slug":"java-e6-a0-88-e4-b8-8e-e5-a0-86","published":1,"updated":"2018-01-13T05:07:00.462Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjccw7xba006qaqcrdv1qap96","content":"<p>1. 栈(stack)与堆(heap)都是Java用来在Ram中存放数据的地方。与C++不同，Java自动管理栈和堆，程序员不能直接地设置栈或堆。</p>\n<p>2. 栈的优势是，存取速度比堆要快，仅次于直接位于CPU中的寄存器。但缺点是，存在栈中的数据大小与生存期必须是确定的，缺乏灵活性。另外，栈数据可以共享，详见第3点。堆的优势是可以动态地分配内存大小，生存期也不必事先告诉编译器，Java的垃圾收集器会自动收走这些不再使用的数据。但缺点是，由于要在运行时动态分配内存，存取速度较慢。</p>\n<p>3. Java中的数据类型有两种。</p>\n<p>一种是基本类型(primitive types), 共有8种，即int, short, long, byte, float, double, boolean, char(注意，并没有string的基本类型)。这种类型的定义是通过诸如int a = 3; long b = 255L;的形式来定义的，称为自动变量。值得注意的是，自动变量存的是字面值，不是类的实例，即不是类的引用，这里并没有类的存在。如int a = 3; 这里的a是一个指向int类型的引用，指向3这个字面值。这些字面值的数据，由于大小可知，生存期可知(这些字面值固定定义在某个程序块里面，程序块退出后，字段值就消失了)，出于追求速度的原因，就存在于栈中。</p>\n<p>另外，栈有一个很重要的特殊性，就是存在栈中的数据可以共享。假设我们同时定义：<br>复制内容到剪贴板代码:<br>int a = 3;<br>int b = 3；<br>编译器先处理int a = 3；首先它会在栈中创建一个变量为a的引用，然后查找有没有字面值为3的地址，没找到，就开辟一个存放3这个字面值的地址，然后将a指向3的地址。接着处理int b = 3；在创建完b的引用变量后，由于在栈中已经有3这个字面值，便将b直接指向3的地址。这样，就出现了a与b同时均指向3的情况。</p>\n<p>特别注意的是，这种字面值的引用与类对象的引用不同。假定两个类对象的引用同时指向一个对象，如果一个对象引用变量修改了这个对象的内部状态，那么另一个对象引用变量也即刻反映出这个变化。相反，通过字面值的引用来修改其值，不会导致另一个指向此字面值的引用的值也跟着改变的情况。如上例，我们定义完a与b的值后，再令a=4；那么，b不会等于4，还是等于3。在编译器内部，遇到a=4；时，它就会重新搜索栈中是否有4的字面值，如果没有，重新开辟地址存放4的值；如果已经有了，则直接将a指向这个地址。因此a值的改变不会影响到b的值。</p>\n<p>另一种是包装类数据，如Integer, String, Double等将相应的基本数据类型包装起来的类。这些类数据全部存在于堆中，Java用new()语句来显示地告诉编译器，在运行时才根据需要动态创建，因此比较灵活，但缺点是要占用更多的时间。 4. String是一个特殊的包装类数据。即可以用String str = new String(“abc”);的形式来创建，也可以用String str = “abc”；的形式来创建(作为对比，在JDK 5.0之前，你从未见过Integer i = 3;的表达式，因为类与字面值是不能通用的，除了String。而在JDK 5.0中，这种表达式是可以的！因为编译器在后台进行Integer i = new Integer(3)的转换)。前者是规范的类的创建过程，即在Java中，一切都是对象，而对象是类的实例，全部通过new()的形式来创建。Java中的有些类，如DateFormat类，可以通过该类的getInstance()方法来返回一个新创建的类，似乎违反了此原则。其实不然。该类运用了单例模式来返回类的实例，只不过这个实例是在该类内部通过new()来创建的，而getInstance()向外部隐藏了此细节。那为什么在String str = “abc”；中，并没有通过new()来创建实例，是不是违反了上述原则？其实没有。</p>\n<p>5. 关于String str = “abc”的内部工作。Java内部将此语句转化为以下几个步骤：</p>\n<p>(1)先定义一个名为str的对String类的对象引用变量：String str；</p>\n<p>(2)在栈中查找有没有存放值为”abc”的地址，如果没有，则开辟一个存放字面值为”abc”的地址，接着创建一个新的String类的对象o，并将o的字符串值指向这个地址，而且在栈中这个地址旁边记下这个引用的对象o。如果已经有了值为”abc”的地址，则查找对象o，并返回o的地址。</p>\n<p>(3)将str指向对象o的地址。</p>\n<p>值得注意的是，一般String类中字符串值都是直接存值的。但像String str = “abc”；这种场合下，其字符串值却是保存了一个指向存在栈中数据的引用！</p>\n<p>为了更好地说明这个问题，我们可以通过以下的几个代码进行验证。<br>复制内容到剪贴板代码:<br>String str1 = “abc”;<br>String str2 = “abc”;<br>System.out.println(str1==str2); //true<br>注意，我们这里并不用str1.equals(str2)；的方式，因为这将比较两个字符串的值是否相等。==号，根据JDK的说明，只有在两个引用都指向了同一个对象时才返回真值。而我们在这里要看的是，str1与str2是否都指向了同一个对象。<br>结果说明，JVM创建了两个引用str1和str2，但只创建了一个对象，而且两个引用都指向了这个对象。</p>\n<p>我们再来更进一步，将以上代码改成：<br>复制内容到剪贴板代码:<br>String str1 = “abc”;<br>String str2 = “abc”;<br>str1 = “bcd”;<br>System.out.println(str1 + “,” + str2); //bcd, abc<br>System.out.println(str1==str2); //false<br>这就是说，赋值的变化导致了类对象引用的变化，str1指向了另外一个新对象！而str2仍旧指向原来的对象。上例中，当我们将str1的值改为”bcd”时，JVM发现在栈中没有存放该值的地址，便开辟了这个地址，并创建了一个新的对象，其字符串的值指向这个地址。</p>\n<p>事实上，String类被设计成为不可改变(immutable)的类。如果你要改变其值，可以，但JVM在运行时根据新值悄悄创建了一个新对象，然后将这个对象的地址返回给原来类的引用。这个创建过程虽说是完全自动进行的，但它毕竟占用了更多的时间。在对时间要求比较敏感的环境中，会带有一定的不良影响。</p>\n<p>再修改原来代码：<br>复制内容到剪贴板代码:<br>String str1 = “abc”;<br>String str2 = “abc”;</p>\n<p>str1 = “bcd”;</p>\n<p>String str3 = str1;<br>System.out.println(str3); //bcd</p>\n<p>String str4 = “bcd”;<br>System.out.println(str1 == str4); //true<br>str3这个对象的引用直接指向str1所指向的对象(注意，str3并没有创建新对象)。当str1改完其值后，再创建一个String的引用str4，并指向因str1修改值而创建的新的对象。可以发现，这回str4也没有创建新的对象，从而再次实现栈中数据的共享。</p>\n<p>我们再接着看以下的代码。<br>复制内容到剪贴板代码:<br>String str1 = new String(“abc”);<br>String str2 = “abc”;<br>System.out.println(str1==str2); //false 创建了两个引用。创建了两个对象。两个引用分别指向不同的两个对象。</p>\n<p>String str1 = “abc”;<br>String str2 = new String(“abc”);<br>System.out.println(str1==str2); //false<br>创建了两个引用。创建了两个对象。两个引用分别指向不同的两个对象。</p>\n<p>以上两段代码说明，只要是用new()来新建对象的，都会在堆中创建，而且其字符串是单独存值的，即使与栈中的数据相同，也不会与栈中的数据共享。</p>\n<p>6. 数据类型包装类的值不可修改。不仅仅是String类的值不可修改，所有的数据类型包装类都不能更改其内部的值。 7. 结论与建议：</p>\n<p>(1)我们在使用诸如String str = “abc”；的格式定义类时，总是想当然地认为，我们创建了String类的对象str。担心陷阱！对象可能并没有被创建！唯一可以肯定的是，指向String类的引用被创建了。至于这个引用到底是否指向了一个新的对象，必须根据上下文来考虑，除非你通过new()方法来显要地创建一个新的对象。因此，更为准确的说法是，我们创建了一个指向String类的对象的引用变量str，这个对象引用变量指向了某个值为”abc”的String类。清醒地认识到这一点对排除程序中难以发现的bug是很有帮助的。</p>\n<p>(2)使用String str = “abc”；的方式，可以在一定程度上提高程序的运行速度，因为JVM会自动根据栈中数据的实际情况来决定是否有必要创建新对象。而对于String str = new String(“abc”)；的代码，则一概在堆中创建新对象，而不管其字符串值是否相等，是否有必要创建新对象，从而加重了程序的负担。这个思想应该是享元模式的思想，但JDK的内部在这里实现是否应用了这个模式，不得而知。</p>\n<p>(3)当比较包装类里面的数值是否相等时，用equals()方法；当测试两个包装类的引用是否指向同一个对象时，用==。</p>\n<p>(4)由于String类的immutable性质，当String变量需要经常变换其值时，应该考虑使用StringBuffer类，以提高程序效率。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>1. 栈(stack)与堆(heap)都是Java用来在Ram中存放数据的地方。与C++不同，Java自动管理栈和堆，程序员不能直接地设置栈或堆。</p>\n<p>2. 栈的优势是，存取速度比堆要快，仅次于直接位于CPU中的寄存器。但缺点是，存在栈中的数据大小与生存期必须是确定的，缺乏灵活性。另外，栈数据可以共享，详见第3点。堆的优势是可以动态地分配内存大小，生存期也不必事先告诉编译器，Java的垃圾收集器会自动收走这些不再使用的数据。但缺点是，由于要在运行时动态分配内存，存取速度较慢。</p>\n<p>3. Java中的数据类型有两种。</p>\n<p>一种是基本类型(primitive types), 共有8种，即int, short, long, byte, float, double, boolean, char(注意，并没有string的基本类型)。这种类型的定义是通过诸如int a = 3; long b = 255L;的形式来定义的，称为自动变量。值得注意的是，自动变量存的是字面值，不是类的实例，即不是类的引用，这里并没有类的存在。如int a = 3; 这里的a是一个指向int类型的引用，指向3这个字面值。这些字面值的数据，由于大小可知，生存期可知(这些字面值固定定义在某个程序块里面，程序块退出后，字段值就消失了)，出于追求速度的原因，就存在于栈中。</p>\n<p>另外，栈有一个很重要的特殊性，就是存在栈中的数据可以共享。假设我们同时定义：<br>复制内容到剪贴板代码:<br>int a = 3;<br>int b = 3；<br>编译器先处理int a = 3；首先它会在栈中创建一个变量为a的引用，然后查找有没有字面值为3的地址，没找到，就开辟一个存放3这个字面值的地址，然后将a指向3的地址。接着处理int b = 3；在创建完b的引用变量后，由于在栈中已经有3这个字面值，便将b直接指向3的地址。这样，就出现了a与b同时均指向3的情况。</p>\n<p>特别注意的是，这种字面值的引用与类对象的引用不同。假定两个类对象的引用同时指向一个对象，如果一个对象引用变量修改了这个对象的内部状态，那么另一个对象引用变量也即刻反映出这个变化。相反，通过字面值的引用来修改其值，不会导致另一个指向此字面值的引用的值也跟着改变的情况。如上例，我们定义完a与b的值后，再令a=4；那么，b不会等于4，还是等于3。在编译器内部，遇到a=4；时，它就会重新搜索栈中是否有4的字面值，如果没有，重新开辟地址存放4的值；如果已经有了，则直接将a指向这个地址。因此a值的改变不会影响到b的值。</p>\n<p>另一种是包装类数据，如Integer, String, Double等将相应的基本数据类型包装起来的类。这些类数据全部存在于堆中，Java用new()语句来显示地告诉编译器，在运行时才根据需要动态创建，因此比较灵活，但缺点是要占用更多的时间。 4. String是一个特殊的包装类数据。即可以用String str = new String(“abc”);的形式来创建，也可以用String str = “abc”；的形式来创建(作为对比，在JDK 5.0之前，你从未见过Integer i = 3;的表达式，因为类与字面值是不能通用的，除了String。而在JDK 5.0中，这种表达式是可以的！因为编译器在后台进行Integer i = new Integer(3)的转换)。前者是规范的类的创建过程，即在Java中，一切都是对象，而对象是类的实例，全部通过new()的形式来创建。Java中的有些类，如DateFormat类，可以通过该类的getInstance()方法来返回一个新创建的类，似乎违反了此原则。其实不然。该类运用了单例模式来返回类的实例，只不过这个实例是在该类内部通过new()来创建的，而getInstance()向外部隐藏了此细节。那为什么在String str = “abc”；中，并没有通过new()来创建实例，是不是违反了上述原则？其实没有。</p>\n<p>5. 关于String str = “abc”的内部工作。Java内部将此语句转化为以下几个步骤：</p>\n<p>(1)先定义一个名为str的对String类的对象引用变量：String str；</p>\n<p>(2)在栈中查找有没有存放值为”abc”的地址，如果没有，则开辟一个存放字面值为”abc”的地址，接着创建一个新的String类的对象o，并将o的字符串值指向这个地址，而且在栈中这个地址旁边记下这个引用的对象o。如果已经有了值为”abc”的地址，则查找对象o，并返回o的地址。</p>\n<p>(3)将str指向对象o的地址。</p>\n<p>值得注意的是，一般String类中字符串值都是直接存值的。但像String str = “abc”；这种场合下，其字符串值却是保存了一个指向存在栈中数据的引用！</p>\n<p>为了更好地说明这个问题，我们可以通过以下的几个代码进行验证。<br>复制内容到剪贴板代码:<br>String str1 = “abc”;<br>String str2 = “abc”;<br>System.out.println(str1==str2); //true<br>注意，我们这里并不用str1.equals(str2)；的方式，因为这将比较两个字符串的值是否相等。==号，根据JDK的说明，只有在两个引用都指向了同一个对象时才返回真值。而我们在这里要看的是，str1与str2是否都指向了同一个对象。<br>结果说明，JVM创建了两个引用str1和str2，但只创建了一个对象，而且两个引用都指向了这个对象。</p>\n<p>我们再来更进一步，将以上代码改成：<br>复制内容到剪贴板代码:<br>String str1 = “abc”;<br>String str2 = “abc”;<br>str1 = “bcd”;<br>System.out.println(str1 + “,” + str2); //bcd, abc<br>System.out.println(str1==str2); //false<br>这就是说，赋值的变化导致了类对象引用的变化，str1指向了另外一个新对象！而str2仍旧指向原来的对象。上例中，当我们将str1的值改为”bcd”时，JVM发现在栈中没有存放该值的地址，便开辟了这个地址，并创建了一个新的对象，其字符串的值指向这个地址。</p>\n<p>事实上，String类被设计成为不可改变(immutable)的类。如果你要改变其值，可以，但JVM在运行时根据新值悄悄创建了一个新对象，然后将这个对象的地址返回给原来类的引用。这个创建过程虽说是完全自动进行的，但它毕竟占用了更多的时间。在对时间要求比较敏感的环境中，会带有一定的不良影响。</p>\n<p>再修改原来代码：<br>复制内容到剪贴板代码:<br>String str1 = “abc”;<br>String str2 = “abc”;</p>\n<p>str1 = “bcd”;</p>\n<p>String str3 = str1;<br>System.out.println(str3); //bcd</p>\n<p>String str4 = “bcd”;<br>System.out.println(str1 == str4); //true<br>str3这个对象的引用直接指向str1所指向的对象(注意，str3并没有创建新对象)。当str1改完其值后，再创建一个String的引用str4，并指向因str1修改值而创建的新的对象。可以发现，这回str4也没有创建新的对象，从而再次实现栈中数据的共享。</p>\n<p>我们再接着看以下的代码。<br>复制内容到剪贴板代码:<br>String str1 = new String(“abc”);<br>String str2 = “abc”;<br>System.out.println(str1==str2); //false 创建了两个引用。创建了两个对象。两个引用分别指向不同的两个对象。</p>\n<p>String str1 = “abc”;<br>String str2 = new String(“abc”);<br>System.out.println(str1==str2); //false<br>创建了两个引用。创建了两个对象。两个引用分别指向不同的两个对象。</p>\n<p>以上两段代码说明，只要是用new()来新建对象的，都会在堆中创建，而且其字符串是单独存值的，即使与栈中的数据相同，也不会与栈中的数据共享。</p>\n<p>6. 数据类型包装类的值不可修改。不仅仅是String类的值不可修改，所有的数据类型包装类都不能更改其内部的值。 7. 结论与建议：</p>\n<p>(1)我们在使用诸如String str = “abc”；的格式定义类时，总是想当然地认为，我们创建了String类的对象str。担心陷阱！对象可能并没有被创建！唯一可以肯定的是，指向String类的引用被创建了。至于这个引用到底是否指向了一个新的对象，必须根据上下文来考虑，除非你通过new()方法来显要地创建一个新的对象。因此，更为准确的说法是，我们创建了一个指向String类的对象的引用变量str，这个对象引用变量指向了某个值为”abc”的String类。清醒地认识到这一点对排除程序中难以发现的bug是很有帮助的。</p>\n<p>(2)使用String str = “abc”；的方式，可以在一定程度上提高程序的运行速度，因为JVM会自动根据栈中数据的实际情况来决定是否有必要创建新对象。而对于String str = new String(“abc”)；的代码，则一概在堆中创建新对象，而不管其字符串值是否相等，是否有必要创建新对象，从而加重了程序的负担。这个思想应该是享元模式的思想，但JDK的内部在这里实现是否应用了这个模式，不得而知。</p>\n<p>(3)当比较包装类里面的数值是否相等时，用equals()方法；当测试两个包装类的引用是否指向同一个对象时，用==。</p>\n<p>(4)由于String类的immutable性质，当String变量需要经常变换其值时，应该考虑使用StringBuffer类，以提高程序效率。</p>\n"},{"title":"js中Date对象Month要比真实值小1","id":"2145","date":"2014-05-22T05:48:32.000Z","_content":"\njs中Date对象Month要比真实值小1, 为什么要这样？我想用2014-01-05 还得这样，真是不理解。\n`new Date(2014,00,05);`","source":"_posts/js-e4-b8-addate-e5-af-b9-e8-b1-a1month-e8-a6-81-e6-af-94-e7-9c-9f-e5-ae-9e-e5-80-bc-e5-b0-8f1.md","raw":"---\ntitle: js中Date对象Month要比真实值小1\ntags:\n  - js\nid: 2145\ncategories:\n  - JQuery\ndate: 2014-05-22 13:48:32\n---\n\njs中Date对象Month要比真实值小1, 为什么要这样？我想用2014-01-05 还得这样，真是不理解。\n`new Date(2014,00,05);`","slug":"js-e4-b8-addate-e5-af-b9-e8-b1-a1month-e8-a6-81-e6-af-94-e7-9c-9f-e5-ae-9e-e5-80-bc-e5-b0-8f1","published":1,"updated":"2018-01-13T05:07:00.476Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjccw7xbc006taqcrg3dq46rk","content":"<p>js中Date对象Month要比真实值小1, 为什么要这样？我想用2014-01-05 还得这样，真是不理解。<br><code>new Date(2014,00,05);</code></p>\n","site":{"data":{}},"excerpt":"","more":"<p>js中Date对象Month要比真实值小1, 为什么要这样？我想用2014-01-05 还得这样，真是不理解。<br><code>new Date(2014,00,05);</code></p>\n"},{"title":"jquery validate验证插件，在ajax提交方式下的验证","id":"1117","date":"2013-02-18T02:32:52.000Z","_content":"\n正常的表单都是使用submit按钮来提交，jquery  validate插件可以方便的做表单验证。\n\n要做一个发送短信的功能，向目标表插入多条记录，界面采用ajax来提交表单，等待效果直接用ext的遮罩了。\n\n但是如何验证却碰到问题。\n\n解决方式很简单，表单跟正常表单一样，validate的submitHandler，invalidHandler这2个方法都需要覆盖，都return false;这样表单就不会在点击按钮的时候提交了，表单验证跟正常验证起作用。submitHandler在return 之前写上我们的表单处理代码就ok了。\n\n//表单验证\n     $(\"#query\").validate({\n         onkeyup  : false,\n         onclick  : false,\n         onfocusout : false,\n             rules : {\n                 msg : {\n                     required    : true,\n                     maxlength    : 10\n                 }\n             },\n             messages:{\n                 msg:{\n                     required    : '请输入短信内容!',\n                     maxlength    : '长度超过10!'\n                 }\n             },\n             showErrors : function(errorMap, errorList) {\n                 var msg = \"\";\n                 $.each(errorList, function(i,v){\n                   msg += (v.message+\"rn\");\n                 });\n                 if(msg!=\"\")\n                 Ext.Msg.alert('表单',msg + fix);\n             },\n             invalidHandler : function(){\n                 return false;\n             },\n             submitHandler : function(){\n                 //表单的处理\n                 Ext.Msg.confirm(\"确认\", \"是否确认发送?\" + fix, function(button,text){\n                    if(button == 'yes'){\n                            loadMarsk.show();\n                            $.ajax({\n                                url:'<%=basePath %>promotionAction.do?method=group',\n                                dataType:'json',\n                                type:'post',\n                                data:$('#query').serialize(),\n                                error:function(){\n                                    Ext.Msg.alert('错误','请求错误！' + fix);\n                                    loadMarsk.hide();\n                                },\n                                success:function(data){\n                                    Ext.Msg.alert('成功',data.msg + fix);\n                                    loadMarsk.hide();\n                                }\n                            })\n                    }\n                 } );   //confirm\n                 return false;//阻止表单提交\n             }\n         });","source":"_posts/jquery-validate-e9-aa-8c-e8-af-81-e6-8f-92-e4-bb-b6-ef-bc-8c-e5-9c-a8ajax-e6-8f-90-e4-ba-a4-e6-96-b9-e5-bc-8f-e4-b8-8b-e7-9a-84-e9-aa-8c-e8-af-81.md","raw":"---\ntitle: jquery validate验证插件，在ajax提交方式下的验证\nid: 1117\ncategories:\n  - Html\ndate: 2013-02-18 10:32:52\ntags:\n---\n\n正常的表单都是使用submit按钮来提交，jquery  validate插件可以方便的做表单验证。\n\n要做一个发送短信的功能，向目标表插入多条记录，界面采用ajax来提交表单，等待效果直接用ext的遮罩了。\n\n但是如何验证却碰到问题。\n\n解决方式很简单，表单跟正常表单一样，validate的submitHandler，invalidHandler这2个方法都需要覆盖，都return false;这样表单就不会在点击按钮的时候提交了，表单验证跟正常验证起作用。submitHandler在return 之前写上我们的表单处理代码就ok了。\n\n//表单验证\n     $(\"#query\").validate({\n         onkeyup  : false,\n         onclick  : false,\n         onfocusout : false,\n             rules : {\n                 msg : {\n                     required    : true,\n                     maxlength    : 10\n                 }\n             },\n             messages:{\n                 msg:{\n                     required    : '请输入短信内容!',\n                     maxlength    : '长度超过10!'\n                 }\n             },\n             showErrors : function(errorMap, errorList) {\n                 var msg = \"\";\n                 $.each(errorList, function(i,v){\n                   msg += (v.message+\"rn\");\n                 });\n                 if(msg!=\"\")\n                 Ext.Msg.alert('表单',msg + fix);\n             },\n             invalidHandler : function(){\n                 return false;\n             },\n             submitHandler : function(){\n                 //表单的处理\n                 Ext.Msg.confirm(\"确认\", \"是否确认发送?\" + fix, function(button,text){\n                    if(button == 'yes'){\n                            loadMarsk.show();\n                            $.ajax({\n                                url:'<%=basePath %>promotionAction.do?method=group',\n                                dataType:'json',\n                                type:'post',\n                                data:$('#query').serialize(),\n                                error:function(){\n                                    Ext.Msg.alert('错误','请求错误！' + fix);\n                                    loadMarsk.hide();\n                                },\n                                success:function(data){\n                                    Ext.Msg.alert('成功',data.msg + fix);\n                                    loadMarsk.hide();\n                                }\n                            })\n                    }\n                 } );   //confirm\n                 return false;//阻止表单提交\n             }\n         });","slug":"jquery-validate-e9-aa-8c-e8-af-81-e6-8f-92-e4-bb-b6-ef-bc-8c-e5-9c-a8ajax-e6-8f-90-e4-ba-a4-e6-96-b9-e5-bc-8f-e4-b8-8b-e7-9a-84-e9-aa-8c-e8-af-81","published":1,"updated":"2018-01-13T05:07:00.457Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjccw7xbd006waqcro245shu6","content":"<p>正常的表单都是使用submit按钮来提交，jquery  validate插件可以方便的做表单验证。</p>\n<p>要做一个发送短信的功能，向目标表插入多条记录，界面采用ajax来提交表单，等待效果直接用ext的遮罩了。</p>\n<p>但是如何验证却碰到问题。</p>\n<p>解决方式很简单，表单跟正常表单一样，validate的submitHandler，invalidHandler这2个方法都需要覆盖，都return false;这样表单就不会在点击按钮的时候提交了，表单验证跟正常验证起作用。submitHandler在return 之前写上我们的表单处理代码就ok了。</p>\n<p>//表单验证<br>     $(“#query”).validate({<br>         onkeyup  : false,<br>         onclick  : false,<br>         onfocusout : false,<br>             rules : {<br>                 msg : {<br>                     required    : true,<br>                     maxlength    : 10<br>                 }<br>             },<br>             messages:{<br>                 msg:{<br>                     required    : ‘请输入短信内容!’,<br>                     maxlength    : ‘长度超过10!’<br>                 }<br>             },<br>             showErrors : function(errorMap, errorList) {<br>                 var msg = “”;<br>                 $.each(errorList, function(i,v){<br>                   msg += (v.message+”rn”);<br>                 });<br>                 if(msg!=””)<br>                 Ext.Msg.alert(‘表单’,msg + fix);<br>             },<br>             invalidHandler : function(){<br>                 return false;<br>             },<br>             submitHandler : function(){<br>                 //表单的处理<br>                 Ext.Msg.confirm(“确认”, “是否确认发送?” + fix, function(button,text){<br>                    if(button == ‘yes’){<br>                            loadMarsk.show();<br>                            $.ajax({<br>                                url:’&lt;%=basePath %&gt;promotionAction.do?method=group’,<br>                                dataType:’json’,<br>                                type:’post’,<br>                                data:$(‘#query’).serialize(),<br>                                error:function(){<br>                                    Ext.Msg.alert(‘错误’,’请求错误！’ + fix);<br>                                    loadMarsk.hide();<br>                                },<br>                                success:function(data){<br>                                    Ext.Msg.alert(‘成功’,data.msg + fix);<br>                                    loadMarsk.hide();<br>                                }<br>                            })<br>                    }<br>                 } );   //confirm<br>                 return false;//阻止表单提交<br>             }<br>         });</p>\n","site":{"data":{}},"excerpt":"","more":"<p>正常的表单都是使用submit按钮来提交，jquery  validate插件可以方便的做表单验证。</p>\n<p>要做一个发送短信的功能，向目标表插入多条记录，界面采用ajax来提交表单，等待效果直接用ext的遮罩了。</p>\n<p>但是如何验证却碰到问题。</p>\n<p>解决方式很简单，表单跟正常表单一样，validate的submitHandler，invalidHandler这2个方法都需要覆盖，都return false;这样表单就不会在点击按钮的时候提交了，表单验证跟正常验证起作用。submitHandler在return 之前写上我们的表单处理代码就ok了。</p>\n<p>//表单验证<br>     $(“#query”).validate({<br>         onkeyup  : false,<br>         onclick  : false,<br>         onfocusout : false,<br>             rules : {<br>                 msg : {<br>                     required    : true,<br>                     maxlength    : 10<br>                 }<br>             },<br>             messages:{<br>                 msg:{<br>                     required    : ‘请输入短信内容!’,<br>                     maxlength    : ‘长度超过10!’<br>                 }<br>             },<br>             showErrors : function(errorMap, errorList) {<br>                 var msg = “”;<br>                 $.each(errorList, function(i,v){<br>                   msg += (v.message+”rn”);<br>                 });<br>                 if(msg!=””)<br>                 Ext.Msg.alert(‘表单’,msg + fix);<br>             },<br>             invalidHandler : function(){<br>                 return false;<br>             },<br>             submitHandler : function(){<br>                 //表单的处理<br>                 Ext.Msg.confirm(“确认”, “是否确认发送?” + fix, function(button,text){<br>                    if(button == ‘yes’){<br>                            loadMarsk.show();<br>                            $.ajax({<br>                                url:’&lt;%=basePath %&gt;promotionAction.do?method=group’,<br>                                dataType:’json’,<br>                                type:’post’,<br>                                data:$(‘#query’).serialize(),<br>                                error:function(){<br>                                    Ext.Msg.alert(‘错误’,’请求错误！’ + fix);<br>                                    loadMarsk.hide();<br>                                },<br>                                success:function(data){<br>                                    Ext.Msg.alert(‘成功’,data.msg + fix);<br>                                    loadMarsk.hide();<br>                                }<br>                            })<br>                    }<br>                 } );   //confirm<br>                 return false;//阻止表单提交<br>             }<br>         });</p>\n"},{"title":"jquery+php不刷新删除table的tr","id":"609","date":"2012-02-07T08:01:23.000Z","_content":"\njs代码：\n\n&lt;script language=\"javascript\" src=\"js/jquery.js\"&gt;&lt;/script&gt;\n&lt;script language=\"javascript\"&gt;\n$().ready(function(){\n$(\"a.del\").click(function(){\nif(confirm(\"确定删除?\"))\n{\nvar id = $(this).attr(\"value\");\nvar str=\"ac=del\"+\"&amp;id=\"+id;\n$.ajax({\ntype:\"post\",\nurl:\"jquery_del_trAct.php\",\ndata:str,\ndataType:\"html\",\nsuccess:function(data){\nif(data == 1){\nalert(\"删除成功!\");\n}else{\nalert(\"操作失败！\");\nreturn false;\n}\n}\n}); &lt;!--more--&gt;\n$(this).parent(\"td\").parent(\"tr\").remove();\n}\nelse\n{\nreturn false;\n}\n});\n\n$(\"#msg\").ajaxStart(function(){\n$(this).html(\"正在加载。。。。\");\n});<!--more-->\n\n$(\"#msg\").ajaxSuccess(function(){\n$(this).html(\"加载完成！\");\n});\n});\n\n&lt;/script&gt;\n\nhtml和php混合代码：\n\n&lt;?php\nrequire_once('config.inc.php');\nrequire_once('include/dbConnection.class.php');\n$db = new dbConnection(DSN);\n$query = \"select * from member\";\n$db -&gt; execute($query);\n$result = $db -&gt; fetch();\n?&gt;\n\n&lt;div style=\"height:100px; width:200px;\" id=\"msg\"&gt;&lt;/div&gt;\n&lt;table width=\"400\" border=\"0\" align=\"center\" cellpadding=\"0\" cellspacing=\"1\" bgcolor=\"#FFFFFF\"&gt;\n&lt;?php\nforeach($result as $v){\n?&gt;\n&lt;tr&gt;\n&lt;td width=\"300\" height=\"25\" align=\"left\" bgcolor=\"#EEEEEE\"&gt;&lt;?php echo $v['userName'];?&gt;&lt;/td&gt;\n&lt;td width=\"100\" align=\"center\" bgcolor=\"#EEEEEE\"&gt;&lt;a value=\"&lt;?php echo $v['id'];?&gt;\" href=\"javascript:;\"&gt;删除&lt;/a&gt;&lt;/td&gt;\n&lt;/tr&gt;\n&lt;?php\n}\n?&gt;\n&lt;/table&gt;\n\nphp处理代码：\n\n&lt;?php\nrequire_once('config.inc.php');\nrequire_once('include/dbConnection.class.php');\n$db = new dbConnection(DSN);\n$ac = $_REQUEST['ac'];\nif($ac == \"del\"){\n$id = intval($_POST['id']);\n$query = \"delete from member where id ={$id}\";\n$db -&gt; execute($query,2);\nif($db -&gt;affectedRows &gt; 0){\necho 1;\n}else{\necho 0;\n}\n}\n?&gt;\n\n注意：php代码都是按照我自己管用的写法写的，大家就按照自己的写就对了！","source":"_posts/jqueryphp-e4-b8-8d-e5-88-b7-e6-96-b0-e5-88-a0-e9-99-a4table-e7-9a-84tr.md","raw":"---\ntitle: jquery+php不刷新删除table的tr\nid: 609\ncategories:\n  - PHP\ndate: 2012-02-07 16:01:23\ntags:\n---\n\njs代码：\n\n&lt;script language=\"javascript\" src=\"js/jquery.js\"&gt;&lt;/script&gt;\n&lt;script language=\"javascript\"&gt;\n$().ready(function(){\n$(\"a.del\").click(function(){\nif(confirm(\"确定删除?\"))\n{\nvar id = $(this).attr(\"value\");\nvar str=\"ac=del\"+\"&amp;id=\"+id;\n$.ajax({\ntype:\"post\",\nurl:\"jquery_del_trAct.php\",\ndata:str,\ndataType:\"html\",\nsuccess:function(data){\nif(data == 1){\nalert(\"删除成功!\");\n}else{\nalert(\"操作失败！\");\nreturn false;\n}\n}\n}); &lt;!--more--&gt;\n$(this).parent(\"td\").parent(\"tr\").remove();\n}\nelse\n{\nreturn false;\n}\n});\n\n$(\"#msg\").ajaxStart(function(){\n$(this).html(\"正在加载。。。。\");\n});<!--more-->\n\n$(\"#msg\").ajaxSuccess(function(){\n$(this).html(\"加载完成！\");\n});\n});\n\n&lt;/script&gt;\n\nhtml和php混合代码：\n\n&lt;?php\nrequire_once('config.inc.php');\nrequire_once('include/dbConnection.class.php');\n$db = new dbConnection(DSN);\n$query = \"select * from member\";\n$db -&gt; execute($query);\n$result = $db -&gt; fetch();\n?&gt;\n\n&lt;div style=\"height:100px; width:200px;\" id=\"msg\"&gt;&lt;/div&gt;\n&lt;table width=\"400\" border=\"0\" align=\"center\" cellpadding=\"0\" cellspacing=\"1\" bgcolor=\"#FFFFFF\"&gt;\n&lt;?php\nforeach($result as $v){\n?&gt;\n&lt;tr&gt;\n&lt;td width=\"300\" height=\"25\" align=\"left\" bgcolor=\"#EEEEEE\"&gt;&lt;?php echo $v['userName'];?&gt;&lt;/td&gt;\n&lt;td width=\"100\" align=\"center\" bgcolor=\"#EEEEEE\"&gt;&lt;a value=\"&lt;?php echo $v['id'];?&gt;\" href=\"javascript:;\"&gt;删除&lt;/a&gt;&lt;/td&gt;\n&lt;/tr&gt;\n&lt;?php\n}\n?&gt;\n&lt;/table&gt;\n\nphp处理代码：\n\n&lt;?php\nrequire_once('config.inc.php');\nrequire_once('include/dbConnection.class.php');\n$db = new dbConnection(DSN);\n$ac = $_REQUEST['ac'];\nif($ac == \"del\"){\n$id = intval($_POST['id']);\n$query = \"delete from member where id ={$id}\";\n$db -&gt; execute($query,2);\nif($db -&gt;affectedRows &gt; 0){\necho 1;\n}else{\necho 0;\n}\n}\n?&gt;\n\n注意：php代码都是按照我自己管用的写法写的，大家就按照自己的写就对了！","slug":"jqueryphp-e4-b8-8d-e5-88-b7-e6-96-b0-e5-88-a0-e9-99-a4table-e7-9a-84tr","published":1,"updated":"2018-01-13T05:07:00.465Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjccw7xbe0070aqcrr1rxyjx2","content":"<p>js代码：</p>\n<p>&lt;script language=”javascript” src=”js/jquery.js”&gt;&lt;/script&gt;<br>&lt;script language=”javascript”&gt;<br>$().ready(function(){<br>$(“a.del”).click(function(){<br>if(confirm(“确定删除?”))<br>{<br>var id = $(this).attr(“value”);<br>var str=”ac=del”+”&amp;id=”+id;<br>$.ajax({<br>type:”post”,<br>url:”jquery_del_trAct.php”,<br>data:str,<br>dataType:”html”,<br>success:function(data){<br>if(data == 1){<br>alert(“删除成功!”);<br>}else{<br>alert(“操作失败！”);<br>return false;<br>}<br>}<br>}); &lt;!–more–&gt;<br>$(this).parent(“td”).parent(“tr”).remove();<br>}<br>else<br>{<br>return false;<br>}<br>});</p>\n<p>$(“#msg”).ajaxStart(function(){<br>$(this).html(“正在加载。。。。”);<br>});<a id=\"more\"></a></p>\n<p>$(“#msg”).ajaxSuccess(function(){<br>$(this).html(“加载完成！”);<br>});<br>});</p>\n<p>&lt;/script&gt;</p>\n<p>html和php混合代码：</p>\n<p>&lt;?php<br>require_once(‘config.inc.php’);<br>require_once(‘include/dbConnection.class.php’);<br>$db = new dbConnection(DSN);<br>$query = “select * from member”;<br>$db -&gt; execute($query);<br>$result = $db -&gt; fetch();<br>?&gt;</p>\n<p>&lt;div style=”height:100px; width:200px;” id=”msg”&gt;&lt;/div&gt;<br>&lt;table width=”400” border=”0” align=”center” cellpadding=”0” cellspacing=”1” bgcolor=”#FFFFFF”&gt;<br>&lt;?php<br>foreach($result as $v){<br>?&gt;<br>&lt;tr&gt;<br>&lt;td width=”300” height=”25” align=”left” bgcolor=”#EEEEEE”&gt;&lt;?php echo $v[‘userName’];?&gt;&lt;/td&gt;<br>&lt;td width=”100” align=”center” bgcolor=”#EEEEEE”&gt;&lt;a value=”&lt;?php echo $v[‘id’];?&gt;” href=”javascript:;”&gt;删除&lt;/a&gt;&lt;/td&gt;<br>&lt;/tr&gt;<br>&lt;?php<br>}<br>?&gt;<br>&lt;/table&gt;</p>\n<p>php处理代码：</p>\n<p>&lt;?php<br>require_once(‘config.inc.php’);<br>require_once(‘include/dbConnection.class.php’);<br>$db = new dbConnection(DSN);<br>$ac = $_REQUEST[‘ac’];<br>if($ac == “del”){<br>$id = intval($_POST[‘id’]);<br>$query = “delete from member where id ={$id}”;<br>$db -&gt; execute($query,2);<br>if($db -&gt;affectedRows &gt; 0){<br>echo 1;<br>}else{<br>echo 0;<br>}<br>}<br>?&gt;</p>\n<p>注意：php代码都是按照我自己管用的写法写的，大家就按照自己的写就对了！</p>\n","site":{"data":{}},"excerpt":"<p>js代码：</p>\n<p>&lt;script language=”javascript” src=”js/jquery.js”&gt;&lt;/script&gt;<br>&lt;script language=”javascript”&gt;<br>$().ready(function(){<br>$(“a.del”).click(function(){<br>if(confirm(“确定删除?”))<br>{<br>var id = $(this).attr(“value”);<br>var str=”ac=del”+”&amp;id=”+id;<br>$.ajax({<br>type:”post”,<br>url:”jquery_del_trAct.php”,<br>data:str,<br>dataType:”html”,<br>success:function(data){<br>if(data == 1){<br>alert(“删除成功!”);<br>}else{<br>alert(“操作失败！”);<br>return false;<br>}<br>}<br>}); &lt;!–more–&gt;<br>$(this).parent(“td”).parent(“tr”).remove();<br>}<br>else<br>{<br>return false;<br>}<br>});</p>\n<p>$(“#msg”).ajaxStart(function(){<br>$(this).html(“正在加载。。。。”);<br>});","more":"</p>\n<p>$(“#msg”).ajaxSuccess(function(){<br>$(this).html(“加载完成！”);<br>});<br>});</p>\n<p>&lt;/script&gt;</p>\n<p>html和php混合代码：</p>\n<p>&lt;?php<br>require_once(‘config.inc.php’);<br>require_once(‘include/dbConnection.class.php’);<br>$db = new dbConnection(DSN);<br>$query = “select * from member”;<br>$db -&gt; execute($query);<br>$result = $db -&gt; fetch();<br>?&gt;</p>\n<p>&lt;div style=”height:100px; width:200px;” id=”msg”&gt;&lt;/div&gt;<br>&lt;table width=”400” border=”0” align=”center” cellpadding=”0” cellspacing=”1” bgcolor=”#FFFFFF”&gt;<br>&lt;?php<br>foreach($result as $v){<br>?&gt;<br>&lt;tr&gt;<br>&lt;td width=”300” height=”25” align=”left” bgcolor=”#EEEEEE”&gt;&lt;?php echo $v[‘userName’];?&gt;&lt;/td&gt;<br>&lt;td width=”100” align=”center” bgcolor=”#EEEEEE”&gt;&lt;a value=”&lt;?php echo $v[‘id’];?&gt;” href=”javascript:;”&gt;删除&lt;/a&gt;&lt;/td&gt;<br>&lt;/tr&gt;<br>&lt;?php<br>}<br>?&gt;<br>&lt;/table&gt;</p>\n<p>php处理代码：</p>\n<p>&lt;?php<br>require_once(‘config.inc.php’);<br>require_once(‘include/dbConnection.class.php’);<br>$db = new dbConnection(DSN);<br>$ac = $_REQUEST[‘ac’];<br>if($ac == “del”){<br>$id = intval($_POST[‘id’]);<br>$query = “delete from member where id ={$id}”;<br>$db -&gt; execute($query,2);<br>if($db -&gt;affectedRows &gt; 0){<br>echo 1;<br>}else{<br>echo 0;<br>}<br>}<br>?&gt;</p>\n<p>注意：php代码都是按照我自己管用的写法写的，大家就按照自己的写就对了！</p>"},{"title":"linux下查看python安装路径","id":"1690","date":"2014-04-11T03:36:04.000Z","_content":"\n进入python命令行\n`python>\npython>import sys \npython>print sys.path`","source":"_posts/linux-e4-b8-8b-e6-9f-a5-e7-9c-8bpython-e5-ae-89-e8-a3-85-e8-b7-af-e5-be-84.md","raw":"---\ntitle: linux下查看python安装路径\ntags:\n  - Linux &amp; Fedora\n  - Python\nid: 1690\ncategories:\n  - Linux\ndate: 2014-04-11 11:36:04\n---\n\n进入python命令行\n`python>\npython>import sys \npython>print sys.path`","slug":"linux-e4-b8-8b-e6-9f-a5-e7-9c-8bpython-e5-ae-89-e8-a3-85-e8-b7-af-e5-be-84","published":1,"updated":"2018-01-13T05:07:00.482Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjccw7xbg0073aqcrwv4qm8pn","content":"<p>进入python命令行<br><code>python&gt;\npython&gt;import sys \npython&gt;print sys.path</code></p>\n","site":{"data":{}},"excerpt":"","more":"<p>进入python命令行<br><code>python&gt;\npython&gt;import sys \npython&gt;print sys.path</code></p>\n"},{"title":"LAMP流程中的乱码问题总结","id":"343","date":"2011-10-04T11:05:31.000Z","_content":"\n这里说的乱码问题包括：\n\n一，开发的页面出现乱码，\n\n二，从数据库取值或插入时出现乱码，\n\n三，phpmysql页面出现乱码。\n\n刚开始碰到乱码问题可能会不知所措，但是了解了可能出现乱码的几个环节，便可以轻松地进行一一排查。\n\n避免出现乱码的最好的做法，就是在所有指定编码的地方指定相同的编码(废话，乱码不就是编码不一致造成的么？)。这里推荐釆用utf-8进行统一编码。\n\n下面分别描述及解释下上面三种出现乱码的情况。\n\n第一种情况，不涉及数据库操作，或者我们假设数据库的操作不会造成乱码（造成乱码的情况下面讨论）。那么只需要检查脚本文件的编码和页面编码是否一致即可。文件的编码一般的文本编辑器都可以更改，如notepad2，notepad++等，而网页页面的编码则通过meta标签来指定。<!--more-->\n\n第二种情况，则需要数据库编码、数据库表中该字段的编码及页面编码保持一致。数据库编码及字段编码可以在创建时设置collation来指定。而页面编码上面已经提到。\n\n有的时候，我们在进行数据库操作时，插入的是什么字符，读取出来的时候还是那些字符，好像没有什么问题。但是当我们对数据库进行管理的时候，在第三方工具里显示的却是乱码，如phpmysql,mysql workbench等。这就是由于连接数据库时的编码和数据库的编码或者phpmysql的页面编码不一致造成的。我们可以在数据库连接建立后通过sql语句来指定编码：SET NAMES UTF8; 注意没有连字符。\n\n总结：这里推荐的方式是将所有的编码指定为utf-8。\n\n脚本文件编码：utf-8\n\n网页页面编码：\n\n数据库及字段编码：utf8_general_ci\n\n数据库连接编码：SET NAMES UTF8;","source":"_posts/lamp-e6-b5-81-e7-a8-8b-e4-b8-ad-e7-9a-84-e4-b9-b1-e7-a0-81-e9-97-ae-e9-a2-98-e6-80-bb-e7-bb-93.md","raw":"---\ntitle: LAMP流程中的乱码问题总结\nid: 343\ncategories:\n  - PHP\ndate: 2011-10-04 19:05:31\ntags:\n---\n\n这里说的乱码问题包括：\n\n一，开发的页面出现乱码，\n\n二，从数据库取值或插入时出现乱码，\n\n三，phpmysql页面出现乱码。\n\n刚开始碰到乱码问题可能会不知所措，但是了解了可能出现乱码的几个环节，便可以轻松地进行一一排查。\n\n避免出现乱码的最好的做法，就是在所有指定编码的地方指定相同的编码(废话，乱码不就是编码不一致造成的么？)。这里推荐釆用utf-8进行统一编码。\n\n下面分别描述及解释下上面三种出现乱码的情况。\n\n第一种情况，不涉及数据库操作，或者我们假设数据库的操作不会造成乱码（造成乱码的情况下面讨论）。那么只需要检查脚本文件的编码和页面编码是否一致即可。文件的编码一般的文本编辑器都可以更改，如notepad2，notepad++等，而网页页面的编码则通过meta标签来指定。<!--more-->\n\n第二种情况，则需要数据库编码、数据库表中该字段的编码及页面编码保持一致。数据库编码及字段编码可以在创建时设置collation来指定。而页面编码上面已经提到。\n\n有的时候，我们在进行数据库操作时，插入的是什么字符，读取出来的时候还是那些字符，好像没有什么问题。但是当我们对数据库进行管理的时候，在第三方工具里显示的却是乱码，如phpmysql,mysql workbench等。这就是由于连接数据库时的编码和数据库的编码或者phpmysql的页面编码不一致造成的。我们可以在数据库连接建立后通过sql语句来指定编码：SET NAMES UTF8; 注意没有连字符。\n\n总结：这里推荐的方式是将所有的编码指定为utf-8。\n\n脚本文件编码：utf-8\n\n网页页面编码：\n\n数据库及字段编码：utf8_general_ci\n\n数据库连接编码：SET NAMES UTF8;","slug":"lamp-e6-b5-81-e7-a8-8b-e4-b8-ad-e7-9a-84-e4-b9-b1-e7-a0-81-e9-97-ae-e9-a2-98-e6-80-bb-e7-bb-93","published":1,"updated":"2018-01-13T05:07:00.443Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjccw7xbh0075aqcrdo3el7ry","content":"<p>这里说的乱码问题包括：</p>\n<p>一，开发的页面出现乱码，</p>\n<p>二，从数据库取值或插入时出现乱码，</p>\n<p>三，phpmysql页面出现乱码。</p>\n<p>刚开始碰到乱码问题可能会不知所措，但是了解了可能出现乱码的几个环节，便可以轻松地进行一一排查。</p>\n<p>避免出现乱码的最好的做法，就是在所有指定编码的地方指定相同的编码(废话，乱码不就是编码不一致造成的么？)。这里推荐釆用utf-8进行统一编码。</p>\n<p>下面分别描述及解释下上面三种出现乱码的情况。</p>\n<p>第一种情况，不涉及数据库操作，或者我们假设数据库的操作不会造成乱码（造成乱码的情况下面讨论）。那么只需要检查脚本文件的编码和页面编码是否一致即可。文件的编码一般的文本编辑器都可以更改，如notepad2，notepad++等，而网页页面的编码则通过meta标签来指定。<a id=\"more\"></a></p>\n<p>第二种情况，则需要数据库编码、数据库表中该字段的编码及页面编码保持一致。数据库编码及字段编码可以在创建时设置collation来指定。而页面编码上面已经提到。</p>\n<p>有的时候，我们在进行数据库操作时，插入的是什么字符，读取出来的时候还是那些字符，好像没有什么问题。但是当我们对数据库进行管理的时候，在第三方工具里显示的却是乱码，如phpmysql,mysql workbench等。这就是由于连接数据库时的编码和数据库的编码或者phpmysql的页面编码不一致造成的。我们可以在数据库连接建立后通过sql语句来指定编码：SET NAMES UTF8; 注意没有连字符。</p>\n<p>总结：这里推荐的方式是将所有的编码指定为utf-8。</p>\n<p>脚本文件编码：utf-8</p>\n<p>网页页面编码：</p>\n<p>数据库及字段编码：utf8_general_ci</p>\n<p>数据库连接编码：SET NAMES UTF8;</p>\n","site":{"data":{}},"excerpt":"<p>这里说的乱码问题包括：</p>\n<p>一，开发的页面出现乱码，</p>\n<p>二，从数据库取值或插入时出现乱码，</p>\n<p>三，phpmysql页面出现乱码。</p>\n<p>刚开始碰到乱码问题可能会不知所措，但是了解了可能出现乱码的几个环节，便可以轻松地进行一一排查。</p>\n<p>避免出现乱码的最好的做法，就是在所有指定编码的地方指定相同的编码(废话，乱码不就是编码不一致造成的么？)。这里推荐釆用utf-8进行统一编码。</p>\n<p>下面分别描述及解释下上面三种出现乱码的情况。</p>\n<p>第一种情况，不涉及数据库操作，或者我们假设数据库的操作不会造成乱码（造成乱码的情况下面讨论）。那么只需要检查脚本文件的编码和页面编码是否一致即可。文件的编码一般的文本编辑器都可以更改，如notepad2，notepad++等，而网页页面的编码则通过meta标签来指定。","more":"</p>\n<p>第二种情况，则需要数据库编码、数据库表中该字段的编码及页面编码保持一致。数据库编码及字段编码可以在创建时设置collation来指定。而页面编码上面已经提到。</p>\n<p>有的时候，我们在进行数据库操作时，插入的是什么字符，读取出来的时候还是那些字符，好像没有什么问题。但是当我们对数据库进行管理的时候，在第三方工具里显示的却是乱码，如phpmysql,mysql workbench等。这就是由于连接数据库时的编码和数据库的编码或者phpmysql的页面编码不一致造成的。我们可以在数据库连接建立后通过sql语句来指定编码：SET NAMES UTF8; 注意没有连字符。</p>\n<p>总结：这里推荐的方式是将所有的编码指定为utf-8。</p>\n<p>脚本文件编码：utf-8</p>\n<p>网页页面编码：</p>\n<p>数据库及字段编码：utf8_general_ci</p>\n<p>数据库连接编码：SET NAMES UTF8;</p>"},{"title":"Lavarel 增加全局函数文件","id":"2484","date":"2015-09-03T02:34:02.000Z","_content":"\n1.生成文件 app\\Helpers\\helper.php\n\n2.在composer.json 增加 \n\n\"autoload\": {\n        \"files\": [\n            \"app/Helpoers/helper.php\"\n        ]\n    }\n\n3.运行 composer dump-autoload\n这样就可以在 helper.php 里写函数，整个project都可以调用了。","source":"_posts/lavarel-e5-a2-9e-e5-8a-a0-e5-85-a8-e5-b1-80-e5-87-bd-e6-95-b0-e6-96-87-e4-bb-b6.md","raw":"---\ntitle: Lavarel 增加全局函数文件\ntags:\n  - lavarel\nid: 2484\ncategories:\n  - PHP\ndate: 2015-09-03 10:34:02\n---\n\n1.生成文件 app\\Helpers\\helper.php\n\n2.在composer.json 增加 \n\n\"autoload\": {\n        \"files\": [\n            \"app/Helpoers/helper.php\"\n        ]\n    }\n\n3.运行 composer dump-autoload\n这样就可以在 helper.php 里写函数，整个project都可以调用了。","slug":"lavarel-e5-a2-9e-e5-8a-a0-e5-85-a8-e5-b1-80-e5-87-bd-e6-95-b0-e6-96-87-e4-bb-b6","published":1,"updated":"2018-01-13T05:07:00.474Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjccw7xbj0078aqcrr2qdya58","content":"<p>1.生成文件 app\\Helpers\\helper.php</p>\n<p>2.在composer.json 增加 </p>\n<p>“autoload”: {<br>        “files”: [<br>            “app/Helpoers/helper.php”<br>        ]<br>    }</p>\n<p>3.运行 composer dump-autoload<br>这样就可以在 helper.php 里写函数，整个project都可以调用了。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>1.生成文件 app\\Helpers\\helper.php</p>\n<p>2.在composer.json 增加 </p>\n<p>“autoload”: {<br>        “files”: [<br>            “app/Helpoers/helper.php”<br>        ]<br>    }</p>\n<p>3.运行 composer dump-autoload<br>这样就可以在 helper.php 里写函数，整个project都可以调用了。</p>\n"},{"title":"Linux 源码安装 memcached","id":"1699","date":"2014-04-11T04:10:52.000Z","_content":"\n> 最近一直在源码编译，各种东西，疯了\n\n下载\n`\n# cd /tmp\n\n# wget http://cloud.github.com/downloads/libevent/libevent/libevent-2.0.21-stable.tar.gz\n\n# wget https://memcached.googlecode.com/files/memcached-1.4.15.tar.gz\n`\n\n安装libevent\n`# tar zxvf libevent-2.0.21-stable.tar.gz\n# cd libevent-2.0.21-stable\n指定一个安装路径，即./configure -prefix=/usr\n# ./configure -prefix=/usr\n# make\n# make install`\n\n测试libevent是否安装成功<!--more-->\n`\n# ls -al /usr/lib | grep libevent\nlrwxrwxrwx   1 root root      21 Apr 11 19:00 libevent-2.0.so.5 -> libevent-2.0.so.5.1.9\n-rwxr-xr-x   1 root root  776705 Apr 11 19:00 libevent-2.0.so.5.1.9\n-rw-r--r--   1 root root 1003126 Apr 11 19:00 libevent.a\n-rwxr-xr-x   1 root root     935 Apr 11 19:00 libevent.la\nlrwxrwxrwx   1 root root      21 Apr 11 19:00 libevent.so -> libevent-2.0.so.5.1.9\nlrwxrwxrwx   1 root root      26 Apr 11 19:00 libevent_core-2.0.so.5 -> libevent_core-2.0.so.5.1.9\n-rwxr-xr-x   1 root root  463243 Apr 11 19:00 libevent_core-2.0.so.5.1.9\n`\n安装成功\n\n安装memcached，同时需要安装中指定libevent的安装位置\n`# cd /tmp\n# tar zxvf memcached-1.4.15.tar.gz\n# cd memcached-1.4.15\n指定libevent的安装路径即./configure –with-libevent=/usr\n# ./configure -with-libevent=/usr\n# make\n# make install`\n\n测试是否成功安装memcached：\n`# ls -al /usr/local/bin/mem*\n-rwxr-xr-x 1 root root 137986 11?? 12 17:39 /usr/local/bin/memcached`\n安装成功\n\n启动Memcached 也可以启动多个守护进程，不过端口不能重复。\n`# memcached -d -m 64m -u root -l 192.168.1.1 -p 11211 -c 256 -P /tmp/memcached.pid`\n> -d选项是启动一个守护进程，\r> \n> -m是分配给Memcache使用的内存数量，单位是MB，我这里是64MB，\r> \n> -u是运行Memcache的用户，我这里是root，\r> \n> -l是监听的服务器IP地址，如果有多个地址的话，我这里指定了服务器的IP地址192.168.1.1，\r> \n> -p是设置Memcache监听的端口，我这里设置了12000，最好是1024以上的端口，\r> \n> -c选项是最大运行的并发连接数，默认是1024，我这里设置了256，按照你服务器的负载量来设定，\r> \n> -P是设置保存Memcache的pid文件，我这里是保存在 /tmp/memcached.pid\n\n结束Memcache\n`# kill `cat /tmp/memcached.pid``","source":"_posts/linux-e6-ba-90-e7-a0-81-e5-ae-89-e8-a3-85-memcached.md","raw":"---\ntitle: Linux 源码安装 memcached\ntags:\n  - Linux &amp; Fedora\n  - memcached\nid: 1699\ncategories:\n  - Linux\ndate: 2014-04-11 12:10:52\n---\n\n> 最近一直在源码编译，各种东西，疯了\n\n下载\n`\n# cd /tmp\n\n# wget http://cloud.github.com/downloads/libevent/libevent/libevent-2.0.21-stable.tar.gz\n\n# wget https://memcached.googlecode.com/files/memcached-1.4.15.tar.gz\n`\n\n安装libevent\n`# tar zxvf libevent-2.0.21-stable.tar.gz\n# cd libevent-2.0.21-stable\n指定一个安装路径，即./configure -prefix=/usr\n# ./configure -prefix=/usr\n# make\n# make install`\n\n测试libevent是否安装成功<!--more-->\n`\n# ls -al /usr/lib | grep libevent\nlrwxrwxrwx   1 root root      21 Apr 11 19:00 libevent-2.0.so.5 -> libevent-2.0.so.5.1.9\n-rwxr-xr-x   1 root root  776705 Apr 11 19:00 libevent-2.0.so.5.1.9\n-rw-r--r--   1 root root 1003126 Apr 11 19:00 libevent.a\n-rwxr-xr-x   1 root root     935 Apr 11 19:00 libevent.la\nlrwxrwxrwx   1 root root      21 Apr 11 19:00 libevent.so -> libevent-2.0.so.5.1.9\nlrwxrwxrwx   1 root root      26 Apr 11 19:00 libevent_core-2.0.so.5 -> libevent_core-2.0.so.5.1.9\n-rwxr-xr-x   1 root root  463243 Apr 11 19:00 libevent_core-2.0.so.5.1.9\n`\n安装成功\n\n安装memcached，同时需要安装中指定libevent的安装位置\n`# cd /tmp\n# tar zxvf memcached-1.4.15.tar.gz\n# cd memcached-1.4.15\n指定libevent的安装路径即./configure –with-libevent=/usr\n# ./configure -with-libevent=/usr\n# make\n# make install`\n\n测试是否成功安装memcached：\n`# ls -al /usr/local/bin/mem*\n-rwxr-xr-x 1 root root 137986 11?? 12 17:39 /usr/local/bin/memcached`\n安装成功\n\n启动Memcached 也可以启动多个守护进程，不过端口不能重复。\n`# memcached -d -m 64m -u root -l 192.168.1.1 -p 11211 -c 256 -P /tmp/memcached.pid`\n> -d选项是启动一个守护进程，\r> \n> -m是分配给Memcache使用的内存数量，单位是MB，我这里是64MB，\r> \n> -u是运行Memcache的用户，我这里是root，\r> \n> -l是监听的服务器IP地址，如果有多个地址的话，我这里指定了服务器的IP地址192.168.1.1，\r> \n> -p是设置Memcache监听的端口，我这里设置了12000，最好是1024以上的端口，\r> \n> -c选项是最大运行的并发连接数，默认是1024，我这里设置了256，按照你服务器的负载量来设定，\r> \n> -P是设置保存Memcache的pid文件，我这里是保存在 /tmp/memcached.pid\n\n结束Memcache\n`# kill `cat /tmp/memcached.pid``","slug":"linux-e6-ba-90-e7-a0-81-e5-ae-89-e8-a3-85-memcached","published":1,"updated":"2018-01-13T05:07:00.458Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjccw7xbk007aaqcr8r123qw9","content":"<blockquote>\n<p>最近一直在源码编译，各种东西，疯了</p>\n</blockquote>\n<p>下载<br>`</p>\n<h1 id=\"cd-tmp\"><a href=\"#cd-tmp\" class=\"headerlink\" title=\"cd /tmp\"></a>cd /tmp</h1><h1 id=\"wget-http-cloud-github-com-downloads-libevent-libevent-libevent-2-0-21-stable-tar-gz\"><a href=\"#wget-http-cloud-github-com-downloads-libevent-libevent-libevent-2-0-21-stable-tar-gz\" class=\"headerlink\" title=\"wget http://cloud.github.com/downloads/libevent/libevent/libevent-2.0.21-stable.tar.gz\"></a>wget <a href=\"http://cloud.github.com/downloads/libevent/libevent/libevent-2.0.21-stable.tar.gz\" target=\"_blank\" rel=\"noopener\">http://cloud.github.com/downloads/libevent/libevent/libevent-2.0.21-stable.tar.gz</a></h1><h1 id=\"wget-https-memcached-googlecode-com-files-memcached-1-4-15-tar-gz\"><a href=\"#wget-https-memcached-googlecode-com-files-memcached-1-4-15-tar-gz\" class=\"headerlink\" title=\"wget https://memcached.googlecode.com/files/memcached-1.4.15.tar.gz\"></a>wget <a href=\"https://memcached.googlecode.com/files/memcached-1.4.15.tar.gz\" target=\"_blank\" rel=\"noopener\">https://memcached.googlecode.com/files/memcached-1.4.15.tar.gz</a></h1><p>`</p>\n<p>安装libevent<br>`# tar zxvf libevent-2.0.21-stable.tar.gz</p>\n<h1 id=\"cd-libevent-2-0-21-stable\"><a href=\"#cd-libevent-2-0-21-stable\" class=\"headerlink\" title=\"cd libevent-2.0.21-stable\"></a>cd libevent-2.0.21-stable</h1><p>指定一个安装路径，即./configure -prefix=/usr</p>\n<h1 id=\"configure-prefix-usr\"><a href=\"#configure-prefix-usr\" class=\"headerlink\" title=\"./configure -prefix=/usr\"></a>./configure -prefix=/usr</h1><h1 id=\"make\"><a href=\"#make\" class=\"headerlink\" title=\"make\"></a>make</h1><h1 id=\"make-install\"><a href=\"#make-install\" class=\"headerlink\" title=\"make install`\"></a>make install`</h1><p>测试libevent是否安装成功<a id=\"more\"></a><br>`</p>\n<h1 id=\"ls-al-usr-lib-grep-libevent\"><a href=\"#ls-al-usr-lib-grep-libevent\" class=\"headerlink\" title=\"ls -al /usr/lib | grep libevent\"></a>ls -al /usr/lib | grep libevent</h1><p>lrwxrwxrwx   1 root root      21 Apr 11 19:00 libevent-2.0.so.5 -&gt; libevent-2.0.so.5.1.9<br>-rwxr-xr-x   1 root root  776705 Apr 11 19:00 libevent-2.0.so.5.1.9<br>-rw-r–r–   1 root root 1003126 Apr 11 19:00 libevent.a<br>-rwxr-xr-x   1 root root     935 Apr 11 19:00 libevent.la<br>lrwxrwxrwx   1 root root      21 Apr 11 19:00 libevent.so -&gt; libevent-2.0.so.5.1.9<br>lrwxrwxrwx   1 root root      26 Apr 11 19:00 libevent_core-2.0.so.5 -&gt; libevent_core-2.0.so.5.1.9<br>-rwxr-xr-x   1 root root  463243 Apr 11 19:00 libevent_core-2.0.so.5.1.9<br>`<br>安装成功</p>\n<p>安装memcached，同时需要安装中指定libevent的安装位置<br>`# cd /tmp</p>\n<h1 id=\"tar-zxvf-memcached-1-4-15-tar-gz\"><a href=\"#tar-zxvf-memcached-1-4-15-tar-gz\" class=\"headerlink\" title=\"tar zxvf memcached-1.4.15.tar.gz\"></a>tar zxvf memcached-1.4.15.tar.gz</h1><h1 id=\"cd-memcached-1-4-15\"><a href=\"#cd-memcached-1-4-15\" class=\"headerlink\" title=\"cd memcached-1.4.15\"></a>cd memcached-1.4.15</h1><p>指定libevent的安装路径即./configure –with-libevent=/usr</p>\n<h1 id=\"configure-with-libevent-usr\"><a href=\"#configure-with-libevent-usr\" class=\"headerlink\" title=\"./configure -with-libevent=/usr\"></a>./configure -with-libevent=/usr</h1><h1 id=\"make-1\"><a href=\"#make-1\" class=\"headerlink\" title=\"make\"></a>make</h1><h1 id=\"make-install-1\"><a href=\"#make-install-1\" class=\"headerlink\" title=\"make install`\"></a>make install`</h1><p>测试是否成功安装memcached：<br><code># ls -al /usr/local/bin/mem*\n-rwxr-xr-x 1 root root 137986 11?? 12 17:39 /usr/local/bin/memcached</code><br>安装成功</p>\n<p>启动Memcached 也可以启动多个守护进程，不过端口不能重复。<br><code># memcached -d -m 64m -u root -l 192.168.1.1 -p 11211 -c 256 -P /tmp/memcached.pid</code></p>\n<blockquote>\n<p>-d选项是启动一个守护进程，</p>\n<p>-m是分配给Memcache使用的内存数量，单位是MB，我这里是64MB，</p>\n<p>-u是运行Memcache的用户，我这里是root，</p>\n<p>-l是监听的服务器IP地址，如果有多个地址的话，我这里指定了服务器的IP地址192.168.1.1，</p>\n<p>-p是设置Memcache监听的端口，我这里设置了12000，最好是1024以上的端口，</p>\n<p>-c选项是最大运行的并发连接数，默认是1024，我这里设置了256，按照你服务器的负载量来设定，</p>\n<p>-P是设置保存Memcache的pid文件，我这里是保存在 /tmp/memcached.pid</p>\n</blockquote>\n<p>结束Memcache<br><code># kill</code>cat /tmp/memcached.pid``</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>最近一直在源码编译，各种东西，疯了</p>\n</blockquote>\n<p>下载<br>`</p>\n<h1 id=\"cd-tmp\"><a href=\"#cd-tmp\" class=\"headerlink\" title=\"cd /tmp\"></a>cd /tmp</h1><h1 id=\"wget-http-cloud-github-com-downloads-libevent-libevent-libevent-2-0-21-stable-tar-gz\"><a href=\"#wget-http-cloud-github-com-downloads-libevent-libevent-libevent-2-0-21-stable-tar-gz\" class=\"headerlink\" title=\"wget http://cloud.github.com/downloads/libevent/libevent/libevent-2.0.21-stable.tar.gz\"></a>wget <a href=\"http://cloud.github.com/downloads/libevent/libevent/libevent-2.0.21-stable.tar.gz\" target=\"_blank\" rel=\"noopener\">http://cloud.github.com/downloads/libevent/libevent/libevent-2.0.21-stable.tar.gz</a></h1><h1 id=\"wget-https-memcached-googlecode-com-files-memcached-1-4-15-tar-gz\"><a href=\"#wget-https-memcached-googlecode-com-files-memcached-1-4-15-tar-gz\" class=\"headerlink\" title=\"wget https://memcached.googlecode.com/files/memcached-1.4.15.tar.gz\"></a>wget <a href=\"https://memcached.googlecode.com/files/memcached-1.4.15.tar.gz\" target=\"_blank\" rel=\"noopener\">https://memcached.googlecode.com/files/memcached-1.4.15.tar.gz</a></h1><p>`</p>\n<p>安装libevent<br>`# tar zxvf libevent-2.0.21-stable.tar.gz</p>\n<h1 id=\"cd-libevent-2-0-21-stable\"><a href=\"#cd-libevent-2-0-21-stable\" class=\"headerlink\" title=\"cd libevent-2.0.21-stable\"></a>cd libevent-2.0.21-stable</h1><p>指定一个安装路径，即./configure -prefix=/usr</p>\n<h1 id=\"configure-prefix-usr\"><a href=\"#configure-prefix-usr\" class=\"headerlink\" title=\"./configure -prefix=/usr\"></a>./configure -prefix=/usr</h1><h1 id=\"make\"><a href=\"#make\" class=\"headerlink\" title=\"make\"></a>make</h1><h1 id=\"make-install\"><a href=\"#make-install\" class=\"headerlink\" title=\"make install`\"></a>make install`</h1><p>测试libevent是否安装成功","more":"<br>`</p>\n<h1 id=\"ls-al-usr-lib-grep-libevent\"><a href=\"#ls-al-usr-lib-grep-libevent\" class=\"headerlink\" title=\"ls -al /usr/lib | grep libevent\"></a>ls -al /usr/lib | grep libevent</h1><p>lrwxrwxrwx   1 root root      21 Apr 11 19:00 libevent-2.0.so.5 -&gt; libevent-2.0.so.5.1.9<br>-rwxr-xr-x   1 root root  776705 Apr 11 19:00 libevent-2.0.so.5.1.9<br>-rw-r–r–   1 root root 1003126 Apr 11 19:00 libevent.a<br>-rwxr-xr-x   1 root root     935 Apr 11 19:00 libevent.la<br>lrwxrwxrwx   1 root root      21 Apr 11 19:00 libevent.so -&gt; libevent-2.0.so.5.1.9<br>lrwxrwxrwx   1 root root      26 Apr 11 19:00 libevent_core-2.0.so.5 -&gt; libevent_core-2.0.so.5.1.9<br>-rwxr-xr-x   1 root root  463243 Apr 11 19:00 libevent_core-2.0.so.5.1.9<br>`<br>安装成功</p>\n<p>安装memcached，同时需要安装中指定libevent的安装位置<br>`# cd /tmp</p>\n<h1 id=\"tar-zxvf-memcached-1-4-15-tar-gz\"><a href=\"#tar-zxvf-memcached-1-4-15-tar-gz\" class=\"headerlink\" title=\"tar zxvf memcached-1.4.15.tar.gz\"></a>tar zxvf memcached-1.4.15.tar.gz</h1><h1 id=\"cd-memcached-1-4-15\"><a href=\"#cd-memcached-1-4-15\" class=\"headerlink\" title=\"cd memcached-1.4.15\"></a>cd memcached-1.4.15</h1><p>指定libevent的安装路径即./configure –with-libevent=/usr</p>\n<h1 id=\"configure-with-libevent-usr\"><a href=\"#configure-with-libevent-usr\" class=\"headerlink\" title=\"./configure -with-libevent=/usr\"></a>./configure -with-libevent=/usr</h1><h1 id=\"make-1\"><a href=\"#make-1\" class=\"headerlink\" title=\"make\"></a>make</h1><h1 id=\"make-install-1\"><a href=\"#make-install-1\" class=\"headerlink\" title=\"make install`\"></a>make install`</h1><p>测试是否成功安装memcached：<br><code># ls -al /usr/local/bin/mem*\n-rwxr-xr-x 1 root root 137986 11?? 12 17:39 /usr/local/bin/memcached</code><br>安装成功</p>\n<p>启动Memcached 也可以启动多个守护进程，不过端口不能重复。<br><code># memcached -d -m 64m -u root -l 192.168.1.1 -p 11211 -c 256 -P /tmp/memcached.pid</code></p>\n<blockquote>\n<p>-d选项是启动一个守护进程，</p>\n<p>-m是分配给Memcache使用的内存数量，单位是MB，我这里是64MB，</p>\n<p>-u是运行Memcache的用户，我这里是root，</p>\n<p>-l是监听的服务器IP地址，如果有多个地址的话，我这里指定了服务器的IP地址192.168.1.1，</p>\n<p>-p是设置Memcache监听的端口，我这里设置了12000，最好是1024以上的端口，</p>\n<p>-c选项是最大运行的并发连接数，默认是1024，我这里设置了256，按照你服务器的负载量来设定，</p>\n<p>-P是设置保存Memcache的pid文件，我这里是保存在 /tmp/memcached.pid</p>\n</blockquote>\n<p>结束Memcache<br><code># kill</code>cat /tmp/memcached.pid``</p>"},{"title":"Linux pysvn 源码安装","id":"1688","date":"2014-04-11T03:34:38.000Z","_content":"\n> gentoo n年没更新了，装什么都麻烦\n\n下载\nhttp://pysvn.barrys-emacs.org\nhttp://pysvn.barrys-emacs.org/source_kits/pysvn-1.7.8.tar.gz\n\n解压 （可以参考解压出来的INSTALL.html）\n`tar xzf pysvn-1.7.8.tar.gz\ncd pysvn-1.7.8/Source\npython setup.py backport\npython setup.py configure\nmake`\n\n安装 （不知道 python-路径 看这里 http://www.awezome.net/1690/ ）\n`mkdir python-路径/site-packages/pysvn\ncp pysvn/* python-路径/site-packages/pysvn`\n\n测试\n`python\nimport pysvn`\n没报错应该就可以了","source":"_posts/linux-pysvn-e6-ba-90-e7-a0-81-e5-ae-89-e8-a3-85.md","raw":"---\ntitle: Linux pysvn 源码安装\ntags:\n  - Linux &amp; Fedora\n  - pysvn\n  - Python\nid: 1688\ncategories:\n  - Linux\ndate: 2014-04-11 11:34:38\n---\n\n> gentoo n年没更新了，装什么都麻烦\n\n下载\nhttp://pysvn.barrys-emacs.org\nhttp://pysvn.barrys-emacs.org/source_kits/pysvn-1.7.8.tar.gz\n\n解压 （可以参考解压出来的INSTALL.html）\n`tar xzf pysvn-1.7.8.tar.gz\ncd pysvn-1.7.8/Source\npython setup.py backport\npython setup.py configure\nmake`\n\n安装 （不知道 python-路径 看这里 http://www.awezome.net/1690/ ）\n`mkdir python-路径/site-packages/pysvn\ncp pysvn/* python-路径/site-packages/pysvn`\n\n测试\n`python\nimport pysvn`\n没报错应该就可以了","slug":"linux-pysvn-e6-ba-90-e7-a0-81-e5-ae-89-e8-a3-85","published":1,"updated":"2018-01-13T05:07:00.441Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjccw7xbl007daqcrgrnlpa2q","content":"<blockquote>\n<p>gentoo n年没更新了，装什么都麻烦</p>\n</blockquote>\n<p>下载<br><a href=\"http://pysvn.barrys-emacs.org\" target=\"_blank\" rel=\"noopener\">http://pysvn.barrys-emacs.org</a><br><a href=\"http://pysvn.barrys-emacs.org/source_kits/pysvn-1.7.8.tar.gz\" target=\"_blank\" rel=\"noopener\">http://pysvn.barrys-emacs.org/source_kits/pysvn-1.7.8.tar.gz</a></p>\n<p>解压 （可以参考解压出来的INSTALL.html）<br><code>tar xzf pysvn-1.7.8.tar.gz\ncd pysvn-1.7.8/Source\npython setup.py backport\npython setup.py configure\nmake</code></p>\n<p>安装 （不知道 python-路径 看这里 <a href=\"http://www.awezome.net/1690/\" target=\"_blank\" rel=\"noopener\">http://www.awezome.net/1690/</a> ）<br><code>mkdir python-路径/site-packages/pysvn\ncp pysvn/* python-路径/site-packages/pysvn</code></p>\n<p>测试<br><code>python\nimport pysvn</code><br>没报错应该就可以了</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>gentoo n年没更新了，装什么都麻烦</p>\n</blockquote>\n<p>下载<br><a href=\"http://pysvn.barrys-emacs.org\" target=\"_blank\" rel=\"noopener\">http://pysvn.barrys-emacs.org</a><br><a href=\"http://pysvn.barrys-emacs.org/source_kits/pysvn-1.7.8.tar.gz\" target=\"_blank\" rel=\"noopener\">http://pysvn.barrys-emacs.org/source_kits/pysvn-1.7.8.tar.gz</a></p>\n<p>解压 （可以参考解压出来的INSTALL.html）<br><code>tar xzf pysvn-1.7.8.tar.gz\ncd pysvn-1.7.8/Source\npython setup.py backport\npython setup.py configure\nmake</code></p>\n<p>安装 （不知道 python-路径 看这里 <a href=\"http://www.awezome.net/1690/\" target=\"_blank\" rel=\"noopener\">http://www.awezome.net/1690/</a> ）<br><code>mkdir python-路径/site-packages/pysvn\ncp pysvn/* python-路径/site-packages/pysvn</code></p>\n<p>测试<br><code>python\nimport pysvn</code><br>没报错应该就可以了</p>\n"},{"title":"Modern PHP : 传值、引用和对象标识符","id":"2569","date":"2016-06-05T07:48:48.000Z","_content":"\n### 对象传值还是引用？\n\n先说个好理解的，boolean、integer、double、string 这些都是传值，传值就是传递过程完全复制一次，如果要对这些类型传引用那么就要加个&。\n\n对于object，默认情况下理解对象是通过引用传递的，但其实这不是完全正确的。真正的是：**从结果来看是类似于传引用，从过程来看是传值。**\n\n对于这个理解，先看几个概念：\n\n### 标识符\n\n准确的讲PHP中没有指针这个概念，都是底层来实现，而**标识符这个概念和指针类似，指向对象真正的内存地址**。一个对象变量已经不再保存整个对象的值，只是保存一个标识符来访问真正的对象内容。\n\n下面用<id>来表示标识符。**将对象赋值给另外一个变量，就是复制一份标识符。**比如创建个一对象，$a=new Bog(), 真正的存在变量里的是标识符：$a=[id]->address ，这一点非常重要。如果赋值给另外一个变量 $b=[id_copy]->address\n\n### 引用\n\n**通常的概念引用和C语言中的指针的类似，不过在PHP中，引用仅仅是变量名的别名，但引用不是指针。**创建一个引用，在PHP 中，变量名和变量内容是不一样的， 因此同样的内容可以有不同的名字。就像 Unix 文件系统中的硬链接，不是软链接。PHP 的引用作用是允许用两个变量来指向同一个内容。\n\n比如 $b=&a，表示为 ($a<=>$b)=[id]->address,这里用$a<=>$b表示引用关系，里面用的是双箭头，$a 和 $b 在这里是完全相同的，这并不是 $a 指向了 $b 或者相反，而是 $a 和 $b 指向了同一个地方，并且$a和$b互为引用，表示改变一个变量，也就是改变了一个变量的[id]，另一个也会改变。\n\n### 引用和标识符关系\n\n下面通过例子来说明引用和标识符的关系\n`\n$instance1 = new Test();\n$instance2 = $instance1;\n$instance3 = & $instance1;\n\nvar_dump($instance1 instanceof Test); // True\nvar_dump($instance2 instanceof Test); // True\nvar_dump($instance3 instanceof Test); // True\n$instance3 = new AnotherTest();\nvar_dump($instance1 instanceof AnotherTest); // True\nvar_dump($instance2 instanceof AnotherTest); // False\nvar_dump($instance3 instanceof AnotherTest); // True`\n\n$instance3和$instance1互为引用，改变了$instance3，$instance1也会改变。\n(1<=>3)=[id]->address\n(2)=[id_copy]->address\n<!--more-->\n\n`$instance1 = new Test();\n$instance2 = $instance1;\n$instance3 = & $instance1;\n$instance2 = new AnotherTest();\nvar_dump($instance1 instanceof AnotherTest); // False\nvar_dump($instance2 instanceof AnotherTest); // True\nvar_dump($instance3 instanceof AnotherTest); // False\n`\n改变2之前\n(1<=>3)=[id]->address\n(2)=[id_copy]->address\n改变2之后，2重新指向了新的[id_new],对应的对象内容也会变\n(1<=>3)=[id]->address\n(2)=[id_new]->address_new\n\n`$instance1 = new StdClass();\n$instance2 = $instance1;\n$instance1->my_property = 1;\nvar_dump($instance2->my_property); // Output: 1`\n\n改变了1的内容，也就是改变了address的内容，1，2标识符指向同一个地址，所以2的内容也会改变。\n\n### 对象作为参数\n\n和赋值给另外一个变量一样，对象作为参数传递，或者作为结果返回，都是同一个标识符的拷贝，不是引用关系。其实就是传的变量的值，这个值是标识符，所以我说过程是传值。但标识符指向同一个地址，修改了指向对象的变量也会都变，所以我说结果看就是类似于传引用。\n\n### array作为参数\n\nPHP传递array时，使用的是copy-on-write机制，也就是array先传引用，当对数组进行更改时再复制一份出来，相当于传值。所以看上去array当作参数时像是传的值。当然如果array想直接传引用，参数前也要加上&。当然不单单是数组作为参数时是写时复制，而在常见的变量赋值也是copy-on-write机制。\n\nhttp://php.net/manual/zh/language.oop5.references.php\nhttp://stackoverflow.com/questions/8962096/copy-of-object-identifier-and-reference-of-object-identifier-which-one-should\nhttp://php.net/manual/zh/language.references.php#language.references\nhttp://stackoverflow.com/questions/2030906/are-arrays-in-php-passed-by-value-or-by-reference","source":"_posts/modern-php-e4-bc-a0-e5-80-bc-e3-80-81-e5-bc-95-e7-94-a8-e5-92-8c-e5-af-b9-e8-b1-a1-e6-a0-87-e8-af-86-e7-ac-a6.md","raw":"---\ntitle: 'Modern PHP : 传值、引用和对象标识符'\ntags:\n  - php\nid: 2569\ncategories:\n  - PHP\ndate: 2016-06-05 15:48:48\n---\n\n### 对象传值还是引用？\n\n先说个好理解的，boolean、integer、double、string 这些都是传值，传值就是传递过程完全复制一次，如果要对这些类型传引用那么就要加个&。\n\n对于object，默认情况下理解对象是通过引用传递的，但其实这不是完全正确的。真正的是：**从结果来看是类似于传引用，从过程来看是传值。**\n\n对于这个理解，先看几个概念：\n\n### 标识符\n\n准确的讲PHP中没有指针这个概念，都是底层来实现，而**标识符这个概念和指针类似，指向对象真正的内存地址**。一个对象变量已经不再保存整个对象的值，只是保存一个标识符来访问真正的对象内容。\n\n下面用<id>来表示标识符。**将对象赋值给另外一个变量，就是复制一份标识符。**比如创建个一对象，$a=new Bog(), 真正的存在变量里的是标识符：$a=[id]->address ，这一点非常重要。如果赋值给另外一个变量 $b=[id_copy]->address\n\n### 引用\n\n**通常的概念引用和C语言中的指针的类似，不过在PHP中，引用仅仅是变量名的别名，但引用不是指针。**创建一个引用，在PHP 中，变量名和变量内容是不一样的， 因此同样的内容可以有不同的名字。就像 Unix 文件系统中的硬链接，不是软链接。PHP 的引用作用是允许用两个变量来指向同一个内容。\n\n比如 $b=&a，表示为 ($a<=>$b)=[id]->address,这里用$a<=>$b表示引用关系，里面用的是双箭头，$a 和 $b 在这里是完全相同的，这并不是 $a 指向了 $b 或者相反，而是 $a 和 $b 指向了同一个地方，并且$a和$b互为引用，表示改变一个变量，也就是改变了一个变量的[id]，另一个也会改变。\n\n### 引用和标识符关系\n\n下面通过例子来说明引用和标识符的关系\n`\n$instance1 = new Test();\n$instance2 = $instance1;\n$instance3 = & $instance1;\n\nvar_dump($instance1 instanceof Test); // True\nvar_dump($instance2 instanceof Test); // True\nvar_dump($instance3 instanceof Test); // True\n$instance3 = new AnotherTest();\nvar_dump($instance1 instanceof AnotherTest); // True\nvar_dump($instance2 instanceof AnotherTest); // False\nvar_dump($instance3 instanceof AnotherTest); // True`\n\n$instance3和$instance1互为引用，改变了$instance3，$instance1也会改变。\n(1<=>3)=[id]->address\n(2)=[id_copy]->address\n<!--more-->\n\n`$instance1 = new Test();\n$instance2 = $instance1;\n$instance3 = & $instance1;\n$instance2 = new AnotherTest();\nvar_dump($instance1 instanceof AnotherTest); // False\nvar_dump($instance2 instanceof AnotherTest); // True\nvar_dump($instance3 instanceof AnotherTest); // False\n`\n改变2之前\n(1<=>3)=[id]->address\n(2)=[id_copy]->address\n改变2之后，2重新指向了新的[id_new],对应的对象内容也会变\n(1<=>3)=[id]->address\n(2)=[id_new]->address_new\n\n`$instance1 = new StdClass();\n$instance2 = $instance1;\n$instance1->my_property = 1;\nvar_dump($instance2->my_property); // Output: 1`\n\n改变了1的内容，也就是改变了address的内容，1，2标识符指向同一个地址，所以2的内容也会改变。\n\n### 对象作为参数\n\n和赋值给另外一个变量一样，对象作为参数传递，或者作为结果返回，都是同一个标识符的拷贝，不是引用关系。其实就是传的变量的值，这个值是标识符，所以我说过程是传值。但标识符指向同一个地址，修改了指向对象的变量也会都变，所以我说结果看就是类似于传引用。\n\n### array作为参数\n\nPHP传递array时，使用的是copy-on-write机制，也就是array先传引用，当对数组进行更改时再复制一份出来，相当于传值。所以看上去array当作参数时像是传的值。当然如果array想直接传引用，参数前也要加上&。当然不单单是数组作为参数时是写时复制，而在常见的变量赋值也是copy-on-write机制。\n\nhttp://php.net/manual/zh/language.oop5.references.php\nhttp://stackoverflow.com/questions/8962096/copy-of-object-identifier-and-reference-of-object-identifier-which-one-should\nhttp://php.net/manual/zh/language.references.php#language.references\nhttp://stackoverflow.com/questions/2030906/are-arrays-in-php-passed-by-value-or-by-reference","slug":"modern-php-e4-bc-a0-e5-80-bc-e3-80-81-e5-bc-95-e7-94-a8-e5-92-8c-e5-af-b9-e8-b1-a1-e6-a0-87-e8-af-86-e7-ac-a6","published":1,"updated":"2018-01-13T05:07:00.479Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjccw7xbm007faqcr3lfkkdgf","content":"<h3 id=\"对象传值还是引用？\"><a href=\"#对象传值还是引用？\" class=\"headerlink\" title=\"对象传值还是引用？\"></a>对象传值还是引用？</h3><p>先说个好理解的，boolean、integer、double、string 这些都是传值，传值就是传递过程完全复制一次，如果要对这些类型传引用那么就要加个&amp;。</p>\n<p>对于object，默认情况下理解对象是通过引用传递的，但其实这不是完全正确的。真正的是：<strong>从结果来看是类似于传引用，从过程来看是传值。</strong></p>\n<p>对于这个理解，先看几个概念：</p>\n<h3 id=\"标识符\"><a href=\"#标识符\" class=\"headerlink\" title=\"标识符\"></a>标识符</h3><p>准确的讲PHP中没有指针这个概念，都是底层来实现，而<strong>标识符这个概念和指针类似，指向对象真正的内存地址</strong>。一个对象变量已经不再保存整个对象的值，只是保存一个标识符来访问真正的对象内容。</p>\n<p>下面用<id>来表示标识符。<strong>将对象赋值给另外一个变量，就是复制一份标识符。</strong>比如创建个一对象，$a=new Bog(), 真正的存在变量里的是标识符：$a=[id]-&gt;address ，这一点非常重要。如果赋值给另外一个变量 $b=[id_copy]-&gt;address</id></p>\n<h3 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h3><p><strong>通常的概念引用和C语言中的指针的类似，不过在PHP中，引用仅仅是变量名的别名，但引用不是指针。</strong>创建一个引用，在PHP 中，变量名和变量内容是不一样的， 因此同样的内容可以有不同的名字。就像 Unix 文件系统中的硬链接，不是软链接。PHP 的引用作用是允许用两个变量来指向同一个内容。</p>\n<p>比如 $b=&amp;a，表示为 ($a&lt;=&gt;$b)=[id]-&gt;address,这里用$a&lt;=&gt;$b表示引用关系，里面用的是双箭头，$a 和 $b 在这里是完全相同的，这并不是 $a 指向了 $b 或者相反，而是 $a 和 $b 指向了同一个地方，并且$a和$b互为引用，表示改变一个变量，也就是改变了一个变量的[id]，另一个也会改变。</p>\n<h3 id=\"引用和标识符关系\"><a href=\"#引用和标识符关系\" class=\"headerlink\" title=\"引用和标识符关系\"></a>引用和标识符关系</h3><p>下面通过例子来说明引用和标识符的关系<br>`<br>$instance1 = new Test();<br>$instance2 = $instance1;<br>$instance3 = &amp; $instance1;</p>\n<p>var_dump($instance1 instanceof Test); // True<br>var_dump($instance2 instanceof Test); // True<br>var_dump($instance3 instanceof Test); // True<br>$instance3 = new AnotherTest();<br>var_dump($instance1 instanceof AnotherTest); // True<br>var_dump($instance2 instanceof AnotherTest); // False<br>var_dump($instance3 instanceof AnotherTest); // True`</p>\n<p>$instance3和$instance1互为引用，改变了$instance3，$instance1也会改变。<br>(1&lt;=&gt;3)=[id]-&gt;address<br>(2)=[id_copy]-&gt;address<br><a id=\"more\"></a></p>\n<p><code>$instance1 = new Test();\n$instance2 = $instance1;\n$instance3 = &amp; $instance1;\n$instance2 = new AnotherTest();\nvar_dump($instance1 instanceof AnotherTest); // False\nvar_dump($instance2 instanceof AnotherTest); // True\nvar_dump($instance3 instanceof AnotherTest); // False</code><br>改变2之前<br>(1&lt;=&gt;3)=[id]-&gt;address<br>(2)=[id_copy]-&gt;address<br>改变2之后，2重新指向了新的[id_new],对应的对象内容也会变<br>(1&lt;=&gt;3)=[id]-&gt;address<br>(2)=[id_new]-&gt;address_new</p>\n<p><code>$instance1 = new StdClass();\n$instance2 = $instance1;\n$instance1-&gt;my_property = 1;\nvar_dump($instance2-&gt;my_property); // Output: 1</code></p>\n<p>改变了1的内容，也就是改变了address的内容，1，2标识符指向同一个地址，所以2的内容也会改变。</p>\n<h3 id=\"对象作为参数\"><a href=\"#对象作为参数\" class=\"headerlink\" title=\"对象作为参数\"></a>对象作为参数</h3><p>和赋值给另外一个变量一样，对象作为参数传递，或者作为结果返回，都是同一个标识符的拷贝，不是引用关系。其实就是传的变量的值，这个值是标识符，所以我说过程是传值。但标识符指向同一个地址，修改了指向对象的变量也会都变，所以我说结果看就是类似于传引用。</p>\n<h3 id=\"array作为参数\"><a href=\"#array作为参数\" class=\"headerlink\" title=\"array作为参数\"></a>array作为参数</h3><p>PHP传递array时，使用的是copy-on-write机制，也就是array先传引用，当对数组进行更改时再复制一份出来，相当于传值。所以看上去array当作参数时像是传的值。当然如果array想直接传引用，参数前也要加上&amp;。当然不单单是数组作为参数时是写时复制，而在常见的变量赋值也是copy-on-write机制。</p>\n<p><a href=\"http://php.net/manual/zh/language.oop5.references.php\" target=\"_blank\" rel=\"noopener\">http://php.net/manual/zh/language.oop5.references.php</a><br><a href=\"http://stackoverflow.com/questions/8962096/copy-of-object-identifier-and-reference-of-object-identifier-which-one-should\" target=\"_blank\" rel=\"noopener\">http://stackoverflow.com/questions/8962096/copy-of-object-identifier-and-reference-of-object-identifier-which-one-should</a><br><a href=\"http://php.net/manual/zh/language.references.php#language.references\" target=\"_blank\" rel=\"noopener\">http://php.net/manual/zh/language.references.php#language.references</a><br><a href=\"http://stackoverflow.com/questions/2030906/are-arrays-in-php-passed-by-value-or-by-reference\" target=\"_blank\" rel=\"noopener\">http://stackoverflow.com/questions/2030906/are-arrays-in-php-passed-by-value-or-by-reference</a></p>\n","site":{"data":{}},"excerpt":"<h3 id=\"对象传值还是引用？\"><a href=\"#对象传值还是引用？\" class=\"headerlink\" title=\"对象传值还是引用？\"></a>对象传值还是引用？</h3><p>先说个好理解的，boolean、integer、double、string 这些都是传值，传值就是传递过程完全复制一次，如果要对这些类型传引用那么就要加个&amp;。</p>\n<p>对于object，默认情况下理解对象是通过引用传递的，但其实这不是完全正确的。真正的是：<strong>从结果来看是类似于传引用，从过程来看是传值。</strong></p>\n<p>对于这个理解，先看几个概念：</p>\n<h3 id=\"标识符\"><a href=\"#标识符\" class=\"headerlink\" title=\"标识符\"></a>标识符</h3><p>准确的讲PHP中没有指针这个概念，都是底层来实现，而<strong>标识符这个概念和指针类似，指向对象真正的内存地址</strong>。一个对象变量已经不再保存整个对象的值，只是保存一个标识符来访问真正的对象内容。</p>\n<p>下面用<id>来表示标识符。<strong>将对象赋值给另外一个变量，就是复制一份标识符。</strong>比如创建个一对象，$a=new Bog(), 真正的存在变量里的是标识符：$a=[id]-&gt;address ，这一点非常重要。如果赋值给另外一个变量 $b=[id_copy]-&gt;address</id></p>\n<h3 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h3><p><strong>通常的概念引用和C语言中的指针的类似，不过在PHP中，引用仅仅是变量名的别名，但引用不是指针。</strong>创建一个引用，在PHP 中，变量名和变量内容是不一样的， 因此同样的内容可以有不同的名字。就像 Unix 文件系统中的硬链接，不是软链接。PHP 的引用作用是允许用两个变量来指向同一个内容。</p>\n<p>比如 $b=&amp;a，表示为 ($a&lt;=&gt;$b)=[id]-&gt;address,这里用$a&lt;=&gt;$b表示引用关系，里面用的是双箭头，$a 和 $b 在这里是完全相同的，这并不是 $a 指向了 $b 或者相反，而是 $a 和 $b 指向了同一个地方，并且$a和$b互为引用，表示改变一个变量，也就是改变了一个变量的[id]，另一个也会改变。</p>\n<h3 id=\"引用和标识符关系\"><a href=\"#引用和标识符关系\" class=\"headerlink\" title=\"引用和标识符关系\"></a>引用和标识符关系</h3><p>下面通过例子来说明引用和标识符的关系<br>`<br>$instance1 = new Test();<br>$instance2 = $instance1;<br>$instance3 = &amp; $instance1;</p>\n<p>var_dump($instance1 instanceof Test); // True<br>var_dump($instance2 instanceof Test); // True<br>var_dump($instance3 instanceof Test); // True<br>$instance3 = new AnotherTest();<br>var_dump($instance1 instanceof AnotherTest); // True<br>var_dump($instance2 instanceof AnotherTest); // False<br>var_dump($instance3 instanceof AnotherTest); // True`</p>\n<p>$instance3和$instance1互为引用，改变了$instance3，$instance1也会改变。<br>(1&lt;=&gt;3)=[id]-&gt;address<br>(2)=[id_copy]-&gt;address<br>","more":"</p>\n<p><code>$instance1 = new Test();\n$instance2 = $instance1;\n$instance3 = &amp; $instance1;\n$instance2 = new AnotherTest();\nvar_dump($instance1 instanceof AnotherTest); // False\nvar_dump($instance2 instanceof AnotherTest); // True\nvar_dump($instance3 instanceof AnotherTest); // False</code><br>改变2之前<br>(1&lt;=&gt;3)=[id]-&gt;address<br>(2)=[id_copy]-&gt;address<br>改变2之后，2重新指向了新的[id_new],对应的对象内容也会变<br>(1&lt;=&gt;3)=[id]-&gt;address<br>(2)=[id_new]-&gt;address_new</p>\n<p><code>$instance1 = new StdClass();\n$instance2 = $instance1;\n$instance1-&gt;my_property = 1;\nvar_dump($instance2-&gt;my_property); // Output: 1</code></p>\n<p>改变了1的内容，也就是改变了address的内容，1，2标识符指向同一个地址，所以2的内容也会改变。</p>\n<h3 id=\"对象作为参数\"><a href=\"#对象作为参数\" class=\"headerlink\" title=\"对象作为参数\"></a>对象作为参数</h3><p>和赋值给另外一个变量一样，对象作为参数传递，或者作为结果返回，都是同一个标识符的拷贝，不是引用关系。其实就是传的变量的值，这个值是标识符，所以我说过程是传值。但标识符指向同一个地址，修改了指向对象的变量也会都变，所以我说结果看就是类似于传引用。</p>\n<h3 id=\"array作为参数\"><a href=\"#array作为参数\" class=\"headerlink\" title=\"array作为参数\"></a>array作为参数</h3><p>PHP传递array时，使用的是copy-on-write机制，也就是array先传引用，当对数组进行更改时再复制一份出来，相当于传值。所以看上去array当作参数时像是传的值。当然如果array想直接传引用，参数前也要加上&amp;。当然不单单是数组作为参数时是写时复制，而在常见的变量赋值也是copy-on-write机制。</p>\n<p><a href=\"http://php.net/manual/zh/language.oop5.references.php\" target=\"_blank\" rel=\"noopener\">http://php.net/manual/zh/language.oop5.references.php</a><br><a href=\"http://stackoverflow.com/questions/8962096/copy-of-object-identifier-and-reference-of-object-identifier-which-one-should\" target=\"_blank\" rel=\"noopener\">http://stackoverflow.com/questions/8962096/copy-of-object-identifier-and-reference-of-object-identifier-which-one-should</a><br><a href=\"http://php.net/manual/zh/language.references.php#language.references\" target=\"_blank\" rel=\"noopener\">http://php.net/manual/zh/language.references.php#language.references</a><br><a href=\"http://stackoverflow.com/questions/2030906/are-arrays-in-php-passed-by-value-or-by-reference\" target=\"_blank\" rel=\"noopener\">http://stackoverflow.com/questions/2030906/are-arrays-in-php-passed-by-value-or-by-reference</a></p>"},{"title":"Modern PHP : 生成器及实例","id":"2563","date":"2016-06-02T07:42:27.000Z","_content":"\n### 概念\n\nPHP中的生成器（Generator）说简单点就是一种特殊的迭代器（Iterator），不过与标准的PHP迭代器不同，标准的迭代器通常都是在内存中全部计算过的数据集进行迭代，而生成器可以动态的计算并交出下一个值，这样可以不占用宝贵的系统内存。因为生成器是 forward-only 的迭代，在迭代开始后不能 rewind ，所以同一个生成器不能迭代多次。\n\n### yield\n\n使用生成器要用到yield关键字。yield 与 return 相似，不同的是 yield 不会终止函数的执行，而是为循环提供一个值并暂停生成器函数的执行。\n`<?php\nfunction myGenerator() {\n    yield 'value1';\n    yield 'value2';\n    yield 'value3';\n}\n\nforeach (myGenerator() as $yieldedValue) {  \n    echo $yieldedValue, PHP_EOL;  \n}  \n`\n\n当一个生成器被调用的时候，它返回一个可以被遍历的对象.当你遍历这个对象的时候(例如通过一个foreach循环)，PHP 将会在每次需要值的时候调用生成器函数，并在产生一个值之后保存生成器的状态，这样它就可以在需要产生下一个值的时候恢复调用状态。一旦不再需要产生更多的值，生成器函数可以简单退出，而调用生成器的代码还可以继续执行，就像一个数组已经被遍历完了。\n\n### 对比\n\n再看一个传统生成随机数的例子：\n<!--more-->\n`<?php\nfunction makeRange($length) {\n    $dataset = [];\n    for ($i = 0; $i < $length; $i++) {\n        $dataset[] = $i;\n    }\n\n    return $dataset;\n}\n\n$customRange = makeRange(1000000);\nforeach ($customRange as $i) {\n    echo $i, PHP_EOL;\n}`\n\n上面的例子中makeRange函数为数组预先分配了一百万个整型的内存区域。而PHP生成器同样可以完成上面的功能，而任何时候都只需要分配一个整型的内存，看看例子\n\n`<?php\nfunction makeRange($length) {\n    for ($i = 0; $i < $length; $i++) {\n        yield $i;\n    }\n}\n\nforeach (makeRange(1000000) as $i) {\n    echo $i, PHP_EOL;\n}\n`\n\n### key/value对\n\nyield 也可以生成 key/value对，与数组类似。\n\n`<?php\n$input = <<<'EOF'\n1;PHP;Likes dollar signs\n2;Python;Likes whitespace\n3;Ruby;Likes blocks\nEOF;\n\nfunction input_parser($input) {\n    foreach (explode(\"\\n\", $input) as $line) {\n        $fields = explode(';', $line);\n        $id = array_shift($fields);\n\n        yield $id => $fields;\n    }\n}\n\nforeach (input_parser($input) as $id => $fields) {\n    echo \"$id:\\n\";\n    echo \"    $fields[0]\\n\";\n    echo \"    $fields[1]\\n\";\n}\n`\n\n### 注意点\n\n如果在一个表达式上下文(例如在一个赋值表达式的右侧)中使用yield，你必须使用圆括号把yield申明包围起来。\n`$data = (yield $value);`\n\nyield也可以在没有参数传入的情况下被调用来生成一个 NULL值并配对一个自动的键名。\n\n要注意，一个生成器不可以返回值，这样做会产生一个编译错误。然而return空是一个有效的语法并且它将会终止生成器继续执行。\n\n### 实践\n\n再实践中，我们可以用生成器读取文件并处理，当然也可以把业务逻辑写在while里面，不过这样的话会很乱，如果有多个读文件的逻辑要写多个类似的方法，所以用生成器，既可以把功能和业务分开，也可以减少内存使用。\n`    function read_file_line($file){\n        $handle=@fopen($file,'r');\n        if(!$handle){\n            throw new Exception(\"Can not read file!\");\n        }\n\n        while(($line=fgets($handle))!==false){\n            yield $line;\n        }\n\n        if (!feof($handle)) {\n            throw new Exception('Error: unexpected fgets() fail');\n        }\n        fclose($handle);\n        return ;\n    }\n\n        foreach (read_file_line($file) as $row) {\n            //print_r($row);\n        }\n\n`\n\n再看看如何读csv:\n\n`<?php\nfunction getRows($file) {\n    $handle = fopen($file, 'rb');\n    if ($handle === false) {\n        throw new Exception();\n    }\n    while (feof($handle) === false) {\n        yield fgetcsv($handle);\n    }\n    fclose($handle);\n}\n\nforeach (getRows('data.csv') as $row) {\n    print_r($row);\n}`\n\n### send()\n\n最后还有补充一点\n生成器可以通过send()函数来注入值，通过yield来接收。然后可以像其他生成器函数中的值那样使用。\n\n`function printer() {\n    while (true) { \n        // 通过 yield 语句返回注入的值\n        $string = yield;\n        echo $string;\n    }\n}\n\n$printer = printer();\n$printer->send('Hello world!'); // 输出 Hello world!`\n\n参考：\nwww.powerxing.com/php-review-generator/\nwww.cnblogs.com/CraryPrimitiveMan/p/5130056.html\n《modern php》","source":"_posts/modern-php-e6-88-90-e7-94-9f-e5-99-a8-e5-8f-8a-e5-ae-9e-e4-be-8b.md","raw":"---\ntitle: 'Modern PHP : 生成器及实例'\ntags:\n  - php\nid: 2563\ncategories:\n  - PHP\ndate: 2016-06-02 15:42:27\n---\n\n### 概念\n\nPHP中的生成器（Generator）说简单点就是一种特殊的迭代器（Iterator），不过与标准的PHP迭代器不同，标准的迭代器通常都是在内存中全部计算过的数据集进行迭代，而生成器可以动态的计算并交出下一个值，这样可以不占用宝贵的系统内存。因为生成器是 forward-only 的迭代，在迭代开始后不能 rewind ，所以同一个生成器不能迭代多次。\n\n### yield\n\n使用生成器要用到yield关键字。yield 与 return 相似，不同的是 yield 不会终止函数的执行，而是为循环提供一个值并暂停生成器函数的执行。\n`<?php\nfunction myGenerator() {\n    yield 'value1';\n    yield 'value2';\n    yield 'value3';\n}\n\nforeach (myGenerator() as $yieldedValue) {  \n    echo $yieldedValue, PHP_EOL;  \n}  \n`\n\n当一个生成器被调用的时候，它返回一个可以被遍历的对象.当你遍历这个对象的时候(例如通过一个foreach循环)，PHP 将会在每次需要值的时候调用生成器函数，并在产生一个值之后保存生成器的状态，这样它就可以在需要产生下一个值的时候恢复调用状态。一旦不再需要产生更多的值，生成器函数可以简单退出，而调用生成器的代码还可以继续执行，就像一个数组已经被遍历完了。\n\n### 对比\n\n再看一个传统生成随机数的例子：\n<!--more-->\n`<?php\nfunction makeRange($length) {\n    $dataset = [];\n    for ($i = 0; $i < $length; $i++) {\n        $dataset[] = $i;\n    }\n\n    return $dataset;\n}\n\n$customRange = makeRange(1000000);\nforeach ($customRange as $i) {\n    echo $i, PHP_EOL;\n}`\n\n上面的例子中makeRange函数为数组预先分配了一百万个整型的内存区域。而PHP生成器同样可以完成上面的功能，而任何时候都只需要分配一个整型的内存，看看例子\n\n`<?php\nfunction makeRange($length) {\n    for ($i = 0; $i < $length; $i++) {\n        yield $i;\n    }\n}\n\nforeach (makeRange(1000000) as $i) {\n    echo $i, PHP_EOL;\n}\n`\n\n### key/value对\n\nyield 也可以生成 key/value对，与数组类似。\n\n`<?php\n$input = <<<'EOF'\n1;PHP;Likes dollar signs\n2;Python;Likes whitespace\n3;Ruby;Likes blocks\nEOF;\n\nfunction input_parser($input) {\n    foreach (explode(\"\\n\", $input) as $line) {\n        $fields = explode(';', $line);\n        $id = array_shift($fields);\n\n        yield $id => $fields;\n    }\n}\n\nforeach (input_parser($input) as $id => $fields) {\n    echo \"$id:\\n\";\n    echo \"    $fields[0]\\n\";\n    echo \"    $fields[1]\\n\";\n}\n`\n\n### 注意点\n\n如果在一个表达式上下文(例如在一个赋值表达式的右侧)中使用yield，你必须使用圆括号把yield申明包围起来。\n`$data = (yield $value);`\n\nyield也可以在没有参数传入的情况下被调用来生成一个 NULL值并配对一个自动的键名。\n\n要注意，一个生成器不可以返回值，这样做会产生一个编译错误。然而return空是一个有效的语法并且它将会终止生成器继续执行。\n\n### 实践\n\n再实践中，我们可以用生成器读取文件并处理，当然也可以把业务逻辑写在while里面，不过这样的话会很乱，如果有多个读文件的逻辑要写多个类似的方法，所以用生成器，既可以把功能和业务分开，也可以减少内存使用。\n`    function read_file_line($file){\n        $handle=@fopen($file,'r');\n        if(!$handle){\n            throw new Exception(\"Can not read file!\");\n        }\n\n        while(($line=fgets($handle))!==false){\n            yield $line;\n        }\n\n        if (!feof($handle)) {\n            throw new Exception('Error: unexpected fgets() fail');\n        }\n        fclose($handle);\n        return ;\n    }\n\n        foreach (read_file_line($file) as $row) {\n            //print_r($row);\n        }\n\n`\n\n再看看如何读csv:\n\n`<?php\nfunction getRows($file) {\n    $handle = fopen($file, 'rb');\n    if ($handle === false) {\n        throw new Exception();\n    }\n    while (feof($handle) === false) {\n        yield fgetcsv($handle);\n    }\n    fclose($handle);\n}\n\nforeach (getRows('data.csv') as $row) {\n    print_r($row);\n}`\n\n### send()\n\n最后还有补充一点\n生成器可以通过send()函数来注入值，通过yield来接收。然后可以像其他生成器函数中的值那样使用。\n\n`function printer() {\n    while (true) { \n        // 通过 yield 语句返回注入的值\n        $string = yield;\n        echo $string;\n    }\n}\n\n$printer = printer();\n$printer->send('Hello world!'); // 输出 Hello world!`\n\n参考：\nwww.powerxing.com/php-review-generator/\nwww.cnblogs.com/CraryPrimitiveMan/p/5130056.html\n《modern php》","slug":"modern-php-e6-88-90-e7-94-9f-e5-99-a8-e5-8f-8a-e5-ae-9e-e4-be-8b","published":1,"updated":"2018-01-13T05:07:00.483Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjccw7xbo007iaqcrcjff7gts","content":"<h3 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h3><p>PHP中的生成器（Generator）说简单点就是一种特殊的迭代器（Iterator），不过与标准的PHP迭代器不同，标准的迭代器通常都是在内存中全部计算过的数据集进行迭代，而生成器可以动态的计算并交出下一个值，这样可以不占用宝贵的系统内存。因为生成器是 forward-only 的迭代，在迭代开始后不能 rewind ，所以同一个生成器不能迭代多次。</p>\n<h3 id=\"yield\"><a href=\"#yield\" class=\"headerlink\" title=\"yield\"></a>yield</h3><p>使用生成器要用到yield关键字。yield 与 return 相似，不同的是 yield 不会终止函数的执行，而是为循环提供一个值并暂停生成器函数的执行。<br>`&lt;?php<br>function myGenerator() {<br>    yield ‘value1’;<br>    yield ‘value2’;<br>    yield ‘value3’;<br>}</p>\n<p>foreach (myGenerator() as $yieldedValue) {<br>    echo $yieldedValue, PHP_EOL;<br>}<br>`</p>\n<p>当一个生成器被调用的时候，它返回一个可以被遍历的对象.当你遍历这个对象的时候(例如通过一个foreach循环)，PHP 将会在每次需要值的时候调用生成器函数，并在产生一个值之后保存生成器的状态，这样它就可以在需要产生下一个值的时候恢复调用状态。一旦不再需要产生更多的值，生成器函数可以简单退出，而调用生成器的代码还可以继续执行，就像一个数组已经被遍历完了。</p>\n<h3 id=\"对比\"><a href=\"#对比\" class=\"headerlink\" title=\"对比\"></a>对比</h3><p>再看一个传统生成随机数的例子：<br><a id=\"more\"></a><br>`&lt;?php<br>function makeRange($length) {<br>    $dataset = [];<br>    for ($i = 0; $i &lt; $length; $i++) {<br>        $dataset[] = $i;<br>    }</p>\n<pre><code>return $dataset;\n</code></pre><p>}</p>\n<p>$customRange = makeRange(1000000);<br>foreach ($customRange as $i) {<br>    echo $i, PHP_EOL;<br>}`</p>\n<p>上面的例子中makeRange函数为数组预先分配了一百万个整型的内存区域。而PHP生成器同样可以完成上面的功能，而任何时候都只需要分配一个整型的内存，看看例子</p>\n<p>`&lt;?php<br>function makeRange($length) {<br>    for ($i = 0; $i &lt; $length; $i++) {<br>        yield $i;<br>    }<br>}</p>\n<p>foreach (makeRange(1000000) as $i) {<br>    echo $i, PHP_EOL;<br>}<br>`</p>\n<h3 id=\"key-value对\"><a href=\"#key-value对\" class=\"headerlink\" title=\"key/value对\"></a>key/value对</h3><p>yield 也可以生成 key/value对，与数组类似。</p>\n<p>`&lt;?php<br>$input = &lt;&lt;&lt;’EOF’<br>1;PHP;Likes dollar signs<br>2;Python;Likes whitespace<br>3;Ruby;Likes blocks<br>EOF;</p>\n<p>function input_parser($input) {<br>    foreach (explode(“\\n”, $input) as $line) {<br>        $fields = explode(‘;’, $line);<br>        $id = array_shift($fields);</p>\n<pre><code>    yield $id =&gt; $fields;\n}\n</code></pre><p>}</p>\n<p>foreach (input_parser($input) as $id =&gt; $fields) {<br>    echo “$id:\\n”;<br>    echo “    $fields[0]\\n”;<br>    echo “    $fields[1]\\n”;<br>}<br>`</p>\n<h3 id=\"注意点\"><a href=\"#注意点\" class=\"headerlink\" title=\"注意点\"></a>注意点</h3><p>如果在一个表达式上下文(例如在一个赋值表达式的右侧)中使用yield，你必须使用圆括号把yield申明包围起来。<br><code>$data = (yield $value);</code></p>\n<p>yield也可以在没有参数传入的情况下被调用来生成一个 NULL值并配对一个自动的键名。</p>\n<p>要注意，一个生成器不可以返回值，这样做会产生一个编译错误。然而return空是一个有效的语法并且它将会终止生成器继续执行。</p>\n<h3 id=\"实践\"><a href=\"#实践\" class=\"headerlink\" title=\"实践\"></a>实践</h3><p>再实践中，我们可以用生成器读取文件并处理，当然也可以把业务逻辑写在while里面，不过这样的话会很乱，如果有多个读文件的逻辑要写多个类似的方法，所以用生成器，既可以把功能和业务分开，也可以减少内存使用。<br>`    function read_file_line($file){<br>        $handle=@fopen($file,’r’);<br>        if(!$handle){<br>            throw new Exception(“Can not read file!”);<br>        }</p>\n<pre><code>    while(($line=fgets($handle))!==false){\n        yield $line;\n    }\n\n    if (!feof($handle)) {\n        throw new Exception(&apos;Error: unexpected fgets() fail&apos;);\n    }\n    fclose($handle);\n    return ;\n}\n\n    foreach (read_file_line($file) as $row) {\n        //print_r($row);\n    }\n</code></pre><p>`</p>\n<p>再看看如何读csv:</p>\n<p>`&lt;?php<br>function getRows($file) {<br>    $handle = fopen($file, ‘rb’);<br>    if ($handle === false) {<br>        throw new Exception();<br>    }<br>    while (feof($handle) === false) {<br>        yield fgetcsv($handle);<br>    }<br>    fclose($handle);<br>}</p>\n<p>foreach (getRows(‘data.csv’) as $row) {<br>    print_r($row);<br>}`</p>\n<h3 id=\"send\"><a href=\"#send\" class=\"headerlink\" title=\"send()\"></a>send()</h3><p>最后还有补充一点<br>生成器可以通过send()函数来注入值，通过yield来接收。然后可以像其他生成器函数中的值那样使用。</p>\n<p>`function printer() {<br>    while (true) {<br>        // 通过 yield 语句返回注入的值<br>        $string = yield;<br>        echo $string;<br>    }<br>}</p>\n<p>$printer = printer();<br>$printer-&gt;send(‘Hello world!’); // 输出 Hello world!`</p>\n<p>参考：<br>www.powerxing.com/php-review-generator/<br>www.cnblogs.com/CraryPrimitiveMan/p/5130056.html<br>《modern php》</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h3><p>PHP中的生成器（Generator）说简单点就是一种特殊的迭代器（Iterator），不过与标准的PHP迭代器不同，标准的迭代器通常都是在内存中全部计算过的数据集进行迭代，而生成器可以动态的计算并交出下一个值，这样可以不占用宝贵的系统内存。因为生成器是 forward-only 的迭代，在迭代开始后不能 rewind ，所以同一个生成器不能迭代多次。</p>\n<h3 id=\"yield\"><a href=\"#yield\" class=\"headerlink\" title=\"yield\"></a>yield</h3><p>使用生成器要用到yield关键字。yield 与 return 相似，不同的是 yield 不会终止函数的执行，而是为循环提供一个值并暂停生成器函数的执行。<br>`&lt;?php<br>function myGenerator() {<br>    yield ‘value1’;<br>    yield ‘value2’;<br>    yield ‘value3’;<br>}</p>\n<p>foreach (myGenerator() as $yieldedValue) {<br>    echo $yieldedValue, PHP_EOL;<br>}<br>`</p>\n<p>当一个生成器被调用的时候，它返回一个可以被遍历的对象.当你遍历这个对象的时候(例如通过一个foreach循环)，PHP 将会在每次需要值的时候调用生成器函数，并在产生一个值之后保存生成器的状态，这样它就可以在需要产生下一个值的时候恢复调用状态。一旦不再需要产生更多的值，生成器函数可以简单退出，而调用生成器的代码还可以继续执行，就像一个数组已经被遍历完了。</p>\n<h3 id=\"对比\"><a href=\"#对比\" class=\"headerlink\" title=\"对比\"></a>对比</h3><p>再看一个传统生成随机数的例子：<br>","more":"<br>`&lt;?php<br>function makeRange($length) {<br>    $dataset = [];<br>    for ($i = 0; $i &lt; $length; $i++) {<br>        $dataset[] = $i;<br>    }</p>\n<pre><code>return $dataset;\n</code></pre><p>}</p>\n<p>$customRange = makeRange(1000000);<br>foreach ($customRange as $i) {<br>    echo $i, PHP_EOL;<br>}`</p>\n<p>上面的例子中makeRange函数为数组预先分配了一百万个整型的内存区域。而PHP生成器同样可以完成上面的功能，而任何时候都只需要分配一个整型的内存，看看例子</p>\n<p>`&lt;?php<br>function makeRange($length) {<br>    for ($i = 0; $i &lt; $length; $i++) {<br>        yield $i;<br>    }<br>}</p>\n<p>foreach (makeRange(1000000) as $i) {<br>    echo $i, PHP_EOL;<br>}<br>`</p>\n<h3 id=\"key-value对\"><a href=\"#key-value对\" class=\"headerlink\" title=\"key/value对\"></a>key/value对</h3><p>yield 也可以生成 key/value对，与数组类似。</p>\n<p>`&lt;?php<br>$input = &lt;&lt;&lt;’EOF’<br>1;PHP;Likes dollar signs<br>2;Python;Likes whitespace<br>3;Ruby;Likes blocks<br>EOF;</p>\n<p>function input_parser($input) {<br>    foreach (explode(“\\n”, $input) as $line) {<br>        $fields = explode(‘;’, $line);<br>        $id = array_shift($fields);</p>\n<pre><code>    yield $id =&gt; $fields;\n}\n</code></pre><p>}</p>\n<p>foreach (input_parser($input) as $id =&gt; $fields) {<br>    echo “$id:\\n”;<br>    echo “    $fields[0]\\n”;<br>    echo “    $fields[1]\\n”;<br>}<br>`</p>\n<h3 id=\"注意点\"><a href=\"#注意点\" class=\"headerlink\" title=\"注意点\"></a>注意点</h3><p>如果在一个表达式上下文(例如在一个赋值表达式的右侧)中使用yield，你必须使用圆括号把yield申明包围起来。<br><code>$data = (yield $value);</code></p>\n<p>yield也可以在没有参数传入的情况下被调用来生成一个 NULL值并配对一个自动的键名。</p>\n<p>要注意，一个生成器不可以返回值，这样做会产生一个编译错误。然而return空是一个有效的语法并且它将会终止生成器继续执行。</p>\n<h3 id=\"实践\"><a href=\"#实践\" class=\"headerlink\" title=\"实践\"></a>实践</h3><p>再实践中，我们可以用生成器读取文件并处理，当然也可以把业务逻辑写在while里面，不过这样的话会很乱，如果有多个读文件的逻辑要写多个类似的方法，所以用生成器，既可以把功能和业务分开，也可以减少内存使用。<br>`    function read_file_line($file){<br>        $handle=@fopen($file,’r’);<br>        if(!$handle){<br>            throw new Exception(“Can not read file!”);<br>        }</p>\n<pre><code>    while(($line=fgets($handle))!==false){\n        yield $line;\n    }\n\n    if (!feof($handle)) {\n        throw new Exception(&apos;Error: unexpected fgets() fail&apos;);\n    }\n    fclose($handle);\n    return ;\n}\n\n    foreach (read_file_line($file) as $row) {\n        //print_r($row);\n    }\n</code></pre><p>`</p>\n<p>再看看如何读csv:</p>\n<p>`&lt;?php<br>function getRows($file) {<br>    $handle = fopen($file, ‘rb’);<br>    if ($handle === false) {<br>        throw new Exception();<br>    }<br>    while (feof($handle) === false) {<br>        yield fgetcsv($handle);<br>    }<br>    fclose($handle);<br>}</p>\n<p>foreach (getRows(‘data.csv’) as $row) {<br>    print_r($row);<br>}`</p>\n<h3 id=\"send\"><a href=\"#send\" class=\"headerlink\" title=\"send()\"></a>send()</h3><p>最后还有补充一点<br>生成器可以通过send()函数来注入值，通过yield来接收。然后可以像其他生成器函数中的值那样使用。</p>\n<p>`function printer() {<br>    while (true) {<br>        // 通过 yield 语句返回注入的值<br>        $string = yield;<br>        echo $string;<br>    }<br>}</p>\n<p>$printer = printer();<br>$printer-&gt;send(‘Hello world!’); // 输出 Hello world!`</p>\n<p>参考：<br>www.powerxing.com/php-review-generator/<br>www.cnblogs.com/CraryPrimitiveMan/p/5130056.html<br>《modern php》</p>"},{"title":"Modern PHP : 闭包和匿名函数","id":"2548","date":"2016-05-29T11:05:27.000Z","_content":"\n### 概念\n\n闭包（closures）是指在创建时封装的状态的函数，匿名函数（Anonymous functions）是指没有名称的函数。在PHP中，闭包和匿名函数被看成一种东西。理论上是不同的，可以理解闭包是由匿名函数构成的一种“结构”。\n\n像string,int等，可以把闭包函数作为变量的值来使用。PHP会自动把此种表达式转换成内置类 Closure 的对象实例。把一个 closure 对象赋值给一个变量的方式与普通变量赋值的语法是一样的，最后也要加上分号。\n\n### 创建闭包\n\n`$anonyFunc = function ($name) {\n    return 'Hello ' . $name;\n};\n\necho $anonyFunc->__invoke(\"Josh\");\necho $anonyFunc(\"Josh\");\n`\n\n闭包的情况是:\n\n> 1\\. 创建一个继承Closure类的闭包对象\r> \n> 2\\. 实现Closure类中的__invoke()方法\r> \n> 2\\. 把闭包赋值给$anonyFunc对象\r> \n> 3\\. 调用变量名后面有()，实际调用__invoke()方法\n\n在array_map中的例子，这种做法更简单，比传统的先定义一个函数再调用要快一点，之前的做法还把回调的实现和使用场所隔离开了。\n`<?php\n$numbersPlusOne = array_map(function ($number) {\n    return $number +1;\n}, [1,2,3]);\nprint_r($numbersPlusOne);\n// 输出 --> [2,3,4]`\n\n### use传参\n\n`\n<?php\nfunction enclosePerson($name) {\n    return function ($doCommand) use ($name) {\n        return sprintf('%s, %s', $name, $doCommand);\n    };\n}\n// 将字符串\"Clay\"封装进闭包\n$clay = enclosePerson('Clay');\n\n// 调用闭包\necho $clay('get me sweet tea!');\n// 输出 --> \"Clay, get me sweet tea!\"`\nenclosePerson()接收一个$name参数，返回一个封装了$name参数的闭包对象。即使闭包最终离开了enclosePerson()函数的作用域，但是返回的闭包对象$clay中仍然会保留$name参数被附着给闭包时的值。也就说，$name变量仍然存在在闭包中！这就是所说的，**即便闭包所在的环境不存在了，闭包中的封装的状态依然顾存在。**\n\n### bindTo()\n\n闭包有一个方法叫bindTo().这个方法可以吧Closure对象的内部状态绑定到其他对象上。第一个参数是具体的new出来的类变量，**如果要读某个类的protected和private就要把类名用string的形式写到 bindTo 第二个参数上**，当然也可以写成new出来的类变量，PHP会翻译成string的类名，所以说还是直接家string类名吧,如果在class内部的话就直接写__CLASS__喽。这么做之后就可以在匿名函数中使用$this关键字引用重要的应用对象。<!--more-->\n\n`class Foo{\n    private $name;\n    function __construct($name){\n        $this->name = $name;\n    }\n}\n$obj = new Foo('Sam');\n$cl = function() {\n    return \"Hello \" . $this->name;\n};\n$cl = $cl->bindTo($obj, 'Foo');// 'Foo'也可以直接写成$obj\necho($cl());`\n\nbindTo()方法经常被一些PHP框架用来将路由地址映射到匿名回调函数上。这些框架将一个匿名函数绑定到应用程序对象上。可以在匿名函数中使用$this关键词来引用应用程序对象\n`\n<?php\nclass App\n{\n    protected $routes = array();\n    protected $responseStatus = '200 OK';\n    protected $responseContentType = 'text/html';\n    protected $responseBody = 'Hello world';\n\n    public function addRoute($routePath, $routeCallback)\n    {\n        $this->routes[$routePath] = $routeCallback->bindTo($this, __CLASS__);\n    }\n\n    public function dispatch($currentPath)\n    {\n        foreach ($this->routes as $routePath => $callback) {\n            if ($routePath === $currentPath) {\n                $callback();\n            }\n        }\n\n        header('HTTP/1.1 ' . $this->responseStatus);\n        header('Content-type: ' . $this->responseContentType);\n        header('Content-length: ' . mb_strlen($this->responseBody));\n        echo $this->responseBody;\n    }\n}\n`\n\n调用\n`\n<?php\n$app = new App();\n$app->addRoute('/users/josh', function () {\n    $this->responseContentType = 'application/json;charset=utf8';\n    $this->responseBody = '{\"name\": \"Josh\"}';\n});\n$app->dispatch('/users/josh');`\n\n参考：\nhttp://oomusou.io/php/php-bindTo/\n《modern php》","source":"_posts/modern-php-e9-97-ad-e5-8c-85-e5-92-8c-e5-8c-bf-e5-90-8d-e5-87-bd-e6-95-b0.md","raw":"---\ntitle: 'Modern PHP : 闭包和匿名函数'\ntags:\n  - php\nid: 2548\ncategories:\n  - PHP\ndate: 2016-05-29 19:05:27\n---\n\n### 概念\n\n闭包（closures）是指在创建时封装的状态的函数，匿名函数（Anonymous functions）是指没有名称的函数。在PHP中，闭包和匿名函数被看成一种东西。理论上是不同的，可以理解闭包是由匿名函数构成的一种“结构”。\n\n像string,int等，可以把闭包函数作为变量的值来使用。PHP会自动把此种表达式转换成内置类 Closure 的对象实例。把一个 closure 对象赋值给一个变量的方式与普通变量赋值的语法是一样的，最后也要加上分号。\n\n### 创建闭包\n\n`$anonyFunc = function ($name) {\n    return 'Hello ' . $name;\n};\n\necho $anonyFunc->__invoke(\"Josh\");\necho $anonyFunc(\"Josh\");\n`\n\n闭包的情况是:\n\n> 1\\. 创建一个继承Closure类的闭包对象\r> \n> 2\\. 实现Closure类中的__invoke()方法\r> \n> 2\\. 把闭包赋值给$anonyFunc对象\r> \n> 3\\. 调用变量名后面有()，实际调用__invoke()方法\n\n在array_map中的例子，这种做法更简单，比传统的先定义一个函数再调用要快一点，之前的做法还把回调的实现和使用场所隔离开了。\n`<?php\n$numbersPlusOne = array_map(function ($number) {\n    return $number +1;\n}, [1,2,3]);\nprint_r($numbersPlusOne);\n// 输出 --> [2,3,4]`\n\n### use传参\n\n`\n<?php\nfunction enclosePerson($name) {\n    return function ($doCommand) use ($name) {\n        return sprintf('%s, %s', $name, $doCommand);\n    };\n}\n// 将字符串\"Clay\"封装进闭包\n$clay = enclosePerson('Clay');\n\n// 调用闭包\necho $clay('get me sweet tea!');\n// 输出 --> \"Clay, get me sweet tea!\"`\nenclosePerson()接收一个$name参数，返回一个封装了$name参数的闭包对象。即使闭包最终离开了enclosePerson()函数的作用域，但是返回的闭包对象$clay中仍然会保留$name参数被附着给闭包时的值。也就说，$name变量仍然存在在闭包中！这就是所说的，**即便闭包所在的环境不存在了，闭包中的封装的状态依然顾存在。**\n\n### bindTo()\n\n闭包有一个方法叫bindTo().这个方法可以吧Closure对象的内部状态绑定到其他对象上。第一个参数是具体的new出来的类变量，**如果要读某个类的protected和private就要把类名用string的形式写到 bindTo 第二个参数上**，当然也可以写成new出来的类变量，PHP会翻译成string的类名，所以说还是直接家string类名吧,如果在class内部的话就直接写__CLASS__喽。这么做之后就可以在匿名函数中使用$this关键字引用重要的应用对象。<!--more-->\n\n`class Foo{\n    private $name;\n    function __construct($name){\n        $this->name = $name;\n    }\n}\n$obj = new Foo('Sam');\n$cl = function() {\n    return \"Hello \" . $this->name;\n};\n$cl = $cl->bindTo($obj, 'Foo');// 'Foo'也可以直接写成$obj\necho($cl());`\n\nbindTo()方法经常被一些PHP框架用来将路由地址映射到匿名回调函数上。这些框架将一个匿名函数绑定到应用程序对象上。可以在匿名函数中使用$this关键词来引用应用程序对象\n`\n<?php\nclass App\n{\n    protected $routes = array();\n    protected $responseStatus = '200 OK';\n    protected $responseContentType = 'text/html';\n    protected $responseBody = 'Hello world';\n\n    public function addRoute($routePath, $routeCallback)\n    {\n        $this->routes[$routePath] = $routeCallback->bindTo($this, __CLASS__);\n    }\n\n    public function dispatch($currentPath)\n    {\n        foreach ($this->routes as $routePath => $callback) {\n            if ($routePath === $currentPath) {\n                $callback();\n            }\n        }\n\n        header('HTTP/1.1 ' . $this->responseStatus);\n        header('Content-type: ' . $this->responseContentType);\n        header('Content-length: ' . mb_strlen($this->responseBody));\n        echo $this->responseBody;\n    }\n}\n`\n\n调用\n`\n<?php\n$app = new App();\n$app->addRoute('/users/josh', function () {\n    $this->responseContentType = 'application/json;charset=utf8';\n    $this->responseBody = '{\"name\": \"Josh\"}';\n});\n$app->dispatch('/users/josh');`\n\n参考：\nhttp://oomusou.io/php/php-bindTo/\n《modern php》","slug":"modern-php-e9-97-ad-e5-8c-85-e5-92-8c-e5-8c-bf-e5-90-8d-e5-87-bd-e6-95-b0","published":1,"updated":"2018-01-13T05:07:00.498Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjccw7xbr007laqcrvo2l1vtg","content":"<h3 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h3><p>闭包（closures）是指在创建时封装的状态的函数，匿名函数（Anonymous functions）是指没有名称的函数。在PHP中，闭包和匿名函数被看成一种东西。理论上是不同的，可以理解闭包是由匿名函数构成的一种“结构”。</p>\n<p>像string,int等，可以把闭包函数作为变量的值来使用。PHP会自动把此种表达式转换成内置类 Closure 的对象实例。把一个 closure 对象赋值给一个变量的方式与普通变量赋值的语法是一样的，最后也要加上分号。</p>\n<h3 id=\"创建闭包\"><a href=\"#创建闭包\" class=\"headerlink\" title=\"创建闭包\"></a>创建闭包</h3><p>`$anonyFunc = function ($name) {<br>    return ‘Hello ‘ . $name;<br>};</p>\n<p>echo $anonyFunc-&gt;__invoke(“Josh”);<br>echo $anonyFunc(“Josh”);<br>`</p>\n<p>闭包的情况是:</p>\n<blockquote>\n<p>1. 创建一个继承Closure类的闭包对象</p>\n<p>2. 实现Closure类中的__invoke()方法</p>\n<p>2. 把闭包赋值给$anonyFunc对象</p>\n<p>3. 调用变量名后面有()，实际调用__invoke()方法</p>\n</blockquote>\n<p>在array_map中的例子，这种做法更简单，比传统的先定义一个函数再调用要快一点，之前的做法还把回调的实现和使用场所隔离开了。<br><code>&lt;?php\n$numbersPlusOne = array_map(function ($number) {\n    return $number +1;\n}, [1,2,3]);\nprint_r($numbersPlusOne);\n// 输出 --&gt; [2,3,4]</code></p>\n<h3 id=\"use传参\"><a href=\"#use传参\" class=\"headerlink\" title=\"use传参\"></a>use传参</h3><p>`<br>&lt;?php<br>function enclosePerson($name) {<br>    return function ($doCommand) use ($name) {<br>        return sprintf(‘%s, %s’, $name, $doCommand);<br>    };<br>}<br>// 将字符串”Clay”封装进闭包<br>$clay = enclosePerson(‘Clay’);</p>\n<p>// 调用闭包<br>echo $clay(‘get me sweet tea!’);<br>// 输出 –&gt; “Clay, get me sweet tea!”`<br>enclosePerson()接收一个$name参数，返回一个封装了$name参数的闭包对象。即使闭包最终离开了enclosePerson()函数的作用域，但是返回的闭包对象$clay中仍然会保留$name参数被附着给闭包时的值。也就说，$name变量仍然存在在闭包中！这就是所说的，<strong>即便闭包所在的环境不存在了，闭包中的封装的状态依然顾存在。</strong></p>\n<h3 id=\"bindTo\"><a href=\"#bindTo\" class=\"headerlink\" title=\"bindTo()\"></a>bindTo()</h3><p>闭包有一个方法叫bindTo().这个方法可以吧Closure对象的内部状态绑定到其他对象上。第一个参数是具体的new出来的类变量，<strong>如果要读某个类的protected和private就要把类名用string的形式写到 bindTo 第二个参数上</strong>，当然也可以写成new出来的类变量，PHP会翻译成string的类名，所以说还是直接家string类名吧,如果在class内部的话就直接写<strong>CLASS</strong>喽。这么做之后就可以在匿名函数中使用$this关键字引用重要的应用对象。<a id=\"more\"></a></p>\n<p><code>class Foo{\n    private $name;\n    function __construct($name){\n        $this-&gt;name = $name;\n    }\n}\n$obj = new Foo(&#39;Sam&#39;);\n$cl = function() {\n    return &quot;Hello &quot; . $this-&gt;name;\n};\n$cl = $cl-&gt;bindTo($obj, &#39;Foo&#39;);// &#39;Foo&#39;也可以直接写成$obj\necho($cl());</code></p>\n<p>bindTo()方法经常被一些PHP框架用来将路由地址映射到匿名回调函数上。这些框架将一个匿名函数绑定到应用程序对象上。可以在匿名函数中使用$this关键词来引用应用程序对象<br>`<br>&lt;?php<br>class App<br>{<br>    protected $routes = array();<br>    protected $responseStatus = ‘200 OK’;<br>    protected $responseContentType = ‘text/html’;<br>    protected $responseBody = ‘Hello world’;</p>\n<pre><code>public function addRoute($routePath, $routeCallback)\n{\n    $this-&gt;routes[$routePath] = $routeCallback-&gt;bindTo($this, __CLASS__);\n}\n\npublic function dispatch($currentPath)\n{\n    foreach ($this-&gt;routes as $routePath =&gt; $callback) {\n        if ($routePath === $currentPath) {\n            $callback();\n        }\n    }\n\n    header(&apos;HTTP/1.1 &apos; . $this-&gt;responseStatus);\n    header(&apos;Content-type: &apos; . $this-&gt;responseContentType);\n    header(&apos;Content-length: &apos; . mb_strlen($this-&gt;responseBody));\n    echo $this-&gt;responseBody;\n}\n</code></pre><p>}<br>`</p>\n<p>调用<br><code>&lt;?php\n$app = new App();\n$app-&gt;addRoute(&#39;/users/josh&#39;, function () {\n    $this-&gt;responseContentType = &#39;application/json;charset=utf8&#39;;\n    $this-&gt;responseBody = &#39;{&quot;name&quot;: &quot;Josh&quot;}&#39;;\n});\n$app-&gt;dispatch(&#39;/users/josh&#39;);</code></p>\n<p>参考：<br><a href=\"http://oomusou.io/php/php-bindTo/\" target=\"_blank\" rel=\"noopener\">http://oomusou.io/php/php-bindTo/</a><br>《modern php》</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h3><p>闭包（closures）是指在创建时封装的状态的函数，匿名函数（Anonymous functions）是指没有名称的函数。在PHP中，闭包和匿名函数被看成一种东西。理论上是不同的，可以理解闭包是由匿名函数构成的一种“结构”。</p>\n<p>像string,int等，可以把闭包函数作为变量的值来使用。PHP会自动把此种表达式转换成内置类 Closure 的对象实例。把一个 closure 对象赋值给一个变量的方式与普通变量赋值的语法是一样的，最后也要加上分号。</p>\n<h3 id=\"创建闭包\"><a href=\"#创建闭包\" class=\"headerlink\" title=\"创建闭包\"></a>创建闭包</h3><p>`$anonyFunc = function ($name) {<br>    return ‘Hello ‘ . $name;<br>};</p>\n<p>echo $anonyFunc-&gt;__invoke(“Josh”);<br>echo $anonyFunc(“Josh”);<br>`</p>\n<p>闭包的情况是:</p>\n<blockquote>\n<p>1. 创建一个继承Closure类的闭包对象</p>\n<p>2. 实现Closure类中的__invoke()方法</p>\n<p>2. 把闭包赋值给$anonyFunc对象</p>\n<p>3. 调用变量名后面有()，实际调用__invoke()方法</p>\n</blockquote>\n<p>在array_map中的例子，这种做法更简单，比传统的先定义一个函数再调用要快一点，之前的做法还把回调的实现和使用场所隔离开了。<br><code>&lt;?php\n$numbersPlusOne = array_map(function ($number) {\n    return $number +1;\n}, [1,2,3]);\nprint_r($numbersPlusOne);\n// 输出 --&gt; [2,3,4]</code></p>\n<h3 id=\"use传参\"><a href=\"#use传参\" class=\"headerlink\" title=\"use传参\"></a>use传参</h3><p>`<br>&lt;?php<br>function enclosePerson($name) {<br>    return function ($doCommand) use ($name) {<br>        return sprintf(‘%s, %s’, $name, $doCommand);<br>    };<br>}<br>// 将字符串”Clay”封装进闭包<br>$clay = enclosePerson(‘Clay’);</p>\n<p>// 调用闭包<br>echo $clay(‘get me sweet tea!’);<br>// 输出 –&gt; “Clay, get me sweet tea!”`<br>enclosePerson()接收一个$name参数，返回一个封装了$name参数的闭包对象。即使闭包最终离开了enclosePerson()函数的作用域，但是返回的闭包对象$clay中仍然会保留$name参数被附着给闭包时的值。也就说，$name变量仍然存在在闭包中！这就是所说的，<strong>即便闭包所在的环境不存在了，闭包中的封装的状态依然顾存在。</strong></p>\n<h3 id=\"bindTo\"><a href=\"#bindTo\" class=\"headerlink\" title=\"bindTo()\"></a>bindTo()</h3><p>闭包有一个方法叫bindTo().这个方法可以吧Closure对象的内部状态绑定到其他对象上。第一个参数是具体的new出来的类变量，<strong>如果要读某个类的protected和private就要把类名用string的形式写到 bindTo 第二个参数上</strong>，当然也可以写成new出来的类变量，PHP会翻译成string的类名，所以说还是直接家string类名吧,如果在class内部的话就直接写<strong>CLASS</strong>喽。这么做之后就可以在匿名函数中使用$this关键字引用重要的应用对象。","more":"</p>\n<p><code>class Foo{\n    private $name;\n    function __construct($name){\n        $this-&gt;name = $name;\n    }\n}\n$obj = new Foo(&#39;Sam&#39;);\n$cl = function() {\n    return &quot;Hello &quot; . $this-&gt;name;\n};\n$cl = $cl-&gt;bindTo($obj, &#39;Foo&#39;);// &#39;Foo&#39;也可以直接写成$obj\necho($cl());</code></p>\n<p>bindTo()方法经常被一些PHP框架用来将路由地址映射到匿名回调函数上。这些框架将一个匿名函数绑定到应用程序对象上。可以在匿名函数中使用$this关键词来引用应用程序对象<br>`<br>&lt;?php<br>class App<br>{<br>    protected $routes = array();<br>    protected $responseStatus = ‘200 OK’;<br>    protected $responseContentType = ‘text/html’;<br>    protected $responseBody = ‘Hello world’;</p>\n<pre><code>public function addRoute($routePath, $routeCallback)\n{\n    $this-&gt;routes[$routePath] = $routeCallback-&gt;bindTo($this, __CLASS__);\n}\n\npublic function dispatch($currentPath)\n{\n    foreach ($this-&gt;routes as $routePath =&gt; $callback) {\n        if ($routePath === $currentPath) {\n            $callback();\n        }\n    }\n\n    header(&apos;HTTP/1.1 &apos; . $this-&gt;responseStatus);\n    header(&apos;Content-type: &apos; . $this-&gt;responseContentType);\n    header(&apos;Content-length: &apos; . mb_strlen($this-&gt;responseBody));\n    echo $this-&gt;responseBody;\n}\n</code></pre><p>}<br>`</p>\n<p>调用<br><code>&lt;?php\n$app = new App();\n$app-&gt;addRoute(&#39;/users/josh&#39;, function () {\n    $this-&gt;responseContentType = &#39;application/json;charset=utf8&#39;;\n    $this-&gt;responseBody = &#39;{&quot;name&quot;: &quot;Josh&quot;}&#39;;\n});\n$app-&gt;dispatch(&#39;/users/josh&#39;);</code></p>\n<p>参考：<br><a href=\"http://oomusou.io/php/php-bindTo/\" target=\"_blank\" rel=\"noopener\">http://oomusou.io/php/php-bindTo/</a><br>《modern php》</p>"},{"title":"Mysql: 1130 is not allowed to connect to this MySQL server","id":"1677","date":"2014-04-10T03:55:21.000Z","_content":"\n如果你想连接你的mysql的时候发生这个错误：\n\nERROR 1130: Host '192.168.1.3' is not allowed to connect to this MySQL server\n\n解决方法：\n如果你想允许用户myuser从ip为192.168.1.3的主机连接到mysql服务器，并使用mypassword作为密码\n`GRANT ALL PRIVILEGES ON *.* TO 'myuser'@'%' IDENTIFIED BY 'mypassword' WITH GRANT OPTION;\nGRANT ALL PRIVILEGES ON *.* TO 'root'@'192.168.1.3' IDENTIFIED BY 'mypassword' WITH GRANT OPTION;\nGRANT ALL PRIVILEGES ON *.* TO 'root'@'10.10.40.54' IDENTIFIED BY '123456' WITH GRANT OPTION;`","source":"_posts/mysql-1130-is-not-allowed-to-connect-to-this-mysql-server.md","raw":"---\ntitle: 'Mysql: 1130 is not allowed to connect to this MySQL server'\ntags:\n  - MySQL\nid: 1677\ncategories:\n  - MySQL\ndate: 2014-04-10 11:55:21\n---\n\n如果你想连接你的mysql的时候发生这个错误：\n\nERROR 1130: Host '192.168.1.3' is not allowed to connect to this MySQL server\n\n解决方法：\n如果你想允许用户myuser从ip为192.168.1.3的主机连接到mysql服务器，并使用mypassword作为密码\n`GRANT ALL PRIVILEGES ON *.* TO 'myuser'@'%' IDENTIFIED BY 'mypassword' WITH GRANT OPTION;\nGRANT ALL PRIVILEGES ON *.* TO 'root'@'192.168.1.3' IDENTIFIED BY 'mypassword' WITH GRANT OPTION;\nGRANT ALL PRIVILEGES ON *.* TO 'root'@'10.10.40.54' IDENTIFIED BY '123456' WITH GRANT OPTION;`","slug":"mysql-1130-is-not-allowed-to-connect-to-this-mysql-server","published":1,"updated":"2018-01-13T05:07:00.473Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjccw7xbs007paqcrwmpe9bp0","content":"<p>如果你想连接你的mysql的时候发生这个错误：</p>\n<p>ERROR 1130: Host ‘192.168.1.3’ is not allowed to connect to this MySQL server</p>\n<p>解决方法：<br>如果你想允许用户myuser从ip为192.168.1.3的主机连接到mysql服务器，并使用mypassword作为密码<br><code>GRANT ALL PRIVILEGES ON *.* TO &#39;myuser&#39;@&#39;%&#39; IDENTIFIED BY &#39;mypassword&#39; WITH GRANT OPTION;\nGRANT ALL PRIVILEGES ON *.* TO &#39;root&#39;@&#39;192.168.1.3&#39; IDENTIFIED BY &#39;mypassword&#39; WITH GRANT OPTION;\nGRANT ALL PRIVILEGES ON *.* TO &#39;root&#39;@&#39;10.10.40.54&#39; IDENTIFIED BY &#39;123456&#39; WITH GRANT OPTION;</code></p>\n","site":{"data":{}},"excerpt":"","more":"<p>如果你想连接你的mysql的时候发生这个错误：</p>\n<p>ERROR 1130: Host ‘192.168.1.3’ is not allowed to connect to this MySQL server</p>\n<p>解决方法：<br>如果你想允许用户myuser从ip为192.168.1.3的主机连接到mysql服务器，并使用mypassword作为密码<br><code>GRANT ALL PRIVILEGES ON *.* TO &#39;myuser&#39;@&#39;%&#39; IDENTIFIED BY &#39;mypassword&#39; WITH GRANT OPTION;\nGRANT ALL PRIVILEGES ON *.* TO &#39;root&#39;@&#39;192.168.1.3&#39; IDENTIFIED BY &#39;mypassword&#39; WITH GRANT OPTION;\nGRANT ALL PRIVILEGES ON *.* TO &#39;root&#39;@&#39;10.10.40.54&#39; IDENTIFIED BY &#39;123456&#39; WITH GRANT OPTION;</code></p>\n"},{"title":"MySQL复习笔记：锁","id":"2535","date":"2015-05-15T09:50:17.000Z","_content":"\nMySQL的锁系统：shared lock和exclusive lock（共享锁和排他锁，也叫读锁和写锁，即read lock和write lock）\n\n表上的write lock会阻塞其他会话中write lock 和 read lock\n表上的read lock只会阻塞其他会话中write lock，而不会阻塞read lock\n\nMySQL有三种锁的级别：页级、表级、行级。\n\nMyISAM和MEMORY存储引擎采用的是表级锁（table-level locking）；BDB存储引擎采用的是页面锁（page-level locking），但也支持表级锁；InnoDB存储引擎既支持行级锁（row-level locking），也支持表级锁，但默认情况下是采用行级锁。\n\nMySQL这3种锁的特性可大致归纳如下：\n表级锁：开销小，加锁快；不会出现死锁；锁定粒度大，发生锁冲突的概率最高,并发度最低。\n行级锁：开销大，加锁慢；会出现死锁；锁定粒度最小，发生锁冲突的概率最低,并发度也最高。\n页面锁：开销和加锁时间界于表锁和行锁之间；会出现死锁；锁定粒度界于表锁和行锁之间，并发度一般。\n\n快照读：简单的select操作，属于快照读，不加锁。(当然，也有例外，下面会分析)\n`select * from table where ?;`\n<!--more-->\n\n当前读：特殊的读操作，插入/更新/删除操作，属于当前读，需要加锁。\n`select * from table where ? lock in share mode; //在读取的行上设置一个共享模式的锁。这个共享锁允许其它session读取数据但不允许修改它。 行读取的是最新的数据，如果他被其它事务使用中而没有提交，读取锁将被阻塞直到那个事务结束。\nselect * from table where ? for update; //在读取行上设置一个排他锁。组织其他session读取或者写入行数据\ninsert into table values (…);\nupdate table set ? where ?;\ndelete from table where ?;`\n\n当Update SQL被发给MySQL后，MySQL Server会根据where条件，读取第一条满足条件的记录，然后InnoDB引擎会将第一条记录返回，并加锁 (current read)。待MySQL Server收到这条加锁的记录之后，会再发起一个Update请求，更新这条记录。一条记录操作完成，再读取下一条记录，直至没有满足条件的记录为止。因此，Update操作内部，就包含了一个当前读。同理，Delete操作也一样。Insert操作会稍微有些不同，简单来说，就是Insert操作可能会触发Unique Key的冲突检查，也会进行一个当前读。\n针对一条当前读的SQL语句，InnoDB与MySQL Server的交互，是一条一条进行的，因此，加锁也是一条一条进行的。先对一条满足条件的记录加锁，返回给MySQL Server，做一些DML操作；然后在读取下一条加锁，直至读取完毕。\n\nfrom http://my.oschina.net/xinxingegeya/blog/296618","source":"_posts/mysql-e5-a4-8d-e4-b9-a0-e7-ac-94-e8-ae-b0-ef-bc-9a-e9-94-81.md","raw":"---\ntitle: MySQL复习笔记：锁\ntags:\n  - MySQL\nid: 2535\ncategories:\n  - MySQL\ndate: 2015-05-15 17:50:17\n---\n\nMySQL的锁系统：shared lock和exclusive lock（共享锁和排他锁，也叫读锁和写锁，即read lock和write lock）\n\n表上的write lock会阻塞其他会话中write lock 和 read lock\n表上的read lock只会阻塞其他会话中write lock，而不会阻塞read lock\n\nMySQL有三种锁的级别：页级、表级、行级。\n\nMyISAM和MEMORY存储引擎采用的是表级锁（table-level locking）；BDB存储引擎采用的是页面锁（page-level locking），但也支持表级锁；InnoDB存储引擎既支持行级锁（row-level locking），也支持表级锁，但默认情况下是采用行级锁。\n\nMySQL这3种锁的特性可大致归纳如下：\n表级锁：开销小，加锁快；不会出现死锁；锁定粒度大，发生锁冲突的概率最高,并发度最低。\n行级锁：开销大，加锁慢；会出现死锁；锁定粒度最小，发生锁冲突的概率最低,并发度也最高。\n页面锁：开销和加锁时间界于表锁和行锁之间；会出现死锁；锁定粒度界于表锁和行锁之间，并发度一般。\n\n快照读：简单的select操作，属于快照读，不加锁。(当然，也有例外，下面会分析)\n`select * from table where ?;`\n<!--more-->\n\n当前读：特殊的读操作，插入/更新/删除操作，属于当前读，需要加锁。\n`select * from table where ? lock in share mode; //在读取的行上设置一个共享模式的锁。这个共享锁允许其它session读取数据但不允许修改它。 行读取的是最新的数据，如果他被其它事务使用中而没有提交，读取锁将被阻塞直到那个事务结束。\nselect * from table where ? for update; //在读取行上设置一个排他锁。组织其他session读取或者写入行数据\ninsert into table values (…);\nupdate table set ? where ?;\ndelete from table where ?;`\n\n当Update SQL被发给MySQL后，MySQL Server会根据where条件，读取第一条满足条件的记录，然后InnoDB引擎会将第一条记录返回，并加锁 (current read)。待MySQL Server收到这条加锁的记录之后，会再发起一个Update请求，更新这条记录。一条记录操作完成，再读取下一条记录，直至没有满足条件的记录为止。因此，Update操作内部，就包含了一个当前读。同理，Delete操作也一样。Insert操作会稍微有些不同，简单来说，就是Insert操作可能会触发Unique Key的冲突检查，也会进行一个当前读。\n针对一条当前读的SQL语句，InnoDB与MySQL Server的交互，是一条一条进行的，因此，加锁也是一条一条进行的。先对一条满足条件的记录加锁，返回给MySQL Server，做一些DML操作；然后在读取下一条加锁，直至读取完毕。\n\nfrom http://my.oschina.net/xinxingegeya/blog/296618","slug":"mysql-e5-a4-8d-e4-b9-a0-e7-ac-94-e8-ae-b0-ef-bc-9a-e9-94-81","published":1,"updated":"2018-01-13T05:07:00.494Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjccw7xbu007saqcr0larodl6","content":"<p>MySQL的锁系统：shared lock和exclusive lock（共享锁和排他锁，也叫读锁和写锁，即read lock和write lock）</p>\n<p>表上的write lock会阻塞其他会话中write lock 和 read lock<br>表上的read lock只会阻塞其他会话中write lock，而不会阻塞read lock</p>\n<p>MySQL有三种锁的级别：页级、表级、行级。</p>\n<p>MyISAM和MEMORY存储引擎采用的是表级锁（table-level locking）；BDB存储引擎采用的是页面锁（page-level locking），但也支持表级锁；InnoDB存储引擎既支持行级锁（row-level locking），也支持表级锁，但默认情况下是采用行级锁。</p>\n<p>MySQL这3种锁的特性可大致归纳如下：<br>表级锁：开销小，加锁快；不会出现死锁；锁定粒度大，发生锁冲突的概率最高,并发度最低。<br>行级锁：开销大，加锁慢；会出现死锁；锁定粒度最小，发生锁冲突的概率最低,并发度也最高。<br>页面锁：开销和加锁时间界于表锁和行锁之间；会出现死锁；锁定粒度界于表锁和行锁之间，并发度一般。</p>\n<p>快照读：简单的select操作，属于快照读，不加锁。(当然，也有例外，下面会分析)<br><code>select * from table where ?;</code><br><a id=\"more\"></a></p>\n<p>当前读：特殊的读操作，插入/更新/删除操作，属于当前读，需要加锁。<br><code>select * from table where ? lock in share mode; //在读取的行上设置一个共享模式的锁。这个共享锁允许其它session读取数据但不允许修改它。 行读取的是最新的数据，如果他被其它事务使用中而没有提交，读取锁将被阻塞直到那个事务结束。\nselect * from table where ? for update; //在读取行上设置一个排他锁。组织其他session读取或者写入行数据\ninsert into table values (…);\nupdate table set ? where ?;\ndelete from table where ?;</code></p>\n<p>当Update SQL被发给MySQL后，MySQL Server会根据where条件，读取第一条满足条件的记录，然后InnoDB引擎会将第一条记录返回，并加锁 (current read)。待MySQL Server收到这条加锁的记录之后，会再发起一个Update请求，更新这条记录。一条记录操作完成，再读取下一条记录，直至没有满足条件的记录为止。因此，Update操作内部，就包含了一个当前读。同理，Delete操作也一样。Insert操作会稍微有些不同，简单来说，就是Insert操作可能会触发Unique Key的冲突检查，也会进行一个当前读。<br>针对一条当前读的SQL语句，InnoDB与MySQL Server的交互，是一条一条进行的，因此，加锁也是一条一条进行的。先对一条满足条件的记录加锁，返回给MySQL Server，做一些DML操作；然后在读取下一条加锁，直至读取完毕。</p>\n<p>from <a href=\"http://my.oschina.net/xinxingegeya/blog/296618\" target=\"_blank\" rel=\"noopener\">http://my.oschina.net/xinxingegeya/blog/296618</a></p>\n","site":{"data":{}},"excerpt":"<p>MySQL的锁系统：shared lock和exclusive lock（共享锁和排他锁，也叫读锁和写锁，即read lock和write lock）</p>\n<p>表上的write lock会阻塞其他会话中write lock 和 read lock<br>表上的read lock只会阻塞其他会话中write lock，而不会阻塞read lock</p>\n<p>MySQL有三种锁的级别：页级、表级、行级。</p>\n<p>MyISAM和MEMORY存储引擎采用的是表级锁（table-level locking）；BDB存储引擎采用的是页面锁（page-level locking），但也支持表级锁；InnoDB存储引擎既支持行级锁（row-level locking），也支持表级锁，但默认情况下是采用行级锁。</p>\n<p>MySQL这3种锁的特性可大致归纳如下：<br>表级锁：开销小，加锁快；不会出现死锁；锁定粒度大，发生锁冲突的概率最高,并发度最低。<br>行级锁：开销大，加锁慢；会出现死锁；锁定粒度最小，发生锁冲突的概率最低,并发度也最高。<br>页面锁：开销和加锁时间界于表锁和行锁之间；会出现死锁；锁定粒度界于表锁和行锁之间，并发度一般。</p>\n<p>快照读：简单的select操作，属于快照读，不加锁。(当然，也有例外，下面会分析)<br><code>select * from table where ?;</code><br>","more":"</p>\n<p>当前读：特殊的读操作，插入/更新/删除操作，属于当前读，需要加锁。<br><code>select * from table where ? lock in share mode; //在读取的行上设置一个共享模式的锁。这个共享锁允许其它session读取数据但不允许修改它。 行读取的是最新的数据，如果他被其它事务使用中而没有提交，读取锁将被阻塞直到那个事务结束。\nselect * from table where ? for update; //在读取行上设置一个排他锁。组织其他session读取或者写入行数据\ninsert into table values (…);\nupdate table set ? where ?;\ndelete from table where ?;</code></p>\n<p>当Update SQL被发给MySQL后，MySQL Server会根据where条件，读取第一条满足条件的记录，然后InnoDB引擎会将第一条记录返回，并加锁 (current read)。待MySQL Server收到这条加锁的记录之后，会再发起一个Update请求，更新这条记录。一条记录操作完成，再读取下一条记录，直至没有满足条件的记录为止。因此，Update操作内部，就包含了一个当前读。同理，Delete操作也一样。Insert操作会稍微有些不同，简单来说，就是Insert操作可能会触发Unique Key的冲突检查，也会进行一个当前读。<br>针对一条当前读的SQL语句，InnoDB与MySQL Server的交互，是一条一条进行的，因此，加锁也是一条一条进行的。先对一条满足条件的记录加锁，返回给MySQL Server，做一些DML操作；然后在读取下一条加锁，直至读取完毕。</p>\n<p>from <a href=\"http://my.oschina.net/xinxingegeya/blog/296618\" target=\"_blank\" rel=\"noopener\">http://my.oschina.net/xinxingegeya/blog/296618</a></p>"},{"title":"MySQL复习笔记：索引","id":"2533","date":"2015-05-15T09:48:37.000Z","_content":"\nMySQL 索引:索引（Index）是帮助MySQL高效获取数据的数据结构\n\n主键列（PRIMARY KEY）\n表的外键列（FOREIGN KEY）\n唯一索引（UNIQUE INDEX || UNIQUE KEY）\n普通索引（INDEX || KEY）\n全文索引（FULLTEXT）\n索引时指定前缀\n\n索引的存储分类\nB-Tree 索引：最常见的索引类型，大部分引擎都支持B树索引。B-Tree索引能够加快访问数据的速度，因为存储引擎不再需要进行全表扫描来获取需要的数据，取而代之的是从索引的根节点开始进行搜索。根节点的槽中存放了指向子节点的指针，存储引擎根据这些指针向下层查找。通过比较节点页的值和要查找的值可以找到合适的指针进入下层子节点，这些指针实际上定义了子节点页中值的上限和下限。最终存储引擎要么是找到对应的值，要么该记录不存在。\nHASH 索引：只有Memory引擎支持，使用场景简单。\nR-Tree 索引(空间索引)：空间索引是MyISAM的一种特殊索引类型，主要用于地理空间数据类型。\nFull-text (全文索引)：全文索引也是MyISAM的一种特殊索引类型，主要用于全文索引，InnoDB从MYSQL5.6版本提供对全文索引的支持。全文索引是一种特殊类型的索引，他查找的是文本中的关键词，而不是直接比较索引中的值。全文索引和其他几类索引的匹配方式完全不一样。他有许多需要注意的细节，如停用词、词干和复数、布尔搜索等。全文索引更类似与搜索引擎做的事情，而不是简单的where条件匹配。\n在相同的列上同时创建全文索引和基于值的B-Tree索引不会有冲突，全文索引适用于MATCH AGAINST操作，而不是普通的where条件操作\n\nMySQL高性能的索引策\n独立的列作为索引\n\n如果查询中的列不是独立的，则mysql就不会使用索引，独立的列是指列不能是表达式的一部分，也不能是函数的参数。<!--more-->\n\n选择合适的索引列顺序只是用于B－Tree索引。\n索引列的顺序意味着索引首先按照最左列进行排序，其次是第二列,将选择性最高的列放到索引最前列\n\n前缀索引和索引选择性\n\n有时候需要索引很长的字符串，这会让索引变的大且慢。一个策略是前面提到过的模拟哈希索引。通常可以索引开始的部分字符，这样可以大大节约索引空间，从而提高索引效率。但是这样也会降低索引的选择性。索引的选择性是指，不重复的索引值。\n一般情况下，某个列前缀的选择性也是足够高的，足以满足查询性能。对于Blob，Text或者很长的VARCHAR类型的列，必须使用前缀索引，因为mysql不允许这些列的完整长度。诀窍在于要选择足够长的前缀以保证较高的选择性，同时又不能太长（以便节约空间）。前缀应该足够长，以便使得前缀索引的选择性接近于索引整个列。\n\n使用覆盖索引\n\n如果索引包含满足查询的所有数据，就称为覆盖索引。覆盖索引是一种非常强大的工具，能大大提高查询性能。\n(1)索引项通常比记录要小，所以MySQL访问更少的数据；\n(2)索引都按值的大小顺序存储，相对于随机访问记录，需要更少的I/O；\n(3)大多数据引擎能更好的缓存索引。比如MyISAM只缓存索引。\n(4)覆盖索引对于InnoDB表尤其有用，因为InnoDB使用聚集索引组织数据，如果二级索引中包含查询所需的数据，就不再需要在聚集索引中查找了。\n覆盖索引不能是任何索引，只有B-TREE索引存储相应的值。而且不同的存储引擎实现覆盖索引的方式都不同，并不是所有存储引擎都支持覆盖索引(Memory和Falcon就不支持)。mysql只能使用B－Tree索引做覆盖索引\nmysql不能在索引中执行like操作。因为如果是通配符开头的like查询，存储引擎就无法比较匹配。这种情况下，mysql服务器只能提取数据行的值而不是索引的值来做比较。\n\n使用索引扫描来做排序\n\nmysql有两种方式可以生成有序的结果：通过排序操作；或者通过索引顺序扫描；如果explain出来的type列的值为index，则说明mysql使用了索引扫描来做排序（不要和Extra 列的“using index”搞混淆了）。\n扫描索引本身是很快的，因为只需从一条记录移动到紧接着的下一条记录。但如果索引不能覆盖查询所需的全部列，那就不得不每扫描一条索引记录就得回表查询一次对应的行。这基本上都是随机IO，因此按索引顺序读取数据的速度通常比顺序的全表扫描慢，尤其是在IO密集型的工作负载时。\n\nMySQL非聚簇索引&amp;&amp;二级索引&amp;&amp;辅助索引\n\nmysql中每个表都有一个聚簇索引（clustered index ），除此之外的表上的每个非聚簇索引都是二级索引，又叫辅助索引（secondary indexes）。以InnoDB来说，每个InnoDB表具有一个特殊的索引称为聚集索引。如果您的表上定义有主键，该主键索引是聚集索引。如果你不定义为您的表的主键时，MySQL取第一个唯一索引（unique）而且只含非空列（NOT NULL）作为主键，InnoDB使用它作为聚集索引。如果没有这样的列，InnoDB就自己产生一个这样的ID值，它有六个字节，而且是隐藏的，使其作为聚簇索引。\n\nfrom http://my.oschina.net/xinxingegeya/blog/423632","source":"_posts/mysql-e5-a4-8d-e4-b9-a0-e7-ac-94-e8-ae-b0-ef-bc-9a-e7-b4-a2-e5-bc-95.md","raw":"---\ntitle: MySQL复习笔记：索引\ntags:\n  - MySQL\nid: 2533\ncategories:\n  - MySQL\ndate: 2015-05-15 17:48:37\n---\n\nMySQL 索引:索引（Index）是帮助MySQL高效获取数据的数据结构\n\n主键列（PRIMARY KEY）\n表的外键列（FOREIGN KEY）\n唯一索引（UNIQUE INDEX || UNIQUE KEY）\n普通索引（INDEX || KEY）\n全文索引（FULLTEXT）\n索引时指定前缀\n\n索引的存储分类\nB-Tree 索引：最常见的索引类型，大部分引擎都支持B树索引。B-Tree索引能够加快访问数据的速度，因为存储引擎不再需要进行全表扫描来获取需要的数据，取而代之的是从索引的根节点开始进行搜索。根节点的槽中存放了指向子节点的指针，存储引擎根据这些指针向下层查找。通过比较节点页的值和要查找的值可以找到合适的指针进入下层子节点，这些指针实际上定义了子节点页中值的上限和下限。最终存储引擎要么是找到对应的值，要么该记录不存在。\nHASH 索引：只有Memory引擎支持，使用场景简单。\nR-Tree 索引(空间索引)：空间索引是MyISAM的一种特殊索引类型，主要用于地理空间数据类型。\nFull-text (全文索引)：全文索引也是MyISAM的一种特殊索引类型，主要用于全文索引，InnoDB从MYSQL5.6版本提供对全文索引的支持。全文索引是一种特殊类型的索引，他查找的是文本中的关键词，而不是直接比较索引中的值。全文索引和其他几类索引的匹配方式完全不一样。他有许多需要注意的细节，如停用词、词干和复数、布尔搜索等。全文索引更类似与搜索引擎做的事情，而不是简单的where条件匹配。\n在相同的列上同时创建全文索引和基于值的B-Tree索引不会有冲突，全文索引适用于MATCH AGAINST操作，而不是普通的where条件操作\n\nMySQL高性能的索引策\n独立的列作为索引\n\n如果查询中的列不是独立的，则mysql就不会使用索引，独立的列是指列不能是表达式的一部分，也不能是函数的参数。<!--more-->\n\n选择合适的索引列顺序只是用于B－Tree索引。\n索引列的顺序意味着索引首先按照最左列进行排序，其次是第二列,将选择性最高的列放到索引最前列\n\n前缀索引和索引选择性\n\n有时候需要索引很长的字符串，这会让索引变的大且慢。一个策略是前面提到过的模拟哈希索引。通常可以索引开始的部分字符，这样可以大大节约索引空间，从而提高索引效率。但是这样也会降低索引的选择性。索引的选择性是指，不重复的索引值。\n一般情况下，某个列前缀的选择性也是足够高的，足以满足查询性能。对于Blob，Text或者很长的VARCHAR类型的列，必须使用前缀索引，因为mysql不允许这些列的完整长度。诀窍在于要选择足够长的前缀以保证较高的选择性，同时又不能太长（以便节约空间）。前缀应该足够长，以便使得前缀索引的选择性接近于索引整个列。\n\n使用覆盖索引\n\n如果索引包含满足查询的所有数据，就称为覆盖索引。覆盖索引是一种非常强大的工具，能大大提高查询性能。\n(1)索引项通常比记录要小，所以MySQL访问更少的数据；\n(2)索引都按值的大小顺序存储，相对于随机访问记录，需要更少的I/O；\n(3)大多数据引擎能更好的缓存索引。比如MyISAM只缓存索引。\n(4)覆盖索引对于InnoDB表尤其有用，因为InnoDB使用聚集索引组织数据，如果二级索引中包含查询所需的数据，就不再需要在聚集索引中查找了。\n覆盖索引不能是任何索引，只有B-TREE索引存储相应的值。而且不同的存储引擎实现覆盖索引的方式都不同，并不是所有存储引擎都支持覆盖索引(Memory和Falcon就不支持)。mysql只能使用B－Tree索引做覆盖索引\nmysql不能在索引中执行like操作。因为如果是通配符开头的like查询，存储引擎就无法比较匹配。这种情况下，mysql服务器只能提取数据行的值而不是索引的值来做比较。\n\n使用索引扫描来做排序\n\nmysql有两种方式可以生成有序的结果：通过排序操作；或者通过索引顺序扫描；如果explain出来的type列的值为index，则说明mysql使用了索引扫描来做排序（不要和Extra 列的“using index”搞混淆了）。\n扫描索引本身是很快的，因为只需从一条记录移动到紧接着的下一条记录。但如果索引不能覆盖查询所需的全部列，那就不得不每扫描一条索引记录就得回表查询一次对应的行。这基本上都是随机IO，因此按索引顺序读取数据的速度通常比顺序的全表扫描慢，尤其是在IO密集型的工作负载时。\n\nMySQL非聚簇索引&amp;&amp;二级索引&amp;&amp;辅助索引\n\nmysql中每个表都有一个聚簇索引（clustered index ），除此之外的表上的每个非聚簇索引都是二级索引，又叫辅助索引（secondary indexes）。以InnoDB来说，每个InnoDB表具有一个特殊的索引称为聚集索引。如果您的表上定义有主键，该主键索引是聚集索引。如果你不定义为您的表的主键时，MySQL取第一个唯一索引（unique）而且只含非空列（NOT NULL）作为主键，InnoDB使用它作为聚集索引。如果没有这样的列，InnoDB就自己产生一个这样的ID值，它有六个字节，而且是隐藏的，使其作为聚簇索引。\n\nfrom http://my.oschina.net/xinxingegeya/blog/423632","slug":"mysql-e5-a4-8d-e4-b9-a0-e7-ac-94-e8-ae-b0-ef-bc-9a-e7-b4-a2-e5-bc-95","published":1,"updated":"2018-01-13T05:07:00.496Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjccw7xbv007vaqcrfwcjiv0p","content":"<p>MySQL 索引:索引（Index）是帮助MySQL高效获取数据的数据结构</p>\n<p>主键列（PRIMARY KEY）<br>表的外键列（FOREIGN KEY）<br>唯一索引（UNIQUE INDEX || UNIQUE KEY）<br>普通索引（INDEX || KEY）<br>全文索引（FULLTEXT）<br>索引时指定前缀</p>\n<p>索引的存储分类<br>B-Tree 索引：最常见的索引类型，大部分引擎都支持B树索引。B-Tree索引能够加快访问数据的速度，因为存储引擎不再需要进行全表扫描来获取需要的数据，取而代之的是从索引的根节点开始进行搜索。根节点的槽中存放了指向子节点的指针，存储引擎根据这些指针向下层查找。通过比较节点页的值和要查找的值可以找到合适的指针进入下层子节点，这些指针实际上定义了子节点页中值的上限和下限。最终存储引擎要么是找到对应的值，要么该记录不存在。<br>HASH 索引：只有Memory引擎支持，使用场景简单。<br>R-Tree 索引(空间索引)：空间索引是MyISAM的一种特殊索引类型，主要用于地理空间数据类型。<br>Full-text (全文索引)：全文索引也是MyISAM的一种特殊索引类型，主要用于全文索引，InnoDB从MYSQL5.6版本提供对全文索引的支持。全文索引是一种特殊类型的索引，他查找的是文本中的关键词，而不是直接比较索引中的值。全文索引和其他几类索引的匹配方式完全不一样。他有许多需要注意的细节，如停用词、词干和复数、布尔搜索等。全文索引更类似与搜索引擎做的事情，而不是简单的where条件匹配。<br>在相同的列上同时创建全文索引和基于值的B-Tree索引不会有冲突，全文索引适用于MATCH AGAINST操作，而不是普通的where条件操作</p>\n<p>MySQL高性能的索引策<br>独立的列作为索引</p>\n<p>如果查询中的列不是独立的，则mysql就不会使用索引，独立的列是指列不能是表达式的一部分，也不能是函数的参数。<a id=\"more\"></a></p>\n<p>选择合适的索引列顺序只是用于B－Tree索引。<br>索引列的顺序意味着索引首先按照最左列进行排序，其次是第二列,将选择性最高的列放到索引最前列</p>\n<p>前缀索引和索引选择性</p>\n<p>有时候需要索引很长的字符串，这会让索引变的大且慢。一个策略是前面提到过的模拟哈希索引。通常可以索引开始的部分字符，这样可以大大节约索引空间，从而提高索引效率。但是这样也会降低索引的选择性。索引的选择性是指，不重复的索引值。<br>一般情况下，某个列前缀的选择性也是足够高的，足以满足查询性能。对于Blob，Text或者很长的VARCHAR类型的列，必须使用前缀索引，因为mysql不允许这些列的完整长度。诀窍在于要选择足够长的前缀以保证较高的选择性，同时又不能太长（以便节约空间）。前缀应该足够长，以便使得前缀索引的选择性接近于索引整个列。</p>\n<p>使用覆盖索引</p>\n<p>如果索引包含满足查询的所有数据，就称为覆盖索引。覆盖索引是一种非常强大的工具，能大大提高查询性能。<br>(1)索引项通常比记录要小，所以MySQL访问更少的数据；<br>(2)索引都按值的大小顺序存储，相对于随机访问记录，需要更少的I/O；<br>(3)大多数据引擎能更好的缓存索引。比如MyISAM只缓存索引。<br>(4)覆盖索引对于InnoDB表尤其有用，因为InnoDB使用聚集索引组织数据，如果二级索引中包含查询所需的数据，就不再需要在聚集索引中查找了。<br>覆盖索引不能是任何索引，只有B-TREE索引存储相应的值。而且不同的存储引擎实现覆盖索引的方式都不同，并不是所有存储引擎都支持覆盖索引(Memory和Falcon就不支持)。mysql只能使用B－Tree索引做覆盖索引<br>mysql不能在索引中执行like操作。因为如果是通配符开头的like查询，存储引擎就无法比较匹配。这种情况下，mysql服务器只能提取数据行的值而不是索引的值来做比较。</p>\n<p>使用索引扫描来做排序</p>\n<p>mysql有两种方式可以生成有序的结果：通过排序操作；或者通过索引顺序扫描；如果explain出来的type列的值为index，则说明mysql使用了索引扫描来做排序（不要和Extra 列的“using index”搞混淆了）。<br>扫描索引本身是很快的，因为只需从一条记录移动到紧接着的下一条记录。但如果索引不能覆盖查询所需的全部列，那就不得不每扫描一条索引记录就得回表查询一次对应的行。这基本上都是随机IO，因此按索引顺序读取数据的速度通常比顺序的全表扫描慢，尤其是在IO密集型的工作负载时。</p>\n<p>MySQL非聚簇索引&amp;&amp;二级索引&amp;&amp;辅助索引</p>\n<p>mysql中每个表都有一个聚簇索引（clustered index ），除此之外的表上的每个非聚簇索引都是二级索引，又叫辅助索引（secondary indexes）。以InnoDB来说，每个InnoDB表具有一个特殊的索引称为聚集索引。如果您的表上定义有主键，该主键索引是聚集索引。如果你不定义为您的表的主键时，MySQL取第一个唯一索引（unique）而且只含非空列（NOT NULL）作为主键，InnoDB使用它作为聚集索引。如果没有这样的列，InnoDB就自己产生一个这样的ID值，它有六个字节，而且是隐藏的，使其作为聚簇索引。</p>\n<p>from <a href=\"http://my.oschina.net/xinxingegeya/blog/423632\" target=\"_blank\" rel=\"noopener\">http://my.oschina.net/xinxingegeya/blog/423632</a></p>\n","site":{"data":{}},"excerpt":"<p>MySQL 索引:索引（Index）是帮助MySQL高效获取数据的数据结构</p>\n<p>主键列（PRIMARY KEY）<br>表的外键列（FOREIGN KEY）<br>唯一索引（UNIQUE INDEX || UNIQUE KEY）<br>普通索引（INDEX || KEY）<br>全文索引（FULLTEXT）<br>索引时指定前缀</p>\n<p>索引的存储分类<br>B-Tree 索引：最常见的索引类型，大部分引擎都支持B树索引。B-Tree索引能够加快访问数据的速度，因为存储引擎不再需要进行全表扫描来获取需要的数据，取而代之的是从索引的根节点开始进行搜索。根节点的槽中存放了指向子节点的指针，存储引擎根据这些指针向下层查找。通过比较节点页的值和要查找的值可以找到合适的指针进入下层子节点，这些指针实际上定义了子节点页中值的上限和下限。最终存储引擎要么是找到对应的值，要么该记录不存在。<br>HASH 索引：只有Memory引擎支持，使用场景简单。<br>R-Tree 索引(空间索引)：空间索引是MyISAM的一种特殊索引类型，主要用于地理空间数据类型。<br>Full-text (全文索引)：全文索引也是MyISAM的一种特殊索引类型，主要用于全文索引，InnoDB从MYSQL5.6版本提供对全文索引的支持。全文索引是一种特殊类型的索引，他查找的是文本中的关键词，而不是直接比较索引中的值。全文索引和其他几类索引的匹配方式完全不一样。他有许多需要注意的细节，如停用词、词干和复数、布尔搜索等。全文索引更类似与搜索引擎做的事情，而不是简单的where条件匹配。<br>在相同的列上同时创建全文索引和基于值的B-Tree索引不会有冲突，全文索引适用于MATCH AGAINST操作，而不是普通的where条件操作</p>\n<p>MySQL高性能的索引策<br>独立的列作为索引</p>\n<p>如果查询中的列不是独立的，则mysql就不会使用索引，独立的列是指列不能是表达式的一部分，也不能是函数的参数。","more":"</p>\n<p>选择合适的索引列顺序只是用于B－Tree索引。<br>索引列的顺序意味着索引首先按照最左列进行排序，其次是第二列,将选择性最高的列放到索引最前列</p>\n<p>前缀索引和索引选择性</p>\n<p>有时候需要索引很长的字符串，这会让索引变的大且慢。一个策略是前面提到过的模拟哈希索引。通常可以索引开始的部分字符，这样可以大大节约索引空间，从而提高索引效率。但是这样也会降低索引的选择性。索引的选择性是指，不重复的索引值。<br>一般情况下，某个列前缀的选择性也是足够高的，足以满足查询性能。对于Blob，Text或者很长的VARCHAR类型的列，必须使用前缀索引，因为mysql不允许这些列的完整长度。诀窍在于要选择足够长的前缀以保证较高的选择性，同时又不能太长（以便节约空间）。前缀应该足够长，以便使得前缀索引的选择性接近于索引整个列。</p>\n<p>使用覆盖索引</p>\n<p>如果索引包含满足查询的所有数据，就称为覆盖索引。覆盖索引是一种非常强大的工具，能大大提高查询性能。<br>(1)索引项通常比记录要小，所以MySQL访问更少的数据；<br>(2)索引都按值的大小顺序存储，相对于随机访问记录，需要更少的I/O；<br>(3)大多数据引擎能更好的缓存索引。比如MyISAM只缓存索引。<br>(4)覆盖索引对于InnoDB表尤其有用，因为InnoDB使用聚集索引组织数据，如果二级索引中包含查询所需的数据，就不再需要在聚集索引中查找了。<br>覆盖索引不能是任何索引，只有B-TREE索引存储相应的值。而且不同的存储引擎实现覆盖索引的方式都不同，并不是所有存储引擎都支持覆盖索引(Memory和Falcon就不支持)。mysql只能使用B－Tree索引做覆盖索引<br>mysql不能在索引中执行like操作。因为如果是通配符开头的like查询，存储引擎就无法比较匹配。这种情况下，mysql服务器只能提取数据行的值而不是索引的值来做比较。</p>\n<p>使用索引扫描来做排序</p>\n<p>mysql有两种方式可以生成有序的结果：通过排序操作；或者通过索引顺序扫描；如果explain出来的type列的值为index，则说明mysql使用了索引扫描来做排序（不要和Extra 列的“using index”搞混淆了）。<br>扫描索引本身是很快的，因为只需从一条记录移动到紧接着的下一条记录。但如果索引不能覆盖查询所需的全部列，那就不得不每扫描一条索引记录就得回表查询一次对应的行。这基本上都是随机IO，因此按索引顺序读取数据的速度通常比顺序的全表扫描慢，尤其是在IO密集型的工作负载时。</p>\n<p>MySQL非聚簇索引&amp;&amp;二级索引&amp;&amp;辅助索引</p>\n<p>mysql中每个表都有一个聚簇索引（clustered index ），除此之外的表上的每个非聚簇索引都是二级索引，又叫辅助索引（secondary indexes）。以InnoDB来说，每个InnoDB表具有一个特殊的索引称为聚集索引。如果您的表上定义有主键，该主键索引是聚集索引。如果你不定义为您的表的主键时，MySQL取第一个唯一索引（unique）而且只含非空列（NOT NULL）作为主键，InnoDB使用它作为聚集索引。如果没有这样的列，InnoDB就自己产生一个这样的ID值，它有六个字节，而且是隐藏的，使其作为聚簇索引。</p>\n<p>from <a href=\"http://my.oschina.net/xinxingegeya/blog/423632\" target=\"_blank\" rel=\"noopener\">http://my.oschina.net/xinxingegeya/blog/423632</a></p>"},{"title":"MySQL复习笔记：连接","id":"2536","date":"2015-05-15T09:51:09.000Z","_content":"\nSQL连接\n基于 ANSI 标准的 SQL 列出了五种 JOIN 方式:\n内连接(INNER JOIN)\n全外连接(FULL OUTER JOIN)\n左外连接(LEFT OUTER JOIN)\n右外连接(RIGHT OUTER JOIN)\n交叉连接(CROSS JOIN)\n在特定的情况下, 一张表(基本表, 视图, 或连接表)可以和自身进行连接, 成为自连接(self-join)。\n\nMySQL 内连接\n\n连接产生的结果集，可以定义为首先对两张表做笛卡尔积(交叉连接)——将 A 中的每一行和 B 中的每一行组合，然后返回满足连接谓词的记录。实际上 SQL 产品会尽可能用其他方式去实现连接，笛卡尔积运算是非常没效率的。\n程序要应该特别注意连接依据的列可能包含 NULL 值，NULL 值不与任何值匹配(甚至和它本身) -- 除非连接条件中显式地使用 IS NULL 或 IS NOT NULL 等谓词。\n`select a.*,b.* from tb_person as a inner join tb_order as b; \n等价于\nselect * from tb_person a,tb_order b where a.personId=b.personId;`\n\n相等链接\nselect * from course c inner join student_course sc on c.cid = sc.cid;\nSQL 提供了一种可选的简短符号去表达相等连接，它使用 USING 关键字。\n`select * from course c inner join student_course sc using(cid);`\nUSING 结构并不仅仅是语法糖，上面查询的结果和使用显式谓词得到的查询得到的结果是不同的。特别地，在 USING 部分列出的列(column)将以只出现一次，且名称无表名修饰。\n<!--more-->\n\n交叉连接\n交叉连接(cross join)，又称笛卡尔连接(cartesian join)。笛卡尔（Descartes）乘积又叫直积。假设集合A={a,b}，集合B={0,1,2}，则两个集合的笛卡尔积为{(a,0),(a,1),(a,2),(b,0),(b,1), (b,2)}。可以扩展到多个集合的情况。把表A和表B的数据进行一个N*M的组合，即笛卡尔积。在开发过程中我们肯定是要过滤数据，所以这种很少用。\n`显式的交叉连接实例：\nselect * from course c cross join student_course sc;\n隐式的交叉连接实例：\nselect * from course,student_course;`\n交叉连接不会应用任何谓词去过滤结果表中的记录。可以用 WHERE 语句进一步过滤结果集。\n\nMySQL左外连接\n那么结果表中将包含\"左表\"(即表 A)的所有记录, 即使那些记录在\"右表\" B 没有符合连接条件的匹配。这意味着左外连接会返回左表的所有记录和右表中匹配记录的组合(如果右表中无匹配记录, 来自于右表的所有列的值设为 NULL)。如果左表的一行在右表中存在多个匹配行。那么左表的行会复制和右表匹配行一样的数量, 并进行组合生成连接结果。\n\nMySQL不支持全连接。\n一些数据库系统(如 MySQL)并不直接支持全连接，但它们可以通过左右外连接的并集(参: union)来模拟实现。\n`select * from course c left join student_course sc on c.cid = sc.cid\nunion\nselect * from course c right join student_course sc on c.cid = sc.cid\nwhere c.cid is not null;`\n\nMySQL如何执行连接查询\n\nmysql中的关联（join）一词所包含的意义比一般意义上理解的更广泛。总的来说，mysql认为任何一个查询都是一次关联——并不仅仅是一个查询需要到两个表匹配才叫关联 ，所以在mysql中，每一个查询，每一个片段（包括子查询，甚至基于单表的select）都可能是关联。\n当前mysql关联执行的策略很简单：mysql对任何关联都执行嵌套循环关联操作，即mysql先在一个表中循环取出单条数据，然后再嵌套循环到下一个表中寻找匹配的行，依次下去直到找到所有表中匹配的行为止。\n左外连接-left outer join\n`mysql> select tb1.col1,tb2.col2\n    -> from tb1 left outer join tb2 using col3\n    -> where tb1.col1 in (5,6);`\n对应的伪代码如下：\n`outer_iter = iterator over tb1 where col1 in (5,6)\nouter_row  = outer_iter.next\nwhile outer_row\n    inner_iter = iterator over tb2 where col3 = outer_row.col3\n    inner_row  = inner_iter.next\n    if inner_row\n        while inner_row\n            output [outer_row.col1, inner_row.col2]\n            inner_row = inner_iter.next\n        end\n    else\n        output [outer_row.col1,NULL]\n    end\n    outer_row = outer_row.next\nend`\n`\nselect * from tb_order as a left join tb_person as b on a.personId=b.personId and b.orderId=1;\nselect * from tb_order as a left join tb_person as b on a.personId=b.personId where b.orderId=1;`\n这两条返回数是不一样的，第一个是取右表时有b.orderID=1,下面那条是指最终的结果集是b.orderId=1\n\nfrom http://my.oschina.net/xinxingegeya/blog/385721","source":"_posts/mysql-e5-a4-8d-e4-b9-a0-e7-ac-94-e8-ae-b0-ef-bc-9a-e8-bf-9e-e6-8e-a5.md","raw":"---\ntitle: MySQL复习笔记：连接\ntags:\n  - MySQL\nid: 2536\ncategories:\n  - MySQL\ndate: 2015-05-15 17:51:09\n---\n\nSQL连接\n基于 ANSI 标准的 SQL 列出了五种 JOIN 方式:\n内连接(INNER JOIN)\n全外连接(FULL OUTER JOIN)\n左外连接(LEFT OUTER JOIN)\n右外连接(RIGHT OUTER JOIN)\n交叉连接(CROSS JOIN)\n在特定的情况下, 一张表(基本表, 视图, 或连接表)可以和自身进行连接, 成为自连接(self-join)。\n\nMySQL 内连接\n\n连接产生的结果集，可以定义为首先对两张表做笛卡尔积(交叉连接)——将 A 中的每一行和 B 中的每一行组合，然后返回满足连接谓词的记录。实际上 SQL 产品会尽可能用其他方式去实现连接，笛卡尔积运算是非常没效率的。\n程序要应该特别注意连接依据的列可能包含 NULL 值，NULL 值不与任何值匹配(甚至和它本身) -- 除非连接条件中显式地使用 IS NULL 或 IS NOT NULL 等谓词。\n`select a.*,b.* from tb_person as a inner join tb_order as b; \n等价于\nselect * from tb_person a,tb_order b where a.personId=b.personId;`\n\n相等链接\nselect * from course c inner join student_course sc on c.cid = sc.cid;\nSQL 提供了一种可选的简短符号去表达相等连接，它使用 USING 关键字。\n`select * from course c inner join student_course sc using(cid);`\nUSING 结构并不仅仅是语法糖，上面查询的结果和使用显式谓词得到的查询得到的结果是不同的。特别地，在 USING 部分列出的列(column)将以只出现一次，且名称无表名修饰。\n<!--more-->\n\n交叉连接\n交叉连接(cross join)，又称笛卡尔连接(cartesian join)。笛卡尔（Descartes）乘积又叫直积。假设集合A={a,b}，集合B={0,1,2}，则两个集合的笛卡尔积为{(a,0),(a,1),(a,2),(b,0),(b,1), (b,2)}。可以扩展到多个集合的情况。把表A和表B的数据进行一个N*M的组合，即笛卡尔积。在开发过程中我们肯定是要过滤数据，所以这种很少用。\n`显式的交叉连接实例：\nselect * from course c cross join student_course sc;\n隐式的交叉连接实例：\nselect * from course,student_course;`\n交叉连接不会应用任何谓词去过滤结果表中的记录。可以用 WHERE 语句进一步过滤结果集。\n\nMySQL左外连接\n那么结果表中将包含\"左表\"(即表 A)的所有记录, 即使那些记录在\"右表\" B 没有符合连接条件的匹配。这意味着左外连接会返回左表的所有记录和右表中匹配记录的组合(如果右表中无匹配记录, 来自于右表的所有列的值设为 NULL)。如果左表的一行在右表中存在多个匹配行。那么左表的行会复制和右表匹配行一样的数量, 并进行组合生成连接结果。\n\nMySQL不支持全连接。\n一些数据库系统(如 MySQL)并不直接支持全连接，但它们可以通过左右外连接的并集(参: union)来模拟实现。\n`select * from course c left join student_course sc on c.cid = sc.cid\nunion\nselect * from course c right join student_course sc on c.cid = sc.cid\nwhere c.cid is not null;`\n\nMySQL如何执行连接查询\n\nmysql中的关联（join）一词所包含的意义比一般意义上理解的更广泛。总的来说，mysql认为任何一个查询都是一次关联——并不仅仅是一个查询需要到两个表匹配才叫关联 ，所以在mysql中，每一个查询，每一个片段（包括子查询，甚至基于单表的select）都可能是关联。\n当前mysql关联执行的策略很简单：mysql对任何关联都执行嵌套循环关联操作，即mysql先在一个表中循环取出单条数据，然后再嵌套循环到下一个表中寻找匹配的行，依次下去直到找到所有表中匹配的行为止。\n左外连接-left outer join\n`mysql> select tb1.col1,tb2.col2\n    -> from tb1 left outer join tb2 using col3\n    -> where tb1.col1 in (5,6);`\n对应的伪代码如下：\n`outer_iter = iterator over tb1 where col1 in (5,6)\nouter_row  = outer_iter.next\nwhile outer_row\n    inner_iter = iterator over tb2 where col3 = outer_row.col3\n    inner_row  = inner_iter.next\n    if inner_row\n        while inner_row\n            output [outer_row.col1, inner_row.col2]\n            inner_row = inner_iter.next\n        end\n    else\n        output [outer_row.col1,NULL]\n    end\n    outer_row = outer_row.next\nend`\n`\nselect * from tb_order as a left join tb_person as b on a.personId=b.personId and b.orderId=1;\nselect * from tb_order as a left join tb_person as b on a.personId=b.personId where b.orderId=1;`\n这两条返回数是不一样的，第一个是取右表时有b.orderID=1,下面那条是指最终的结果集是b.orderId=1\n\nfrom http://my.oschina.net/xinxingegeya/blog/385721","slug":"mysql-e5-a4-8d-e4-b9-a0-e7-ac-94-e8-ae-b0-ef-bc-9a-e8-bf-9e-e6-8e-a5","published":1,"updated":"2018-01-13T05:07:00.445Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjccw7xbw007zaqcrwxk6m01g","content":"<p>SQL连接<br>基于 ANSI 标准的 SQL 列出了五种 JOIN 方式:<br>内连接(INNER JOIN)<br>全外连接(FULL OUTER JOIN)<br>左外连接(LEFT OUTER JOIN)<br>右外连接(RIGHT OUTER JOIN)<br>交叉连接(CROSS JOIN)<br>在特定的情况下, 一张表(基本表, 视图, 或连接表)可以和自身进行连接, 成为自连接(self-join)。</p>\n<p>MySQL 内连接</p>\n<p>连接产生的结果集，可以定义为首先对两张表做笛卡尔积(交叉连接)——将 A 中的每一行和 B 中的每一行组合，然后返回满足连接谓词的记录。实际上 SQL 产品会尽可能用其他方式去实现连接，笛卡尔积运算是非常没效率的。<br>程序要应该特别注意连接依据的列可能包含 NULL 值，NULL 值不与任何值匹配(甚至和它本身) – 除非连接条件中显式地使用 IS NULL 或 IS NOT NULL 等谓词。<br><code>select a.*,b.* from tb_person as a inner join tb_order as b; \n等价于\nselect * from tb_person a,tb_order b where a.personId=b.personId;</code></p>\n<p>相等链接<br>select <em> from course c inner join student_course sc on c.cid = sc.cid;<br>SQL 提供了一种可选的简短符号去表达相等连接，它使用 USING 关键字。<br>`select </em> from course c inner join student_course sc using(cid);`<br>USING 结构并不仅仅是语法糖，上面查询的结果和使用显式谓词得到的查询得到的结果是不同的。特别地，在 USING 部分列出的列(column)将以只出现一次，且名称无表名修饰。<br><a id=\"more\"></a></p>\n<p>交叉连接<br>交叉连接(cross join)，又称笛卡尔连接(cartesian join)。笛卡尔（Descartes）乘积又叫直积。假设集合A={a,b}，集合B={0,1,2}，则两个集合的笛卡尔积为{(a,0),(a,1),(a,2),(b,0),(b,1), (b,2)}。可以扩展到多个集合的情况。把表A和表B的数据进行一个N<em>M的组合，即笛卡尔积。在开发过程中我们肯定是要过滤数据，所以这种很少用。<br>`显式的交叉连接实例：<br>select </em> from course c cross join student_course sc;<br>隐式的交叉连接实例：<br>select * from course,student_course;`<br>交叉连接不会应用任何谓词去过滤结果表中的记录。可以用 WHERE 语句进一步过滤结果集。</p>\n<p>MySQL左外连接<br>那么结果表中将包含”左表”(即表 A)的所有记录, 即使那些记录在”右表” B 没有符合连接条件的匹配。这意味着左外连接会返回左表的所有记录和右表中匹配记录的组合(如果右表中无匹配记录, 来自于右表的所有列的值设为 NULL)。如果左表的一行在右表中存在多个匹配行。那么左表的行会复制和右表匹配行一样的数量, 并进行组合生成连接结果。</p>\n<p>MySQL不支持全连接。<br>一些数据库系统(如 MySQL)并不直接支持全连接，但它们可以通过左右外连接的并集(参: union)来模拟实现。<br><code>select * from course c left join student_course sc on c.cid = sc.cid\nunion\nselect * from course c right join student_course sc on c.cid = sc.cid\nwhere c.cid is not null;</code></p>\n<p>MySQL如何执行连接查询</p>\n<p>mysql中的关联（join）一词所包含的意义比一般意义上理解的更广泛。总的来说，mysql认为任何一个查询都是一次关联——并不仅仅是一个查询需要到两个表匹配才叫关联 ，所以在mysql中，每一个查询，每一个片段（包括子查询，甚至基于单表的select）都可能是关联。<br>当前mysql关联执行的策略很简单：mysql对任何关联都执行嵌套循环关联操作，即mysql先在一个表中循环取出单条数据，然后再嵌套循环到下一个表中寻找匹配的行，依次下去直到找到所有表中匹配的行为止。<br>左外连接-left outer join<br><code>mysql&gt; select tb1.col1,tb2.col2\n    -&gt; from tb1 left outer join tb2 using col3\n    -&gt; where tb1.col1 in (5,6);</code><br>对应的伪代码如下：<br><code>outer_iter = iterator over tb1 where col1 in (5,6)\nouter_row  = outer_iter.next\nwhile outer_row\n    inner_iter = iterator over tb2 where col3 = outer_row.col3\n    inner_row  = inner_iter.next\n    if inner_row\n        while inner_row\n            output [outer_row.col1, inner_row.col2]\n            inner_row = inner_iter.next\n        end\n    else\n        output [outer_row.col1,NULL]\n    end\n    outer_row = outer_row.next\nend</code><br><code>select * from tb_order as a left join tb_person as b on a.personId=b.personId and b.orderId=1;\nselect * from tb_order as a left join tb_person as b on a.personId=b.personId where b.orderId=1;</code><br>这两条返回数是不一样的，第一个是取右表时有b.orderID=1,下面那条是指最终的结果集是b.orderId=1</p>\n<p>from <a href=\"http://my.oschina.net/xinxingegeya/blog/385721\" target=\"_blank\" rel=\"noopener\">http://my.oschina.net/xinxingegeya/blog/385721</a></p>\n","site":{"data":{}},"excerpt":"<p>SQL连接<br>基于 ANSI 标准的 SQL 列出了五种 JOIN 方式:<br>内连接(INNER JOIN)<br>全外连接(FULL OUTER JOIN)<br>左外连接(LEFT OUTER JOIN)<br>右外连接(RIGHT OUTER JOIN)<br>交叉连接(CROSS JOIN)<br>在特定的情况下, 一张表(基本表, 视图, 或连接表)可以和自身进行连接, 成为自连接(self-join)。</p>\n<p>MySQL 内连接</p>\n<p>连接产生的结果集，可以定义为首先对两张表做笛卡尔积(交叉连接)——将 A 中的每一行和 B 中的每一行组合，然后返回满足连接谓词的记录。实际上 SQL 产品会尽可能用其他方式去实现连接，笛卡尔积运算是非常没效率的。<br>程序要应该特别注意连接依据的列可能包含 NULL 值，NULL 值不与任何值匹配(甚至和它本身) – 除非连接条件中显式地使用 IS NULL 或 IS NOT NULL 等谓词。<br><code>select a.*,b.* from tb_person as a inner join tb_order as b; \n等价于\nselect * from tb_person a,tb_order b where a.personId=b.personId;</code></p>\n<p>相等链接<br>select <em> from course c inner join student_course sc on c.cid = sc.cid;<br>SQL 提供了一种可选的简短符号去表达相等连接，它使用 USING 关键字。<br>`select </em> from course c inner join student_course sc using(cid);`<br>USING 结构并不仅仅是语法糖，上面查询的结果和使用显式谓词得到的查询得到的结果是不同的。特别地，在 USING 部分列出的列(column)将以只出现一次，且名称无表名修饰。<br>","more":"</p>\n<p>交叉连接<br>交叉连接(cross join)，又称笛卡尔连接(cartesian join)。笛卡尔（Descartes）乘积又叫直积。假设集合A={a,b}，集合B={0,1,2}，则两个集合的笛卡尔积为{(a,0),(a,1),(a,2),(b,0),(b,1), (b,2)}。可以扩展到多个集合的情况。把表A和表B的数据进行一个N<em>M的组合，即笛卡尔积。在开发过程中我们肯定是要过滤数据，所以这种很少用。<br>`显式的交叉连接实例：<br>select </em> from course c cross join student_course sc;<br>隐式的交叉连接实例：<br>select * from course,student_course;`<br>交叉连接不会应用任何谓词去过滤结果表中的记录。可以用 WHERE 语句进一步过滤结果集。</p>\n<p>MySQL左外连接<br>那么结果表中将包含”左表”(即表 A)的所有记录, 即使那些记录在”右表” B 没有符合连接条件的匹配。这意味着左外连接会返回左表的所有记录和右表中匹配记录的组合(如果右表中无匹配记录, 来自于右表的所有列的值设为 NULL)。如果左表的一行在右表中存在多个匹配行。那么左表的行会复制和右表匹配行一样的数量, 并进行组合生成连接结果。</p>\n<p>MySQL不支持全连接。<br>一些数据库系统(如 MySQL)并不直接支持全连接，但它们可以通过左右外连接的并集(参: union)来模拟实现。<br><code>select * from course c left join student_course sc on c.cid = sc.cid\nunion\nselect * from course c right join student_course sc on c.cid = sc.cid\nwhere c.cid is not null;</code></p>\n<p>MySQL如何执行连接查询</p>\n<p>mysql中的关联（join）一词所包含的意义比一般意义上理解的更广泛。总的来说，mysql认为任何一个查询都是一次关联——并不仅仅是一个查询需要到两个表匹配才叫关联 ，所以在mysql中，每一个查询，每一个片段（包括子查询，甚至基于单表的select）都可能是关联。<br>当前mysql关联执行的策略很简单：mysql对任何关联都执行嵌套循环关联操作，即mysql先在一个表中循环取出单条数据，然后再嵌套循环到下一个表中寻找匹配的行，依次下去直到找到所有表中匹配的行为止。<br>左外连接-left outer join<br><code>mysql&gt; select tb1.col1,tb2.col2\n    -&gt; from tb1 left outer join tb2 using col3\n    -&gt; where tb1.col1 in (5,6);</code><br>对应的伪代码如下：<br><code>outer_iter = iterator over tb1 where col1 in (5,6)\nouter_row  = outer_iter.next\nwhile outer_row\n    inner_iter = iterator over tb2 where col3 = outer_row.col3\n    inner_row  = inner_iter.next\n    if inner_row\n        while inner_row\n            output [outer_row.col1, inner_row.col2]\n            inner_row = inner_iter.next\n        end\n    else\n        output [outer_row.col1,NULL]\n    end\n    outer_row = outer_row.next\nend</code><br><code>select * from tb_order as a left join tb_person as b on a.personId=b.personId and b.orderId=1;\nselect * from tb_order as a left join tb_person as b on a.personId=b.personId where b.orderId=1;</code><br>这两条返回数是不一样的，第一个是取右表时有b.orderID=1,下面那条是指最终的结果集是b.orderId=1</p>\n<p>from <a href=\"http://my.oschina.net/xinxingegeya/blog/385721\" target=\"_blank\" rel=\"noopener\">http://my.oschina.net/xinxingegeya/blog/385721</a></p>"},{"title":"MySQL 默认字符集设置","id":"1640","date":"2014-04-07T10:52:55.000Z","_content":"\n在 Fedora 安装完 MySQL 后编字符编码可能是非 utf8的，这样以来像 Review Board 没设置默认的就会按非 utf8 默认字符集来安装，就不能很好的显示中文，所以安装完 MySQL 后要进行相应的编码设置。\n\n命令行模式进入MySQL，敲入status命令:\nServer characterset:\tlatin1\nDb     characterset:\tlatin1\nClient characterset:\tutf8\nConn.  characterset:\tutf8<!--more-->\n\n有两个latin1 ，我们要把它干掉：\n停止\nMySQL Server\n打开\n/etc/my.cnf.d/ 有的是（/etc/mysql/my.cnf）\n设置如下：\n`[client]\ndefault-character-set = utf8\n[mysqld]\ncharacter_set_server = utf8 \ninit_connect='SET NAMES utf8'`\n保存后退出\n如果启动失败，用 character_set_server = utf8 这个试试\n\n重启mysql再status\n`Server characterset:\tutf8\nDb     characterset:\tutf8\nClient characterset:\tutf8\nConn.  characterset:\tutf8`\nok","source":"_posts/mysql-e9-bb-98-e8-ae-a4-e5-ad-97-e7-ac-a6-e9-9b-86-e8-ae-be-e7-bd-ae.md","raw":"---\ntitle: MySQL 默认字符集设置\ntags:\n  - MySQL\nid: 1640\ncategories:\n  - MySQL\ndate: 2014-04-07 18:52:55\n---\n\n在 Fedora 安装完 MySQL 后编字符编码可能是非 utf8的，这样以来像 Review Board 没设置默认的就会按非 utf8 默认字符集来安装，就不能很好的显示中文，所以安装完 MySQL 后要进行相应的编码设置。\n\n命令行模式进入MySQL，敲入status命令:\nServer characterset:\tlatin1\nDb     characterset:\tlatin1\nClient characterset:\tutf8\nConn.  characterset:\tutf8<!--more-->\n\n有两个latin1 ，我们要把它干掉：\n停止\nMySQL Server\n打开\n/etc/my.cnf.d/ 有的是（/etc/mysql/my.cnf）\n设置如下：\n`[client]\ndefault-character-set = utf8\n[mysqld]\ncharacter_set_server = utf8 \ninit_connect='SET NAMES utf8'`\n保存后退出\n如果启动失败，用 character_set_server = utf8 这个试试\n\n重启mysql再status\n`Server characterset:\tutf8\nDb     characterset:\tutf8\nClient characterset:\tutf8\nConn.  characterset:\tutf8`\nok","slug":"mysql-e9-bb-98-e8-ae-a4-e5-ad-97-e7-ac-a6-e9-9b-86-e8-ae-be-e7-bd-ae","published":1,"updated":"2018-01-13T05:07:00.464Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjccw7xby0082aqcrl2dhkpbe","content":"<p>在 Fedora 安装完 MySQL 后编字符编码可能是非 utf8的，这样以来像 Review Board 没设置默认的就会按非 utf8 默认字符集来安装，就不能很好的显示中文，所以安装完 MySQL 后要进行相应的编码设置。</p>\n<p>命令行模式进入MySQL，敲入status命令:<br>Server characterset:    latin1<br>Db     characterset:    latin1<br>Client characterset:    utf8<br>Conn.  characterset:    utf8<a id=\"more\"></a></p>\n<p>有两个latin1 ，我们要把它干掉：<br>停止<br>MySQL Server<br>打开<br>/etc/my.cnf.d/ 有的是（/etc/mysql/my.cnf）<br>设置如下：<br><code>[client]\ndefault-character-set = utf8\n[mysqld]\ncharacter_set_server = utf8 \ninit_connect=&#39;SET NAMES utf8&#39;</code><br>保存后退出<br>如果启动失败，用 character_set_server = utf8 这个试试</p>\n<p>重启mysql再status<br><code>Server characterset:    utf8\nDb     characterset:    utf8\nClient characterset:    utf8\nConn.  characterset:    utf8</code><br>ok</p>\n","site":{"data":{}},"excerpt":"<p>在 Fedora 安装完 MySQL 后编字符编码可能是非 utf8的，这样以来像 Review Board 没设置默认的就会按非 utf8 默认字符集来安装，就不能很好的显示中文，所以安装完 MySQL 后要进行相应的编码设置。</p>\n<p>命令行模式进入MySQL，敲入status命令:<br>Server characterset:    latin1<br>Db     characterset:    latin1<br>Client characterset:    utf8<br>Conn.  characterset:    utf8","more":"</p>\n<p>有两个latin1 ，我们要把它干掉：<br>停止<br>MySQL Server<br>打开<br>/etc/my.cnf.d/ 有的是（/etc/mysql/my.cnf）<br>设置如下：<br><code>[client]\ndefault-character-set = utf8\n[mysqld]\ncharacter_set_server = utf8 \ninit_connect=&#39;SET NAMES utf8&#39;</code><br>保存后退出<br>如果启动失败，用 character_set_server = utf8 这个试试</p>\n<p>重启mysql再status<br><code>Server characterset:    utf8\nDb     characterset:    utf8\nClient characterset:    utf8\nConn.  characterset:    utf8</code><br>ok</p>"},{"title":"MySQL字段类型详解","id":"383","date":"2011-11-09T05:35:38.000Z","_content":"\nMySQL支持大量的列类型，它可以被分为3类：数字类型、日期和时间类型以及字符串(字符)类型。本节首先给出可用类型的一个概述，并且总结每个列类型的存储需求，然后提供每个类中的类型性质的更详细的描述。\n\n概述有意简化，更详细的说明应该考虑到有关特定列类型的附加信息，例如你能为其指定值的允许格式。由MySQL支持的列类型列在下面。下列代码字母用于描述中：M指出最大的显示尺寸。最大的合法的显示尺寸是 255 。D适用于浮点类型并且指出跟随在十进制小数点后的数码的数量。最大可能的值是30，但是应该不大于M-2。方括号(“[”和“]”)指出可选的类型修饰符的部分。注意，如果你指定一个了为ZEROFILL，MySQL将为该列自动地增加UNSIGNED属性。\n\nTINYINT[(M)] [UNSIGNED] [ZEROFILL]\n\n一个很小的整数。有符号的范围是-128到127，无符号的范围是0到255。\n\nSMALLINT[(M)] [UNSIGNED] [ZEROFILL]\n\n一个小整数。有符号的范围是-32768到32767，无符号的范围是0到65535。\n\nMEDIUMINT[(M)] [UNSIGNED] [ZEROFILL]\n\n一个中等大小整数。有符号的范围是-8388608到8388607，无符号的范围是0到16777215。\n\nINT[(M)] [UNSIGNED] [ZEROFILL]<!--more-->\n\n一个正常大小整数。有符号的范围是-2147483648到2147483647，无符号的范围是0到4294967295。\n\nINTEGER[(M)] [UNSIGNED] [ZEROFILL]\n\n这是INT的一个同义词。\n\nBIGINT[(M)] [UNSIGNED] [ZEROFILL]\n\n一个大整数。有符号的范围是-9223372036854775808到9223372036854775807，无符号的范围是0到\n\n18446744073709551615。注意，所有算术运算用有符号的BIGINT或DOUBLE值完成，因此你不应该使用大于9223372036854775807(63位)的有符号大整数，除了位函数!注意，当两个参数是INTEGER值时，-、+和*将使用BIGINT运算!这意味着如果你乘2个大整数(或来自于返回整数的函数)，如果结果大于9223372036854775807，你可以得到意外的结果。一个浮点数字，不能是无符号的，对一个单精度浮点数，其精度可以是\n\nFLOAT[(M,D)] [ZEROFILL]\n\n一个小(单精密)浮点数字。不能无符号。允许的值是-3.402823466E+38到-1.175494351E-38，0 和1.175494351E-38到3.402823466E+38。M是显示宽度而D是小数的位数。没有参数的FLOAT或有\n\nDOUBLE[(M,D)] [ZEROFILL]\n\n一个正常大小(双精密)浮点数字。不能无符号。允许的值是-1.7976931348623157E+308到-2.2250738585072014E-308、 0和2.2250738585072014E-308到1.7976931348623157E+308。M是显示宽度而D是小数位数。没有一个参数的 DOUBLE或FLOAT(X)(25 &lt; = X &lt; = 53)代表一个双精密浮点数字。\n\nDOUBLE PRECISION[(M,D)] [ZEROFILL]\n\nREAL[(M,D)] [ZEROFILL]\n\n这些是DOUBLE同义词。\n\nDECIMAL[(M[,D])] [ZEROFILL]\n\n一个未压缩(unpack)的浮点数字。不能无符号。行为如同一个CHAR列：“未压缩”意味着数字作为一个字符串被存储，值的每一位使用一个字符。小数点，并且对于负数，“-”符号不在M中计算。如果D是0，值将没有小数点或小数部分。DECIMAL值的最大范围与DOUBLE相同，但是对一个给定的 DECIMAL列，实际的范围可以通过M和D的选择被限制。如果D被省略，它被设置为0。如果M被省掉，它被设置为10。注意，在MySQL3.22 里，M参数包括符号和小数点。\n\nNUMERIC(M,D) [ZEROFILL]\n\n这是DECIMAL的一个同义词。\n\nDATE\n\n一个日期。支持的范围是'1000-01-01'到'9999-12-31'。MySQL以'YYYY-MM-DD'格式来显示DATE值，但是允许你使用字符串或数字把值赋给DATE列。\n\nDATETIME\n\n一个日期和时间组合。支持的范围是'1000-01-01 00:00:00'到'9999-12-31 23:59:59'。MySQL以'YYYY-MM-DD HH:MM:SS'格式来显示DATETIME值，但是允许你使用字符串或数字把值赋给DATETIME的列。\n\nTIMESTAMP[(M)]\n\n一个时间戳记。范围是'1970-01-01 00:00:00'到2037年的某时。MySQL以YYYYMMDDHHMMSS、YYMMDDHHMMSS、YYYYMMDD或YYMMDD 格式来显示TIMESTAMP值，取决于是否M是14(或省略)、12、8或6，但是允许你使用字符串或数字把值赋给TIMESTAMP列。一个 TIMESTAMP列对于记录一个INSERT或UPDATE操作的日期和时间是有用的，因为如果你不自己给它赋值，它自动地被设置为最近操作的日期和时间。你以可以通过赋给它一个NULL值设置它为当前的日期和时间。\n\nTIME\n\n一个时间。范围是'-838:59:59'到'838:59:59'。MySQL以'HH:MM:SS'格式来显示TIME值，但是允许你使用字符串或数字把值赋给TIME列。\n\nYEAR[(2|4)]\n\n一个2或4位数字格式的年(缺省是4位)。允许的值是1901到2155，和0000(4位年格式)，如果你使用2位，1970-2069( 70-69)。MySQL以YYYY格式来显示YEAR值，但是允许你把使用字符串或数字值赋给YEAR列。(YEAR类型在MySQL3.22中是新类型。)\n\nCHAR(M) [BINARY]\n\n一个定长字符串，当存储时，总是是用空格填满右边到指定的长度。M的范围是1 ～ 255个字符。当值被检索时，空格尾部被删除。CHAR值根据缺省字符集以大小写不区分的方式排序和比较，除非给出BINARY关键词。NATIONAL CHAR(短形式NCHAR)是ANSI SQL的方式来定义CHAR列应该使用缺省字符集。这是MySQL的缺省。CHAR是CHARACTER的一个缩写。\n\n[NATIONAL] VARCHAR(M) [BINARY]\n\n一个变长字符串。注意：当值被存储时，尾部的空格被删除(这不同于ANSI SQL规范)。M的范围是1 ～ 255个字符。 VARCHAR值根据缺省字符集以大小写不区分的方式排序和比较，除非给出BINARY关键词值。 VARCHAR是CHARACTER VARYING一个缩写。\n\nTINYBLOB\n\nTINYTEXT\n\n一个BLOB或TEXT列，最大长度为255(2^8-1)个字符。\n\nBLOB\n\nTEXT\n\n一个BLOB或TEXT列，最大长度为65535(2^16-1)个字符。\n\nMEDIUMBLOB\n\nMEDIUMTEXT\n\n一个BLOB或TEXT列，最大长度为16777215(2^24-1)个字符。\n\nLONGBLOB\n\nLONGTEXT\n\n一个BLOB或TEXT列，最大长度为4294967295(2^32-1)个字符。\n\nENUM('value1','value2',...)\n\n枚举。一个仅有一个值的字符串对象，这个值式选自与值列表'value1'、'value2', ...,或NULL。一个ENUM最多能有65535不同的值。\n\nSET('value1','value2',...)\n\n一个集合。能有零个或多个值的一个字符串对象，其中每一个必须从值列表'value1', 'value2', ...选出。一个SET最多能有64个成员。","source":"_posts/mysql-e5-ad-97-e6-ae-b5-e7-b1-bb-e5-9e-8b-e8-af-a6-e8-a7-a3.md","raw":"---\ntitle: MySQL字段类型详解\ntags:\n  - MySQL\n  - phpmyadmin\nid: 383\ncategories:\n  - PHP\ndate: 2011-11-09 13:35:38\n---\n\nMySQL支持大量的列类型，它可以被分为3类：数字类型、日期和时间类型以及字符串(字符)类型。本节首先给出可用类型的一个概述，并且总结每个列类型的存储需求，然后提供每个类中的类型性质的更详细的描述。\n\n概述有意简化，更详细的说明应该考虑到有关特定列类型的附加信息，例如你能为其指定值的允许格式。由MySQL支持的列类型列在下面。下列代码字母用于描述中：M指出最大的显示尺寸。最大的合法的显示尺寸是 255 。D适用于浮点类型并且指出跟随在十进制小数点后的数码的数量。最大可能的值是30，但是应该不大于M-2。方括号(“[”和“]”)指出可选的类型修饰符的部分。注意，如果你指定一个了为ZEROFILL，MySQL将为该列自动地增加UNSIGNED属性。\n\nTINYINT[(M)] [UNSIGNED] [ZEROFILL]\n\n一个很小的整数。有符号的范围是-128到127，无符号的范围是0到255。\n\nSMALLINT[(M)] [UNSIGNED] [ZEROFILL]\n\n一个小整数。有符号的范围是-32768到32767，无符号的范围是0到65535。\n\nMEDIUMINT[(M)] [UNSIGNED] [ZEROFILL]\n\n一个中等大小整数。有符号的范围是-8388608到8388607，无符号的范围是0到16777215。\n\nINT[(M)] [UNSIGNED] [ZEROFILL]<!--more-->\n\n一个正常大小整数。有符号的范围是-2147483648到2147483647，无符号的范围是0到4294967295。\n\nINTEGER[(M)] [UNSIGNED] [ZEROFILL]\n\n这是INT的一个同义词。\n\nBIGINT[(M)] [UNSIGNED] [ZEROFILL]\n\n一个大整数。有符号的范围是-9223372036854775808到9223372036854775807，无符号的范围是0到\n\n18446744073709551615。注意，所有算术运算用有符号的BIGINT或DOUBLE值完成，因此你不应该使用大于9223372036854775807(63位)的有符号大整数，除了位函数!注意，当两个参数是INTEGER值时，-、+和*将使用BIGINT运算!这意味着如果你乘2个大整数(或来自于返回整数的函数)，如果结果大于9223372036854775807，你可以得到意外的结果。一个浮点数字，不能是无符号的，对一个单精度浮点数，其精度可以是\n\nFLOAT[(M,D)] [ZEROFILL]\n\n一个小(单精密)浮点数字。不能无符号。允许的值是-3.402823466E+38到-1.175494351E-38，0 和1.175494351E-38到3.402823466E+38。M是显示宽度而D是小数的位数。没有参数的FLOAT或有\n\nDOUBLE[(M,D)] [ZEROFILL]\n\n一个正常大小(双精密)浮点数字。不能无符号。允许的值是-1.7976931348623157E+308到-2.2250738585072014E-308、 0和2.2250738585072014E-308到1.7976931348623157E+308。M是显示宽度而D是小数位数。没有一个参数的 DOUBLE或FLOAT(X)(25 &lt; = X &lt; = 53)代表一个双精密浮点数字。\n\nDOUBLE PRECISION[(M,D)] [ZEROFILL]\n\nREAL[(M,D)] [ZEROFILL]\n\n这些是DOUBLE同义词。\n\nDECIMAL[(M[,D])] [ZEROFILL]\n\n一个未压缩(unpack)的浮点数字。不能无符号。行为如同一个CHAR列：“未压缩”意味着数字作为一个字符串被存储，值的每一位使用一个字符。小数点，并且对于负数，“-”符号不在M中计算。如果D是0，值将没有小数点或小数部分。DECIMAL值的最大范围与DOUBLE相同，但是对一个给定的 DECIMAL列，实际的范围可以通过M和D的选择被限制。如果D被省略，它被设置为0。如果M被省掉，它被设置为10。注意，在MySQL3.22 里，M参数包括符号和小数点。\n\nNUMERIC(M,D) [ZEROFILL]\n\n这是DECIMAL的一个同义词。\n\nDATE\n\n一个日期。支持的范围是'1000-01-01'到'9999-12-31'。MySQL以'YYYY-MM-DD'格式来显示DATE值，但是允许你使用字符串或数字把值赋给DATE列。\n\nDATETIME\n\n一个日期和时间组合。支持的范围是'1000-01-01 00:00:00'到'9999-12-31 23:59:59'。MySQL以'YYYY-MM-DD HH:MM:SS'格式来显示DATETIME值，但是允许你使用字符串或数字把值赋给DATETIME的列。\n\nTIMESTAMP[(M)]\n\n一个时间戳记。范围是'1970-01-01 00:00:00'到2037年的某时。MySQL以YYYYMMDDHHMMSS、YYMMDDHHMMSS、YYYYMMDD或YYMMDD 格式来显示TIMESTAMP值，取决于是否M是14(或省略)、12、8或6，但是允许你使用字符串或数字把值赋给TIMESTAMP列。一个 TIMESTAMP列对于记录一个INSERT或UPDATE操作的日期和时间是有用的，因为如果你不自己给它赋值，它自动地被设置为最近操作的日期和时间。你以可以通过赋给它一个NULL值设置它为当前的日期和时间。\n\nTIME\n\n一个时间。范围是'-838:59:59'到'838:59:59'。MySQL以'HH:MM:SS'格式来显示TIME值，但是允许你使用字符串或数字把值赋给TIME列。\n\nYEAR[(2|4)]\n\n一个2或4位数字格式的年(缺省是4位)。允许的值是1901到2155，和0000(4位年格式)，如果你使用2位，1970-2069( 70-69)。MySQL以YYYY格式来显示YEAR值，但是允许你把使用字符串或数字值赋给YEAR列。(YEAR类型在MySQL3.22中是新类型。)\n\nCHAR(M) [BINARY]\n\n一个定长字符串，当存储时，总是是用空格填满右边到指定的长度。M的范围是1 ～ 255个字符。当值被检索时，空格尾部被删除。CHAR值根据缺省字符集以大小写不区分的方式排序和比较，除非给出BINARY关键词。NATIONAL CHAR(短形式NCHAR)是ANSI SQL的方式来定义CHAR列应该使用缺省字符集。这是MySQL的缺省。CHAR是CHARACTER的一个缩写。\n\n[NATIONAL] VARCHAR(M) [BINARY]\n\n一个变长字符串。注意：当值被存储时，尾部的空格被删除(这不同于ANSI SQL规范)。M的范围是1 ～ 255个字符。 VARCHAR值根据缺省字符集以大小写不区分的方式排序和比较，除非给出BINARY关键词值。 VARCHAR是CHARACTER VARYING一个缩写。\n\nTINYBLOB\n\nTINYTEXT\n\n一个BLOB或TEXT列，最大长度为255(2^8-1)个字符。\n\nBLOB\n\nTEXT\n\n一个BLOB或TEXT列，最大长度为65535(2^16-1)个字符。\n\nMEDIUMBLOB\n\nMEDIUMTEXT\n\n一个BLOB或TEXT列，最大长度为16777215(2^24-1)个字符。\n\nLONGBLOB\n\nLONGTEXT\n\n一个BLOB或TEXT列，最大长度为4294967295(2^32-1)个字符。\n\nENUM('value1','value2',...)\n\n枚举。一个仅有一个值的字符串对象，这个值式选自与值列表'value1'、'value2', ...,或NULL。一个ENUM最多能有65535不同的值。\n\nSET('value1','value2',...)\n\n一个集合。能有零个或多个值的一个字符串对象，其中每一个必须从值列表'value1', 'value2', ...选出。一个SET最多能有64个成员。","slug":"mysql-e5-ad-97-e6-ae-b5-e7-b1-bb-e5-9e-8b-e8-af-a6-e8-a7-a3","published":1,"updated":"2018-01-13T05:07:00.468Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjccw7xc00086aqcrb9i0vtad","content":"<p>MySQL支持大量的列类型，它可以被分为3类：数字类型、日期和时间类型以及字符串(字符)类型。本节首先给出可用类型的一个概述，并且总结每个列类型的存储需求，然后提供每个类中的类型性质的更详细的描述。</p>\n<p>概述有意简化，更详细的说明应该考虑到有关特定列类型的附加信息，例如你能为其指定值的允许格式。由MySQL支持的列类型列在下面。下列代码字母用于描述中：M指出最大的显示尺寸。最大的合法的显示尺寸是 255 。D适用于浮点类型并且指出跟随在十进制小数点后的数码的数量。最大可能的值是30，但是应该不大于M-2。方括号(“[”和“]”)指出可选的类型修饰符的部分。注意，如果你指定一个了为ZEROFILL，MySQL将为该列自动地增加UNSIGNED属性。</p>\n<p>TINYINT[(M)] [UNSIGNED] [ZEROFILL]</p>\n<p>一个很小的整数。有符号的范围是-128到127，无符号的范围是0到255。</p>\n<p>SMALLINT[(M)] [UNSIGNED] [ZEROFILL]</p>\n<p>一个小整数。有符号的范围是-32768到32767，无符号的范围是0到65535。</p>\n<p>MEDIUMINT[(M)] [UNSIGNED] [ZEROFILL]</p>\n<p>一个中等大小整数。有符号的范围是-8388608到8388607，无符号的范围是0到16777215。</p>\n<p>INT[(M)] [UNSIGNED] [ZEROFILL]<a id=\"more\"></a></p>\n<p>一个正常大小整数。有符号的范围是-2147483648到2147483647，无符号的范围是0到4294967295。</p>\n<p>INTEGER[(M)] [UNSIGNED] [ZEROFILL]</p>\n<p>这是INT的一个同义词。</p>\n<p>BIGINT[(M)] [UNSIGNED] [ZEROFILL]</p>\n<p>一个大整数。有符号的范围是-9223372036854775808到9223372036854775807，无符号的范围是0到</p>\n<p>18446744073709551615。注意，所有算术运算用有符号的BIGINT或DOUBLE值完成，因此你不应该使用大于9223372036854775807(63位)的有符号大整数，除了位函数!注意，当两个参数是INTEGER值时，-、+和*将使用BIGINT运算!这意味着如果你乘2个大整数(或来自于返回整数的函数)，如果结果大于9223372036854775807，你可以得到意外的结果。一个浮点数字，不能是无符号的，对一个单精度浮点数，其精度可以是</p>\n<p>FLOAT[(M,D)] [ZEROFILL]</p>\n<p>一个小(单精密)浮点数字。不能无符号。允许的值是-3.402823466E+38到-1.175494351E-38，0 和1.175494351E-38到3.402823466E+38。M是显示宽度而D是小数的位数。没有参数的FLOAT或有</p>\n<p>DOUBLE[(M,D)] [ZEROFILL]</p>\n<p>一个正常大小(双精密)浮点数字。不能无符号。允许的值是-1.7976931348623157E+308到-2.2250738585072014E-308、 0和2.2250738585072014E-308到1.7976931348623157E+308。M是显示宽度而D是小数位数。没有一个参数的 DOUBLE或FLOAT(X)(25 &lt; = X &lt; = 53)代表一个双精密浮点数字。</p>\n<p>DOUBLE PRECISION[(M,D)] [ZEROFILL]</p>\n<p>REAL[(M,D)] [ZEROFILL]</p>\n<p>这些是DOUBLE同义词。</p>\n<p>DECIMAL[(M[,D])] [ZEROFILL]</p>\n<p>一个未压缩(unpack)的浮点数字。不能无符号。行为如同一个CHAR列：“未压缩”意味着数字作为一个字符串被存储，值的每一位使用一个字符。小数点，并且对于负数，“-”符号不在M中计算。如果D是0，值将没有小数点或小数部分。DECIMAL值的最大范围与DOUBLE相同，但是对一个给定的 DECIMAL列，实际的范围可以通过M和D的选择被限制。如果D被省略，它被设置为0。如果M被省掉，它被设置为10。注意，在MySQL3.22 里，M参数包括符号和小数点。</p>\n<p>NUMERIC(M,D) [ZEROFILL]</p>\n<p>这是DECIMAL的一个同义词。</p>\n<p>DATE</p>\n<p>一个日期。支持的范围是’1000-01-01’到’9999-12-31’。MySQL以’YYYY-MM-DD’格式来显示DATE值，但是允许你使用字符串或数字把值赋给DATE列。</p>\n<p>DATETIME</p>\n<p>一个日期和时间组合。支持的范围是’1000-01-01 00:00:00’到’9999-12-31 23:59:59’。MySQL以’YYYY-MM-DD HH:MM:SS’格式来显示DATETIME值，但是允许你使用字符串或数字把值赋给DATETIME的列。</p>\n<p>TIMESTAMP[(M)]</p>\n<p>一个时间戳记。范围是’1970-01-01 00:00:00’到2037年的某时。MySQL以YYYYMMDDHHMMSS、YYMMDDHHMMSS、YYYYMMDD或YYMMDD 格式来显示TIMESTAMP值，取决于是否M是14(或省略)、12、8或6，但是允许你使用字符串或数字把值赋给TIMESTAMP列。一个 TIMESTAMP列对于记录一个INSERT或UPDATE操作的日期和时间是有用的，因为如果你不自己给它赋值，它自动地被设置为最近操作的日期和时间。你以可以通过赋给它一个NULL值设置它为当前的日期和时间。</p>\n<p>TIME</p>\n<p>一个时间。范围是’-838:59:59’到’838:59:59’。MySQL以’HH:MM:SS’格式来显示TIME值，但是允许你使用字符串或数字把值赋给TIME列。</p>\n<p>YEAR[(2|4)]</p>\n<p>一个2或4位数字格式的年(缺省是4位)。允许的值是1901到2155，和0000(4位年格式)，如果你使用2位，1970-2069( 70-69)。MySQL以YYYY格式来显示YEAR值，但是允许你把使用字符串或数字值赋给YEAR列。(YEAR类型在MySQL3.22中是新类型。)</p>\n<p>CHAR(M) [BINARY]</p>\n<p>一个定长字符串，当存储时，总是是用空格填满右边到指定的长度。M的范围是1 ～ 255个字符。当值被检索时，空格尾部被删除。CHAR值根据缺省字符集以大小写不区分的方式排序和比较，除非给出BINARY关键词。NATIONAL CHAR(短形式NCHAR)是ANSI SQL的方式来定义CHAR列应该使用缺省字符集。这是MySQL的缺省。CHAR是CHARACTER的一个缩写。</p>\n<p>[NATIONAL] VARCHAR(M) [BINARY]</p>\n<p>一个变长字符串。注意：当值被存储时，尾部的空格被删除(这不同于ANSI SQL规范)。M的范围是1 ～ 255个字符。 VARCHAR值根据缺省字符集以大小写不区分的方式排序和比较，除非给出BINARY关键词值。 VARCHAR是CHARACTER VARYING一个缩写。</p>\n<p>TINYBLOB</p>\n<p>TINYTEXT</p>\n<p>一个BLOB或TEXT列，最大长度为255(2^8-1)个字符。</p>\n<p>BLOB</p>\n<p>TEXT</p>\n<p>一个BLOB或TEXT列，最大长度为65535(2^16-1)个字符。</p>\n<p>MEDIUMBLOB</p>\n<p>MEDIUMTEXT</p>\n<p>一个BLOB或TEXT列，最大长度为16777215(2^24-1)个字符。</p>\n<p>LONGBLOB</p>\n<p>LONGTEXT</p>\n<p>一个BLOB或TEXT列，最大长度为4294967295(2^32-1)个字符。</p>\n<p>ENUM(‘value1’,’value2’,…)</p>\n<p>枚举。一个仅有一个值的字符串对象，这个值式选自与值列表’value1’、’value2’, …,或NULL。一个ENUM最多能有65535不同的值。</p>\n<p>SET(‘value1’,’value2’,…)</p>\n<p>一个集合。能有零个或多个值的一个字符串对象，其中每一个必须从值列表’value1’, ‘value2’, …选出。一个SET最多能有64个成员。</p>\n","site":{"data":{}},"excerpt":"<p>MySQL支持大量的列类型，它可以被分为3类：数字类型、日期和时间类型以及字符串(字符)类型。本节首先给出可用类型的一个概述，并且总结每个列类型的存储需求，然后提供每个类中的类型性质的更详细的描述。</p>\n<p>概述有意简化，更详细的说明应该考虑到有关特定列类型的附加信息，例如你能为其指定值的允许格式。由MySQL支持的列类型列在下面。下列代码字母用于描述中：M指出最大的显示尺寸。最大的合法的显示尺寸是 255 。D适用于浮点类型并且指出跟随在十进制小数点后的数码的数量。最大可能的值是30，但是应该不大于M-2。方括号(“[”和“]”)指出可选的类型修饰符的部分。注意，如果你指定一个了为ZEROFILL，MySQL将为该列自动地增加UNSIGNED属性。</p>\n<p>TINYINT[(M)] [UNSIGNED] [ZEROFILL]</p>\n<p>一个很小的整数。有符号的范围是-128到127，无符号的范围是0到255。</p>\n<p>SMALLINT[(M)] [UNSIGNED] [ZEROFILL]</p>\n<p>一个小整数。有符号的范围是-32768到32767，无符号的范围是0到65535。</p>\n<p>MEDIUMINT[(M)] [UNSIGNED] [ZEROFILL]</p>\n<p>一个中等大小整数。有符号的范围是-8388608到8388607，无符号的范围是0到16777215。</p>\n<p>INT[(M)] [UNSIGNED] [ZEROFILL]","more":"</p>\n<p>一个正常大小整数。有符号的范围是-2147483648到2147483647，无符号的范围是0到4294967295。</p>\n<p>INTEGER[(M)] [UNSIGNED] [ZEROFILL]</p>\n<p>这是INT的一个同义词。</p>\n<p>BIGINT[(M)] [UNSIGNED] [ZEROFILL]</p>\n<p>一个大整数。有符号的范围是-9223372036854775808到9223372036854775807，无符号的范围是0到</p>\n<p>18446744073709551615。注意，所有算术运算用有符号的BIGINT或DOUBLE值完成，因此你不应该使用大于9223372036854775807(63位)的有符号大整数，除了位函数!注意，当两个参数是INTEGER值时，-、+和*将使用BIGINT运算!这意味着如果你乘2个大整数(或来自于返回整数的函数)，如果结果大于9223372036854775807，你可以得到意外的结果。一个浮点数字，不能是无符号的，对一个单精度浮点数，其精度可以是</p>\n<p>FLOAT[(M,D)] [ZEROFILL]</p>\n<p>一个小(单精密)浮点数字。不能无符号。允许的值是-3.402823466E+38到-1.175494351E-38，0 和1.175494351E-38到3.402823466E+38。M是显示宽度而D是小数的位数。没有参数的FLOAT或有</p>\n<p>DOUBLE[(M,D)] [ZEROFILL]</p>\n<p>一个正常大小(双精密)浮点数字。不能无符号。允许的值是-1.7976931348623157E+308到-2.2250738585072014E-308、 0和2.2250738585072014E-308到1.7976931348623157E+308。M是显示宽度而D是小数位数。没有一个参数的 DOUBLE或FLOAT(X)(25 &lt; = X &lt; = 53)代表一个双精密浮点数字。</p>\n<p>DOUBLE PRECISION[(M,D)] [ZEROFILL]</p>\n<p>REAL[(M,D)] [ZEROFILL]</p>\n<p>这些是DOUBLE同义词。</p>\n<p>DECIMAL[(M[,D])] [ZEROFILL]</p>\n<p>一个未压缩(unpack)的浮点数字。不能无符号。行为如同一个CHAR列：“未压缩”意味着数字作为一个字符串被存储，值的每一位使用一个字符。小数点，并且对于负数，“-”符号不在M中计算。如果D是0，值将没有小数点或小数部分。DECIMAL值的最大范围与DOUBLE相同，但是对一个给定的 DECIMAL列，实际的范围可以通过M和D的选择被限制。如果D被省略，它被设置为0。如果M被省掉，它被设置为10。注意，在MySQL3.22 里，M参数包括符号和小数点。</p>\n<p>NUMERIC(M,D) [ZEROFILL]</p>\n<p>这是DECIMAL的一个同义词。</p>\n<p>DATE</p>\n<p>一个日期。支持的范围是’1000-01-01’到’9999-12-31’。MySQL以’YYYY-MM-DD’格式来显示DATE值，但是允许你使用字符串或数字把值赋给DATE列。</p>\n<p>DATETIME</p>\n<p>一个日期和时间组合。支持的范围是’1000-01-01 00:00:00’到’9999-12-31 23:59:59’。MySQL以’YYYY-MM-DD HH:MM:SS’格式来显示DATETIME值，但是允许你使用字符串或数字把值赋给DATETIME的列。</p>\n<p>TIMESTAMP[(M)]</p>\n<p>一个时间戳记。范围是’1970-01-01 00:00:00’到2037年的某时。MySQL以YYYYMMDDHHMMSS、YYMMDDHHMMSS、YYYYMMDD或YYMMDD 格式来显示TIMESTAMP值，取决于是否M是14(或省略)、12、8或6，但是允许你使用字符串或数字把值赋给TIMESTAMP列。一个 TIMESTAMP列对于记录一个INSERT或UPDATE操作的日期和时间是有用的，因为如果你不自己给它赋值，它自动地被设置为最近操作的日期和时间。你以可以通过赋给它一个NULL值设置它为当前的日期和时间。</p>\n<p>TIME</p>\n<p>一个时间。范围是’-838:59:59’到’838:59:59’。MySQL以’HH:MM:SS’格式来显示TIME值，但是允许你使用字符串或数字把值赋给TIME列。</p>\n<p>YEAR[(2|4)]</p>\n<p>一个2或4位数字格式的年(缺省是4位)。允许的值是1901到2155，和0000(4位年格式)，如果你使用2位，1970-2069( 70-69)。MySQL以YYYY格式来显示YEAR值，但是允许你把使用字符串或数字值赋给YEAR列。(YEAR类型在MySQL3.22中是新类型。)</p>\n<p>CHAR(M) [BINARY]</p>\n<p>一个定长字符串，当存储时，总是是用空格填满右边到指定的长度。M的范围是1 ～ 255个字符。当值被检索时，空格尾部被删除。CHAR值根据缺省字符集以大小写不区分的方式排序和比较，除非给出BINARY关键词。NATIONAL CHAR(短形式NCHAR)是ANSI SQL的方式来定义CHAR列应该使用缺省字符集。这是MySQL的缺省。CHAR是CHARACTER的一个缩写。</p>\n<p>[NATIONAL] VARCHAR(M) [BINARY]</p>\n<p>一个变长字符串。注意：当值被存储时，尾部的空格被删除(这不同于ANSI SQL规范)。M的范围是1 ～ 255个字符。 VARCHAR值根据缺省字符集以大小写不区分的方式排序和比较，除非给出BINARY关键词值。 VARCHAR是CHARACTER VARYING一个缩写。</p>\n<p>TINYBLOB</p>\n<p>TINYTEXT</p>\n<p>一个BLOB或TEXT列，最大长度为255(2^8-1)个字符。</p>\n<p>BLOB</p>\n<p>TEXT</p>\n<p>一个BLOB或TEXT列，最大长度为65535(2^16-1)个字符。</p>\n<p>MEDIUMBLOB</p>\n<p>MEDIUMTEXT</p>\n<p>一个BLOB或TEXT列，最大长度为16777215(2^24-1)个字符。</p>\n<p>LONGBLOB</p>\n<p>LONGTEXT</p>\n<p>一个BLOB或TEXT列，最大长度为4294967295(2^32-1)个字符。</p>\n<p>ENUM(‘value1’,’value2’,…)</p>\n<p>枚举。一个仅有一个值的字符串对象，这个值式选自与值列表’value1’、’value2’, …,或NULL。一个ENUM最多能有65535不同的值。</p>\n<p>SET(‘value1’,’value2’,…)</p>\n<p>一个集合。能有零个或多个值的一个字符串对象，其中每一个必须从值列表’value1’, ‘value2’, …选出。一个SET最多能有64个成员。</p>"},{"title":"netbeans中java与mysql学习","id":"1085","date":"2012-10-11T14:13:39.000Z","_content":"\n转载请注明出处：http://hi.baidu.com/520huan_byaxiom\naxiom原创\n一、下载mysql（for vwindows）http://dev.mysql.com/downloads/mysql/5.0.html#win32\n版本信息：\n+---------------------+\n| version() |\n+---------------------+\n| 5.0.45-community-nt |\n+---------------------+\n二、安装mysql（人性化的安装，记得设密码，本文中用axiom）\n三、检测mysql\n开始-&gt;程序-&gt;MYsql-&gt;mysql server 5.0-&gt;mysql command line cilent 输入刚才设置密码（如果刚才你没有经过这步，就是没有密码咯，直接回车）\n此时出现shell：mysql&gt;\nmysql&gt;select version(); //键入select version();出现上面的版本信息\n\n四、建立一个数据库axiom，并在中建立以表table,在其中加入一点数据；\nmysql&gt;create database axiom;\nmysql&gt;use axiom;\nmysql&gt;create table mytable (name varchar(20),sex char(1),age int(4));\nmysql&gt;insert into mytable values('axiom','m',20);\nmysql&gt;insert into mytable values('huan','f',20);\nmysql&gt;select * from mytable; //出现你所加入是数据\n+-----------+------+------+\n| name | sex | age |\n+-----------+------+------+\n| axiom | m | 20 |\n| huan | f | 20 |\n五、由于时间问题，你的netbeans就自己装咯！\n六、下载jdbc mysql驱动在左边选择5.0版本，然后再又边选择for Windows\n解压到盘中，然后在你新建的netbeans项目中的libraries中点右键add jre/folder 加入刚才解压的文件下面的mysql-connector-java-5.0.8-bin.jar和debug/mysql-connector-java-5.0.8-bin-g.jar\n七、编写java代码，你也可以直接复制<!--more-->\n/*\n* To change this template, choose Tools | Templates\n* and open the template in the editor.\n*/\n\npackage com.axiom;\n\n/**\n*\n* @author axiomhuan*/\nimport java.sql.*;\npublic class sqlConn\n{\npublic static void main(String[] args)\n{\ntry{\nSystem.out.println(\"MySQL connection test\");\nConnection con = null;\nStatement stat = null;\nString urlstr = \"jdbc:mysql://127.0.0.1:3306/axiom\";\nString user = \"root\";\nString password = \"axiom\";\nClass.forName(\"com.mysql.jdbc.Driver\");\ncon = DriverManager.getConnection(urlstr, user, password);\nstat = con.createStatement();\n//stat.executeUpdate(\"insert into mytable values('axiomhuan','m',20)\");\nResultSet rs = stat.executeQuery(\"select * from mytable\");\nwhile (rs.next()){\nSystem.out.println(\"name:\"+rs.getString(\"name\"));\nString st=rs.getString(\"sex\");\nchar c = st.charAt(0); //为了得到sex中值判断性别是famale还是male\nif(c=='f'){\nSystem.out.println(\"sex: famile\");\n}else{\nSystem.out.println(\"sex: mile\");\n}\nSystem.out.println(\"age: \"+rs.getInt(\"age\"));\n\n}\nrs.close();\nSystem.out.println(\"Test ends\");\n}catch(Exception e)\n{\ne.printStackTrace();\n}}\n}\n单击右键run file\n搞定！～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～","source":"_posts/netbeans-e4-b8-adjava-e4-b8-8emysql-e5-ad-a6-e4-b9-a0.md","raw":"---\ntitle: netbeans中java与mysql学习\nid: 1085\ncategories:\n  - Java\ndate: 2012-10-11 22:13:39\ntags:\n---\n\n转载请注明出处：http://hi.baidu.com/520huan_byaxiom\naxiom原创\n一、下载mysql（for vwindows）http://dev.mysql.com/downloads/mysql/5.0.html#win32\n版本信息：\n+---------------------+\n| version() |\n+---------------------+\n| 5.0.45-community-nt |\n+---------------------+\n二、安装mysql（人性化的安装，记得设密码，本文中用axiom）\n三、检测mysql\n开始-&gt;程序-&gt;MYsql-&gt;mysql server 5.0-&gt;mysql command line cilent 输入刚才设置密码（如果刚才你没有经过这步，就是没有密码咯，直接回车）\n此时出现shell：mysql&gt;\nmysql&gt;select version(); //键入select version();出现上面的版本信息\n\n四、建立一个数据库axiom，并在中建立以表table,在其中加入一点数据；\nmysql&gt;create database axiom;\nmysql&gt;use axiom;\nmysql&gt;create table mytable (name varchar(20),sex char(1),age int(4));\nmysql&gt;insert into mytable values('axiom','m',20);\nmysql&gt;insert into mytable values('huan','f',20);\nmysql&gt;select * from mytable; //出现你所加入是数据\n+-----------+------+------+\n| name | sex | age |\n+-----------+------+------+\n| axiom | m | 20 |\n| huan | f | 20 |\n五、由于时间问题，你的netbeans就自己装咯！\n六、下载jdbc mysql驱动在左边选择5.0版本，然后再又边选择for Windows\n解压到盘中，然后在你新建的netbeans项目中的libraries中点右键add jre/folder 加入刚才解压的文件下面的mysql-connector-java-5.0.8-bin.jar和debug/mysql-connector-java-5.0.8-bin-g.jar\n七、编写java代码，你也可以直接复制<!--more-->\n/*\n* To change this template, choose Tools | Templates\n* and open the template in the editor.\n*/\n\npackage com.axiom;\n\n/**\n*\n* @author axiomhuan*/\nimport java.sql.*;\npublic class sqlConn\n{\npublic static void main(String[] args)\n{\ntry{\nSystem.out.println(\"MySQL connection test\");\nConnection con = null;\nStatement stat = null;\nString urlstr = \"jdbc:mysql://127.0.0.1:3306/axiom\";\nString user = \"root\";\nString password = \"axiom\";\nClass.forName(\"com.mysql.jdbc.Driver\");\ncon = DriverManager.getConnection(urlstr, user, password);\nstat = con.createStatement();\n//stat.executeUpdate(\"insert into mytable values('axiomhuan','m',20)\");\nResultSet rs = stat.executeQuery(\"select * from mytable\");\nwhile (rs.next()){\nSystem.out.println(\"name:\"+rs.getString(\"name\"));\nString st=rs.getString(\"sex\");\nchar c = st.charAt(0); //为了得到sex中值判断性别是famale还是male\nif(c=='f'){\nSystem.out.println(\"sex: famile\");\n}else{\nSystem.out.println(\"sex: mile\");\n}\nSystem.out.println(\"age: \"+rs.getInt(\"age\"));\n\n}\nrs.close();\nSystem.out.println(\"Test ends\");\n}catch(Exception e)\n{\ne.printStackTrace();\n}}\n}\n单击右键run file\n搞定！～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～","slug":"netbeans-e4-b8-adjava-e4-b8-8emysql-e5-ad-a6-e4-b9-a0","published":1,"updated":"2018-01-13T05:07:00.481Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjccw7xc20089aqcrxcjlu8vf","content":"<p>转载请注明出处：<a href=\"http://hi.baidu.com/520huan_byaxiom\" target=\"_blank\" rel=\"noopener\">http://hi.baidu.com/520huan_byaxiom</a><br>axiom原创<br>一、下载mysql（for vwindows）<a href=\"http://dev.mysql.com/downloads/mysql/5.0.html#win32\" target=\"_blank\" rel=\"noopener\">http://dev.mysql.com/downloads/mysql/5.0.html#win32</a><br>版本信息：<br>+———————+<br>| version() |<br>+———————+<br>| 5.0.45-community-nt |<br>+———————+<br>二、安装mysql（人性化的安装，记得设密码，本文中用axiom）<br>三、检测mysql<br>开始-&gt;程序-&gt;MYsql-&gt;mysql server 5.0-&gt;mysql command line cilent 输入刚才设置密码（如果刚才你没有经过这步，就是没有密码咯，直接回车）<br>此时出现shell：mysql&gt;<br>mysql&gt;select version(); //键入select version();出现上面的版本信息</p>\n<p>四、建立一个数据库axiom，并在中建立以表table,在其中加入一点数据；<br>mysql&gt;create database axiom;<br>mysql&gt;use axiom;<br>mysql&gt;create table mytable (name varchar(20),sex char(1),age int(4));<br>mysql&gt;insert into mytable values(‘axiom’,’m’,20);<br>mysql&gt;insert into mytable values(‘huan’,’f’,20);<br>mysql&gt;select <em> from mytable; //出现你所加入是数据<br>+———–+——+——+<br>| name | sex | age |<br>+———–+——+——+<br>| axiom | m | 20 |<br>| huan | f | 20 |<br>五、由于时间问题，你的netbeans就自己装咯！<br>六、下载jdbc mysql驱动在左边选择5.0版本，然后再又边选择for Windows<br>解压到盘中，然后在你新建的netbeans项目中的libraries中点右键add jre/folder 加入刚才解压的文件下面的mysql-connector-java-5.0.8-bin.jar和debug/mysql-connector-java-5.0.8-bin-g.jar<br>七、编写java代码，你也可以直接复制<a id=\"more\"></a><br>/</em></p>\n<ul>\n<li>To change this template, choose Tools | Templates</li>\n<li>and open the template in the editor.<br>*/</li>\n</ul>\n<p>package com.axiom;</p>\n<p>/<em>*\n</em></p>\n<ul>\n<li>@author axiomhuan<em>/<br>import java.sql.</em>;<br>public class sqlConn<br>{<br>public static void main(String[] args)<br>{<br>try{<br>System.out.println(“MySQL connection test”);<br>Connection con = null;<br>Statement stat = null;<br>String urlstr = “jdbc:mysql://127.0.0.1:3306/axiom”;<br>String user = “root”;<br>String password = “axiom”;<br>Class.forName(“com.mysql.jdbc.Driver”);<br>con = DriverManager.getConnection(urlstr, user, password);<br>stat = con.createStatement();<br>//stat.executeUpdate(“insert into mytable values(‘axiomhuan’,’m’,20)”);<br>ResultSet rs = stat.executeQuery(“select * from mytable”);<br>while (rs.next()){<br>System.out.println(“name:”+rs.getString(“name”));<br>String st=rs.getString(“sex”);<br>char c = st.charAt(0); //为了得到sex中值判断性别是famale还是male<br>if(c==’f’){<br>System.out.println(“sex: famile”);<br>}else{<br>System.out.println(“sex: mile”);<br>}<br>System.out.println(“age: “+rs.getInt(“age”));</li>\n</ul>\n<p>}<br>rs.close();<br>System.out.println(“Test ends”);<br>}catch(Exception e)<br>{<br>e.printStackTrace();<br>}}<br>}<br>单击右键run file<br>搞定！～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～</p>\n","site":{"data":{}},"excerpt":"<p>转载请注明出处：<a href=\"http://hi.baidu.com/520huan_byaxiom\" target=\"_blank\" rel=\"noopener\">http://hi.baidu.com/520huan_byaxiom</a><br>axiom原创<br>一、下载mysql（for vwindows）<a href=\"http://dev.mysql.com/downloads/mysql/5.0.html#win32\" target=\"_blank\" rel=\"noopener\">http://dev.mysql.com/downloads/mysql/5.0.html#win32</a><br>版本信息：<br>+———————+<br>| version() |<br>+———————+<br>| 5.0.45-community-nt |<br>+———————+<br>二、安装mysql（人性化的安装，记得设密码，本文中用axiom）<br>三、检测mysql<br>开始-&gt;程序-&gt;MYsql-&gt;mysql server 5.0-&gt;mysql command line cilent 输入刚才设置密码（如果刚才你没有经过这步，就是没有密码咯，直接回车）<br>此时出现shell：mysql&gt;<br>mysql&gt;select version(); //键入select version();出现上面的版本信息</p>\n<p>四、建立一个数据库axiom，并在中建立以表table,在其中加入一点数据；<br>mysql&gt;create database axiom;<br>mysql&gt;use axiom;<br>mysql&gt;create table mytable (name varchar(20),sex char(1),age int(4));<br>mysql&gt;insert into mytable values(‘axiom’,’m’,20);<br>mysql&gt;insert into mytable values(‘huan’,’f’,20);<br>mysql&gt;select <em> from mytable; //出现你所加入是数据<br>+———–+——+——+<br>| name | sex | age |<br>+———–+——+——+<br>| axiom | m | 20 |<br>| huan | f | 20 |<br>五、由于时间问题，你的netbeans就自己装咯！<br>六、下载jdbc mysql驱动在左边选择5.0版本，然后再又边选择for Windows<br>解压到盘中，然后在你新建的netbeans项目中的libraries中点右键add jre/folder 加入刚才解压的文件下面的mysql-connector-java-5.0.8-bin.jar和debug/mysql-connector-java-5.0.8-bin-g.jar<br>七、编写java代码，你也可以直接复制","more":"<br>/</em></p>\n<ul>\n<li>To change this template, choose Tools | Templates</li>\n<li>and open the template in the editor.<br>*/</li>\n</ul>\n<p>package com.axiom;</p>\n<p>/<em>*\n</em></p>\n<ul>\n<li>@author axiomhuan<em>/<br>import java.sql.</em>;<br>public class sqlConn<br>{<br>public static void main(String[] args)<br>{<br>try{<br>System.out.println(“MySQL connection test”);<br>Connection con = null;<br>Statement stat = null;<br>String urlstr = “jdbc:mysql://127.0.0.1:3306/axiom”;<br>String user = “root”;<br>String password = “axiom”;<br>Class.forName(“com.mysql.jdbc.Driver”);<br>con = DriverManager.getConnection(urlstr, user, password);<br>stat = con.createStatement();<br>//stat.executeUpdate(“insert into mytable values(‘axiomhuan’,’m’,20)”);<br>ResultSet rs = stat.executeQuery(“select * from mytable”);<br>while (rs.next()){<br>System.out.println(“name:”+rs.getString(“name”));<br>String st=rs.getString(“sex”);<br>char c = st.charAt(0); //为了得到sex中值判断性别是famale还是male<br>if(c==’f’){<br>System.out.println(“sex: famile”);<br>}else{<br>System.out.println(“sex: mile”);<br>}<br>System.out.println(“age: “+rs.getInt(“age”));</li>\n</ul>\n<p>}<br>rs.close();<br>System.out.println(“Test ends”);<br>}catch(Exception e)<br>{<br>e.printStackTrace();<br>}}<br>}<br>单击右键run file<br>搞定！～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～</p>"},{"title":"NetBeans出现Cannot locate java installation in specified jdkhome: *错误的解决办法","id":"1076","date":"2012-09-12T08:57:37.000Z","_content":"\nC:Program FilesNetBeans 6.9.1etcnetbeans.conf\n\nnetbeans_jdkhome=”C:Program FilesJavajdk1.6.0_24″\n //=====改成你JDK的位置就可以了=====","source":"_posts/netbeans-e5-87-ba-e7-8e-b0cannot-locate-java-installation-in-specified-jdkhome-e9-94-99-e8-af-af-e7-9a-84-e8-a7-a3-e5-86-b3-e5-8a-9e-e6-b3-95.md","raw":"---\ntitle: 'NetBeans出现Cannot locate java installation in specified jdkhome: *错误的解决办法'\nid: 1076\ncategories:\n  - Java\ndate: 2012-09-12 16:57:37\ntags:\n---\n\nC:Program FilesNetBeans 6.9.1etcnetbeans.conf\n\nnetbeans_jdkhome=”C:Program FilesJavajdk1.6.0_24″\n //=====改成你JDK的位置就可以了=====","slug":"netbeans-e5-87-ba-e7-8e-b0cannot-locate-java-installation-in-specified-jdkhome-e9-94-99-e8-af-af-e7-9a-84-e8-a7-a3-e5-86-b3-e5-8a-9e-e6-b3-95","published":1,"updated":"2018-01-13T05:07:00.495Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjccw7xc3008daqcrl0dxukj9","content":"<p>C:Program FilesNetBeans 6.9.1etcnetbeans.conf</p>\n<p>netbeans_jdkhome=”C:Program FilesJavajdk1.6.0_24″<br> //=====改成你JDK的位置就可以了=====</p>\n","site":{"data":{}},"excerpt":"","more":"<p>C:Program FilesNetBeans 6.9.1etcnetbeans.conf</p>\n<p>netbeans_jdkhome=”C:Program FilesJavajdk1.6.0_24″<br> //=====改成你JDK的位置就可以了=====</p>\n"},{"title":"Linux  MySQL 5.6 源码包编译安装方法","id":"1650","date":"2014-04-09T03:19:10.000Z","_content":"\n下载\n`wget http://cdn.mysql.com/Downloads/MySQL-5.6/mysql-5.6.17.tar.gz\nwget http://www.cmake.org/files/v2.8/cmake-2.8.12.2.tar.gz`\n\n编译安装cmake源码包\n`tar xzvf cmake-2.8.12.2.tar.gz\ncd cmake-2.8.12.2\n./configure --prefix=/usr/local/cmake\nmake\nmake install`\n\n解压缩并编译安装MySQL源码包\n`cd ..\ntar xzvf mysql-5.6.17.tar.gz\ncd mysql-5.6.17\nexport PATH=/usr/local/cmake/bin/:$PATH\ncmake -DCMAKE_INSTALL_PREFIX=/usr/local/mysql\nmake\nmake install`<!--more-->\n\n添加mysql用户及用户组\n`# groupadd mysql\n# useradd -r -g mysql mysql\n# cd /usr/local/mysql/\n# chown -R mysql .\n# chgrp -R mysql .`\n\n安装数据库及设置配置文件\n`# scripts/mysql_install_db --user=mysql\n# chown -R root .\n# chown -R mysql data/\n# cp support-files/my-default.cnf /etc/my.cnf`\n\n启动mysql\n`# ls support-files/mysql.server -l\n# cp support-files/mysql.server /etc/init.d/mysql\n# chown root.root /etc/init.d/mysql\n# /etc/init.d/mysqld start\nStarting MySQL... SUCCESS!`\n\n修改root用户密码\n`mysql > mysqladmin -u root password 'mysqlpass'\nmysql > mysqladmin -u root -h mysql01 password 'mysqlpass'`\n\n开机启动\n`# chkconfig --add mysql\n# chkconfig --level 35 mysql on\n# chkconfig --list mysql\n mysql 0:off 1:off 2:on 3:on 4:on 5:on 6:off`\n\n最好建个链接再，看这里\nhttp://www.awezome.net/1665/","source":"_posts/mysql5-5-30-e6-ba-90-e7-a0-81-e5-8c-85-e7-bc-96-e8-af-91-e5-ae-89-e8-a3-85-e6-96-b9-e6-b3-95.md","raw":"---\ntitle: Linux  MySQL 5.6 源码包编译安装方法\ntags:\n  - Linux &amp; Fedora\n  - MySQL\nid: 1650\ncategories:\n  - Linux\ndate: 2014-04-09 11:19:10\n---\n\n下载\n`wget http://cdn.mysql.com/Downloads/MySQL-5.6/mysql-5.6.17.tar.gz\nwget http://www.cmake.org/files/v2.8/cmake-2.8.12.2.tar.gz`\n\n编译安装cmake源码包\n`tar xzvf cmake-2.8.12.2.tar.gz\ncd cmake-2.8.12.2\n./configure --prefix=/usr/local/cmake\nmake\nmake install`\n\n解压缩并编译安装MySQL源码包\n`cd ..\ntar xzvf mysql-5.6.17.tar.gz\ncd mysql-5.6.17\nexport PATH=/usr/local/cmake/bin/:$PATH\ncmake -DCMAKE_INSTALL_PREFIX=/usr/local/mysql\nmake\nmake install`<!--more-->\n\n添加mysql用户及用户组\n`# groupadd mysql\n# useradd -r -g mysql mysql\n# cd /usr/local/mysql/\n# chown -R mysql .\n# chgrp -R mysql .`\n\n安装数据库及设置配置文件\n`# scripts/mysql_install_db --user=mysql\n# chown -R root .\n# chown -R mysql data/\n# cp support-files/my-default.cnf /etc/my.cnf`\n\n启动mysql\n`# ls support-files/mysql.server -l\n# cp support-files/mysql.server /etc/init.d/mysql\n# chown root.root /etc/init.d/mysql\n# /etc/init.d/mysqld start\nStarting MySQL... SUCCESS!`\n\n修改root用户密码\n`mysql > mysqladmin -u root password 'mysqlpass'\nmysql > mysqladmin -u root -h mysql01 password 'mysqlpass'`\n\n开机启动\n`# chkconfig --add mysql\n# chkconfig --level 35 mysql on\n# chkconfig --list mysql\n mysql 0:off 1:off 2:on 3:on 4:on 5:on 6:off`\n\n最好建个链接再，看这里\nhttp://www.awezome.net/1665/","slug":"mysql5-5-30-e6-ba-90-e7-a0-81-e5-8c-85-e7-bc-96-e8-af-91-e5-ae-89-e8-a3-85-e6-96-b9-e6-b3-95","published":1,"updated":"2018-01-13T05:07:00.464Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjccw7xc5008gaqcrqhhj43pl","content":"<p>下载<br><code>wget http://cdn.mysql.com/Downloads/MySQL-5.6/mysql-5.6.17.tar.gz\nwget http://www.cmake.org/files/v2.8/cmake-2.8.12.2.tar.gz</code></p>\n<p>编译安装cmake源码包<br><code>tar xzvf cmake-2.8.12.2.tar.gz\ncd cmake-2.8.12.2\n./configure --prefix=/usr/local/cmake\nmake\nmake install</code></p>\n<p>解压缩并编译安装MySQL源码包<br><code>cd ..\ntar xzvf mysql-5.6.17.tar.gz\ncd mysql-5.6.17\nexport PATH=/usr/local/cmake/bin/:$PATH\ncmake -DCMAKE_INSTALL_PREFIX=/usr/local/mysql\nmake\nmake install</code><a id=\"more\"></a></p>\n<p>添加mysql用户及用户组<br>`# groupadd mysql</p>\n<h1 id=\"useradd-r-g-mysql-mysql\"><a href=\"#useradd-r-g-mysql-mysql\" class=\"headerlink\" title=\"useradd -r -g mysql mysql\"></a>useradd -r -g mysql mysql</h1><h1 id=\"cd-usr-local-mysql\"><a href=\"#cd-usr-local-mysql\" class=\"headerlink\" title=\"cd /usr/local/mysql/\"></a>cd /usr/local/mysql/</h1><h1 id=\"chown-R-mysql\"><a href=\"#chown-R-mysql\" class=\"headerlink\" title=\"chown -R mysql .\"></a>chown -R mysql .</h1><h1 id=\"chgrp-R-mysql\"><a href=\"#chgrp-R-mysql\" class=\"headerlink\" title=\"chgrp -R mysql .`\"></a>chgrp -R mysql .`</h1><p>安装数据库及设置配置文件<br>`# scripts/mysql_install_db –user=mysql</p>\n<h1 id=\"chown-R-root\"><a href=\"#chown-R-root\" class=\"headerlink\" title=\"chown -R root .\"></a>chown -R root .</h1><h1 id=\"chown-R-mysql-data\"><a href=\"#chown-R-mysql-data\" class=\"headerlink\" title=\"chown -R mysql data/\"></a>chown -R mysql data/</h1><h1 id=\"cp-support-files-my-default-cnf-etc-my-cnf\"><a href=\"#cp-support-files-my-default-cnf-etc-my-cnf\" class=\"headerlink\" title=\"cp support-files/my-default.cnf /etc/my.cnf`\"></a>cp support-files/my-default.cnf /etc/my.cnf`</h1><p>启动mysql<br>`# ls support-files/mysql.server -l</p>\n<h1 id=\"cp-support-files-mysql-server-etc-init-d-mysql\"><a href=\"#cp-support-files-mysql-server-etc-init-d-mysql\" class=\"headerlink\" title=\"cp support-files/mysql.server /etc/init.d/mysql\"></a>cp support-files/mysql.server /etc/init.d/mysql</h1><h1 id=\"chown-root-root-etc-init-d-mysql\"><a href=\"#chown-root-root-etc-init-d-mysql\" class=\"headerlink\" title=\"chown root.root /etc/init.d/mysql\"></a>chown root.root /etc/init.d/mysql</h1><h1 id=\"etc-init-d-mysqld-start\"><a href=\"#etc-init-d-mysqld-start\" class=\"headerlink\" title=\"/etc/init.d/mysqld start\"></a>/etc/init.d/mysqld start</h1><p>Starting MySQL… SUCCESS!`</p>\n<p>修改root用户密码<br><code>mysql &gt; mysqladmin -u root password &#39;mysqlpass&#39;\nmysql &gt; mysqladmin -u root -h mysql01 password &#39;mysqlpass&#39;</code></p>\n<p>开机启动<br>`# chkconfig –add mysql</p>\n<h1 id=\"chkconfig-–level-35-mysql-on\"><a href=\"#chkconfig-–level-35-mysql-on\" class=\"headerlink\" title=\"chkconfig –level 35 mysql on\"></a>chkconfig –level 35 mysql on</h1><h1 id=\"chkconfig-–list-mysql\"><a href=\"#chkconfig-–list-mysql\" class=\"headerlink\" title=\"chkconfig –list mysql\"></a>chkconfig –list mysql</h1><p> mysql 0:off 1:off 2:on 3:on 4:on 5:on 6:off`</p>\n<p>最好建个链接再，看这里<br><a href=\"http://www.awezome.net/1665/\" target=\"_blank\" rel=\"noopener\">http://www.awezome.net/1665/</a></p>\n","site":{"data":{}},"excerpt":"<p>下载<br><code>wget http://cdn.mysql.com/Downloads/MySQL-5.6/mysql-5.6.17.tar.gz\nwget http://www.cmake.org/files/v2.8/cmake-2.8.12.2.tar.gz</code></p>\n<p>编译安装cmake源码包<br><code>tar xzvf cmake-2.8.12.2.tar.gz\ncd cmake-2.8.12.2\n./configure --prefix=/usr/local/cmake\nmake\nmake install</code></p>\n<p>解压缩并编译安装MySQL源码包<br><code>cd ..\ntar xzvf mysql-5.6.17.tar.gz\ncd mysql-5.6.17\nexport PATH=/usr/local/cmake/bin/:$PATH\ncmake -DCMAKE_INSTALL_PREFIX=/usr/local/mysql\nmake\nmake install</code>","more":"</p>\n<p>添加mysql用户及用户组<br>`# groupadd mysql</p>\n<h1 id=\"useradd-r-g-mysql-mysql\"><a href=\"#useradd-r-g-mysql-mysql\" class=\"headerlink\" title=\"useradd -r -g mysql mysql\"></a>useradd -r -g mysql mysql</h1><h1 id=\"cd-usr-local-mysql\"><a href=\"#cd-usr-local-mysql\" class=\"headerlink\" title=\"cd /usr/local/mysql/\"></a>cd /usr/local/mysql/</h1><h1 id=\"chown-R-mysql\"><a href=\"#chown-R-mysql\" class=\"headerlink\" title=\"chown -R mysql .\"></a>chown -R mysql .</h1><h1 id=\"chgrp-R-mysql\"><a href=\"#chgrp-R-mysql\" class=\"headerlink\" title=\"chgrp -R mysql .`\"></a>chgrp -R mysql .`</h1><p>安装数据库及设置配置文件<br>`# scripts/mysql_install_db –user=mysql</p>\n<h1 id=\"chown-R-root\"><a href=\"#chown-R-root\" class=\"headerlink\" title=\"chown -R root .\"></a>chown -R root .</h1><h1 id=\"chown-R-mysql-data\"><a href=\"#chown-R-mysql-data\" class=\"headerlink\" title=\"chown -R mysql data/\"></a>chown -R mysql data/</h1><h1 id=\"cp-support-files-my-default-cnf-etc-my-cnf\"><a href=\"#cp-support-files-my-default-cnf-etc-my-cnf\" class=\"headerlink\" title=\"cp support-files/my-default.cnf /etc/my.cnf`\"></a>cp support-files/my-default.cnf /etc/my.cnf`</h1><p>启动mysql<br>`# ls support-files/mysql.server -l</p>\n<h1 id=\"cp-support-files-mysql-server-etc-init-d-mysql\"><a href=\"#cp-support-files-mysql-server-etc-init-d-mysql\" class=\"headerlink\" title=\"cp support-files/mysql.server /etc/init.d/mysql\"></a>cp support-files/mysql.server /etc/init.d/mysql</h1><h1 id=\"chown-root-root-etc-init-d-mysql\"><a href=\"#chown-root-root-etc-init-d-mysql\" class=\"headerlink\" title=\"chown root.root /etc/init.d/mysql\"></a>chown root.root /etc/init.d/mysql</h1><h1 id=\"etc-init-d-mysqld-start\"><a href=\"#etc-init-d-mysqld-start\" class=\"headerlink\" title=\"/etc/init.d/mysqld start\"></a>/etc/init.d/mysqld start</h1><p>Starting MySQL… SUCCESS!`</p>\n<p>修改root用户密码<br><code>mysql &gt; mysqladmin -u root password &#39;mysqlpass&#39;\nmysql &gt; mysqladmin -u root -h mysql01 password &#39;mysqlpass&#39;</code></p>\n<p>开机启动<br>`# chkconfig –add mysql</p>\n<h1 id=\"chkconfig-–level-35-mysql-on\"><a href=\"#chkconfig-–level-35-mysql-on\" class=\"headerlink\" title=\"chkconfig –level 35 mysql on\"></a>chkconfig –level 35 mysql on</h1><h1 id=\"chkconfig-–list-mysql\"><a href=\"#chkconfig-–list-mysql\" class=\"headerlink\" title=\"chkconfig –list mysql\"></a>chkconfig –list mysql</h1><p> mysql 0:off 1:off 2:on 3:on 4:on 5:on 6:off`</p>\n<p>最好建个链接再，看这里<br><a href=\"http://www.awezome.net/1665/\" target=\"_blank\" rel=\"noopener\">http://www.awezome.net/1665/</a></p>"},{"title":"关于《未熟的葡萄、熟了的葡萄、枯死的葡萄 》问题的吾思吾想","id":"205","date":"2011-08-11T03:26:32.000Z","_content":"\n“未熟的葡萄、熟了的葡萄、枯死的葡萄，所有这些都是变化，并不是空无一物，而是一些尚未存在的东西罢了。”\n\n这句话是什么意思？\n\n显然的问题，句子中的葡萄并不是指葡萄。尤如哲学哲的不是学，而是人，那么这句话也是讲的人。\n\n对于这个句子，我们还是应先从葡萄说起。我们知道，正常的葡萄熟了之后葡萄会被人摘用。酸的，能醒人，甜的，能可人，这些都是熟后的葡萄不同的作用，它们都共有价值，有作用。熟了的葡萄应该被人摘用，可枯死的葡萄又是一个什么概念呢？很显然，对于这个葡萄，是无用了，是废掉了。\n\n<!--more-->\n\n葡萄从未熟到熟，再到枯死的过程所发生的时间经过，也可以叫这段时间轴，就是变化。所以说葡萄是变化的，这个变化所发生的对象是葡萄，葡萄是物，是一物，所以有一物，因此这个变化并不是空无一物，它是有葡萄这个物做载体的。\n\n葡萄是物，可以熟，并已经熟了，但没人摘，最后只能死掉了。本来就没有葡萄，只不过是有人（人其实也是个载体，并不指人为）种，而后来又枯死了，又没了。所以从整个过程来看，其实就没有葡萄，即略过个过程，根本就没有葡萄，因为它没有留下有价值的东西，所以才有了这是一些尚未存在的东西的说法。尤其是句子结尾的一个“罢了”，更能体现出对这种没有价值枯死的感叹、无耐和讽刺。\n\n那么这句话要表达什么思想的呢？\n\n先举个例子。一个高官谋得了高位，而他却用它来做为己的事，那么他其实就是一个枯死的葡萄。对他自己来说，这一切只不过是自己的一个变化，可对于生命来讲，他根本就不存在，也只不过是一些尚未存在的东西罢了。\n\n哲学永远的思想是人，最常用的方法是借物喻人。它说葡萄，其实说的也是人。这句话要告诉我们什么道理呢？其实就是：人要不断的努力拼博，学得一身学问与本颔，如同从一个未成熟的葡萄长成一个成熟的葡萄。长成成熟的葡萄后，自己不能把自己放掉，更不能做违背人类、违背自然的事，这就如同枯死的葡萄。我们要怎么做？要为人类、为自然付出自己的力量，这样我们才不会枯死，即使肉体死了，自己的思想和有价值的行为也可以永存，永远不会枯死。你像古代有孔子没有死，他一直活在我们心中；现代有雷锋没有死，他也一直活在我们心中。好多好多的人一直活在我们心中，他们永远没有枯死，他们已经永生。那么到这，再问一个最大的问题，一百年过后，五百年过后，一千年过后，你能否成为一个不枯死的人？你能否一直活在别人的心中？","source":"_posts/on-the-unripe-grapes-ripe-grapes-grape-dead-issue-i-think-i-would-like-to.md","raw":"---\ntitle: 关于《未熟的葡萄、熟了的葡萄、枯死的葡萄 》问题的吾思吾想\nid: 205\ncategories:\n  - Other\ndate: 2011-08-11 11:26:32\ntags:\n---\n\n“未熟的葡萄、熟了的葡萄、枯死的葡萄，所有这些都是变化，并不是空无一物，而是一些尚未存在的东西罢了。”\n\n这句话是什么意思？\n\n显然的问题，句子中的葡萄并不是指葡萄。尤如哲学哲的不是学，而是人，那么这句话也是讲的人。\n\n对于这个句子，我们还是应先从葡萄说起。我们知道，正常的葡萄熟了之后葡萄会被人摘用。酸的，能醒人，甜的，能可人，这些都是熟后的葡萄不同的作用，它们都共有价值，有作用。熟了的葡萄应该被人摘用，可枯死的葡萄又是一个什么概念呢？很显然，对于这个葡萄，是无用了，是废掉了。\n\n<!--more-->\n\n葡萄从未熟到熟，再到枯死的过程所发生的时间经过，也可以叫这段时间轴，就是变化。所以说葡萄是变化的，这个变化所发生的对象是葡萄，葡萄是物，是一物，所以有一物，因此这个变化并不是空无一物，它是有葡萄这个物做载体的。\n\n葡萄是物，可以熟，并已经熟了，但没人摘，最后只能死掉了。本来就没有葡萄，只不过是有人（人其实也是个载体，并不指人为）种，而后来又枯死了，又没了。所以从整个过程来看，其实就没有葡萄，即略过个过程，根本就没有葡萄，因为它没有留下有价值的东西，所以才有了这是一些尚未存在的东西的说法。尤其是句子结尾的一个“罢了”，更能体现出对这种没有价值枯死的感叹、无耐和讽刺。\n\n那么这句话要表达什么思想的呢？\n\n先举个例子。一个高官谋得了高位，而他却用它来做为己的事，那么他其实就是一个枯死的葡萄。对他自己来说，这一切只不过是自己的一个变化，可对于生命来讲，他根本就不存在，也只不过是一些尚未存在的东西罢了。\n\n哲学永远的思想是人，最常用的方法是借物喻人。它说葡萄，其实说的也是人。这句话要告诉我们什么道理呢？其实就是：人要不断的努力拼博，学得一身学问与本颔，如同从一个未成熟的葡萄长成一个成熟的葡萄。长成成熟的葡萄后，自己不能把自己放掉，更不能做违背人类、违背自然的事，这就如同枯死的葡萄。我们要怎么做？要为人类、为自然付出自己的力量，这样我们才不会枯死，即使肉体死了，自己的思想和有价值的行为也可以永存，永远不会枯死。你像古代有孔子没有死，他一直活在我们心中；现代有雷锋没有死，他也一直活在我们心中。好多好多的人一直活在我们心中，他们永远没有枯死，他们已经永生。那么到这，再问一个最大的问题，一百年过后，五百年过后，一千年过后，你能否成为一个不枯死的人？你能否一直活在别人的心中？","slug":"on-the-unripe-grapes-ripe-grapes-grape-dead-issue-i-think-i-would-like-to","published":1,"updated":"2018-01-13T05:07:00.465Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjccw7xc7008kaqcr8jtb25sm","content":"<p>“未熟的葡萄、熟了的葡萄、枯死的葡萄，所有这些都是变化，并不是空无一物，而是一些尚未存在的东西罢了。”</p>\n<p>这句话是什么意思？</p>\n<p>显然的问题，句子中的葡萄并不是指葡萄。尤如哲学哲的不是学，而是人，那么这句话也是讲的人。</p>\n<p>对于这个句子，我们还是应先从葡萄说起。我们知道，正常的葡萄熟了之后葡萄会被人摘用。酸的，能醒人，甜的，能可人，这些都是熟后的葡萄不同的作用，它们都共有价值，有作用。熟了的葡萄应该被人摘用，可枯死的葡萄又是一个什么概念呢？很显然，对于这个葡萄，是无用了，是废掉了。</p>\n<a id=\"more\"></a>\n<p>葡萄从未熟到熟，再到枯死的过程所发生的时间经过，也可以叫这段时间轴，就是变化。所以说葡萄是变化的，这个变化所发生的对象是葡萄，葡萄是物，是一物，所以有一物，因此这个变化并不是空无一物，它是有葡萄这个物做载体的。</p>\n<p>葡萄是物，可以熟，并已经熟了，但没人摘，最后只能死掉了。本来就没有葡萄，只不过是有人（人其实也是个载体，并不指人为）种，而后来又枯死了，又没了。所以从整个过程来看，其实就没有葡萄，即略过个过程，根本就没有葡萄，因为它没有留下有价值的东西，所以才有了这是一些尚未存在的东西的说法。尤其是句子结尾的一个“罢了”，更能体现出对这种没有价值枯死的感叹、无耐和讽刺。</p>\n<p>那么这句话要表达什么思想的呢？</p>\n<p>先举个例子。一个高官谋得了高位，而他却用它来做为己的事，那么他其实就是一个枯死的葡萄。对他自己来说，这一切只不过是自己的一个变化，可对于生命来讲，他根本就不存在，也只不过是一些尚未存在的东西罢了。</p>\n<p>哲学永远的思想是人，最常用的方法是借物喻人。它说葡萄，其实说的也是人。这句话要告诉我们什么道理呢？其实就是：人要不断的努力拼博，学得一身学问与本颔，如同从一个未成熟的葡萄长成一个成熟的葡萄。长成成熟的葡萄后，自己不能把自己放掉，更不能做违背人类、违背自然的事，这就如同枯死的葡萄。我们要怎么做？要为人类、为自然付出自己的力量，这样我们才不会枯死，即使肉体死了，自己的思想和有价值的行为也可以永存，永远不会枯死。你像古代有孔子没有死，他一直活在我们心中；现代有雷锋没有死，他也一直活在我们心中。好多好多的人一直活在我们心中，他们永远没有枯死，他们已经永生。那么到这，再问一个最大的问题，一百年过后，五百年过后，一千年过后，你能否成为一个不枯死的人？你能否一直活在别人的心中？</p>\n","site":{"data":{}},"excerpt":"<p>“未熟的葡萄、熟了的葡萄、枯死的葡萄，所有这些都是变化，并不是空无一物，而是一些尚未存在的东西罢了。”</p>\n<p>这句话是什么意思？</p>\n<p>显然的问题，句子中的葡萄并不是指葡萄。尤如哲学哲的不是学，而是人，那么这句话也是讲的人。</p>\n<p>对于这个句子，我们还是应先从葡萄说起。我们知道，正常的葡萄熟了之后葡萄会被人摘用。酸的，能醒人，甜的，能可人，这些都是熟后的葡萄不同的作用，它们都共有价值，有作用。熟了的葡萄应该被人摘用，可枯死的葡萄又是一个什么概念呢？很显然，对于这个葡萄，是无用了，是废掉了。</p>","more":"<p>葡萄从未熟到熟，再到枯死的过程所发生的时间经过，也可以叫这段时间轴，就是变化。所以说葡萄是变化的，这个变化所发生的对象是葡萄，葡萄是物，是一物，所以有一物，因此这个变化并不是空无一物，它是有葡萄这个物做载体的。</p>\n<p>葡萄是物，可以熟，并已经熟了，但没人摘，最后只能死掉了。本来就没有葡萄，只不过是有人（人其实也是个载体，并不指人为）种，而后来又枯死了，又没了。所以从整个过程来看，其实就没有葡萄，即略过个过程，根本就没有葡萄，因为它没有留下有价值的东西，所以才有了这是一些尚未存在的东西的说法。尤其是句子结尾的一个“罢了”，更能体现出对这种没有价值枯死的感叹、无耐和讽刺。</p>\n<p>那么这句话要表达什么思想的呢？</p>\n<p>先举个例子。一个高官谋得了高位，而他却用它来做为己的事，那么他其实就是一个枯死的葡萄。对他自己来说，这一切只不过是自己的一个变化，可对于生命来讲，他根本就不存在，也只不过是一些尚未存在的东西罢了。</p>\n<p>哲学永远的思想是人，最常用的方法是借物喻人。它说葡萄，其实说的也是人。这句话要告诉我们什么道理呢？其实就是：人要不断的努力拼博，学得一身学问与本颔，如同从一个未成熟的葡萄长成一个成熟的葡萄。长成成熟的葡萄后，自己不能把自己放掉，更不能做违背人类、违背自然的事，这就如同枯死的葡萄。我们要怎么做？要为人类、为自然付出自己的力量，这样我们才不会枯死，即使肉体死了，自己的思想和有价值的行为也可以永存，永远不会枯死。你像古代有孔子没有死，他一直活在我们心中；现代有雷锋没有死，他也一直活在我们心中。好多好多的人一直活在我们心中，他们永远没有枯死，他们已经永生。那么到这，再问一个最大的问题，一百年过后，五百年过后，一千年过后，你能否成为一个不枯死的人？你能否一直活在别人的心中？</p>"},{"title":"oracle 11G如何完全卸载方法","id":"1088","date":"2012-10-14T11:16:38.000Z","_content":"\n1.关闭oracle所有的服务。可以在windows的服务管理器中关闭； 2.打开注册表：regedit 打开路径： HKEY_LOCAL_MACHINESYSTEMCurrentControlSetServices  删除该路径下的所有以oracle开始的服务名称，这个键是标识Oracle在windows下注册的各种服务！\n  3.打开注册表，找到路径：\n  HKEY_LOCAL_MACHINESOFTWAREORACLE 删除该oracle目录，该目录下注册着Oracle数据库的软件安装信息。\n  4.删除注册的oracle事件日志，打开注册表 HKEY_LOCAL_MACHINESYSTEMCurrentControlSetServicesEventlogApplication 删除注册表的以oracle开头的所有项目。\n  5.删除环境变量path中关于oracle的内容。 鼠标右键右单击“我的电脑-->属性-->高级-->环境变量-->PATH 变量。 删除Oracle在该值中的内容。注意:path中记录着一堆操作系统的目录，在windows中各个目录之间使用分号（;）隔开的，删除时注意。 建议：删除PATH环境变量中关于Oracle的值时，将该值全部拷贝到文本编辑器中，找到对应的Oracle的值，删除后，再拷贝修改的串，粘贴到PATH环境变量中，这样相对而言比较安全。<!--more-->\n  6.重新启动操作系统。\n    以上1~5个步骤操作完毕后，重新启动操作系统。\n  7.重启操作系统后各种Oracle相关的进程都不会加载了。这时删除Oracle_Home下的所有数据。（Oracle_Home指Oracle程序的安装目录）\n  8.删除C:Program Files下oracle目录。   （该目录视Oracle安装所在路径而定）\n  9.删除开始菜单下oracle项，如：  C:Documents and SettingsAll Users「开始」菜单程序Oracle - Ora10g  不同的安装这个目录稍有不同。  如果不删除开始菜单下的Oracle相关菜单目录，没关系，这个不影响再次安装Oracle.当再次安装Oracle时，该菜单会被替换。\n  至此，Windows平台下Oracle就彻底卸载了。","source":"_posts/oracle-11g-e5-a6-82-e4-bd-95-e5-ae-8c-e5-85-a8-e5-8d-b8-e8-bd-bd-e6-96-b9-e6-b3-95.md","raw":"---\ntitle: oracle 11G如何完全卸载方法\nid: 1088\ncategories:\n  - Other\ndate: 2012-10-14 19:16:38\ntags:\n---\n\n1.关闭oracle所有的服务。可以在windows的服务管理器中关闭； 2.打开注册表：regedit 打开路径： HKEY_LOCAL_MACHINESYSTEMCurrentControlSetServices  删除该路径下的所有以oracle开始的服务名称，这个键是标识Oracle在windows下注册的各种服务！\n  3.打开注册表，找到路径：\n  HKEY_LOCAL_MACHINESOFTWAREORACLE 删除该oracle目录，该目录下注册着Oracle数据库的软件安装信息。\n  4.删除注册的oracle事件日志，打开注册表 HKEY_LOCAL_MACHINESYSTEMCurrentControlSetServicesEventlogApplication 删除注册表的以oracle开头的所有项目。\n  5.删除环境变量path中关于oracle的内容。 鼠标右键右单击“我的电脑-->属性-->高级-->环境变量-->PATH 变量。 删除Oracle在该值中的内容。注意:path中记录着一堆操作系统的目录，在windows中各个目录之间使用分号（;）隔开的，删除时注意。 建议：删除PATH环境变量中关于Oracle的值时，将该值全部拷贝到文本编辑器中，找到对应的Oracle的值，删除后，再拷贝修改的串，粘贴到PATH环境变量中，这样相对而言比较安全。<!--more-->\n  6.重新启动操作系统。\n    以上1~5个步骤操作完毕后，重新启动操作系统。\n  7.重启操作系统后各种Oracle相关的进程都不会加载了。这时删除Oracle_Home下的所有数据。（Oracle_Home指Oracle程序的安装目录）\n  8.删除C:Program Files下oracle目录。   （该目录视Oracle安装所在路径而定）\n  9.删除开始菜单下oracle项，如：  C:Documents and SettingsAll Users「开始」菜单程序Oracle - Ora10g  不同的安装这个目录稍有不同。  如果不删除开始菜单下的Oracle相关菜单目录，没关系，这个不影响再次安装Oracle.当再次安装Oracle时，该菜单会被替换。\n  至此，Windows平台下Oracle就彻底卸载了。","slug":"oracle-11g-e5-a6-82-e4-bd-95-e5-ae-8c-e5-85-a8-e5-8d-b8-e8-bd-bd-e6-96-b9-e6-b3-95","published":1,"updated":"2018-01-13T05:07:00.469Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjccw7xc9008naqcrxzkbapij","content":"<p>1.关闭oracle所有的服务。可以在windows的服务管理器中关闭； 2.打开注册表：regedit 打开路径： HKEY_LOCAL_MACHINESYSTEMCurrentControlSetServices  删除该路径下的所有以oracle开始的服务名称，这个键是标识Oracle在windows下注册的各种服务！<br>  3.打开注册表，找到路径：<br>  HKEY_LOCAL_MACHINESOFTWAREORACLE 删除该oracle目录，该目录下注册着Oracle数据库的软件安装信息。<br>  4.删除注册的oracle事件日志，打开注册表 HKEY_LOCAL_MACHINESYSTEMCurrentControlSetServicesEventlogApplication 删除注册表的以oracle开头的所有项目。<br>  5.删除环境变量path中关于oracle的内容。 鼠标右键右单击“我的电脑–&gt;属性–&gt;高级–&gt;环境变量–&gt;PATH 变量。 删除Oracle在该值中的内容。注意:path中记录着一堆操作系统的目录，在windows中各个目录之间使用分号（;）隔开的，删除时注意。 建议：删除PATH环境变量中关于Oracle的值时，将该值全部拷贝到文本编辑器中，找到对应的Oracle的值，删除后，再拷贝修改的串，粘贴到PATH环境变量中，这样相对而言比较安全。<a id=\"more\"></a><br>  6.重新启动操作系统。<br>    以上1~5个步骤操作完毕后，重新启动操作系统。<br>  7.重启操作系统后各种Oracle相关的进程都不会加载了。这时删除Oracle_Home下的所有数据。（Oracle_Home指Oracle程序的安装目录）<br>  8.删除C:Program Files下oracle目录。   （该目录视Oracle安装所在路径而定）<br>  9.删除开始菜单下oracle项，如：  C:Documents and SettingsAll Users「开始」菜单程序Oracle - Ora10g  不同的安装这个目录稍有不同。  如果不删除开始菜单下的Oracle相关菜单目录，没关系，这个不影响再次安装Oracle.当再次安装Oracle时，该菜单会被替换。<br>  至此，Windows平台下Oracle就彻底卸载了。</p>\n","site":{"data":{}},"excerpt":"<p>1.关闭oracle所有的服务。可以在windows的服务管理器中关闭； 2.打开注册表：regedit 打开路径： HKEY_LOCAL_MACHINESYSTEMCurrentControlSetServices  删除该路径下的所有以oracle开始的服务名称，这个键是标识Oracle在windows下注册的各种服务！<br>  3.打开注册表，找到路径：<br>  HKEY_LOCAL_MACHINESOFTWAREORACLE 删除该oracle目录，该目录下注册着Oracle数据库的软件安装信息。<br>  4.删除注册的oracle事件日志，打开注册表 HKEY_LOCAL_MACHINESYSTEMCurrentControlSetServicesEventlogApplication 删除注册表的以oracle开头的所有项目。<br>  5.删除环境变量path中关于oracle的内容。 鼠标右键右单击“我的电脑–&gt;属性–&gt;高级–&gt;环境变量–&gt;PATH 变量。 删除Oracle在该值中的内容。注意:path中记录着一堆操作系统的目录，在windows中各个目录之间使用分号（;）隔开的，删除时注意。 建议：删除PATH环境变量中关于Oracle的值时，将该值全部拷贝到文本编辑器中，找到对应的Oracle的值，删除后，再拷贝修改的串，粘贴到PATH环境变量中，这样相对而言比较安全。","more":"<br>  6.重新启动操作系统。<br>    以上1~5个步骤操作完毕后，重新启动操作系统。<br>  7.重启操作系统后各种Oracle相关的进程都不会加载了。这时删除Oracle_Home下的所有数据。（Oracle_Home指Oracle程序的安装目录）<br>  8.删除C:Program Files下oracle目录。   （该目录视Oracle安装所在路径而定）<br>  9.删除开始菜单下oracle项，如：  C:Documents and SettingsAll Users「开始」菜单程序Oracle - Ora10g  不同的安装这个目录稍有不同。  如果不删除开始菜单下的Oracle相关菜单目录，没关系，这个不影响再次安装Oracle.当再次安装Oracle时，该菜单会被替换。<br>  至此，Windows平台下Oracle就彻底卸载了。</p>"},{"title":"bash: mysql: command not found 解决方法","id":"1654","date":"2014-04-09T14:25:21.000Z","_content":"\n装完mysql, 远行 mysql -u root 发现 -bash: mysql: command not found\n在/usr/bin 建个连接就可以\n`# ln -s /usr/local/mysql/bin/mysql /usr/bin`","source":"_posts/bash-mysql-command-not-found-e8-a7-a3-e5-86-b3-e6-96-b9-e6-b3-95.md","raw":"---\ntitle: 'bash: mysql: command not found 解决方法'\ntags:\n  - MySQL\nid: 1654\ncategories:\n  - MySQL\ndate: 2014-04-09 22:25:21\n---\n\n装完mysql, 远行 mysql -u root 发现 -bash: mysql: command not found\n在/usr/bin 建个连接就可以\n`# ln -s /usr/local/mysql/bin/mysql /usr/bin`","slug":"bash-mysql-command-not-found-e8-a7-a3-e5-86-b3-e6-96-b9-e6-b3-95","published":1,"updated":"2018-01-13T05:07:00.476Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjccw7xcb008raqcr7blwyenl","content":"<p>装完mysql, 远行 mysql -u root 发现 -bash: mysql: command not found<br>在/usr/bin 建个连接就可以<br><code># ln -s /usr/local/mysql/bin/mysql /usr/bin</code></p>\n","site":{"data":{}},"excerpt":"","more":"<p>装完mysql, 远行 mysql -u root 发现 -bash: mysql: command not found<br>在/usr/bin 建个连接就可以<br><code># ln -s /usr/local/mysql/bin/mysql /usr/bin</code></p>\n"},{"title":"几个有趣的PHP字符串和数字比较时强制转换的例子","id":"2058","date":"2014-05-21T07:30:41.000Z","_content":"\n其实也不用多讲什么，看看几个特殊的例子就会很明白，结果可以自行写写试试。注意不同点，官网链接给个 http://cn2.php.net/manual/en/language.operators.comparison.php\n\n`var_dump(0 == \"0\");\nvar_dump(0 === \"0\");\nvar_dump(0 == \"aaa\");\nvar_dump(\"0\" == \"aaa\");\nvar_dump(5 == \"5\");\nvar_dump(5 === \"5\");\nvar_dump(5 > \"4\");\nvar_dump(\"1\" == \"01\");\n`\n<!--more-->\n\n`switch (\"aaaa\") {  \ncase 'bbbb':  \n    echo \"it is bbbb\";  \n    break;  \ncase \"aaaa\": \n    echo \"it is aaaaa\";  \n    break;  \n}`\n\n`switch (\"aaaa\") {  \ncase '0':  \n    echo \"it is '0'\";  \n    break;  \ncase \"aaaa\": \n    echo \"it is aaaaa\";  \n    break;  \n}  `\n\n`switch (\"aaaa\") {  \ncase 0:  \n    echo \"it is 0\";  \n    break;  \ncase \"aaaa\": \n    echo \"it is aaaaa\";  \n    break;  \n}  \n`","source":"_posts/php-e5-ad-97-e7-ac-a6-e4-b8-b2-e5-92-8c-e6-95-b0-e5-ad-97-e6-af-94-e8-be-83-e6-97-b6-e5-bc-ba-e5-88-b6-e8-bd-ac-e6-8d-a2-e7-9a-84-e9-97-ae-e9-a2-98.md","raw":"---\ntitle: 几个有趣的PHP字符串和数字比较时强制转换的例子\ntags:\n  - php\nid: 2058\ncategories:\n  - PHP\ndate: 2014-05-21 15:30:41\n---\n\n其实也不用多讲什么，看看几个特殊的例子就会很明白，结果可以自行写写试试。注意不同点，官网链接给个 http://cn2.php.net/manual/en/language.operators.comparison.php\n\n`var_dump(0 == \"0\");\nvar_dump(0 === \"0\");\nvar_dump(0 == \"aaa\");\nvar_dump(\"0\" == \"aaa\");\nvar_dump(5 == \"5\");\nvar_dump(5 === \"5\");\nvar_dump(5 > \"4\");\nvar_dump(\"1\" == \"01\");\n`\n<!--more-->\n\n`switch (\"aaaa\") {  \ncase 'bbbb':  \n    echo \"it is bbbb\";  \n    break;  \ncase \"aaaa\": \n    echo \"it is aaaaa\";  \n    break;  \n}`\n\n`switch (\"aaaa\") {  \ncase '0':  \n    echo \"it is '0'\";  \n    break;  \ncase \"aaaa\": \n    echo \"it is aaaaa\";  \n    break;  \n}  `\n\n`switch (\"aaaa\") {  \ncase 0:  \n    echo \"it is 0\";  \n    break;  \ncase \"aaaa\": \n    echo \"it is aaaaa\";  \n    break;  \n}  \n`","slug":"php-e5-ad-97-e7-ac-a6-e4-b8-b2-e5-92-8c-e6-95-b0-e5-ad-97-e6-af-94-e8-be-83-e6-97-b6-e5-bc-ba-e5-88-b6-e8-bd-ac-e6-8d-a2-e7-9a-84-e9-97-ae-e9-a2-98","published":1,"updated":"2018-01-13T05:07:00.448Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjccw7xcd008uaqcrjgmrr91w","content":"<p>其实也不用多讲什么，看看几个特殊的例子就会很明白，结果可以自行写写试试。注意不同点，官网链接给个 <a href=\"http://cn2.php.net/manual/en/language.operators.comparison.php\" target=\"_blank\" rel=\"noopener\">http://cn2.php.net/manual/en/language.operators.comparison.php</a></p>\n<p><code>var_dump(0 == &quot;0&quot;);\nvar_dump(0 === &quot;0&quot;);\nvar_dump(0 == &quot;aaa&quot;);\nvar_dump(&quot;0&quot; == &quot;aaa&quot;);\nvar_dump(5 == &quot;5&quot;);\nvar_dump(5 === &quot;5&quot;);\nvar_dump(5 &gt; &quot;4&quot;);\nvar_dump(&quot;1&quot; == &quot;01&quot;);</code><br><a id=\"more\"></a></p>\n<p><code>switch (&quot;aaaa&quot;) {  \ncase &#39;bbbb&#39;:  \n    echo &quot;it is bbbb&quot;;  \n    break;  \ncase &quot;aaaa&quot;: \n    echo &quot;it is aaaaa&quot;;  \n    break;  \n}</code></p>\n<p><code>switch (&quot;aaaa&quot;) {  \ncase &#39;0&#39;:  \n    echo &quot;it is &#39;0&#39;&quot;;  \n    break;  \ncase &quot;aaaa&quot;: \n    echo &quot;it is aaaaa&quot;;  \n    break;  \n}</code></p>\n<p><code>switch (&quot;aaaa&quot;) {  \ncase 0:  \n    echo &quot;it is 0&quot;;  \n    break;  \ncase &quot;aaaa&quot;: \n    echo &quot;it is aaaaa&quot;;  \n    break;  \n}</code></p>\n","site":{"data":{}},"excerpt":"<p>其实也不用多讲什么，看看几个特殊的例子就会很明白，结果可以自行写写试试。注意不同点，官网链接给个 <a href=\"http://cn2.php.net/manual/en/language.operators.comparison.php\" target=\"_blank\" rel=\"noopener\">http://cn2.php.net/manual/en/language.operators.comparison.php</a></p>\n<p><code>var_dump(0 == &quot;0&quot;);\nvar_dump(0 === &quot;0&quot;);\nvar_dump(0 == &quot;aaa&quot;);\nvar_dump(&quot;0&quot; == &quot;aaa&quot;);\nvar_dump(5 == &quot;5&quot;);\nvar_dump(5 === &quot;5&quot;);\nvar_dump(5 &gt; &quot;4&quot;);\nvar_dump(&quot;1&quot; == &quot;01&quot;);</code><br>","more":"</p>\n<p><code>switch (&quot;aaaa&quot;) {  \ncase &#39;bbbb&#39;:  \n    echo &quot;it is bbbb&quot;;  \n    break;  \ncase &quot;aaaa&quot;: \n    echo &quot;it is aaaaa&quot;;  \n    break;  \n}</code></p>\n<p><code>switch (&quot;aaaa&quot;) {  \ncase &#39;0&#39;:  \n    echo &quot;it is &#39;0&#39;&quot;;  \n    break;  \ncase &quot;aaaa&quot;: \n    echo &quot;it is aaaaa&quot;;  \n    break;  \n}</code></p>\n<p><code>switch (&quot;aaaa&quot;) {  \ncase 0:  \n    echo &quot;it is 0&quot;;  \n    break;  \ncase &quot;aaaa&quot;: \n    echo &quot;it is aaaaa&quot;;  \n    break;  \n}</code></p>"},{"title":"PHP 导出 CVS Excel","id":"2148","date":"2014-05-27T09:01:39.000Z","_content":"\nphp 5.1 以后自带了一个 fputcsv 函数，如果想把数组导出成excel又没有其它更完善的需求，fputcsv 是个最好的选择，当然要用更强大的功能，可以试试PHPExcel这个库。\n\n下面是导出后并下载的封装函数\n`function exportCSV($fileName, array $title,array $data) {\n  header('Content-Type: application/vnd.ms-excel');\n  header(\"Content-Disposition: attachment;filename = {$fileName}.csv\");\n  header('Cache-Control: max-age=0');\n\n  $fp = fopen('php://output', 'a');\n  fputcsv($fp, $title);\n\n  foreach ($data as $one) {\n    fputcsv($fp, $one);\n  }\n  fclose($fp);\n}`\n<!--more-->\n\n简单的demo\n`$title=array('name','age');\n\n$data=array(\narray('李四','12'),\narray('张三','20')\n);\n\nexportCSV('aaa',$title,$data);\n`","source":"_posts/php-e5-af-bc-e5-87-ba-cvs-excel.md","raw":"---\ntitle: PHP 导出 CVS Excel\ntags:\n  - php\nid: 2148\ncategories:\n  - PHP\ndate: 2014-05-27 17:01:39\n---\n\nphp 5.1 以后自带了一个 fputcsv 函数，如果想把数组导出成excel又没有其它更完善的需求，fputcsv 是个最好的选择，当然要用更强大的功能，可以试试PHPExcel这个库。\n\n下面是导出后并下载的封装函数\n`function exportCSV($fileName, array $title,array $data) {\n  header('Content-Type: application/vnd.ms-excel');\n  header(\"Content-Disposition: attachment;filename = {$fileName}.csv\");\n  header('Cache-Control: max-age=0');\n\n  $fp = fopen('php://output', 'a');\n  fputcsv($fp, $title);\n\n  foreach ($data as $one) {\n    fputcsv($fp, $one);\n  }\n  fclose($fp);\n}`\n<!--more-->\n\n简单的demo\n`$title=array('name','age');\n\n$data=array(\narray('李四','12'),\narray('张三','20')\n);\n\nexportCSV('aaa',$title,$data);\n`","slug":"php-e5-af-bc-e5-87-ba-cvs-excel","published":1,"updated":"2018-01-13T05:07:00.462Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjccw7xcg008yaqcr80d5hqzd","content":"<p>php 5.1 以后自带了一个 fputcsv 函数，如果想把数组导出成excel又没有其它更完善的需求，fputcsv 是个最好的选择，当然要用更强大的功能，可以试试PHPExcel这个库。</p>\n<p>下面是导出后并下载的封装函数<br>`function exportCSV($fileName, array $title,array $data) {<br>  header(‘Content-Type: application/vnd.ms-excel’);<br>  header(“Content-Disposition: attachment;filename = {$fileName}.csv”);<br>  header(‘Cache-Control: max-age=0’);</p>\n<p>  $fp = fopen(‘php://output’, ‘a’);<br>  fputcsv($fp, $title);</p>\n<p>  foreach ($data as $one) {<br>    fputcsv($fp, $one);<br>  }<br>  fclose($fp);<br>}`<br><a id=\"more\"></a></p>\n<p>简单的demo<br>`$title=array(‘name’,’age’);</p>\n<p>$data=array(<br>array(‘李四’,’12’),<br>array(‘张三’,’20’)<br>);</p>\n<p>exportCSV(‘aaa’,$title,$data);<br>`</p>\n","site":{"data":{}},"excerpt":"<p>php 5.1 以后自带了一个 fputcsv 函数，如果想把数组导出成excel又没有其它更完善的需求，fputcsv 是个最好的选择，当然要用更强大的功能，可以试试PHPExcel这个库。</p>\n<p>下面是导出后并下载的封装函数<br>`function exportCSV($fileName, array $title,array $data) {<br>  header(‘Content-Type: application/vnd.ms-excel’);<br>  header(“Content-Disposition: attachment;filename = {$fileName}.csv”);<br>  header(‘Cache-Control: max-age=0’);</p>\n<p>  $fp = fopen(‘php://output’, ‘a’);<br>  fputcsv($fp, $title);</p>\n<p>  foreach ($data as $one) {<br>    fputcsv($fp, $one);<br>  }<br>  fclose($fp);<br>}`<br>","more":"</p>\n<p>简单的demo<br>`$title=array(‘name’,’age’);</p>\n<p>$data=array(<br>array(‘李四’,’12’),<br>array(‘张三’,’20’)<br>);</p>\n<p>exportCSV(‘aaa’,$title,$data);<br>`</p>"},{"title":"PHP读取大文件的多种处理方式","id":"2181","date":"2014-07-27T09:55:23.000Z","_content":"\n一直感觉PHP处理大文件是一件很不靠谱的事性，幸好有着越来越多的方法来解决这件事行。\n\n1.直接File\n如果这个大文件不算“太大”，那么就可以先用File这个方法直接把文件全部读到变量里，成为一个数组，每行为一个value。优点就是简单快速。\n\n`<?php\nprint_r(file(\"test.txt\"));\n?> \n//output\nArray\n(\n[0] => Hello World. Testing testing!\n[1] => Another day, another line.\n[2] => If the array picks up this line,\n[3] => then is it a pickup line?\n)`\n\n2.这个方法是很传统的方法，每读一行处理一行。<!--more-->\n`\n$handle = @fopen($filename, \"r\");\nif (!$handle) {\n    exit();\n}\n$i=0;\nwhile (($buffer = fgets($handle)) !== false) {\n    echo $buffer;\n}\nif (!feof($handle)) {\n    echo (\"Error: unexpected fgets() fail\\n\");\n    exit();\n}\nfclose($handle);`\n\n3.使用SPL SplFileObject , 这个好像更厉害，不过要PHP 5.1的支持。\n这个类用来对文本文件进行遍历。`\n<?php\ntry{\n    foreach( new SplFileObject('/log/php.log') as $line)\n    echo $line.'\n';\n}catch (Exception $e){\n    echo $e->getMessage();\n}\n?>\n`\n返回文本文件的第10行，可以这样写：\n`<?php\ntry{\n    $file = new SplFileObject(\"/log/php.log\");\n    $file->seek(10);\n    echo $file->current();\n}catch (Exception $e){\n    echo $e->getMessage();\n}\n?>`\n\n当然要判断当前行数是不是超过了文件总行数，获得文件的行数的方汗以。\n`<?php\n$fp = fopen($temp_file ,'r') or die(\"open file failure!\");\n$total_line = 0;\nif($fp){\n    /* 获取文件的一行内容，注意：需要php5才支持该函数; */\n    while(stream_get_line($fp, 8192, \"\\r\\n\")){\n        $total_line++;\n    }\n    fclose($fp);\n}\n?>`\n\n这里有个集2，3方法的函数，可以读取几行的内容\n`public function getFileLines($filename, $startLine = 1, $endLine=50, $method='rb') {\n    $content = array();\n    $count = $endLine - $startLine;\n    if(version_compare(PHP_VERSION, '5.1.0', '>=')){/* 判断php版本（因为要用到SplFileObject，PHP>=5.1.0） */\n        $fp = new SplFileObject($filename, $method);\n        $fp->seek($startLine-1);/* 转到第N行, seek方法参数从0开始计数 */\n        for($i = 0; $i <= $count; ++$i) {\n            $content[] = unserialize($fp->current());/* current()获取当前行内容 */\n            $fp->next();/* 下一行 */\n        }\n    }else{/*PHP<5.1 */\n        $fp = fopen($filename, $method);\n        if(!$fp) return 'error:can not read file';\n        for ($i=1;$i<$startLine;++$i) {/* 跳过前$startLine行 */\n            fgets($fp);\n        }\n        for($i;$i<=$endLine;++$i){\n            $content[] = unserialize(fgets($fp));/* 读取文件行内容 */\n        }\n        fclose($fp);\n    }\n    return array_filter($content); /* array_filter过滤：false,null,'' */\n}`\n\n相关阅读：http://www.redyun.net/technology/101.html","source":"_posts/php-e8-af-bb-e5-8f-96-e5-a4-a7-e6-96-87-e4-bb-b6-e7-9a-84-e5-a4-9a-e7-a7-8d-e5-a4-84-e7-90-86-e6-96-b9-e5-bc-8f.md","raw":"---\ntitle: PHP读取大文件的多种处理方式\ntags:\n  - php\n  - 大文件\nid: 2181\ncategories:\n  - PHP\ndate: 2014-07-27 17:55:23\n---\n\n一直感觉PHP处理大文件是一件很不靠谱的事性，幸好有着越来越多的方法来解决这件事行。\n\n1.直接File\n如果这个大文件不算“太大”，那么就可以先用File这个方法直接把文件全部读到变量里，成为一个数组，每行为一个value。优点就是简单快速。\n\n`<?php\nprint_r(file(\"test.txt\"));\n?> \n//output\nArray\n(\n[0] => Hello World. Testing testing!\n[1] => Another day, another line.\n[2] => If the array picks up this line,\n[3] => then is it a pickup line?\n)`\n\n2.这个方法是很传统的方法，每读一行处理一行。<!--more-->\n`\n$handle = @fopen($filename, \"r\");\nif (!$handle) {\n    exit();\n}\n$i=0;\nwhile (($buffer = fgets($handle)) !== false) {\n    echo $buffer;\n}\nif (!feof($handle)) {\n    echo (\"Error: unexpected fgets() fail\\n\");\n    exit();\n}\nfclose($handle);`\n\n3.使用SPL SplFileObject , 这个好像更厉害，不过要PHP 5.1的支持。\n这个类用来对文本文件进行遍历。`\n<?php\ntry{\n    foreach( new SplFileObject('/log/php.log') as $line)\n    echo $line.'\n';\n}catch (Exception $e){\n    echo $e->getMessage();\n}\n?>\n`\n返回文本文件的第10行，可以这样写：\n`<?php\ntry{\n    $file = new SplFileObject(\"/log/php.log\");\n    $file->seek(10);\n    echo $file->current();\n}catch (Exception $e){\n    echo $e->getMessage();\n}\n?>`\n\n当然要判断当前行数是不是超过了文件总行数，获得文件的行数的方汗以。\n`<?php\n$fp = fopen($temp_file ,'r') or die(\"open file failure!\");\n$total_line = 0;\nif($fp){\n    /* 获取文件的一行内容，注意：需要php5才支持该函数; */\n    while(stream_get_line($fp, 8192, \"\\r\\n\")){\n        $total_line++;\n    }\n    fclose($fp);\n}\n?>`\n\n这里有个集2，3方法的函数，可以读取几行的内容\n`public function getFileLines($filename, $startLine = 1, $endLine=50, $method='rb') {\n    $content = array();\n    $count = $endLine - $startLine;\n    if(version_compare(PHP_VERSION, '5.1.0', '>=')){/* 判断php版本（因为要用到SplFileObject，PHP>=5.1.0） */\n        $fp = new SplFileObject($filename, $method);\n        $fp->seek($startLine-1);/* 转到第N行, seek方法参数从0开始计数 */\n        for($i = 0; $i <= $count; ++$i) {\n            $content[] = unserialize($fp->current());/* current()获取当前行内容 */\n            $fp->next();/* 下一行 */\n        }\n    }else{/*PHP<5.1 */\n        $fp = fopen($filename, $method);\n        if(!$fp) return 'error:can not read file';\n        for ($i=1;$i<$startLine;++$i) {/* 跳过前$startLine行 */\n            fgets($fp);\n        }\n        for($i;$i<=$endLine;++$i){\n            $content[] = unserialize(fgets($fp));/* 读取文件行内容 */\n        }\n        fclose($fp);\n    }\n    return array_filter($content); /* array_filter过滤：false,null,'' */\n}`\n\n相关阅读：http://www.redyun.net/technology/101.html","slug":"php-e8-af-bb-e5-8f-96-e5-a4-a7-e6-96-87-e4-bb-b6-e7-9a-84-e5-a4-9a-e7-a7-8d-e5-a4-84-e7-90-86-e6-96-b9-e5-bc-8f","published":1,"updated":"2018-01-13T05:07:00.440Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjccw7xci0091aqcrjtmhdqpy","content":"<p>一直感觉PHP处理大文件是一件很不靠谱的事性，幸好有着越来越多的方法来解决这件事行。</p>\n<p>1.直接File<br>如果这个大文件不算“太大”，那么就可以先用File这个方法直接把文件全部读到变量里，成为一个数组，每行为一个value。优点就是简单快速。</p>\n<p><code>&lt;?php\nprint_r(file(&quot;test.txt&quot;));\n?&gt; \n//output\nArray\n(\n[0] =&gt; Hello World. Testing testing!\n[1] =&gt; Another day, another line.\n[2] =&gt; If the array picks up this line,\n[3] =&gt; then is it a pickup line?\n)</code></p>\n<p>2.这个方法是很传统的方法，每读一行处理一行。<a id=\"more\"></a><br><code>$handle = @fopen($filename, &quot;r&quot;);\nif (!$handle) {\n    exit();\n}\n$i=0;\nwhile (($buffer = fgets($handle)) !== false) {\n    echo $buffer;\n}\nif (!feof($handle)) {\n    echo (&quot;Error: unexpected fgets() fail\\n&quot;);\n    exit();\n}\nfclose($handle);</code></p>\n<p>3.使用SPL SplFileObject , 这个好像更厉害，不过要PHP 5.1的支持。<br>这个类用来对文本文件进行遍历。<code>&lt;?php\ntry{\n    foreach( new SplFileObject(&#39;/log/php.log&#39;) as $line)\n    echo $line.&#39;\n&#39;;\n}catch (Exception $e){\n    echo $e-&gt;getMessage();\n}\n?&gt;</code><br>返回文本文件的第10行，可以这样写：<br><code>&lt;?php\ntry{\n    $file = new SplFileObject(&quot;/log/php.log&quot;);\n    $file-&gt;seek(10);\n    echo $file-&gt;current();\n}catch (Exception $e){\n    echo $e-&gt;getMessage();\n}\n?&gt;</code></p>\n<p>当然要判断当前行数是不是超过了文件总行数，获得文件的行数的方汗以。<br><code>&lt;?php\n$fp = fopen($temp_file ,&#39;r&#39;) or die(&quot;open file failure!&quot;);\n$total_line = 0;\nif($fp){\n    /* 获取文件的一行内容，注意：需要php5才支持该函数; */\n    while(stream_get_line($fp, 8192, &quot;\\r\\n&quot;)){\n        $total_line++;\n    }\n    fclose($fp);\n}\n?&gt;</code></p>\n<p>这里有个集2，3方法的函数，可以读取几行的内容<br><code>public function getFileLines($filename, $startLine = 1, $endLine=50, $method=&#39;rb&#39;) {\n    $content = array();\n    $count = $endLine - $startLine;\n    if(version_compare(PHP_VERSION, &#39;5.1.0&#39;, &#39;&gt;=&#39;)){/* 判断php版本（因为要用到SplFileObject，PHP&gt;=5.1.0） */\n        $fp = new SplFileObject($filename, $method);\n        $fp-&gt;seek($startLine-1);/* 转到第N行, seek方法参数从0开始计数 */\n        for($i = 0; $i &lt;= $count; ++$i) {\n            $content[] = unserialize($fp-&gt;current());/* current()获取当前行内容 */\n            $fp-&gt;next();/* 下一行 */\n        }\n    }else{/*PHP&lt;5.1 */\n        $fp = fopen($filename, $method);\n        if(!$fp) return &#39;error:can not read file&#39;;\n        for ($i=1;$i&lt;$startLine;++$i) {/* 跳过前$startLine行 */\n            fgets($fp);\n        }\n        for($i;$i&lt;=$endLine;++$i){\n            $content[] = unserialize(fgets($fp));/* 读取文件行内容 */\n        }\n        fclose($fp);\n    }\n    return array_filter($content); /* array_filter过滤：false,null,&#39;&#39; */\n}</code></p>\n<p>相关阅读：<a href=\"http://www.redyun.net/technology/101.html\" target=\"_blank\" rel=\"noopener\">http://www.redyun.net/technology/101.html</a></p>\n","site":{"data":{}},"excerpt":"<p>一直感觉PHP处理大文件是一件很不靠谱的事性，幸好有着越来越多的方法来解决这件事行。</p>\n<p>1.直接File<br>如果这个大文件不算“太大”，那么就可以先用File这个方法直接把文件全部读到变量里，成为一个数组，每行为一个value。优点就是简单快速。</p>\n<p><code>&lt;?php\nprint_r(file(&quot;test.txt&quot;));\n?&gt; \n//output\nArray\n(\n[0] =&gt; Hello World. Testing testing!\n[1] =&gt; Another day, another line.\n[2] =&gt; If the array picks up this line,\n[3] =&gt; then is it a pickup line?\n)</code></p>\n<p>2.这个方法是很传统的方法，每读一行处理一行。","more":"<br><code>$handle = @fopen($filename, &quot;r&quot;);\nif (!$handle) {\n    exit();\n}\n$i=0;\nwhile (($buffer = fgets($handle)) !== false) {\n    echo $buffer;\n}\nif (!feof($handle)) {\n    echo (&quot;Error: unexpected fgets() fail\\n&quot;);\n    exit();\n}\nfclose($handle);</code></p>\n<p>3.使用SPL SplFileObject , 这个好像更厉害，不过要PHP 5.1的支持。<br>这个类用来对文本文件进行遍历。<code>&lt;?php\ntry{\n    foreach( new SplFileObject(&#39;/log/php.log&#39;) as $line)\n    echo $line.&#39;\n&#39;;\n}catch (Exception $e){\n    echo $e-&gt;getMessage();\n}\n?&gt;</code><br>返回文本文件的第10行，可以这样写：<br><code>&lt;?php\ntry{\n    $file = new SplFileObject(&quot;/log/php.log&quot;);\n    $file-&gt;seek(10);\n    echo $file-&gt;current();\n}catch (Exception $e){\n    echo $e-&gt;getMessage();\n}\n?&gt;</code></p>\n<p>当然要判断当前行数是不是超过了文件总行数，获得文件的行数的方汗以。<br><code>&lt;?php\n$fp = fopen($temp_file ,&#39;r&#39;) or die(&quot;open file failure!&quot;);\n$total_line = 0;\nif($fp){\n    /* 获取文件的一行内容，注意：需要php5才支持该函数; */\n    while(stream_get_line($fp, 8192, &quot;\\r\\n&quot;)){\n        $total_line++;\n    }\n    fclose($fp);\n}\n?&gt;</code></p>\n<p>这里有个集2，3方法的函数，可以读取几行的内容<br><code>public function getFileLines($filename, $startLine = 1, $endLine=50, $method=&#39;rb&#39;) {\n    $content = array();\n    $count = $endLine - $startLine;\n    if(version_compare(PHP_VERSION, &#39;5.1.0&#39;, &#39;&gt;=&#39;)){/* 判断php版本（因为要用到SplFileObject，PHP&gt;=5.1.0） */\n        $fp = new SplFileObject($filename, $method);\n        $fp-&gt;seek($startLine-1);/* 转到第N行, seek方法参数从0开始计数 */\n        for($i = 0; $i &lt;= $count; ++$i) {\n            $content[] = unserialize($fp-&gt;current());/* current()获取当前行内容 */\n            $fp-&gt;next();/* 下一行 */\n        }\n    }else{/*PHP&lt;5.1 */\n        $fp = fopen($filename, $method);\n        if(!$fp) return &#39;error:can not read file&#39;;\n        for ($i=1;$i&lt;$startLine;++$i) {/* 跳过前$startLine行 */\n            fgets($fp);\n        }\n        for($i;$i&lt;=$endLine;++$i){\n            $content[] = unserialize(fgets($fp));/* 读取文件行内容 */\n        }\n        fclose($fp);\n    }\n    return array_filter($content); /* array_filter过滤：false,null,&#39;&#39; */\n}</code></p>\n<p>相关阅读：<a href=\"http://www.redyun.net/technology/101.html\" target=\"_blank\" rel=\"noopener\">http://www.redyun.net/technology/101.html</a></p>"},{"title":"PHP 输出上个月最后一天","id":"2043","date":"2014-05-17T13:58:44.000Z","_content":"\n上个月第一天很显然可以这样用：\n`date('Y-m-01', strtotime('-1 month'));`\n上个月最后一天可以这样用\n`date('Y-m-t', strtotime('-1 month'));`\n这样感觉使用起来很神奇，不过还是strtotime的作用，看看手册上还有哪些用法。\n`echo strtotime(\"now\"), \"\\n\";\necho strtotime(\"10 September 2000\"), \"\\n\";\necho strtotime(\"+1 day\"), \"\\n\";\necho strtotime(\"+1 week\"), \"\\n\";\necho strtotime(\"+1 week 2 days 4 hours 2 seconds\"), \"\\n\";\necho strtotime(\"next Thursday\"), \"\\n\";\necho strtotime(\"last Monday\"), \"\\n\";`","source":"_posts/php-e8-be-93-e5-87-ba-e4-b8-8a-e4-b8-aa-e6-9c-88-e6-9c-80-e5-90-8e-e4-b8-80-e5-a4-a9.md","raw":"---\ntitle: PHP 输出上个月最后一天\ntags:\n  - php\nid: 2043\ncategories:\n  - PHP\ndate: 2014-05-17 21:58:44\n---\n\n上个月第一天很显然可以这样用：\n`date('Y-m-01', strtotime('-1 month'));`\n上个月最后一天可以这样用\n`date('Y-m-t', strtotime('-1 month'));`\n这样感觉使用起来很神奇，不过还是strtotime的作用，看看手册上还有哪些用法。\n`echo strtotime(\"now\"), \"\\n\";\necho strtotime(\"10 September 2000\"), \"\\n\";\necho strtotime(\"+1 day\"), \"\\n\";\necho strtotime(\"+1 week\"), \"\\n\";\necho strtotime(\"+1 week 2 days 4 hours 2 seconds\"), \"\\n\";\necho strtotime(\"next Thursday\"), \"\\n\";\necho strtotime(\"last Monday\"), \"\\n\";`","slug":"php-e8-be-93-e5-87-ba-e4-b8-8a-e4-b8-aa-e6-9c-88-e6-9c-80-e5-90-8e-e4-b8-80-e5-a4-a9","published":1,"updated":"2018-01-13T05:07:00.475Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjccw7xck0095aqcr3t88pf9h","content":"<p>上个月第一天很显然可以这样用：<br><code>date(&#39;Y-m-01&#39;, strtotime(&#39;-1 month&#39;));</code><br>上个月最后一天可以这样用<br><code>date(&#39;Y-m-t&#39;, strtotime(&#39;-1 month&#39;));</code><br>这样感觉使用起来很神奇，不过还是strtotime的作用，看看手册上还有哪些用法。<br><code>echo strtotime(&quot;now&quot;), &quot;\\n&quot;;\necho strtotime(&quot;10 September 2000&quot;), &quot;\\n&quot;;\necho strtotime(&quot;+1 day&quot;), &quot;\\n&quot;;\necho strtotime(&quot;+1 week&quot;), &quot;\\n&quot;;\necho strtotime(&quot;+1 week 2 days 4 hours 2 seconds&quot;), &quot;\\n&quot;;\necho strtotime(&quot;next Thursday&quot;), &quot;\\n&quot;;\necho strtotime(&quot;last Monday&quot;), &quot;\\n&quot;;</code></p>\n","site":{"data":{}},"excerpt":"","more":"<p>上个月第一天很显然可以这样用：<br><code>date(&#39;Y-m-01&#39;, strtotime(&#39;-1 month&#39;));</code><br>上个月最后一天可以这样用<br><code>date(&#39;Y-m-t&#39;, strtotime(&#39;-1 month&#39;));</code><br>这样感觉使用起来很神奇，不过还是strtotime的作用，看看手册上还有哪些用法。<br><code>echo strtotime(&quot;now&quot;), &quot;\\n&quot;;\necho strtotime(&quot;10 September 2000&quot;), &quot;\\n&quot;;\necho strtotime(&quot;+1 day&quot;), &quot;\\n&quot;;\necho strtotime(&quot;+1 week&quot;), &quot;\\n&quot;;\necho strtotime(&quot;+1 week 2 days 4 hours 2 seconds&quot;), &quot;\\n&quot;;\necho strtotime(&quot;next Thursday&quot;), &quot;\\n&quot;;\necho strtotime(&quot;last Monday&quot;), &quot;\\n&quot;;</code></p>\n"},{"title":"php strstr stristr strpos","id":"1708","date":"2014-04-16T09:44:23.000Z","_content":"\nstring strstr ( string $haystack , mixed $needle [, bool $before_needle = false ] )\n返回 haystack 字符串从 needle 第一次出现的位置开始到 haystack 结尾的字符串。\nNote:\n该函数区分大小写。如果想要不区分大小写，请使用 stristr()。\nNote:\n如果你仅仅想确定 needle 是否存在于 haystack 中，请使用速度更快、耗费内存更少的 strpos() 函数。\nfrom : http://www.php.net/manual/zh/function.strstr.php","source":"_posts/php-strstr-stristr-strpos.md","raw":"---\ntitle: php strstr stristr strpos\ntags:\n  - php\nid: 1708\ncategories:\n  - PHP\ndate: 2014-04-16 17:44:23\n---\n\nstring strstr ( string $haystack , mixed $needle [, bool $before_needle = false ] )\n返回 haystack 字符串从 needle 第一次出现的位置开始到 haystack 结尾的字符串。\nNote:\n该函数区分大小写。如果想要不区分大小写，请使用 stristr()。\nNote:\n如果你仅仅想确定 needle 是否存在于 haystack 中，请使用速度更快、耗费内存更少的 strpos() 函数。\nfrom : http://www.php.net/manual/zh/function.strstr.php","slug":"php-strstr-stristr-strpos","published":1,"updated":"2018-01-13T05:07:00.472Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjccw7xcl0098aqcrcnz8zi9i","content":"<p>string strstr ( string $haystack , mixed $needle [, bool $before_needle = false ] )<br>返回 haystack 字符串从 needle 第一次出现的位置开始到 haystack 结尾的字符串。<br>Note:<br>该函数区分大小写。如果想要不区分大小写，请使用 stristr()。<br>Note:<br>如果你仅仅想确定 needle 是否存在于 haystack 中，请使用速度更快、耗费内存更少的 strpos() 函数。<br>from : <a href=\"http://www.php.net/manual/zh/function.strstr.php\" target=\"_blank\" rel=\"noopener\">http://www.php.net/manual/zh/function.strstr.php</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>string strstr ( string $haystack , mixed $needle [, bool $before_needle = false ] )<br>返回 haystack 字符串从 needle 第一次出现的位置开始到 haystack 结尾的字符串。<br>Note:<br>该函数区分大小写。如果想要不区分大小写，请使用 stristr()。<br>Note:<br>如果你仅仅想确定 needle 是否存在于 haystack 中，请使用速度更快、耗费内存更少的 strpos() 函数。<br>from : <a href=\"http://www.php.net/manual/zh/function.strstr.php\" target=\"_blank\" rel=\"noopener\">http://www.php.net/manual/zh/function.strstr.php</a></p>\n"},{"title":"QQ五笔易想擎天98词库V1.100221 下载","id":"36","date":"2010-02-21T04:15:11.000Z","_content":"\n&nbsp;QQ五笔易想擎天98词库V1.100221\n\n1.以王码五笔为原版，以肓打单字为基础扩大词库。大词库的前提下不让打单字有重码。\n\n2.重码换位。原版 wgk 1.使 &nbsp;wgkr 1.使 2.拿 这样在输入 拿 时又要选重码。换位后 wgkf 1.拿 2.使 就可以用空格选码。\n\n3.加入常用成语、俗语、熟语\n\n本地下载：[QQ五笔易想擎天98词库V1.100221](http://filer.blogbus.com/5599785/resource_55997851266727007a.rar)","source":"_posts/qq-e4-ba-94-e7-ac-94-e6-98-93-e6-83-b3-e6-93-8e-e5-a4-a998-e8-af-8d-e5-ba-93v1-100221-e4-b8-8b-e8-bd-bd.md","raw":"---\ntitle: QQ五笔易想擎天98词库V1.100221 下载\nid: 36\ncategories:\n  - Other\ndate: 2010-02-21 12:15:11\ntags:\n---\n\n&nbsp;QQ五笔易想擎天98词库V1.100221\n\n1.以王码五笔为原版，以肓打单字为基础扩大词库。大词库的前提下不让打单字有重码。\n\n2.重码换位。原版 wgk 1.使 &nbsp;wgkr 1.使 2.拿 这样在输入 拿 时又要选重码。换位后 wgkf 1.拿 2.使 就可以用空格选码。\n\n3.加入常用成语、俗语、熟语\n\n本地下载：[QQ五笔易想擎天98词库V1.100221](http://filer.blogbus.com/5599785/resource_55997851266727007a.rar)","slug":"qq-e4-ba-94-e7-ac-94-e6-98-93-e6-83-b3-e6-93-8e-e5-a4-a998-e8-af-8d-e5-ba-93v1-100221-e4-b8-8b-e8-bd-bd","published":1,"updated":"2018-01-13T05:07:00.450Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjccw7xco009caqcrnwm3d1e9","content":"<p>&nbsp;QQ五笔易想擎天98词库V1.100221</p>\n<p>1.以王码五笔为原版，以肓打单字为基础扩大词库。大词库的前提下不让打单字有重码。</p>\n<p>2.重码换位。原版 wgk 1.使 &nbsp;wgkr 1.使 2.拿 这样在输入 拿 时又要选重码。换位后 wgkf 1.拿 2.使 就可以用空格选码。</p>\n<p>3.加入常用成语、俗语、熟语</p>\n<p>本地下载：<a href=\"http://filer.blogbus.com/5599785/resource_55997851266727007a.rar\" target=\"_blank\" rel=\"noopener\">QQ五笔易想擎天98词库V1.100221</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>&nbsp;QQ五笔易想擎天98词库V1.100221</p>\n<p>1.以王码五笔为原版，以肓打单字为基础扩大词库。大词库的前提下不让打单字有重码。</p>\n<p>2.重码换位。原版 wgk 1.使 &nbsp;wgkr 1.使 2.拿 这样在输入 拿 时又要选重码。换位后 wgkf 1.拿 2.使 就可以用空格选码。</p>\n<p>3.加入常用成语、俗语、熟语</p>\n<p>本地下载：<a href=\"http://filer.blogbus.com/5599785/resource_55997851266727007a.rar\" target=\"_blank\" rel=\"noopener\">QQ五笔易想擎天98词库V1.100221</a></p>\n"},{"title":"PHPStorm 常用快捷键使用技巧整理","id":"1616","date":"2014-04-02T08:32:54.000Z","_content":"\n> PHPStorm 就是一神器，jetbrains 一家都牛，下面是日常的一些快捷键，掌握了基本就不用鼠标了。\n<table>\n\t<tr><td>CTRL+ALT+L</td><td>格式化</td></tr>\n\t<tr><td>CTRL+B</td><td>进入类，函数，变里等最原始的位置</td></tr>\n\t<tr><td>CTRL+N</td><td>快速进入类,MenuClass：16 ，进入MenuClass第16行</td></tr>\n\t<tr><td>CTRL+SHIFT+N</td><td>快速进入文件</td></tr>\n\t<tr><td>CTRL+SHIFT+V</td><td>多次复制</td></tr>\n\t<tr><td>CTRL+SHIFT+A</td><td>命令行</td></tr>\n\t<tr><td>Ctrl + G</td><td>转到行</td></tr>\n\t<tr><td>Tap</td><td>模板</td></tr>\n\t<tr><td>CTRL+W</td><td>逐级选择块</td></tr>\n\t<tr><td>鼠标中键</td><td>纵向块选择</td></tr>\n\t<tr><td>SHIFT+F6</td><td>重构，文件名，变量名（我的已改成F2了）</td></tr>\n\t<tr><td>双击shift</td><td>快速搜索</td></tr>\n\t<tr><td>Ctrl+E</td><td>可以快速打开最近编辑的文件列表</td></tr>\n\t<tr><td>CTRL+ALT+←/→</td><td>返回上次编辑的位置</td></tr>\n\t<tr><td>ALT+ ←/→ </td><td>标签切换</td></tr>\n\t<tr><td>ALT+ ↑/↓</td><td>在方法间快速移动</td></tr>\n\t<tr><td>Alt键+[0-9]</td><td>打开相应的工具窗口,1 是project, 2是收藏</td></tr>\n\t<tr><td>F12</td><td>回到刚才打开的工具窗口</td></tr>\n\t<tr><td>Ctrl+F12</td><td>打开当前文件的成员结构框</td></tr>\n\t<tr><td>F11</td><td>做标记，Alt+2 可以查看</td></tr>\n</table>","source":"_posts/phpstorm-e5-b8-b8-e7-94-a8-e5-bf-ab-e6-8d-b7-e9-94-ae-e6-95-b4-e7-90-86.md","raw":"---\ntitle: PHPStorm 常用快捷键使用技巧整理\ntags:\n  - phpstorm\nid: 1616\ncategories:\n  - PHP\ndate: 2014-04-02 16:32:54\n---\n\n> PHPStorm 就是一神器，jetbrains 一家都牛，下面是日常的一些快捷键，掌握了基本就不用鼠标了。\n<table>\n\t<tr><td>CTRL+ALT+L</td><td>格式化</td></tr>\n\t<tr><td>CTRL+B</td><td>进入类，函数，变里等最原始的位置</td></tr>\n\t<tr><td>CTRL+N</td><td>快速进入类,MenuClass：16 ，进入MenuClass第16行</td></tr>\n\t<tr><td>CTRL+SHIFT+N</td><td>快速进入文件</td></tr>\n\t<tr><td>CTRL+SHIFT+V</td><td>多次复制</td></tr>\n\t<tr><td>CTRL+SHIFT+A</td><td>命令行</td></tr>\n\t<tr><td>Ctrl + G</td><td>转到行</td></tr>\n\t<tr><td>Tap</td><td>模板</td></tr>\n\t<tr><td>CTRL+W</td><td>逐级选择块</td></tr>\n\t<tr><td>鼠标中键</td><td>纵向块选择</td></tr>\n\t<tr><td>SHIFT+F6</td><td>重构，文件名，变量名（我的已改成F2了）</td></tr>\n\t<tr><td>双击shift</td><td>快速搜索</td></tr>\n\t<tr><td>Ctrl+E</td><td>可以快速打开最近编辑的文件列表</td></tr>\n\t<tr><td>CTRL+ALT+←/→</td><td>返回上次编辑的位置</td></tr>\n\t<tr><td>ALT+ ←/→ </td><td>标签切换</td></tr>\n\t<tr><td>ALT+ ↑/↓</td><td>在方法间快速移动</td></tr>\n\t<tr><td>Alt键+[0-9]</td><td>打开相应的工具窗口,1 是project, 2是收藏</td></tr>\n\t<tr><td>F12</td><td>回到刚才打开的工具窗口</td></tr>\n\t<tr><td>Ctrl+F12</td><td>打开当前文件的成员结构框</td></tr>\n\t<tr><td>F11</td><td>做标记，Alt+2 可以查看</td></tr>\n</table>","slug":"phpstorm-e5-b8-b8-e7-94-a8-e5-bf-ab-e6-8d-b7-e9-94-ae-e6-95-b4-e7-90-86","published":1,"updated":"2018-01-13T05:07:00.496Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjccw7xcq009faqcrad7xoj1k","content":"<blockquote>\n<p>PHPStorm 就是一神器，jetbrains 一家都牛，下面是日常的一些快捷键，掌握了基本就不用鼠标了。</p>\n<table><br>    <tr><td>CTRL+ALT+L</td><td>格式化</td></tr><br>    <tr><td>CTRL+B</td><td>进入类，函数，变里等最原始的位置</td></tr><br>    <tr><td>CTRL+N</td><td>快速进入类,MenuClass：16 ，进入MenuClass第16行</td></tr><br>    <tr><td>CTRL+SHIFT+N</td><td>快速进入文件</td></tr><br>    <tr><td>CTRL+SHIFT+V</td><td>多次复制</td></tr><br>    <tr><td>CTRL+SHIFT+A</td><td>命令行</td></tr><br>    <tr><td>Ctrl + G</td><td>转到行</td></tr><br>    <tr><td>Tap</td><td>模板</td></tr><br>    <tr><td>CTRL+W</td><td>逐级选择块</td></tr><br>    <tr><td>鼠标中键</td><td>纵向块选择</td></tr><br>    <tr><td>SHIFT+F6</td><td>重构，文件名，变量名（我的已改成F2了）</td></tr><br>    <tr><td>双击shift</td><td>快速搜索</td></tr><br>    <tr><td>Ctrl+E</td><td>可以快速打开最近编辑的文件列表</td></tr><br>    <tr><td>CTRL+ALT+←/→</td><td>返回上次编辑的位置</td></tr><br>    <tr><td>ALT+ ←/→ </td><td>标签切换</td></tr><br>    <tr><td>ALT+ ↑/↓</td><td>在方法间快速移动</td></tr><br>    <tr><td>Alt键+[0-9]</td><td>打开相应的工具窗口,1 是project, 2是收藏</td></tr><br>    <tr><td>F12</td><td>回到刚才打开的工具窗口</td></tr><br>    <tr><td>Ctrl+F12</td><td>打开当前文件的成员结构框</td></tr><br>    <tr><td>F11</td><td>做标记，Alt+2 可以查看</td></tr><br></table></blockquote>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>PHPStorm 就是一神器，jetbrains 一家都牛，下面是日常的一些快捷键，掌握了基本就不用鼠标了。</p>\n<table><br>    <tr><td>CTRL+ALT+L</td><td>格式化</td></tr><br>    <tr><td>CTRL+B</td><td>进入类，函数，变里等最原始的位置</td></tr><br>    <tr><td>CTRL+N</td><td>快速进入类,MenuClass：16 ，进入MenuClass第16行</td></tr><br>    <tr><td>CTRL+SHIFT+N</td><td>快速进入文件</td></tr><br>    <tr><td>CTRL+SHIFT+V</td><td>多次复制</td></tr><br>    <tr><td>CTRL+SHIFT+A</td><td>命令行</td></tr><br>    <tr><td>Ctrl + G</td><td>转到行</td></tr><br>    <tr><td>Tap</td><td>模板</td></tr><br>    <tr><td>CTRL+W</td><td>逐级选择块</td></tr><br>    <tr><td>鼠标中键</td><td>纵向块选择</td></tr><br>    <tr><td>SHIFT+F6</td><td>重构，文件名，变量名（我的已改成F2了）</td></tr><br>    <tr><td>双击shift</td><td>快速搜索</td></tr><br>    <tr><td>Ctrl+E</td><td>可以快速打开最近编辑的文件列表</td></tr><br>    <tr><td>CTRL+ALT+←/→</td><td>返回上次编辑的位置</td></tr><br>    <tr><td>ALT+ ←/→ </td><td>标签切换</td></tr><br>    <tr><td>ALT+ ↑/↓</td><td>在方法间快速移动</td></tr><br>    <tr><td>Alt键+[0-9]</td><td>打开相应的工具窗口,1 是project, 2是收藏</td></tr><br>    <tr><td>F12</td><td>回到刚才打开的工具窗口</td></tr><br>    <tr><td>Ctrl+F12</td><td>打开当前文件的成员结构框</td></tr><br>    <tr><td>F11</td><td>做标记，Alt+2 可以查看</td></tr><br></table></blockquote>\n"},{"title":"php post 接收数组","id":"1081","date":"2012-09-29T13:47:27.000Z","_content":"\n第一中方法\n&lt;form action=\"test1.php\" method=\"post\"&gt;\n&lt;?\n\nfor($i=0;$i&lt;10;$i++){\n?&gt;\n&lt;input type=\"checkbox\" name=\"interests[]（不能去掉[]）\" value=\"&lt;?=$i?&gt;\"&gt;test&lt;?=$i?&gt;&lt;br&gt;\n&lt;?\n}\n\n?&gt;\n&lt;input type=\"submit\"&gt;\n\n&lt;/form&gt;\n\n&nbsp;\n\ntest1.php\n\n&nbsp;\n\n&lt;?php\n\nforeach($_POST as $key =&gt; $val){\nif(is_array($val)){\nforeach($val as $v2){\necho \"$v2&lt;br&gt;\";\n}\n}\n}\n\n?&gt;\n\n&nbsp;\n\n第二种用法\n\n&nbsp;\n\ntest3.php\n\n&nbsp;\n\n&lt;?php\n\n&nbsp;\n\nif(isset($_POST['submit'])){\n\n$users = $_POST['user'];\n\nforeach($users as $key=&gt;$val){\n\necho 'user ',$key,' = ',$val,'&lt;br /&gt;';\n\n}\n\n}\n\n?&gt;\n\n&lt;form method=\"post\"&gt;\n\nzhangsan &lt;input type=\"text\" name=\"user[zhangsan]\" value=\"0\" /&gt;&lt;br /&gt;\n\nlisi &lt;input type=\"text\" name=\"user[lisi]\" value=\"1\" /&gt;&lt;br /&gt;\n\nwangwu &lt;input type=\"text\" name=\"user[wangwu]\" value=\"2\" /&gt;&lt;br /&gt;\n\nzhaoliu &lt;input type=\"text\" name=\"user[zhaoliu]\" value=\"3\" /&gt;&lt;br /&gt;\n\n&lt;input type=\"submit\" name=\"submit\" value=\"提交\" /&gt;\n\n&lt;/form&gt;\n\n1","source":"_posts/post-e6-8e-a5-e6-94-b6-e6-95-b0-e7-bb-84php.md","raw":"---\ntitle: php post 接收数组\nid: 1081\ncategories:\n  - PHP\ndate: 2012-09-29 21:47:27\ntags:\n---\n\n第一中方法\n&lt;form action=\"test1.php\" method=\"post\"&gt;\n&lt;?\n\nfor($i=0;$i&lt;10;$i++){\n?&gt;\n&lt;input type=\"checkbox\" name=\"interests[]（不能去掉[]）\" value=\"&lt;?=$i?&gt;\"&gt;test&lt;?=$i?&gt;&lt;br&gt;\n&lt;?\n}\n\n?&gt;\n&lt;input type=\"submit\"&gt;\n\n&lt;/form&gt;\n\n&nbsp;\n\ntest1.php\n\n&nbsp;\n\n&lt;?php\n\nforeach($_POST as $key =&gt; $val){\nif(is_array($val)){\nforeach($val as $v2){\necho \"$v2&lt;br&gt;\";\n}\n}\n}\n\n?&gt;\n\n&nbsp;\n\n第二种用法\n\n&nbsp;\n\ntest3.php\n\n&nbsp;\n\n&lt;?php\n\n&nbsp;\n\nif(isset($_POST['submit'])){\n\n$users = $_POST['user'];\n\nforeach($users as $key=&gt;$val){\n\necho 'user ',$key,' = ',$val,'&lt;br /&gt;';\n\n}\n\n}\n\n?&gt;\n\n&lt;form method=\"post\"&gt;\n\nzhangsan &lt;input type=\"text\" name=\"user[zhangsan]\" value=\"0\" /&gt;&lt;br /&gt;\n\nlisi &lt;input type=\"text\" name=\"user[lisi]\" value=\"1\" /&gt;&lt;br /&gt;\n\nwangwu &lt;input type=\"text\" name=\"user[wangwu]\" value=\"2\" /&gt;&lt;br /&gt;\n\nzhaoliu &lt;input type=\"text\" name=\"user[zhaoliu]\" value=\"3\" /&gt;&lt;br /&gt;\n\n&lt;input type=\"submit\" name=\"submit\" value=\"提交\" /&gt;\n\n&lt;/form&gt;\n\n1","slug":"post-e6-8e-a5-e6-94-b6-e6-95-b0-e7-bb-84php","published":1,"updated":"2018-01-13T05:07:00.446Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjccw7xcr009jaqcr8aondnyi","content":"<p>第一中方法<br>&lt;form action=”test1.php” method=”post”&gt;<br>&lt;?</p>\n<p>for($i=0;$i&lt;10;$i++){<br>?&gt;<br>&lt;input type=”checkbox” name=”interests[]（不能去掉[]）” value=”&lt;?=$i?&gt;”&gt;test&lt;?=$i?&gt;&lt;br&gt;<br>&lt;?<br>}</p>\n<p>?&gt;<br>&lt;input type=”submit”&gt;</p>\n<p>&lt;/form&gt;</p>\n<p>&nbsp;</p>\n<p>test1.php</p>\n<p>&nbsp;</p>\n<p>&lt;?php</p>\n<p>foreach($_POST as $key =&gt; $val){<br>if(is_array($val)){<br>foreach($val as $v2){<br>echo “$v2&lt;br&gt;”;<br>}<br>}<br>}</p>\n<p>?&gt;</p>\n<p>&nbsp;</p>\n<p>第二种用法</p>\n<p>&nbsp;</p>\n<p>test3.php</p>\n<p>&nbsp;</p>\n<p>&lt;?php</p>\n<p>&nbsp;</p>\n<p>if(isset($_POST[‘submit’])){</p>\n<p>$users = $_POST[‘user’];</p>\n<p>foreach($users as $key=&gt;$val){</p>\n<p>echo ‘user ‘,$key,’ = ‘,$val,’&lt;br /&gt;’;</p>\n<p>}</p>\n<p>}</p>\n<p>?&gt;</p>\n<p>&lt;form method=”post”&gt;</p>\n<p>zhangsan &lt;input type=”text” name=”user[zhangsan]” value=”0” /&gt;&lt;br /&gt;</p>\n<p>lisi &lt;input type=”text” name=”user[lisi]” value=”1” /&gt;&lt;br /&gt;</p>\n<p>wangwu &lt;input type=”text” name=”user[wangwu]” value=”2” /&gt;&lt;br /&gt;</p>\n<p>zhaoliu &lt;input type=”text” name=”user[zhaoliu]” value=”3” /&gt;&lt;br /&gt;</p>\n<p>&lt;input type=”submit” name=”submit” value=”提交” /&gt;</p>\n<p>&lt;/form&gt;</p>\n<p>1</p>\n","site":{"data":{}},"excerpt":"","more":"<p>第一中方法<br>&lt;form action=”test1.php” method=”post”&gt;<br>&lt;?</p>\n<p>for($i=0;$i&lt;10;$i++){<br>?&gt;<br>&lt;input type=”checkbox” name=”interests[]（不能去掉[]）” value=”&lt;?=$i?&gt;”&gt;test&lt;?=$i?&gt;&lt;br&gt;<br>&lt;?<br>}</p>\n<p>?&gt;<br>&lt;input type=”submit”&gt;</p>\n<p>&lt;/form&gt;</p>\n<p>&nbsp;</p>\n<p>test1.php</p>\n<p>&nbsp;</p>\n<p>&lt;?php</p>\n<p>foreach($_POST as $key =&gt; $val){<br>if(is_array($val)){<br>foreach($val as $v2){<br>echo “$v2&lt;br&gt;”;<br>}<br>}<br>}</p>\n<p>?&gt;</p>\n<p>&nbsp;</p>\n<p>第二种用法</p>\n<p>&nbsp;</p>\n<p>test3.php</p>\n<p>&nbsp;</p>\n<p>&lt;?php</p>\n<p>&nbsp;</p>\n<p>if(isset($_POST[‘submit’])){</p>\n<p>$users = $_POST[‘user’];</p>\n<p>foreach($users as $key=&gt;$val){</p>\n<p>echo ‘user ‘,$key,’ = ‘,$val,’&lt;br /&gt;’;</p>\n<p>}</p>\n<p>}</p>\n<p>?&gt;</p>\n<p>&lt;form method=”post”&gt;</p>\n<p>zhangsan &lt;input type=”text” name=”user[zhangsan]” value=”0” /&gt;&lt;br /&gt;</p>\n<p>lisi &lt;input type=”text” name=”user[lisi]” value=”1” /&gt;&lt;br /&gt;</p>\n<p>wangwu &lt;input type=”text” name=”user[wangwu]” value=”2” /&gt;&lt;br /&gt;</p>\n<p>zhaoliu &lt;input type=”text” name=”user[zhaoliu]” value=”3” /&gt;&lt;br /&gt;</p>\n<p>&lt;input type=”submit” name=”submit” value=”提交” /&gt;</p>\n<p>&lt;/form&gt;</p>\n<p>1</p>\n"},{"title":"QSqlQuery---Qt","id":"970","date":"2012-04-04T00:31:50.000Z","_content":"\nQSqlQuery提供了对数据库记录的Select、Insert、Update、Delete操作。\n\nSELECT操作：\n\nQSqlQuery query;\n\nquery.exec(\"SELECT name, salary FROM employee WHERE salary > 50000\");\nwhile (query.next()) {\n    QString name = query.value(0).toString();\n    int salary = query.value(1).toInt();\n    qDebug() << name << salary;\n}\n\n通过QSqlQuery::next()、QSqlQuery::previous()、QSqlQuery::first()、QSqlQuery::last()、QSqlQuery::seek()，可以得到下一条、上一条、第一条、最后一条、任意一条记录的位置。<!--more-->\n\nINSERT操作：\n\n//单一插入数据\n\nQSqlQuery query;\n\nquery.prepare(\"INSERT INTO employee (id, name, salary) \"\n\n                        \"VALUES (:id, :name, :salary)\");\n\nquery.bindValue(\":id\", 1001);\n\nquery.bindValue(\":name\", \"Thad Beaumont\");\n\nquery.bindValue(\":salary\", 65000);\n\nquery.exec();\n\n//批量插入数据\n\nQSqlQuery query;\n\nquery.prepare(\"insert into myTable values (?, ?)\");\n\nQVariantList ints;\n\nints << 1 << 2 << 3 << 4;\n\nquery.addBindValue(ints);\n\nQVariantList names;\n\nnames << \"Harald\" << \"Boris\" << \"Trond\" << QVariant(QVariant::String);\n\nquery.addBindValue(names);\n\nif (!query.execBatch())\n\n    qDebug() << query.lastError();\n\nUPDATE操作：\n\nQSqlQuery query;\n\nquery.prepare(\"UPDATE employee SET salary = ? WHERE id = 1003\");\n\nquery.bindValue(0, 70000);\n\nquery.exe();\n\nDELETE操作：\n\nQSqlQuery query;\n\nquery.exec(\"DELETE FROM employee WHERE id = 1007\");\n\n事务处理：\n\nQSqlDatabase::database().transaction();\n\nQSqlQuery query;\n\nquery.exec(\"SELECT id FROM employee WHERE name = 'Torild Halvorsen'\");\n\nif (query.next()) {\n\n    int employeeId = query.value(0).toInt();\n\n    query.exec(\"INSERT INTO project (id, name, ownerid) \"\n\n                       \"VALUES (201, 'Manhattan Project', \"\n\n                       + QString::number(employeeId) + \")\");\n\n}\n\nQSqlDatabase::database().commit();\n\n如果数据库引擎支持事务处理，则函数QSqlDriver::hasFeature(QSqlDriver::Transactions)将返回 真。\n\n可以通过调用QSqlDatabase::transaction()来初始化一个事务处理。之后执行你想在该事务处理的工作。\n\n完了再执行QSqlDatabase::commit()来提交事务处理或QSqlDatabase::rollback()取消事务处理。\n\n这里在举个QSqlDriver::hasFeature(QSqlDriver::QuerySize)例子，可以较快的统计查询记录行数。\n\nQSqlQuery query;\n\nint numRows;\n\nquery.exec(\"SELECT name, salary FROM employee WHERE salary > 50000\");\n\nQSqlDatabase defaultDB = QSqlDatabase::database();\n\nif (defaultDB.driver()->hasFeature(QSqlDriver::QuerySize)) {\n\n    numRows = query.size();\n\n} else {\n\n     // this can be very slow\n\n     query.last();\n\n     numRows = query.at() + 1;\n\n}\n\n存储过程：\n\nAsciiToInt()是数据库中的一个存储过程。\n\n但我在网上以前好像看过说是SQL Server中的存储过程是通过\"EXEC\"完成的，而不是\"CALL\"，这里我不确定！留下一个疑问吧~\n\nQSqlQuery query;\n\nquery.prepare(\"CALL AsciiToInt(?, ?)\");\n\nquery.bindValue(0, \"A\");\n\nquery.bindValue(1, 0, QSql::Out);\n\nquery.exec();\n\nint i = query.boundValue(1).toInt(); // i is 65\n\n■、使用SQL Model类\n\nQSqlQueryModel：一个只读的读取数据库数据的模型。\n\nQSqlTableModel：一个可读写的单一表格模型，可以不用写SQL语句。\n\nQSqlRelationalTableModel：QSqlTableModel的一个子类，可多表关联在一起。\n\n这些类都继承于QAbstractTableModel，而它们又都继承于QAbstractItemModel。\n\nQSqlQueryModel 只读模式，基于SQL查询基础。\n\nQSqlQueryModel model;\n\nmodel.setQuery(\"SELECT * FROM employee\");\n\nfor (int i = 0; i < model.rowCount(); ++i) {\n\n    int id = model.record(i).value(\"id\").toInt();\n\n    QString name = model.record(i).value(\"name\").toString();\n\n    qDebug() << id << name;\n\n}\n\nQSqlTableModel 可对单一表操作，进行读写操作。\n\n//读取数据\n\nQSqlTableModel model;\n\nmodel.setTable(\"employee\");\n\nmodel.setFilter(\"salary > 50000\");\n\nmodel.setSort(2, Qt::DescendingOrder);\n\nmodel.select();\n\nfor (int i = 0; i < model.rowCount(); ++i) {\n\n    QString name = model.record(i).value(\"name\").toString();\n\n    int salary = model.record(i).value(\"salary\").toInt();\n\n    qDebug() << name << salary;\n\n}\n\n//通过QSqlTableModel::setRecord()修改数据\n\nfor (int i = 0; i < model.rowCount(); ++i) {\n\n    QSqlRecord record = model.record(i);\n\n    double salary = record.value(\"salary\").toInt();\n\n    salary *= 1.1;\n\n    record.setValue(\"salary\", salary);\n\n    model.setRecord(i, record);\n\n}\n\nmodel.submitAll();\n\n//通过QSqlTableModel::setData()来update一条记录\n\nmodel.setData(model.index(row, column), 75000);\n\nmodel.submitAll();\n\n//insert一条记录\n\nmodel.insertRows(row, 1);\n\nmodel.setData(model.index(row, 0), 1013);\n\nmodel.setData(model.index(row, 1), \"Peter Gordon\");\n\nmodel.setData(model.index(row, 2), 68500);\n\nmodel.submitAll();\n\n//delete一条记录\n\nmodel.removeRows(row, 5);\n\nmodel.submitAll();\n\n函数QSqlTableModel::submitAll()确保记录写入数据库中。\n\nQSqlRelationalTableModel 通过外键实现了多表关联。\n\n//employee表中关联city表、country表。\n\nmodel->setTable(\"employee\");\n\nmodel->setRelation(2, QSqlRelation(\"city\", \"id\", \"name\"));\n\nmodel->setRelation(3, QSqlRelation(\"country\", \"id\", \"name\"));\n\n■、数据呈现视图中\n\nQSqlQueryModel、QSqlTableModel、QSqlRelationalTableModel一般都是借助QListView、QTableView、QTreeView吧数据呈现出来的~\n\nQSqlRelationalTableModel model;\n\nmodel->setTable(\"employee\");\n\nmodel->setRelation(2, QSqlRelation(\"city\", \"id\", \"name\"));\n\nmodel->setRelation(3, QSqlRelation(\"country\", \"id\", \"name\"));\n\n//设置标题头部标签信息\n\nmodel->setHeaderData(0, Qt::Horizontal, QObject::tr(\"ID\"));\n\nmodel->setHeaderData(1, Qt::Horizontal, QObject::tr(\"Name\"));\n\nmodel->setHeaderData(2, Qt::Horizontal, QObject::tr(\"City\"));\n\nmodel->setHeaderData(3, Qt::Horizontal, QObject::tr(\"Country\"));\n\n//值得注意的是，在查询时应该明确指明那个表的数据信息，以下两种方式是等价的。\n\nmodel.setFilter(tr(\"city.name = '%1'\").arg(\"Mucich\"));\n\n//model.setFilter(tr(\"employee.cityid = %1\").arg(312));\n\nmodel.select();\n\n//借助QTableView，把数据信息显示出来,\n\nQTableView *view = new QTableView;\n\nview->setModel(model);\n\n//将表中的项，设计为不能编辑模式\n\nview->setEditTriggers(QAbstractItemView::NoEditTriggers);\n\nview->show();\n\n在讲一种通过QSqlField进行Insert、Update、Delete的操作。上边的例子，继续~\n\nQSqlField idField(\"id\", QVariant::Int);\n\nQSqlField nameField(\"name\", QVariant::String);\n\nQSqlField cityIdField(\"cityId\", QVariant::Int);\n\nQSqlField countryIdField(\"countryId\", QVariant::Int);\n\n//一条记录 Id = 12、Name = vic.MINg、City = ShenYang、Country = China。(沈阳区号024、中国086)\n\nidField.setValue(12);\n\nnameField.setValue(\"vic.MINg\");\n\ncityIdField.setValue(24);\n\ncountryIdField.setValue(86);\n\n//insert一条记录，-1表示在最尾端加入\n\nQSqlRecord record;\n\nrecord.append(idField);\n\nrecord.append(nameField);\n\nrecord.append(cityIdField);\n\nrecord.append(countryIdField);\n\nmodel->insertRecord(-1, record);\n\n//update一条记录, row表示要修改的行\n\nQSqlRecord record = model->record(row);\n\nrecord.replace(1, nameField);\n\nrecord.replace(2, cityIdField);\n\nrecord.replace(3, countryIdField);\n\nmodel->setRecord(row, record);\n\n//delete一条记录, row表示要修改的行\n\nmodel->removeRow(row);\n\n■、数据呈现窗体中\n\n通过QDataWidgetMapper可以在窗体控件与数据库中的记录关联在一起。\n\nQDataWidgetMapper *mapper = new QDataWidgetMapper;\n\nmapper->setModel(model);\n\nmapper->addMapping(idSpinBox, 0);\n\nmapper->addMapping(nameLineEdit, 1);\n\nmapper->addMapping(cityComboBox, 2);\n\nmapper->addMapping(countryComboBox, 3);\n\n//可以通过toFirst()、toNext()、toPrevious()、toLast()、setCurrentIndex()来设置当前记录位置，显示相应数据\n\nmapper->toFirst();\n\n//信号、槽的机制model、view、mapper三个联系再一起\n\nconnect(view->selectionModel(), SIGNAL(currentRowChanged(QModelIndex,QModelIndex)),\n\n        mapper, SLOT(setCurrentModelIndex(QModelIndex)));","source":"_posts/qsqlquery-qt.md","raw":"---\ntitle: QSqlQuery---Qt\ntags:\n  - Qt\nid: 970\ncategories:\n  - Qt\ndate: 2012-04-04 08:31:50\n---\n\nQSqlQuery提供了对数据库记录的Select、Insert、Update、Delete操作。\n\nSELECT操作：\n\nQSqlQuery query;\n\nquery.exec(\"SELECT name, salary FROM employee WHERE salary > 50000\");\nwhile (query.next()) {\n    QString name = query.value(0).toString();\n    int salary = query.value(1).toInt();\n    qDebug() << name << salary;\n}\n\n通过QSqlQuery::next()、QSqlQuery::previous()、QSqlQuery::first()、QSqlQuery::last()、QSqlQuery::seek()，可以得到下一条、上一条、第一条、最后一条、任意一条记录的位置。<!--more-->\n\nINSERT操作：\n\n//单一插入数据\n\nQSqlQuery query;\n\nquery.prepare(\"INSERT INTO employee (id, name, salary) \"\n\n                        \"VALUES (:id, :name, :salary)\");\n\nquery.bindValue(\":id\", 1001);\n\nquery.bindValue(\":name\", \"Thad Beaumont\");\n\nquery.bindValue(\":salary\", 65000);\n\nquery.exec();\n\n//批量插入数据\n\nQSqlQuery query;\n\nquery.prepare(\"insert into myTable values (?, ?)\");\n\nQVariantList ints;\n\nints << 1 << 2 << 3 << 4;\n\nquery.addBindValue(ints);\n\nQVariantList names;\n\nnames << \"Harald\" << \"Boris\" << \"Trond\" << QVariant(QVariant::String);\n\nquery.addBindValue(names);\n\nif (!query.execBatch())\n\n    qDebug() << query.lastError();\n\nUPDATE操作：\n\nQSqlQuery query;\n\nquery.prepare(\"UPDATE employee SET salary = ? WHERE id = 1003\");\n\nquery.bindValue(0, 70000);\n\nquery.exe();\n\nDELETE操作：\n\nQSqlQuery query;\n\nquery.exec(\"DELETE FROM employee WHERE id = 1007\");\n\n事务处理：\n\nQSqlDatabase::database().transaction();\n\nQSqlQuery query;\n\nquery.exec(\"SELECT id FROM employee WHERE name = 'Torild Halvorsen'\");\n\nif (query.next()) {\n\n    int employeeId = query.value(0).toInt();\n\n    query.exec(\"INSERT INTO project (id, name, ownerid) \"\n\n                       \"VALUES (201, 'Manhattan Project', \"\n\n                       + QString::number(employeeId) + \")\");\n\n}\n\nQSqlDatabase::database().commit();\n\n如果数据库引擎支持事务处理，则函数QSqlDriver::hasFeature(QSqlDriver::Transactions)将返回 真。\n\n可以通过调用QSqlDatabase::transaction()来初始化一个事务处理。之后执行你想在该事务处理的工作。\n\n完了再执行QSqlDatabase::commit()来提交事务处理或QSqlDatabase::rollback()取消事务处理。\n\n这里在举个QSqlDriver::hasFeature(QSqlDriver::QuerySize)例子，可以较快的统计查询记录行数。\n\nQSqlQuery query;\n\nint numRows;\n\nquery.exec(\"SELECT name, salary FROM employee WHERE salary > 50000\");\n\nQSqlDatabase defaultDB = QSqlDatabase::database();\n\nif (defaultDB.driver()->hasFeature(QSqlDriver::QuerySize)) {\n\n    numRows = query.size();\n\n} else {\n\n     // this can be very slow\n\n     query.last();\n\n     numRows = query.at() + 1;\n\n}\n\n存储过程：\n\nAsciiToInt()是数据库中的一个存储过程。\n\n但我在网上以前好像看过说是SQL Server中的存储过程是通过\"EXEC\"完成的，而不是\"CALL\"，这里我不确定！留下一个疑问吧~\n\nQSqlQuery query;\n\nquery.prepare(\"CALL AsciiToInt(?, ?)\");\n\nquery.bindValue(0, \"A\");\n\nquery.bindValue(1, 0, QSql::Out);\n\nquery.exec();\n\nint i = query.boundValue(1).toInt(); // i is 65\n\n■、使用SQL Model类\n\nQSqlQueryModel：一个只读的读取数据库数据的模型。\n\nQSqlTableModel：一个可读写的单一表格模型，可以不用写SQL语句。\n\nQSqlRelationalTableModel：QSqlTableModel的一个子类，可多表关联在一起。\n\n这些类都继承于QAbstractTableModel，而它们又都继承于QAbstractItemModel。\n\nQSqlQueryModel 只读模式，基于SQL查询基础。\n\nQSqlQueryModel model;\n\nmodel.setQuery(\"SELECT * FROM employee\");\n\nfor (int i = 0; i < model.rowCount(); ++i) {\n\n    int id = model.record(i).value(\"id\").toInt();\n\n    QString name = model.record(i).value(\"name\").toString();\n\n    qDebug() << id << name;\n\n}\n\nQSqlTableModel 可对单一表操作，进行读写操作。\n\n//读取数据\n\nQSqlTableModel model;\n\nmodel.setTable(\"employee\");\n\nmodel.setFilter(\"salary > 50000\");\n\nmodel.setSort(2, Qt::DescendingOrder);\n\nmodel.select();\n\nfor (int i = 0; i < model.rowCount(); ++i) {\n\n    QString name = model.record(i).value(\"name\").toString();\n\n    int salary = model.record(i).value(\"salary\").toInt();\n\n    qDebug() << name << salary;\n\n}\n\n//通过QSqlTableModel::setRecord()修改数据\n\nfor (int i = 0; i < model.rowCount(); ++i) {\n\n    QSqlRecord record = model.record(i);\n\n    double salary = record.value(\"salary\").toInt();\n\n    salary *= 1.1;\n\n    record.setValue(\"salary\", salary);\n\n    model.setRecord(i, record);\n\n}\n\nmodel.submitAll();\n\n//通过QSqlTableModel::setData()来update一条记录\n\nmodel.setData(model.index(row, column), 75000);\n\nmodel.submitAll();\n\n//insert一条记录\n\nmodel.insertRows(row, 1);\n\nmodel.setData(model.index(row, 0), 1013);\n\nmodel.setData(model.index(row, 1), \"Peter Gordon\");\n\nmodel.setData(model.index(row, 2), 68500);\n\nmodel.submitAll();\n\n//delete一条记录\n\nmodel.removeRows(row, 5);\n\nmodel.submitAll();\n\n函数QSqlTableModel::submitAll()确保记录写入数据库中。\n\nQSqlRelationalTableModel 通过外键实现了多表关联。\n\n//employee表中关联city表、country表。\n\nmodel->setTable(\"employee\");\n\nmodel->setRelation(2, QSqlRelation(\"city\", \"id\", \"name\"));\n\nmodel->setRelation(3, QSqlRelation(\"country\", \"id\", \"name\"));\n\n■、数据呈现视图中\n\nQSqlQueryModel、QSqlTableModel、QSqlRelationalTableModel一般都是借助QListView、QTableView、QTreeView吧数据呈现出来的~\n\nQSqlRelationalTableModel model;\n\nmodel->setTable(\"employee\");\n\nmodel->setRelation(2, QSqlRelation(\"city\", \"id\", \"name\"));\n\nmodel->setRelation(3, QSqlRelation(\"country\", \"id\", \"name\"));\n\n//设置标题头部标签信息\n\nmodel->setHeaderData(0, Qt::Horizontal, QObject::tr(\"ID\"));\n\nmodel->setHeaderData(1, Qt::Horizontal, QObject::tr(\"Name\"));\n\nmodel->setHeaderData(2, Qt::Horizontal, QObject::tr(\"City\"));\n\nmodel->setHeaderData(3, Qt::Horizontal, QObject::tr(\"Country\"));\n\n//值得注意的是，在查询时应该明确指明那个表的数据信息，以下两种方式是等价的。\n\nmodel.setFilter(tr(\"city.name = '%1'\").arg(\"Mucich\"));\n\n//model.setFilter(tr(\"employee.cityid = %1\").arg(312));\n\nmodel.select();\n\n//借助QTableView，把数据信息显示出来,\n\nQTableView *view = new QTableView;\n\nview->setModel(model);\n\n//将表中的项，设计为不能编辑模式\n\nview->setEditTriggers(QAbstractItemView::NoEditTriggers);\n\nview->show();\n\n在讲一种通过QSqlField进行Insert、Update、Delete的操作。上边的例子，继续~\n\nQSqlField idField(\"id\", QVariant::Int);\n\nQSqlField nameField(\"name\", QVariant::String);\n\nQSqlField cityIdField(\"cityId\", QVariant::Int);\n\nQSqlField countryIdField(\"countryId\", QVariant::Int);\n\n//一条记录 Id = 12、Name = vic.MINg、City = ShenYang、Country = China。(沈阳区号024、中国086)\n\nidField.setValue(12);\n\nnameField.setValue(\"vic.MINg\");\n\ncityIdField.setValue(24);\n\ncountryIdField.setValue(86);\n\n//insert一条记录，-1表示在最尾端加入\n\nQSqlRecord record;\n\nrecord.append(idField);\n\nrecord.append(nameField);\n\nrecord.append(cityIdField);\n\nrecord.append(countryIdField);\n\nmodel->insertRecord(-1, record);\n\n//update一条记录, row表示要修改的行\n\nQSqlRecord record = model->record(row);\n\nrecord.replace(1, nameField);\n\nrecord.replace(2, cityIdField);\n\nrecord.replace(3, countryIdField);\n\nmodel->setRecord(row, record);\n\n//delete一条记录, row表示要修改的行\n\nmodel->removeRow(row);\n\n■、数据呈现窗体中\n\n通过QDataWidgetMapper可以在窗体控件与数据库中的记录关联在一起。\n\nQDataWidgetMapper *mapper = new QDataWidgetMapper;\n\nmapper->setModel(model);\n\nmapper->addMapping(idSpinBox, 0);\n\nmapper->addMapping(nameLineEdit, 1);\n\nmapper->addMapping(cityComboBox, 2);\n\nmapper->addMapping(countryComboBox, 3);\n\n//可以通过toFirst()、toNext()、toPrevious()、toLast()、setCurrentIndex()来设置当前记录位置，显示相应数据\n\nmapper->toFirst();\n\n//信号、槽的机制model、view、mapper三个联系再一起\n\nconnect(view->selectionModel(), SIGNAL(currentRowChanged(QModelIndex,QModelIndex)),\n\n        mapper, SLOT(setCurrentModelIndex(QModelIndex)));","slug":"qsqlquery-qt","published":1,"updated":"2018-01-13T05:07:00.489Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjccw7xct009maqcrjmg62my0","content":"<p>QSqlQuery提供了对数据库记录的Select、Insert、Update、Delete操作。</p>\n<p>SELECT操作：</p>\n<p>QSqlQuery query;</p>\n<p>query.exec(“SELECT name, salary FROM employee WHERE salary &gt; 50000”);<br>while (query.next()) {<br>    QString name = query.value(0).toString();<br>    int salary = query.value(1).toInt();<br>    qDebug() &lt;&lt; name &lt;&lt; salary;<br>}</p>\n<p>通过QSqlQuery::next()、QSqlQuery::previous()、QSqlQuery::first()、QSqlQuery::last()、QSqlQuery::seek()，可以得到下一条、上一条、第一条、最后一条、任意一条记录的位置。<a id=\"more\"></a></p>\n<p>INSERT操作：</p>\n<p>//单一插入数据</p>\n<p>QSqlQuery query;</p>\n<p>query.prepare(“INSERT INTO employee (id, name, salary) “</p>\n<pre><code>&quot;VALUES (:id, :name, :salary)&quot;);\n</code></pre><p>query.bindValue(“:id”, 1001);</p>\n<p>query.bindValue(“:name”, “Thad Beaumont”);</p>\n<p>query.bindValue(“:salary”, 65000);</p>\n<p>query.exec();</p>\n<p>//批量插入数据</p>\n<p>QSqlQuery query;</p>\n<p>query.prepare(“insert into myTable values (?, ?)”);</p>\n<p>QVariantList ints;</p>\n<p>ints &lt;&lt; 1 &lt;&lt; 2 &lt;&lt; 3 &lt;&lt; 4;</p>\n<p>query.addBindValue(ints);</p>\n<p>QVariantList names;</p>\n<p>names &lt;&lt; “Harald” &lt;&lt; “Boris” &lt;&lt; “Trond” &lt;&lt; QVariant(QVariant::String);</p>\n<p>query.addBindValue(names);</p>\n<p>if (!query.execBatch())</p>\n<pre><code>qDebug() &lt;&lt; query.lastError();\n</code></pre><p>UPDATE操作：</p>\n<p>QSqlQuery query;</p>\n<p>query.prepare(“UPDATE employee SET salary = ? WHERE id = 1003”);</p>\n<p>query.bindValue(0, 70000);</p>\n<p>query.exe();</p>\n<p>DELETE操作：</p>\n<p>QSqlQuery query;</p>\n<p>query.exec(“DELETE FROM employee WHERE id = 1007”);</p>\n<p>事务处理：</p>\n<p>QSqlDatabase::database().transaction();</p>\n<p>QSqlQuery query;</p>\n<p>query.exec(“SELECT id FROM employee WHERE name = ‘Torild Halvorsen’”);</p>\n<p>if (query.next()) {</p>\n<pre><code>int employeeId = query.value(0).toInt();\n\nquery.exec(&quot;INSERT INTO project (id, name, ownerid) &quot;\n\n                   &quot;VALUES (201, &apos;Manhattan Project&apos;, &quot;\n\n                   + QString::number(employeeId) + &quot;)&quot;);\n</code></pre><p>}</p>\n<p>QSqlDatabase::database().commit();</p>\n<p>如果数据库引擎支持事务处理，则函数QSqlDriver::hasFeature(QSqlDriver::Transactions)将返回 真。</p>\n<p>可以通过调用QSqlDatabase::transaction()来初始化一个事务处理。之后执行你想在该事务处理的工作。</p>\n<p>完了再执行QSqlDatabase::commit()来提交事务处理或QSqlDatabase::rollback()取消事务处理。</p>\n<p>这里在举个QSqlDriver::hasFeature(QSqlDriver::QuerySize)例子，可以较快的统计查询记录行数。</p>\n<p>QSqlQuery query;</p>\n<p>int numRows;</p>\n<p>query.exec(“SELECT name, salary FROM employee WHERE salary &gt; 50000”);</p>\n<p>QSqlDatabase defaultDB = QSqlDatabase::database();</p>\n<p>if (defaultDB.driver()-&gt;hasFeature(QSqlDriver::QuerySize)) {</p>\n<pre><code>numRows = query.size();\n</code></pre><p>} else {</p>\n<pre><code>// this can be very slow\n\nquery.last();\n\nnumRows = query.at() + 1;\n</code></pre><p>}</p>\n<p>存储过程：</p>\n<p>AsciiToInt()是数据库中的一个存储过程。</p>\n<p>但我在网上以前好像看过说是SQL Server中的存储过程是通过”EXEC”完成的，而不是”CALL”，这里我不确定！留下一个疑问吧~</p>\n<p>QSqlQuery query;</p>\n<p>query.prepare(“CALL AsciiToInt(?, ?)”);</p>\n<p>query.bindValue(0, “A”);</p>\n<p>query.bindValue(1, 0, QSql::Out);</p>\n<p>query.exec();</p>\n<p>int i = query.boundValue(1).toInt(); // i is 65</p>\n<p>■、使用SQL Model类</p>\n<p>QSqlQueryModel：一个只读的读取数据库数据的模型。</p>\n<p>QSqlTableModel：一个可读写的单一表格模型，可以不用写SQL语句。</p>\n<p>QSqlRelationalTableModel：QSqlTableModel的一个子类，可多表关联在一起。</p>\n<p>这些类都继承于QAbstractTableModel，而它们又都继承于QAbstractItemModel。</p>\n<p>QSqlQueryModel 只读模式，基于SQL查询基础。</p>\n<p>QSqlQueryModel model;</p>\n<p>model.setQuery(“SELECT * FROM employee”);</p>\n<p>for (int i = 0; i &lt; model.rowCount(); ++i) {</p>\n<pre><code>int id = model.record(i).value(&quot;id&quot;).toInt();\n\nQString name = model.record(i).value(&quot;name&quot;).toString();\n\nqDebug() &lt;&lt; id &lt;&lt; name;\n</code></pre><p>}</p>\n<p>QSqlTableModel 可对单一表操作，进行读写操作。</p>\n<p>//读取数据</p>\n<p>QSqlTableModel model;</p>\n<p>model.setTable(“employee”);</p>\n<p>model.setFilter(“salary &gt; 50000”);</p>\n<p>model.setSort(2, Qt::DescendingOrder);</p>\n<p>model.select();</p>\n<p>for (int i = 0; i &lt; model.rowCount(); ++i) {</p>\n<pre><code>QString name = model.record(i).value(&quot;name&quot;).toString();\n\nint salary = model.record(i).value(&quot;salary&quot;).toInt();\n\nqDebug() &lt;&lt; name &lt;&lt; salary;\n</code></pre><p>}</p>\n<p>//通过QSqlTableModel::setRecord()修改数据</p>\n<p>for (int i = 0; i &lt; model.rowCount(); ++i) {</p>\n<pre><code>QSqlRecord record = model.record(i);\n\ndouble salary = record.value(&quot;salary&quot;).toInt();\n\nsalary *= 1.1;\n\nrecord.setValue(&quot;salary&quot;, salary);\n\nmodel.setRecord(i, record);\n</code></pre><p>}</p>\n<p>model.submitAll();</p>\n<p>//通过QSqlTableModel::setData()来update一条记录</p>\n<p>model.setData(model.index(row, column), 75000);</p>\n<p>model.submitAll();</p>\n<p>//insert一条记录</p>\n<p>model.insertRows(row, 1);</p>\n<p>model.setData(model.index(row, 0), 1013);</p>\n<p>model.setData(model.index(row, 1), “Peter Gordon”);</p>\n<p>model.setData(model.index(row, 2), 68500);</p>\n<p>model.submitAll();</p>\n<p>//delete一条记录</p>\n<p>model.removeRows(row, 5);</p>\n<p>model.submitAll();</p>\n<p>函数QSqlTableModel::submitAll()确保记录写入数据库中。</p>\n<p>QSqlRelationalTableModel 通过外键实现了多表关联。</p>\n<p>//employee表中关联city表、country表。</p>\n<p>model-&gt;setTable(“employee”);</p>\n<p>model-&gt;setRelation(2, QSqlRelation(“city”, “id”, “name”));</p>\n<p>model-&gt;setRelation(3, QSqlRelation(“country”, “id”, “name”));</p>\n<p>■、数据呈现视图中</p>\n<p>QSqlQueryModel、QSqlTableModel、QSqlRelationalTableModel一般都是借助QListView、QTableView、QTreeView吧数据呈现出来的~</p>\n<p>QSqlRelationalTableModel model;</p>\n<p>model-&gt;setTable(“employee”);</p>\n<p>model-&gt;setRelation(2, QSqlRelation(“city”, “id”, “name”));</p>\n<p>model-&gt;setRelation(3, QSqlRelation(“country”, “id”, “name”));</p>\n<p>//设置标题头部标签信息</p>\n<p>model-&gt;setHeaderData(0, Qt::Horizontal, QObject::tr(“ID”));</p>\n<p>model-&gt;setHeaderData(1, Qt::Horizontal, QObject::tr(“Name”));</p>\n<p>model-&gt;setHeaderData(2, Qt::Horizontal, QObject::tr(“City”));</p>\n<p>model-&gt;setHeaderData(3, Qt::Horizontal, QObject::tr(“Country”));</p>\n<p>//值得注意的是，在查询时应该明确指明那个表的数据信息，以下两种方式是等价的。</p>\n<p>model.setFilter(tr(“city.name = ‘%1’”).arg(“Mucich”));</p>\n<p>//model.setFilter(tr(“employee.cityid = %1”).arg(312));</p>\n<p>model.select();</p>\n<p>//借助QTableView，把数据信息显示出来,</p>\n<p>QTableView *view = new QTableView;</p>\n<p>view-&gt;setModel(model);</p>\n<p>//将表中的项，设计为不能编辑模式</p>\n<p>view-&gt;setEditTriggers(QAbstractItemView::NoEditTriggers);</p>\n<p>view-&gt;show();</p>\n<p>在讲一种通过QSqlField进行Insert、Update、Delete的操作。上边的例子，继续~</p>\n<p>QSqlField idField(“id”, QVariant::Int);</p>\n<p>QSqlField nameField(“name”, QVariant::String);</p>\n<p>QSqlField cityIdField(“cityId”, QVariant::Int);</p>\n<p>QSqlField countryIdField(“countryId”, QVariant::Int);</p>\n<p>//一条记录 Id = 12、Name = vic.MINg、City = ShenYang、Country = China。(沈阳区号024、中国086)</p>\n<p>idField.setValue(12);</p>\n<p>nameField.setValue(“vic.MINg”);</p>\n<p>cityIdField.setValue(24);</p>\n<p>countryIdField.setValue(86);</p>\n<p>//insert一条记录，-1表示在最尾端加入</p>\n<p>QSqlRecord record;</p>\n<p>record.append(idField);</p>\n<p>record.append(nameField);</p>\n<p>record.append(cityIdField);</p>\n<p>record.append(countryIdField);</p>\n<p>model-&gt;insertRecord(-1, record);</p>\n<p>//update一条记录, row表示要修改的行</p>\n<p>QSqlRecord record = model-&gt;record(row);</p>\n<p>record.replace(1, nameField);</p>\n<p>record.replace(2, cityIdField);</p>\n<p>record.replace(3, countryIdField);</p>\n<p>model-&gt;setRecord(row, record);</p>\n<p>//delete一条记录, row表示要修改的行</p>\n<p>model-&gt;removeRow(row);</p>\n<p>■、数据呈现窗体中</p>\n<p>通过QDataWidgetMapper可以在窗体控件与数据库中的记录关联在一起。</p>\n<p>QDataWidgetMapper *mapper = new QDataWidgetMapper;</p>\n<p>mapper-&gt;setModel(model);</p>\n<p>mapper-&gt;addMapping(idSpinBox, 0);</p>\n<p>mapper-&gt;addMapping(nameLineEdit, 1);</p>\n<p>mapper-&gt;addMapping(cityComboBox, 2);</p>\n<p>mapper-&gt;addMapping(countryComboBox, 3);</p>\n<p>//可以通过toFirst()、toNext()、toPrevious()、toLast()、setCurrentIndex()来设置当前记录位置，显示相应数据</p>\n<p>mapper-&gt;toFirst();</p>\n<p>//信号、槽的机制model、view、mapper三个联系再一起</p>\n<p>connect(view-&gt;selectionModel(), SIGNAL(currentRowChanged(QModelIndex,QModelIndex)),</p>\n<pre><code>mapper, SLOT(setCurrentModelIndex(QModelIndex)));\n</code></pre>","site":{"data":{}},"excerpt":"<p>QSqlQuery提供了对数据库记录的Select、Insert、Update、Delete操作。</p>\n<p>SELECT操作：</p>\n<p>QSqlQuery query;</p>\n<p>query.exec(“SELECT name, salary FROM employee WHERE salary &gt; 50000”);<br>while (query.next()) {<br>    QString name = query.value(0).toString();<br>    int salary = query.value(1).toInt();<br>    qDebug() &lt;&lt; name &lt;&lt; salary;<br>}</p>\n<p>通过QSqlQuery::next()、QSqlQuery::previous()、QSqlQuery::first()、QSqlQuery::last()、QSqlQuery::seek()，可以得到下一条、上一条、第一条、最后一条、任意一条记录的位置。","more":"</p>\n<p>INSERT操作：</p>\n<p>//单一插入数据</p>\n<p>QSqlQuery query;</p>\n<p>query.prepare(“INSERT INTO employee (id, name, salary) “</p>\n<pre><code>&quot;VALUES (:id, :name, :salary)&quot;);\n</code></pre><p>query.bindValue(“:id”, 1001);</p>\n<p>query.bindValue(“:name”, “Thad Beaumont”);</p>\n<p>query.bindValue(“:salary”, 65000);</p>\n<p>query.exec();</p>\n<p>//批量插入数据</p>\n<p>QSqlQuery query;</p>\n<p>query.prepare(“insert into myTable values (?, ?)”);</p>\n<p>QVariantList ints;</p>\n<p>ints &lt;&lt; 1 &lt;&lt; 2 &lt;&lt; 3 &lt;&lt; 4;</p>\n<p>query.addBindValue(ints);</p>\n<p>QVariantList names;</p>\n<p>names &lt;&lt; “Harald” &lt;&lt; “Boris” &lt;&lt; “Trond” &lt;&lt; QVariant(QVariant::String);</p>\n<p>query.addBindValue(names);</p>\n<p>if (!query.execBatch())</p>\n<pre><code>qDebug() &lt;&lt; query.lastError();\n</code></pre><p>UPDATE操作：</p>\n<p>QSqlQuery query;</p>\n<p>query.prepare(“UPDATE employee SET salary = ? WHERE id = 1003”);</p>\n<p>query.bindValue(0, 70000);</p>\n<p>query.exe();</p>\n<p>DELETE操作：</p>\n<p>QSqlQuery query;</p>\n<p>query.exec(“DELETE FROM employee WHERE id = 1007”);</p>\n<p>事务处理：</p>\n<p>QSqlDatabase::database().transaction();</p>\n<p>QSqlQuery query;</p>\n<p>query.exec(“SELECT id FROM employee WHERE name = ‘Torild Halvorsen’”);</p>\n<p>if (query.next()) {</p>\n<pre><code>int employeeId = query.value(0).toInt();\n\nquery.exec(&quot;INSERT INTO project (id, name, ownerid) &quot;\n\n                   &quot;VALUES (201, &apos;Manhattan Project&apos;, &quot;\n\n                   + QString::number(employeeId) + &quot;)&quot;);\n</code></pre><p>}</p>\n<p>QSqlDatabase::database().commit();</p>\n<p>如果数据库引擎支持事务处理，则函数QSqlDriver::hasFeature(QSqlDriver::Transactions)将返回 真。</p>\n<p>可以通过调用QSqlDatabase::transaction()来初始化一个事务处理。之后执行你想在该事务处理的工作。</p>\n<p>完了再执行QSqlDatabase::commit()来提交事务处理或QSqlDatabase::rollback()取消事务处理。</p>\n<p>这里在举个QSqlDriver::hasFeature(QSqlDriver::QuerySize)例子，可以较快的统计查询记录行数。</p>\n<p>QSqlQuery query;</p>\n<p>int numRows;</p>\n<p>query.exec(“SELECT name, salary FROM employee WHERE salary &gt; 50000”);</p>\n<p>QSqlDatabase defaultDB = QSqlDatabase::database();</p>\n<p>if (defaultDB.driver()-&gt;hasFeature(QSqlDriver::QuerySize)) {</p>\n<pre><code>numRows = query.size();\n</code></pre><p>} else {</p>\n<pre><code>// this can be very slow\n\nquery.last();\n\nnumRows = query.at() + 1;\n</code></pre><p>}</p>\n<p>存储过程：</p>\n<p>AsciiToInt()是数据库中的一个存储过程。</p>\n<p>但我在网上以前好像看过说是SQL Server中的存储过程是通过”EXEC”完成的，而不是”CALL”，这里我不确定！留下一个疑问吧~</p>\n<p>QSqlQuery query;</p>\n<p>query.prepare(“CALL AsciiToInt(?, ?)”);</p>\n<p>query.bindValue(0, “A”);</p>\n<p>query.bindValue(1, 0, QSql::Out);</p>\n<p>query.exec();</p>\n<p>int i = query.boundValue(1).toInt(); // i is 65</p>\n<p>■、使用SQL Model类</p>\n<p>QSqlQueryModel：一个只读的读取数据库数据的模型。</p>\n<p>QSqlTableModel：一个可读写的单一表格模型，可以不用写SQL语句。</p>\n<p>QSqlRelationalTableModel：QSqlTableModel的一个子类，可多表关联在一起。</p>\n<p>这些类都继承于QAbstractTableModel，而它们又都继承于QAbstractItemModel。</p>\n<p>QSqlQueryModel 只读模式，基于SQL查询基础。</p>\n<p>QSqlQueryModel model;</p>\n<p>model.setQuery(“SELECT * FROM employee”);</p>\n<p>for (int i = 0; i &lt; model.rowCount(); ++i) {</p>\n<pre><code>int id = model.record(i).value(&quot;id&quot;).toInt();\n\nQString name = model.record(i).value(&quot;name&quot;).toString();\n\nqDebug() &lt;&lt; id &lt;&lt; name;\n</code></pre><p>}</p>\n<p>QSqlTableModel 可对单一表操作，进行读写操作。</p>\n<p>//读取数据</p>\n<p>QSqlTableModel model;</p>\n<p>model.setTable(“employee”);</p>\n<p>model.setFilter(“salary &gt; 50000”);</p>\n<p>model.setSort(2, Qt::DescendingOrder);</p>\n<p>model.select();</p>\n<p>for (int i = 0; i &lt; model.rowCount(); ++i) {</p>\n<pre><code>QString name = model.record(i).value(&quot;name&quot;).toString();\n\nint salary = model.record(i).value(&quot;salary&quot;).toInt();\n\nqDebug() &lt;&lt; name &lt;&lt; salary;\n</code></pre><p>}</p>\n<p>//通过QSqlTableModel::setRecord()修改数据</p>\n<p>for (int i = 0; i &lt; model.rowCount(); ++i) {</p>\n<pre><code>QSqlRecord record = model.record(i);\n\ndouble salary = record.value(&quot;salary&quot;).toInt();\n\nsalary *= 1.1;\n\nrecord.setValue(&quot;salary&quot;, salary);\n\nmodel.setRecord(i, record);\n</code></pre><p>}</p>\n<p>model.submitAll();</p>\n<p>//通过QSqlTableModel::setData()来update一条记录</p>\n<p>model.setData(model.index(row, column), 75000);</p>\n<p>model.submitAll();</p>\n<p>//insert一条记录</p>\n<p>model.insertRows(row, 1);</p>\n<p>model.setData(model.index(row, 0), 1013);</p>\n<p>model.setData(model.index(row, 1), “Peter Gordon”);</p>\n<p>model.setData(model.index(row, 2), 68500);</p>\n<p>model.submitAll();</p>\n<p>//delete一条记录</p>\n<p>model.removeRows(row, 5);</p>\n<p>model.submitAll();</p>\n<p>函数QSqlTableModel::submitAll()确保记录写入数据库中。</p>\n<p>QSqlRelationalTableModel 通过外键实现了多表关联。</p>\n<p>//employee表中关联city表、country表。</p>\n<p>model-&gt;setTable(“employee”);</p>\n<p>model-&gt;setRelation(2, QSqlRelation(“city”, “id”, “name”));</p>\n<p>model-&gt;setRelation(3, QSqlRelation(“country”, “id”, “name”));</p>\n<p>■、数据呈现视图中</p>\n<p>QSqlQueryModel、QSqlTableModel、QSqlRelationalTableModel一般都是借助QListView、QTableView、QTreeView吧数据呈现出来的~</p>\n<p>QSqlRelationalTableModel model;</p>\n<p>model-&gt;setTable(“employee”);</p>\n<p>model-&gt;setRelation(2, QSqlRelation(“city”, “id”, “name”));</p>\n<p>model-&gt;setRelation(3, QSqlRelation(“country”, “id”, “name”));</p>\n<p>//设置标题头部标签信息</p>\n<p>model-&gt;setHeaderData(0, Qt::Horizontal, QObject::tr(“ID”));</p>\n<p>model-&gt;setHeaderData(1, Qt::Horizontal, QObject::tr(“Name”));</p>\n<p>model-&gt;setHeaderData(2, Qt::Horizontal, QObject::tr(“City”));</p>\n<p>model-&gt;setHeaderData(3, Qt::Horizontal, QObject::tr(“Country”));</p>\n<p>//值得注意的是，在查询时应该明确指明那个表的数据信息，以下两种方式是等价的。</p>\n<p>model.setFilter(tr(“city.name = ‘%1’”).arg(“Mucich”));</p>\n<p>//model.setFilter(tr(“employee.cityid = %1”).arg(312));</p>\n<p>model.select();</p>\n<p>//借助QTableView，把数据信息显示出来,</p>\n<p>QTableView *view = new QTableView;</p>\n<p>view-&gt;setModel(model);</p>\n<p>//将表中的项，设计为不能编辑模式</p>\n<p>view-&gt;setEditTriggers(QAbstractItemView::NoEditTriggers);</p>\n<p>view-&gt;show();</p>\n<p>在讲一种通过QSqlField进行Insert、Update、Delete的操作。上边的例子，继续~</p>\n<p>QSqlField idField(“id”, QVariant::Int);</p>\n<p>QSqlField nameField(“name”, QVariant::String);</p>\n<p>QSqlField cityIdField(“cityId”, QVariant::Int);</p>\n<p>QSqlField countryIdField(“countryId”, QVariant::Int);</p>\n<p>//一条记录 Id = 12、Name = vic.MINg、City = ShenYang、Country = China。(沈阳区号024、中国086)</p>\n<p>idField.setValue(12);</p>\n<p>nameField.setValue(“vic.MINg”);</p>\n<p>cityIdField.setValue(24);</p>\n<p>countryIdField.setValue(86);</p>\n<p>//insert一条记录，-1表示在最尾端加入</p>\n<p>QSqlRecord record;</p>\n<p>record.append(idField);</p>\n<p>record.append(nameField);</p>\n<p>record.append(cityIdField);</p>\n<p>record.append(countryIdField);</p>\n<p>model-&gt;insertRecord(-1, record);</p>\n<p>//update一条记录, row表示要修改的行</p>\n<p>QSqlRecord record = model-&gt;record(row);</p>\n<p>record.replace(1, nameField);</p>\n<p>record.replace(2, cityIdField);</p>\n<p>record.replace(3, countryIdField);</p>\n<p>model-&gt;setRecord(row, record);</p>\n<p>//delete一条记录, row表示要修改的行</p>\n<p>model-&gt;removeRow(row);</p>\n<p>■、数据呈现窗体中</p>\n<p>通过QDataWidgetMapper可以在窗体控件与数据库中的记录关联在一起。</p>\n<p>QDataWidgetMapper *mapper = new QDataWidgetMapper;</p>\n<p>mapper-&gt;setModel(model);</p>\n<p>mapper-&gt;addMapping(idSpinBox, 0);</p>\n<p>mapper-&gt;addMapping(nameLineEdit, 1);</p>\n<p>mapper-&gt;addMapping(cityComboBox, 2);</p>\n<p>mapper-&gt;addMapping(countryComboBox, 3);</p>\n<p>//可以通过toFirst()、toNext()、toPrevious()、toLast()、setCurrentIndex()来设置当前记录位置，显示相应数据</p>\n<p>mapper-&gt;toFirst();</p>\n<p>//信号、槽的机制model、view、mapper三个联系再一起</p>\n<p>connect(view-&gt;selectionModel(), SIGNAL(currentRowChanged(QModelIndex,QModelIndex)),</p>\n<pre><code>mapper, SLOT(setCurrentModelIndex(QModelIndex)));\n</code></pre>"},{"title":"Qt关于ToolButton 控件的贴图","id":"988","date":"2012-04-10T08:49:19.000Z","_content":"\nQToolButton *toolButton = new   QToolButton(this);\n toolButton->setToolButtonStyle(Qt::ToolButtonTextUnderIcon);//上面图下面是字\n toolButton->setIcon(QIcon(\"ii.png\"));\n toolButton->setText(\"sadfadfhga\");","source":"_posts/qt-e5-85-b3-e4-ba-8etoolbutton-e6-8e-a7-e4-bb-b6-e7-9a-84-e8-b4-b4-e5-9b-be.md","raw":"---\ntitle: Qt关于ToolButton 控件的贴图\nid: 988\ncategories:\n  - Qt\ndate: 2012-04-10 16:49:19\ntags:\n---\n\nQToolButton *toolButton = new   QToolButton(this);\n toolButton->setToolButtonStyle(Qt::ToolButtonTextUnderIcon);//上面图下面是字\n toolButton->setIcon(QIcon(\"ii.png\"));\n toolButton->setText(\"sadfadfhga\");","slug":"qt-e5-85-b3-e4-ba-8etoolbutton-e6-8e-a7-e4-bb-b6-e7-9a-84-e8-b4-b4-e5-9b-be","published":1,"updated":"2018-01-13T05:07:00.493Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjccw7xcv009qaqcr1i8ox0n3","content":"<p>QToolButton *toolButton = new   QToolButton(this);<br> toolButton-&gt;setToolButtonStyle(Qt::ToolButtonTextUnderIcon);//上面图下面是字<br> toolButton-&gt;setIcon(QIcon(“ii.png”));<br> toolButton-&gt;setText(“sadfadfhga”);</p>\n","site":{"data":{}},"excerpt":"","more":"<p>QToolButton *toolButton = new   QToolButton(this);<br> toolButton-&gt;setToolButtonStyle(Qt::ToolButtonTextUnderIcon);//上面图下面是字<br> toolButton-&gt;setIcon(QIcon(“ii.png”));<br> toolButton-&gt;setText(“sadfadfhga”);</p>\n"},{"title":"Qt　透明窗体实现","id":"947","date":"2012-03-25T01:46:46.000Z","_content":"\n一. 背景刷成黑色,前景色设为白色。 方法一、paltette方式，经测试，该方法不会影响到其他控件,推荐使用 QPalette bgpal = palette();\n\nbgpal.setColor (QPalette::Background, QColor (0, 0 , 0, 255));\n\n//bgpal.setColor (QPalette::Background, Qt::transparent);\n\nbgpal.setColor (QPalette::Foreground, QColor (255,255,255,255)); setPalette (bgpal);\n\n方法二、stylesheet方式 影响子控件的方法是：\n\nsetStyleSheet (\"background-color: rgb(0,0,0);color: rgb(255,255,255);\");\n\n不影响子控件的方法是：\n\nsetStyleSheet (\"venus--TitleBar {background-color: rgb(0,0,0);color: rgb(255,255,255);}\");\n\n二. 圆角控件 用stylesheet方式<!--more-->\n\nsetStyleSheet (\"border:2px groove gray;border-radius:10px;padding:2px 4px;\");\n\n三. 圆角窗口 RoundRectWin::RoundRectWin() { QPalette p = palette(); QPixmap img(\"roundrect.png\");\n\n    QBitmap mask(\"roundrect_mask.png\");\n\n    p.setBrush(QPalette::Window, QBrush(img));\n\n    setPalette(p);\n\n    setMask(mask);\n\n    resize(img.size());\n\n    //setWindowFlags(Qt::FramelessWindowHint);//这句会去掉标题栏 } 注意:mask的图多余部分设为白色\n\n四. 半透明窗口\n\n1.窗口整体透明，但是窗体上的控件不透明。 通过设置窗体的背景色来实现，将背景色设置为全透。 QPalette pal = palette();\n\npal.setColor(QPalette::Background, QColor(0x00,0xff,0x00,0x00)); setPalette(pal); 试验效果：\n\n 窗体标题栏不透明；\n\n 窗体客户区上的控件不透明，QLabel控件只是字显示，控件背景色透明； 窗体客户区完全透明。\n\n 另外从网上看到的方法： setAttribute(Qt::WA_TranslucentBackground, true)； 试验的结果是类似于上面的方法，但有时候窗体会被一些杂色斑点填充，未找到原因。\n\n2.窗口及其上面的控件都半透明：\n\nsetWindowOpacity(0.7)\n\n试验效果：窗口及控件都半透明。注意不能够setWindowFlags(Qt::FramelessWindowHint);要不就不起作用\n\n3.窗口整体不透明，局部透明：\n\n在Paint事件中使用Clear模式绘图。\n\nvoid TestWindow::paintEvent( QPaintEvent* )\n\n{ QPainter p(this);\n\n               p.setCompositionMode( QPainter::CompositionMode_Clear ); p.fillRect( 10, 10, 300, 300, Qt::SolidPattern ); }\n\n试验效果：绘制区域全透明。如果绘制区域有控件不会影响控件。\n\n以上实验均是基于Directfb的Qte测试。在Linux下及Windows下效果会略有不同。 比如在Windows下第3个实验，绘制区域就是一个黑窟窿，如果Window本身半透，则是Window下面的内容加上半透效果，不是全透明效果。\n\n五. 控制QPixmap的alpha\n\nQPixmap temp(pixmapTop.size()); temp.fill(Qt::transparent);\n\n    QPainter p(&temp);\n\n    p.setCompositionMode(QPainter::CompositionMode_Source);\n\n    p.drawPixmap(0, 0, pixmapTop);\n\n    p.setCompositionMode(QPainter::CompositionMode_DestinationIn);\n\n    p.fillRect(temp.rect(), QColor(0, 0, 0, alpha)); //--lable显示前景图片 ui->label->setScaledContents(true);\n\n    ui->label->setPixmap(temp);\n\n六. layout 的边界 layout->setMargin (0);","source":"_posts/qt-e3-80-80-e9-80-8f-e6-98-8e-e7-aa-97-e4-bd-93-e5-ae-9e-e7-8e-b0.md","raw":"---\ntitle: Qt　透明窗体实现\ntags:\n  - Qt\nid: 947\ncategories:\n  - Qt\ndate: 2012-03-25 09:46:46\n---\n\n一. 背景刷成黑色,前景色设为白色。 方法一、paltette方式，经测试，该方法不会影响到其他控件,推荐使用 QPalette bgpal = palette();\n\nbgpal.setColor (QPalette::Background, QColor (0, 0 , 0, 255));\n\n//bgpal.setColor (QPalette::Background, Qt::transparent);\n\nbgpal.setColor (QPalette::Foreground, QColor (255,255,255,255)); setPalette (bgpal);\n\n方法二、stylesheet方式 影响子控件的方法是：\n\nsetStyleSheet (\"background-color: rgb(0,0,0);color: rgb(255,255,255);\");\n\n不影响子控件的方法是：\n\nsetStyleSheet (\"venus--TitleBar {background-color: rgb(0,0,0);color: rgb(255,255,255);}\");\n\n二. 圆角控件 用stylesheet方式<!--more-->\n\nsetStyleSheet (\"border:2px groove gray;border-radius:10px;padding:2px 4px;\");\n\n三. 圆角窗口 RoundRectWin::RoundRectWin() { QPalette p = palette(); QPixmap img(\"roundrect.png\");\n\n    QBitmap mask(\"roundrect_mask.png\");\n\n    p.setBrush(QPalette::Window, QBrush(img));\n\n    setPalette(p);\n\n    setMask(mask);\n\n    resize(img.size());\n\n    //setWindowFlags(Qt::FramelessWindowHint);//这句会去掉标题栏 } 注意:mask的图多余部分设为白色\n\n四. 半透明窗口\n\n1.窗口整体透明，但是窗体上的控件不透明。 通过设置窗体的背景色来实现，将背景色设置为全透。 QPalette pal = palette();\n\npal.setColor(QPalette::Background, QColor(0x00,0xff,0x00,0x00)); setPalette(pal); 试验效果：\n\n 窗体标题栏不透明；\n\n 窗体客户区上的控件不透明，QLabel控件只是字显示，控件背景色透明； 窗体客户区完全透明。\n\n 另外从网上看到的方法： setAttribute(Qt::WA_TranslucentBackground, true)； 试验的结果是类似于上面的方法，但有时候窗体会被一些杂色斑点填充，未找到原因。\n\n2.窗口及其上面的控件都半透明：\n\nsetWindowOpacity(0.7)\n\n试验效果：窗口及控件都半透明。注意不能够setWindowFlags(Qt::FramelessWindowHint);要不就不起作用\n\n3.窗口整体不透明，局部透明：\n\n在Paint事件中使用Clear模式绘图。\n\nvoid TestWindow::paintEvent( QPaintEvent* )\n\n{ QPainter p(this);\n\n               p.setCompositionMode( QPainter::CompositionMode_Clear ); p.fillRect( 10, 10, 300, 300, Qt::SolidPattern ); }\n\n试验效果：绘制区域全透明。如果绘制区域有控件不会影响控件。\n\n以上实验均是基于Directfb的Qte测试。在Linux下及Windows下效果会略有不同。 比如在Windows下第3个实验，绘制区域就是一个黑窟窿，如果Window本身半透，则是Window下面的内容加上半透效果，不是全透明效果。\n\n五. 控制QPixmap的alpha\n\nQPixmap temp(pixmapTop.size()); temp.fill(Qt::transparent);\n\n    QPainter p(&temp);\n\n    p.setCompositionMode(QPainter::CompositionMode_Source);\n\n    p.drawPixmap(0, 0, pixmapTop);\n\n    p.setCompositionMode(QPainter::CompositionMode_DestinationIn);\n\n    p.fillRect(temp.rect(), QColor(0, 0, 0, alpha)); //--lable显示前景图片 ui->label->setScaledContents(true);\n\n    ui->label->setPixmap(temp);\n\n六. layout 的边界 layout->setMargin (0);","slug":"qt-e3-80-80-e9-80-8f-e6-98-8e-e7-aa-97-e4-bd-93-e5-ae-9e-e7-8e-b0","published":1,"updated":"2018-01-13T05:07:00.484Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjccw7xcx009taqcrq34zko2k","content":"<p>一. 背景刷成黑色,前景色设为白色。 方法一、paltette方式，经测试，该方法不会影响到其他控件,推荐使用 QPalette bgpal = palette();</p>\n<p>bgpal.setColor (QPalette::Background, QColor (0, 0 , 0, 255));</p>\n<p>//bgpal.setColor (QPalette::Background, Qt::transparent);</p>\n<p>bgpal.setColor (QPalette::Foreground, QColor (255,255,255,255)); setPalette (bgpal);</p>\n<p>方法二、stylesheet方式 影响子控件的方法是：</p>\n<p>setStyleSheet (“background-color: rgb(0,0,0);color: rgb(255,255,255);”);</p>\n<p>不影响子控件的方法是：</p>\n<p>setStyleSheet (“venus–TitleBar {background-color: rgb(0,0,0);color: rgb(255,255,255);}”);</p>\n<p>二. 圆角控件 用stylesheet方式<a id=\"more\"></a></p>\n<p>setStyleSheet (“border:2px groove gray;border-radius:10px;padding:2px 4px;”);</p>\n<p>三. 圆角窗口 RoundRectWin::RoundRectWin() { QPalette p = palette(); QPixmap img(“roundrect.png”);</p>\n<pre><code>QBitmap mask(&quot;roundrect_mask.png&quot;);\n\np.setBrush(QPalette::Window, QBrush(img));\n\nsetPalette(p);\n\nsetMask(mask);\n\nresize(img.size());\n\n//setWindowFlags(Qt::FramelessWindowHint);//这句会去掉标题栏 } 注意:mask的图多余部分设为白色\n</code></pre><p>四. 半透明窗口</p>\n<p>1.窗口整体透明，但是窗体上的控件不透明。 通过设置窗体的背景色来实现，将背景色设置为全透。 QPalette pal = palette();</p>\n<p>pal.setColor(QPalette::Background, QColor(0x00,0xff,0x00,0x00)); setPalette(pal); 试验效果：</p>\n<p> 窗体标题栏不透明；</p>\n<p> 窗体客户区上的控件不透明，QLabel控件只是字显示，控件背景色透明； 窗体客户区完全透明。</p>\n<p> 另外从网上看到的方法： setAttribute(Qt::WA_TranslucentBackground, true)； 试验的结果是类似于上面的方法，但有时候窗体会被一些杂色斑点填充，未找到原因。</p>\n<p>2.窗口及其上面的控件都半透明：</p>\n<p>setWindowOpacity(0.7)</p>\n<p>试验效果：窗口及控件都半透明。注意不能够setWindowFlags(Qt::FramelessWindowHint);要不就不起作用</p>\n<p>3.窗口整体不透明，局部透明：</p>\n<p>在Paint事件中使用Clear模式绘图。</p>\n<p>void TestWindow::paintEvent( QPaintEvent* )</p>\n<p>{ QPainter p(this);</p>\n<pre><code>p.setCompositionMode( QPainter::CompositionMode_Clear ); p.fillRect( 10, 10, 300, 300, Qt::SolidPattern ); }\n</code></pre><p>试验效果：绘制区域全透明。如果绘制区域有控件不会影响控件。</p>\n<p>以上实验均是基于Directfb的Qte测试。在Linux下及Windows下效果会略有不同。 比如在Windows下第3个实验，绘制区域就是一个黑窟窿，如果Window本身半透，则是Window下面的内容加上半透效果，不是全透明效果。</p>\n<p>五. 控制QPixmap的alpha</p>\n<p>QPixmap temp(pixmapTop.size()); temp.fill(Qt::transparent);</p>\n<pre><code>QPainter p(&amp;temp);\n\np.setCompositionMode(QPainter::CompositionMode_Source);\n\np.drawPixmap(0, 0, pixmapTop);\n\np.setCompositionMode(QPainter::CompositionMode_DestinationIn);\n\np.fillRect(temp.rect(), QColor(0, 0, 0, alpha)); //--lable显示前景图片 ui-&gt;label-&gt;setScaledContents(true);\n\nui-&gt;label-&gt;setPixmap(temp);\n</code></pre><p>六. layout 的边界 layout-&gt;setMargin (0);</p>\n","site":{"data":{}},"excerpt":"<p>一. 背景刷成黑色,前景色设为白色。 方法一、paltette方式，经测试，该方法不会影响到其他控件,推荐使用 QPalette bgpal = palette();</p>\n<p>bgpal.setColor (QPalette::Background, QColor (0, 0 , 0, 255));</p>\n<p>//bgpal.setColor (QPalette::Background, Qt::transparent);</p>\n<p>bgpal.setColor (QPalette::Foreground, QColor (255,255,255,255)); setPalette (bgpal);</p>\n<p>方法二、stylesheet方式 影响子控件的方法是：</p>\n<p>setStyleSheet (“background-color: rgb(0,0,0);color: rgb(255,255,255);”);</p>\n<p>不影响子控件的方法是：</p>\n<p>setStyleSheet (“venus–TitleBar {background-color: rgb(0,0,0);color: rgb(255,255,255);}”);</p>\n<p>二. 圆角控件 用stylesheet方式","more":"</p>\n<p>setStyleSheet (“border:2px groove gray;border-radius:10px;padding:2px 4px;”);</p>\n<p>三. 圆角窗口 RoundRectWin::RoundRectWin() { QPalette p = palette(); QPixmap img(“roundrect.png”);</p>\n<pre><code>QBitmap mask(&quot;roundrect_mask.png&quot;);\n\np.setBrush(QPalette::Window, QBrush(img));\n\nsetPalette(p);\n\nsetMask(mask);\n\nresize(img.size());\n\n//setWindowFlags(Qt::FramelessWindowHint);//这句会去掉标题栏 } 注意:mask的图多余部分设为白色\n</code></pre><p>四. 半透明窗口</p>\n<p>1.窗口整体透明，但是窗体上的控件不透明。 通过设置窗体的背景色来实现，将背景色设置为全透。 QPalette pal = palette();</p>\n<p>pal.setColor(QPalette::Background, QColor(0x00,0xff,0x00,0x00)); setPalette(pal); 试验效果：</p>\n<p> 窗体标题栏不透明；</p>\n<p> 窗体客户区上的控件不透明，QLabel控件只是字显示，控件背景色透明； 窗体客户区完全透明。</p>\n<p> 另外从网上看到的方法： setAttribute(Qt::WA_TranslucentBackground, true)； 试验的结果是类似于上面的方法，但有时候窗体会被一些杂色斑点填充，未找到原因。</p>\n<p>2.窗口及其上面的控件都半透明：</p>\n<p>setWindowOpacity(0.7)</p>\n<p>试验效果：窗口及控件都半透明。注意不能够setWindowFlags(Qt::FramelessWindowHint);要不就不起作用</p>\n<p>3.窗口整体不透明，局部透明：</p>\n<p>在Paint事件中使用Clear模式绘图。</p>\n<p>void TestWindow::paintEvent( QPaintEvent* )</p>\n<p>{ QPainter p(this);</p>\n<pre><code>p.setCompositionMode( QPainter::CompositionMode_Clear ); p.fillRect( 10, 10, 300, 300, Qt::SolidPattern ); }\n</code></pre><p>试验效果：绘制区域全透明。如果绘制区域有控件不会影响控件。</p>\n<p>以上实验均是基于Directfb的Qte测试。在Linux下及Windows下效果会略有不同。 比如在Windows下第3个实验，绘制区域就是一个黑窟窿，如果Window本身半透，则是Window下面的内容加上半透效果，不是全透明效果。</p>\n<p>五. 控制QPixmap的alpha</p>\n<p>QPixmap temp(pixmapTop.size()); temp.fill(Qt::transparent);</p>\n<pre><code>QPainter p(&amp;temp);\n\np.setCompositionMode(QPainter::CompositionMode_Source);\n\np.drawPixmap(0, 0, pixmapTop);\n\np.setCompositionMode(QPainter::CompositionMode_DestinationIn);\n\np.fillRect(temp.rect(), QColor(0, 0, 0, alpha)); //--lable显示前景图片 ui-&gt;label-&gt;setScaledContents(true);\n\nui-&gt;label-&gt;setPixmap(temp);\n</code></pre><p>六. layout 的边界 layout-&gt;setMargin (0);</p>"},{"title":"Qt 出现“undefined reference to `vtable for”原因总结","id":"1176","date":"2014-01-22T03:03:52.000Z","_content":"\n由于Qt本身实现的机制所限，我们在使用Qt制作某些软件程序的时候，会遇到各种各样这样那样的问题，而且很多是很难，或者根本找不到原因的，即使解决了问题，如果有人问你为什么，你只能回答－－不知道。\n\n今天我在这里列举的问题也是再编写Qt程序时，总是遇到的问题，问题普遍，而答案却不唯一，解释这一个问题的说法很多，往往只适合某一种情况，因为这个错误太笼统了，它就是－－ “undefined reference to `vtable for”可能你看着很熟悉，似乎在c++程序中也遇到过这个问题，你说对了，有时候这个错误，不只是qt的原因，还有你的c++程序的原因。\n\n下面搜集了网上的一些出现的现象，对应解决方法，原因，基本上我都验证过，收录于此，以做备份。\n一：预编译器打开宏Q_OBJECT，声明若干个由moc处理(implement)的成员函数。\n\n如果得到类似于“undefined reference to vtable for LcdNumber”的编译错误(if you get compiler errors along the lines of \"undefined reference to vtable for LcdNumber\")，你可能是忘记了执行moc，或者忘记了将moc输出加入到link命令里。\n\n某一个类中如果加入Q_OBJECT后,则link时提示:undefined reference to vtable for \"xxx::xxx\".删掉它则没有任何问题.<!--more-->\n\n解决:尝试(1):把所有的obj文件和uic文件删除,重新编译.仍然失败.\n\n去trolltech的mail lists找到原因: 因为qmake生成Makefile的时候,这个类的头文件中并没有Q_OBJECT,所以在相应的Makefile里面并没有用moc xxx.h命令,最终导致链接失败.重新运行qmake,问题解决.\n在查找解决方法的时候,附带发现一点:\nqmake 不会处理.cpp文件里的Q_OBJECT,所以,如果在.cpp文件中有它的话,也会产生undefined reference to vtable for \"xxx::xxx\". 这时,需要先用moc xxxx.cpp生成相应的moc文件,再包含到.cpp里面去,才能解决这个问题.\n\n这里可以发现问题的出现是因为没有moc生成相应的moc文件，之后连接就出问题。\n我找了好多源码之类的问题，就是没有找pro的错误，后来想到qt中moc我们是有make做的\nqt的make编译是根据Makefile来的，而Makefile是由pro文件来的。这才想到了找pro文件的错误。\nfrom: http://www.cublog.cn/u/16292/showart_136087.html\n\n二：undefined reference to vtable for \"xxx::xxx\"\n\n今天碰到了这个问题，终于被我google到了：\nhttp://www.cublog.cn/opera/showart.php?blogid=8650&amp;id=49526\n原 因：qmake不会处理.cpp文件里的Q_OBJECT,所以,如果在.cpp文件中有它的话,也会产生undefined reference to vtable for \"xxx::xxx\". 这时,需要先用moc xxxx.cpp生成相应的moc文件,再包含到.cpp里面去,才能解决这个问题.\n\n其他：\n1.问题: QGLViewer中的函数不能正常link.\n\n解决: 翻看其源代码,发现是因为从源码安装libQGLViewer时,编译用了Qt 3,而我的程序中用Qt4 编译.所以必须重新用Qt4编译.但是,更改QTDIR 环境变量为Qt4后,重新编译的话,qmake生成makefile时就提示出错.进一步发现,是因为虽然设了QTDIR为Qt4,头文件和库文件都会使 用Qt4,但是moc,uic等都是用的qt3版的,再把PATH环境变量改动后,一切ok.\n\n2.问题:某一个类中如果加入Q_OBJECT后, 则link时提示:undefined reference to vtable for \"xxx::xxx\".删掉它则没有任何问题.\n\n解决:尝试(1):把所有的obj文件和uic文件删除,重新编译.仍然失败.去trolltech的 mail lists找到原因: 因为qmake生成Makefile的时候,这个类的头文件中并没有Q_OBJECT,所以在相应的Makefile里面并没有用moc xxx.h命令,最终导致链接失败.重新运行qmake,问题解决.在查找解决方法的时候,附带发现一点:\n\nqmake 不会处理.cpp文件里的Q_OBJECT,所以,如果在.cpp文件中有它的话,也会产生undefined reference to vtable for \"xxx::xxx\". 这时,需要先用moc xxxx.cpp生成相应的moc文件,再包含到.cpp里面去,才能解决这个问题.\n\n3\\. 看Qt的reference发现: 可以connect(pObjA, SIGNAL(someSignalA()),pObjB,SIGNAL(someSignalB()));这样pObjA发出的someSingalA 会导致pObjB发出someSignalB,从而形成信号接力.\n\nfrom：http://blog.donews.com/netexe/archive/2006/02/09/720544.aspx\n\n三：编译报错的部分是：\n\nCODE:\n\n[Copy to clipboard]\ntmpobjrelease_sharedmyplot.o(.text+0x194):myplot.cpp: undefined reference to\n`vtable for MyPlot'\ntmpobjrelease_sharedmyplot.o(.text+0x19b):myplot.cpp: undefined reference to\n`vtable for MyPlot'\ntmpobjrelease_sharedmyplot.o(.text+0x934):myplot.cpp: undefined reference to\n`vtable for MyPlot'\ntmpobjrelease_sharedmyplot.o(.text+0x93b):myplot.cpp: undefined reference to\n`vtable for MyPlot'\ncollect2: ld returned 1 exit status你 MyPlot 是不是声明了什么 virtual 的 方法， 但在实现（cpp）文件里没有实现。\n看了一下， 现在推测一下。 MyPlot 继承了 QwtPlot， 现在报的这个错， 应该是这个意思，\n1\\. QwtPlot 里含有 vritual 方法， 所以你的继承类需要一个 virtual 的析构函数\n2\\. QwtPlot 里含有 纯虚的方法， 你没有继承， 而这个可能性比较小\n\n所以， 你可以：\n在MyPlot里声明一下一个虚的析构函数\nvirtual ~MyPlot() {}\n\n我们来看一个简单些的例子吧：\n\n#include\n#include\n\nclass myWidget :public QWidget\n{\nQ_OBJECT\npublic:\nmyWidget(QWidget *parent = 0);\npublic slots:\nvoid shutDown();\nprivate:\nQPushButton *exit;\n};\n\nmyWidget::myWidget(QWidget *parent):QWidget(parent)\n{\nsetMinimumSize(120, 180);\nsetMaximumSize(120, 180);\nexit = new QPushButton(\"ShutDown!\",this);\nconnect(exit,SIGNAL(clicked()),this,SLOT(shutDown()));\n}\n\nvoid myWidget::shutDown()\n{\nsystem(\"halt\");\n}\n\nint main(int argc, char **argv)\n{\nQApplication app(argc, argv);\nmyWidget *w = new myWidget();\nw-&gt;show();\napp.exec();\n}\n\n还是报错：\n\nshut.o(.text+0x21): In function `myWidget::myWidget[not-in-charge](QWidget*, char const*)':\n: undefined reference to `vtable for myWidget'\nshut.o(.text+0x28): In function `myWidget::myWidget[not-in-charge](QWidget*, char const*)':\n: undefined reference to `vtable for myWidget'\nshut.o(.text+0x141): In function `myWidget::myWidget[in-charge](QWidget*, char const*)':\n: undefined reference to `vtable for myWidget'\nshut.o(.text+0x148): In function `myWidget::myWidget[in-charge](QWidget*, char const*)':\n: undefined reference to `vtable for myWidget'\ncollect2: ld returned 1 exit status这是我从l搜索引擎上搜到的例子，从代码中好像看不到明显的错误吧\n我自己试了一下编译也是出错\n\n刚才那个简单的例子的原因可能是这样的：\n\n2.问题:某一个类中如果加入Q_OBJECT后,则link时提示:undefined reference to vtable for \"xxx::xxx\".删掉它则没有任何问题.\n\n解决:尝试(1):把所有的obj文件和uic文件删除,重新编译.仍然失败.\n\n去trolltech的mail lists找到原因: 因为qmake生成Makefile的时候,这个类的头文件中并没有Q_OBJECT,所以在相应的Makefile里面并没有用moc xxx.h命令,最终导致链接失败.重新运行qmake,问题解决.\n\n在查找解决方法的时候,附带发现一点:\n\nqmake不会处理.cpp文件里的Q_OBJECT,所以,如果在.cpp文件中有它的话,也会产生undefined reference to vtable for \"xxx::xxx\". 这时,需要先用moc xxxx.cpp生成相应的moc文件,再包含到.cpp里面去,才能解决这个问题.知道你的问题了， 上面的例子不好， 因为你这个把main和类放在一起了。 如果分开， 可能就没问题， 包括 h和 cpp 分开。\n\n要解决上面的问题， 在你main.cpp 最后加一行\n#include \"main.moc\"\n\n然后把除了 main.cpp 的其它文件都删了。重新来， 没问题的。\n\n所以， 我估计你前面提到的问题也是没有链接 moc 文件。 你在你的 myplot.cpp 文件最后加一行： #include \"myplot.moc\" 试试看。\n\n另外： 你main 没有返回值， 编译会警告， 而且程序最后一行不是只含有回车， 也会警告。","source":"_posts/qt-e5-87-ba-e7-8e-b0undefined-reference-to-vtable-for-e5-8e-9f-e5-9b-a0-e6-80-bb-e7-bb-93.md","raw":"---\ntitle: Qt 出现“undefined reference to `vtable for”原因总结\nid: 1176\ncategories:\n  - Qt\ndate: 2014-01-22 11:03:52\ntags:\n---\n\n由于Qt本身实现的机制所限，我们在使用Qt制作某些软件程序的时候，会遇到各种各样这样那样的问题，而且很多是很难，或者根本找不到原因的，即使解决了问题，如果有人问你为什么，你只能回答－－不知道。\n\n今天我在这里列举的问题也是再编写Qt程序时，总是遇到的问题，问题普遍，而答案却不唯一，解释这一个问题的说法很多，往往只适合某一种情况，因为这个错误太笼统了，它就是－－ “undefined reference to `vtable for”可能你看着很熟悉，似乎在c++程序中也遇到过这个问题，你说对了，有时候这个错误，不只是qt的原因，还有你的c++程序的原因。\n\n下面搜集了网上的一些出现的现象，对应解决方法，原因，基本上我都验证过，收录于此，以做备份。\n一：预编译器打开宏Q_OBJECT，声明若干个由moc处理(implement)的成员函数。\n\n如果得到类似于“undefined reference to vtable for LcdNumber”的编译错误(if you get compiler errors along the lines of \"undefined reference to vtable for LcdNumber\")，你可能是忘记了执行moc，或者忘记了将moc输出加入到link命令里。\n\n某一个类中如果加入Q_OBJECT后,则link时提示:undefined reference to vtable for \"xxx::xxx\".删掉它则没有任何问题.<!--more-->\n\n解决:尝试(1):把所有的obj文件和uic文件删除,重新编译.仍然失败.\n\n去trolltech的mail lists找到原因: 因为qmake生成Makefile的时候,这个类的头文件中并没有Q_OBJECT,所以在相应的Makefile里面并没有用moc xxx.h命令,最终导致链接失败.重新运行qmake,问题解决.\n在查找解决方法的时候,附带发现一点:\nqmake 不会处理.cpp文件里的Q_OBJECT,所以,如果在.cpp文件中有它的话,也会产生undefined reference to vtable for \"xxx::xxx\". 这时,需要先用moc xxxx.cpp生成相应的moc文件,再包含到.cpp里面去,才能解决这个问题.\n\n这里可以发现问题的出现是因为没有moc生成相应的moc文件，之后连接就出问题。\n我找了好多源码之类的问题，就是没有找pro的错误，后来想到qt中moc我们是有make做的\nqt的make编译是根据Makefile来的，而Makefile是由pro文件来的。这才想到了找pro文件的错误。\nfrom: http://www.cublog.cn/u/16292/showart_136087.html\n\n二：undefined reference to vtable for \"xxx::xxx\"\n\n今天碰到了这个问题，终于被我google到了：\nhttp://www.cublog.cn/opera/showart.php?blogid=8650&amp;id=49526\n原 因：qmake不会处理.cpp文件里的Q_OBJECT,所以,如果在.cpp文件中有它的话,也会产生undefined reference to vtable for \"xxx::xxx\". 这时,需要先用moc xxxx.cpp生成相应的moc文件,再包含到.cpp里面去,才能解决这个问题.\n\n其他：\n1.问题: QGLViewer中的函数不能正常link.\n\n解决: 翻看其源代码,发现是因为从源码安装libQGLViewer时,编译用了Qt 3,而我的程序中用Qt4 编译.所以必须重新用Qt4编译.但是,更改QTDIR 环境变量为Qt4后,重新编译的话,qmake生成makefile时就提示出错.进一步发现,是因为虽然设了QTDIR为Qt4,头文件和库文件都会使 用Qt4,但是moc,uic等都是用的qt3版的,再把PATH环境变量改动后,一切ok.\n\n2.问题:某一个类中如果加入Q_OBJECT后, 则link时提示:undefined reference to vtable for \"xxx::xxx\".删掉它则没有任何问题.\n\n解决:尝试(1):把所有的obj文件和uic文件删除,重新编译.仍然失败.去trolltech的 mail lists找到原因: 因为qmake生成Makefile的时候,这个类的头文件中并没有Q_OBJECT,所以在相应的Makefile里面并没有用moc xxx.h命令,最终导致链接失败.重新运行qmake,问题解决.在查找解决方法的时候,附带发现一点:\n\nqmake 不会处理.cpp文件里的Q_OBJECT,所以,如果在.cpp文件中有它的话,也会产生undefined reference to vtable for \"xxx::xxx\". 这时,需要先用moc xxxx.cpp生成相应的moc文件,再包含到.cpp里面去,才能解决这个问题.\n\n3\\. 看Qt的reference发现: 可以connect(pObjA, SIGNAL(someSignalA()),pObjB,SIGNAL(someSignalB()));这样pObjA发出的someSingalA 会导致pObjB发出someSignalB,从而形成信号接力.\n\nfrom：http://blog.donews.com/netexe/archive/2006/02/09/720544.aspx\n\n三：编译报错的部分是：\n\nCODE:\n\n[Copy to clipboard]\ntmpobjrelease_sharedmyplot.o(.text+0x194):myplot.cpp: undefined reference to\n`vtable for MyPlot'\ntmpobjrelease_sharedmyplot.o(.text+0x19b):myplot.cpp: undefined reference to\n`vtable for MyPlot'\ntmpobjrelease_sharedmyplot.o(.text+0x934):myplot.cpp: undefined reference to\n`vtable for MyPlot'\ntmpobjrelease_sharedmyplot.o(.text+0x93b):myplot.cpp: undefined reference to\n`vtable for MyPlot'\ncollect2: ld returned 1 exit status你 MyPlot 是不是声明了什么 virtual 的 方法， 但在实现（cpp）文件里没有实现。\n看了一下， 现在推测一下。 MyPlot 继承了 QwtPlot， 现在报的这个错， 应该是这个意思，\n1\\. QwtPlot 里含有 vritual 方法， 所以你的继承类需要一个 virtual 的析构函数\n2\\. QwtPlot 里含有 纯虚的方法， 你没有继承， 而这个可能性比较小\n\n所以， 你可以：\n在MyPlot里声明一下一个虚的析构函数\nvirtual ~MyPlot() {}\n\n我们来看一个简单些的例子吧：\n\n#include\n#include\n\nclass myWidget :public QWidget\n{\nQ_OBJECT\npublic:\nmyWidget(QWidget *parent = 0);\npublic slots:\nvoid shutDown();\nprivate:\nQPushButton *exit;\n};\n\nmyWidget::myWidget(QWidget *parent):QWidget(parent)\n{\nsetMinimumSize(120, 180);\nsetMaximumSize(120, 180);\nexit = new QPushButton(\"ShutDown!\",this);\nconnect(exit,SIGNAL(clicked()),this,SLOT(shutDown()));\n}\n\nvoid myWidget::shutDown()\n{\nsystem(\"halt\");\n}\n\nint main(int argc, char **argv)\n{\nQApplication app(argc, argv);\nmyWidget *w = new myWidget();\nw-&gt;show();\napp.exec();\n}\n\n还是报错：\n\nshut.o(.text+0x21): In function `myWidget::myWidget[not-in-charge](QWidget*, char const*)':\n: undefined reference to `vtable for myWidget'\nshut.o(.text+0x28): In function `myWidget::myWidget[not-in-charge](QWidget*, char const*)':\n: undefined reference to `vtable for myWidget'\nshut.o(.text+0x141): In function `myWidget::myWidget[in-charge](QWidget*, char const*)':\n: undefined reference to `vtable for myWidget'\nshut.o(.text+0x148): In function `myWidget::myWidget[in-charge](QWidget*, char const*)':\n: undefined reference to `vtable for myWidget'\ncollect2: ld returned 1 exit status这是我从l搜索引擎上搜到的例子，从代码中好像看不到明显的错误吧\n我自己试了一下编译也是出错\n\n刚才那个简单的例子的原因可能是这样的：\n\n2.问题:某一个类中如果加入Q_OBJECT后,则link时提示:undefined reference to vtable for \"xxx::xxx\".删掉它则没有任何问题.\n\n解决:尝试(1):把所有的obj文件和uic文件删除,重新编译.仍然失败.\n\n去trolltech的mail lists找到原因: 因为qmake生成Makefile的时候,这个类的头文件中并没有Q_OBJECT,所以在相应的Makefile里面并没有用moc xxx.h命令,最终导致链接失败.重新运行qmake,问题解决.\n\n在查找解决方法的时候,附带发现一点:\n\nqmake不会处理.cpp文件里的Q_OBJECT,所以,如果在.cpp文件中有它的话,也会产生undefined reference to vtable for \"xxx::xxx\". 这时,需要先用moc xxxx.cpp生成相应的moc文件,再包含到.cpp里面去,才能解决这个问题.知道你的问题了， 上面的例子不好， 因为你这个把main和类放在一起了。 如果分开， 可能就没问题， 包括 h和 cpp 分开。\n\n要解决上面的问题， 在你main.cpp 最后加一行\n#include \"main.moc\"\n\n然后把除了 main.cpp 的其它文件都删了。重新来， 没问题的。\n\n所以， 我估计你前面提到的问题也是没有链接 moc 文件。 你在你的 myplot.cpp 文件最后加一行： #include \"myplot.moc\" 试试看。\n\n另外： 你main 没有返回值， 编译会警告， 而且程序最后一行不是只含有回车， 也会警告。","slug":"qt-e5-87-ba-e7-8e-b0undefined-reference-to-vtable-for-e5-8e-9f-e5-9b-a0-e6-80-bb-e7-bb-93","published":1,"updated":"2018-01-13T05:07:00.442Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjccw7xcz009waqcruja69r8v","content":"<p>由于Qt本身实现的机制所限，我们在使用Qt制作某些软件程序的时候，会遇到各种各样这样那样的问题，而且很多是很难，或者根本找不到原因的，即使解决了问题，如果有人问你为什么，你只能回答－－不知道。</p>\n<p>今天我在这里列举的问题也是再编写Qt程序时，总是遇到的问题，问题普遍，而答案却不唯一，解释这一个问题的说法很多，往往只适合某一种情况，因为这个错误太笼统了，它就是－－ “undefined reference to `vtable for”可能你看着很熟悉，似乎在c++程序中也遇到过这个问题，你说对了，有时候这个错误，不只是qt的原因，还有你的c++程序的原因。</p>\n<p>下面搜集了网上的一些出现的现象，对应解决方法，原因，基本上我都验证过，收录于此，以做备份。<br>一：预编译器打开宏Q_OBJECT，声明若干个由moc处理(implement)的成员函数。</p>\n<p>如果得到类似于“undefined reference to vtable for LcdNumber”的编译错误(if you get compiler errors along the lines of “undefined reference to vtable for LcdNumber”)，你可能是忘记了执行moc，或者忘记了将moc输出加入到link命令里。</p>\n<p>某一个类中如果加入Q_OBJECT后,则link时提示:undefined reference to vtable for “xxx::xxx”.删掉它则没有任何问题.<a id=\"more\"></a></p>\n<p>解决:尝试(1):把所有的obj文件和uic文件删除,重新编译.仍然失败.</p>\n<p>去trolltech的mail lists找到原因: 因为qmake生成Makefile的时候,这个类的头文件中并没有Q_OBJECT,所以在相应的Makefile里面并没有用moc xxx.h命令,最终导致链接失败.重新运行qmake,问题解决.<br>在查找解决方法的时候,附带发现一点:<br>qmake 不会处理.cpp文件里的Q_OBJECT,所以,如果在.cpp文件中有它的话,也会产生undefined reference to vtable for “xxx::xxx”. 这时,需要先用moc xxxx.cpp生成相应的moc文件,再包含到.cpp里面去,才能解决这个问题.</p>\n<p>这里可以发现问题的出现是因为没有moc生成相应的moc文件，之后连接就出问题。<br>我找了好多源码之类的问题，就是没有找pro的错误，后来想到qt中moc我们是有make做的<br>qt的make编译是根据Makefile来的，而Makefile是由pro文件来的。这才想到了找pro文件的错误。<br>from: <a href=\"http://www.cublog.cn/u/16292/showart_136087.html\" target=\"_blank\" rel=\"noopener\">http://www.cublog.cn/u/16292/showart_136087.html</a></p>\n<p>二：undefined reference to vtable for “xxx::xxx”</p>\n<p>今天碰到了这个问题，终于被我google到了：<br><a href=\"http://www.cublog.cn/opera/showart.php?blogid=8650&amp;id=49526\" target=\"_blank\" rel=\"noopener\">http://www.cublog.cn/opera/showart.php?blogid=8650&amp;id=49526</a><br>原 因：qmake不会处理.cpp文件里的Q_OBJECT,所以,如果在.cpp文件中有它的话,也会产生undefined reference to vtable for “xxx::xxx”. 这时,需要先用moc xxxx.cpp生成相应的moc文件,再包含到.cpp里面去,才能解决这个问题.</p>\n<p>其他：<br>1.问题: QGLViewer中的函数不能正常link.</p>\n<p>解决: 翻看其源代码,发现是因为从源码安装libQGLViewer时,编译用了Qt 3,而我的程序中用Qt4 编译.所以必须重新用Qt4编译.但是,更改QTDIR 环境变量为Qt4后,重新编译的话,qmake生成makefile时就提示出错.进一步发现,是因为虽然设了QTDIR为Qt4,头文件和库文件都会使 用Qt4,但是moc,uic等都是用的qt3版的,再把PATH环境变量改动后,一切ok.</p>\n<p>2.问题:某一个类中如果加入Q_OBJECT后, 则link时提示:undefined reference to vtable for “xxx::xxx”.删掉它则没有任何问题.</p>\n<p>解决:尝试(1):把所有的obj文件和uic文件删除,重新编译.仍然失败.去trolltech的 mail lists找到原因: 因为qmake生成Makefile的时候,这个类的头文件中并没有Q_OBJECT,所以在相应的Makefile里面并没有用moc xxx.h命令,最终导致链接失败.重新运行qmake,问题解决.在查找解决方法的时候,附带发现一点:</p>\n<p>qmake 不会处理.cpp文件里的Q_OBJECT,所以,如果在.cpp文件中有它的话,也会产生undefined reference to vtable for “xxx::xxx”. 这时,需要先用moc xxxx.cpp生成相应的moc文件,再包含到.cpp里面去,才能解决这个问题.</p>\n<p>3. 看Qt的reference发现: 可以connect(pObjA, SIGNAL(someSignalA()),pObjB,SIGNAL(someSignalB()));这样pObjA发出的someSingalA 会导致pObjB发出someSignalB,从而形成信号接力.</p>\n<p>from：<a href=\"http://blog.donews.com/netexe/archive/2006/02/09/720544.aspx\" target=\"_blank\" rel=\"noopener\">http://blog.donews.com/netexe/archive/2006/02/09/720544.aspx</a></p>\n<p>三：编译报错的部分是：</p>\n<p>CODE:</p>\n<p>[Copy to clipboard]<br>tmpobjrelease_sharedmyplot.o(.text+0x194):myplot.cpp: undefined reference to<br><code>vtable for MyPlot&#39;\ntmpobjrelease_sharedmyplot.o(.text+0x19b):myplot.cpp: undefined reference to</code>vtable for MyPlot’<br>tmpobjrelease_sharedmyplot.o(.text+0x934):myplot.cpp: undefined reference to<br><code>vtable for MyPlot&#39;\ntmpobjrelease_sharedmyplot.o(.text+0x93b):myplot.cpp: undefined reference to</code>vtable for MyPlot’<br>collect2: ld returned 1 exit status你 MyPlot 是不是声明了什么 virtual 的 方法， 但在实现（cpp）文件里没有实现。<br>看了一下， 现在推测一下。 MyPlot 继承了 QwtPlot， 现在报的这个错， 应该是这个意思，<br>1. QwtPlot 里含有 vritual 方法， 所以你的继承类需要一个 virtual 的析构函数<br>2. QwtPlot 里含有 纯虚的方法， 你没有继承， 而这个可能性比较小</p>\n<p>所以， 你可以：<br>在MyPlot里声明一下一个虚的析构函数<br>virtual ~MyPlot() {}</p>\n<p>我们来看一个简单些的例子吧：</p>\n<p>#include</p>\n<p>#include</p>\n<p>class myWidget :public QWidget<br>{<br>Q_OBJECT<br>public:<br>myWidget(QWidget <em>parent = 0);<br>public slots:<br>void shutDown();<br>private:<br>QPushButton </em>exit;<br>};</p>\n<p>myWidget::myWidget(QWidget *parent):QWidget(parent)<br>{<br>setMinimumSize(120, 180);<br>setMaximumSize(120, 180);<br>exit = new QPushButton(“ShutDown!”,this);<br>connect(exit,SIGNAL(clicked()),this,SLOT(shutDown()));<br>}</p>\n<p>void myWidget::shutDown()<br>{<br>system(“halt”);<br>}</p>\n<p>int main(int argc, char <em>*argv)<br>{<br>QApplication app(argc, argv);<br>myWidget </em>w = new myWidget();<br>w-&gt;show();<br>app.exec();<br>}</p>\n<p>还是报错：</p>\n<p>shut.o(.text+0x21): In function <code>myWidget::myWidget[not-in-charge](QWidget*, char const*)&#39;:\n: undefined reference to</code>vtable for myWidget’<br>shut.o(.text+0x28): In function <code>myWidget::myWidget[not-in-charge](QWidget*, char const*)&#39;:\n: undefined reference to</code>vtable for myWidget’<br>shut.o(.text+0x141): In function <code>myWidget::myWidget[in-charge](QWidget*, char const*)&#39;:\n: undefined reference to</code>vtable for myWidget’<br>shut.o(.text+0x148): In function <code>myWidget::myWidget[in-charge](QWidget*, char const*)&#39;:\n: undefined reference to</code>vtable for myWidget’<br>collect2: ld returned 1 exit status这是我从l搜索引擎上搜到的例子，从代码中好像看不到明显的错误吧<br>我自己试了一下编译也是出错</p>\n<p>刚才那个简单的例子的原因可能是这样的：</p>\n<p>2.问题:某一个类中如果加入Q_OBJECT后,则link时提示:undefined reference to vtable for “xxx::xxx”.删掉它则没有任何问题.</p>\n<p>解决:尝试(1):把所有的obj文件和uic文件删除,重新编译.仍然失败.</p>\n<p>去trolltech的mail lists找到原因: 因为qmake生成Makefile的时候,这个类的头文件中并没有Q_OBJECT,所以在相应的Makefile里面并没有用moc xxx.h命令,最终导致链接失败.重新运行qmake,问题解决.</p>\n<p>在查找解决方法的时候,附带发现一点:</p>\n<p>qmake不会处理.cpp文件里的Q_OBJECT,所以,如果在.cpp文件中有它的话,也会产生undefined reference to vtable for “xxx::xxx”. 这时,需要先用moc xxxx.cpp生成相应的moc文件,再包含到.cpp里面去,才能解决这个问题.知道你的问题了， 上面的例子不好， 因为你这个把main和类放在一起了。 如果分开， 可能就没问题， 包括 h和 cpp 分开。</p>\n<p>要解决上面的问题， 在你main.cpp 最后加一行</p>\n<p>#include “main.moc”</p>\n<p>然后把除了 main.cpp 的其它文件都删了。重新来， 没问题的。</p>\n<p>所以， 我估计你前面提到的问题也是没有链接 moc 文件。 你在你的 myplot.cpp 文件最后加一行： #include “myplot.moc” 试试看。</p>\n<p>另外： 你main 没有返回值， 编译会警告， 而且程序最后一行不是只含有回车， 也会警告。</p>\n","site":{"data":{}},"excerpt":"<p>由于Qt本身实现的机制所限，我们在使用Qt制作某些软件程序的时候，会遇到各种各样这样那样的问题，而且很多是很难，或者根本找不到原因的，即使解决了问题，如果有人问你为什么，你只能回答－－不知道。</p>\n<p>今天我在这里列举的问题也是再编写Qt程序时，总是遇到的问题，问题普遍，而答案却不唯一，解释这一个问题的说法很多，往往只适合某一种情况，因为这个错误太笼统了，它就是－－ “undefined reference to `vtable for”可能你看着很熟悉，似乎在c++程序中也遇到过这个问题，你说对了，有时候这个错误，不只是qt的原因，还有你的c++程序的原因。</p>\n<p>下面搜集了网上的一些出现的现象，对应解决方法，原因，基本上我都验证过，收录于此，以做备份。<br>一：预编译器打开宏Q_OBJECT，声明若干个由moc处理(implement)的成员函数。</p>\n<p>如果得到类似于“undefined reference to vtable for LcdNumber”的编译错误(if you get compiler errors along the lines of “undefined reference to vtable for LcdNumber”)，你可能是忘记了执行moc，或者忘记了将moc输出加入到link命令里。</p>\n<p>某一个类中如果加入Q_OBJECT后,则link时提示:undefined reference to vtable for “xxx::xxx”.删掉它则没有任何问题.","more":"</p>\n<p>解决:尝试(1):把所有的obj文件和uic文件删除,重新编译.仍然失败.</p>\n<p>去trolltech的mail lists找到原因: 因为qmake生成Makefile的时候,这个类的头文件中并没有Q_OBJECT,所以在相应的Makefile里面并没有用moc xxx.h命令,最终导致链接失败.重新运行qmake,问题解决.<br>在查找解决方法的时候,附带发现一点:<br>qmake 不会处理.cpp文件里的Q_OBJECT,所以,如果在.cpp文件中有它的话,也会产生undefined reference to vtable for “xxx::xxx”. 这时,需要先用moc xxxx.cpp生成相应的moc文件,再包含到.cpp里面去,才能解决这个问题.</p>\n<p>这里可以发现问题的出现是因为没有moc生成相应的moc文件，之后连接就出问题。<br>我找了好多源码之类的问题，就是没有找pro的错误，后来想到qt中moc我们是有make做的<br>qt的make编译是根据Makefile来的，而Makefile是由pro文件来的。这才想到了找pro文件的错误。<br>from: <a href=\"http://www.cublog.cn/u/16292/showart_136087.html\" target=\"_blank\" rel=\"noopener\">http://www.cublog.cn/u/16292/showart_136087.html</a></p>\n<p>二：undefined reference to vtable for “xxx::xxx”</p>\n<p>今天碰到了这个问题，终于被我google到了：<br><a href=\"http://www.cublog.cn/opera/showart.php?blogid=8650&amp;id=49526\" target=\"_blank\" rel=\"noopener\">http://www.cublog.cn/opera/showart.php?blogid=8650&amp;id=49526</a><br>原 因：qmake不会处理.cpp文件里的Q_OBJECT,所以,如果在.cpp文件中有它的话,也会产生undefined reference to vtable for “xxx::xxx”. 这时,需要先用moc xxxx.cpp生成相应的moc文件,再包含到.cpp里面去,才能解决这个问题.</p>\n<p>其他：<br>1.问题: QGLViewer中的函数不能正常link.</p>\n<p>解决: 翻看其源代码,发现是因为从源码安装libQGLViewer时,编译用了Qt 3,而我的程序中用Qt4 编译.所以必须重新用Qt4编译.但是,更改QTDIR 环境变量为Qt4后,重新编译的话,qmake生成makefile时就提示出错.进一步发现,是因为虽然设了QTDIR为Qt4,头文件和库文件都会使 用Qt4,但是moc,uic等都是用的qt3版的,再把PATH环境变量改动后,一切ok.</p>\n<p>2.问题:某一个类中如果加入Q_OBJECT后, 则link时提示:undefined reference to vtable for “xxx::xxx”.删掉它则没有任何问题.</p>\n<p>解决:尝试(1):把所有的obj文件和uic文件删除,重新编译.仍然失败.去trolltech的 mail lists找到原因: 因为qmake生成Makefile的时候,这个类的头文件中并没有Q_OBJECT,所以在相应的Makefile里面并没有用moc xxx.h命令,最终导致链接失败.重新运行qmake,问题解决.在查找解决方法的时候,附带发现一点:</p>\n<p>qmake 不会处理.cpp文件里的Q_OBJECT,所以,如果在.cpp文件中有它的话,也会产生undefined reference to vtable for “xxx::xxx”. 这时,需要先用moc xxxx.cpp生成相应的moc文件,再包含到.cpp里面去,才能解决这个问题.</p>\n<p>3. 看Qt的reference发现: 可以connect(pObjA, SIGNAL(someSignalA()),pObjB,SIGNAL(someSignalB()));这样pObjA发出的someSingalA 会导致pObjB发出someSignalB,从而形成信号接力.</p>\n<p>from：<a href=\"http://blog.donews.com/netexe/archive/2006/02/09/720544.aspx\" target=\"_blank\" rel=\"noopener\">http://blog.donews.com/netexe/archive/2006/02/09/720544.aspx</a></p>\n<p>三：编译报错的部分是：</p>\n<p>CODE:</p>\n<p>[Copy to clipboard]<br>tmpobjrelease_sharedmyplot.o(.text+0x194):myplot.cpp: undefined reference to<br><code>vtable for MyPlot&#39;\ntmpobjrelease_sharedmyplot.o(.text+0x19b):myplot.cpp: undefined reference to</code>vtable for MyPlot’<br>tmpobjrelease_sharedmyplot.o(.text+0x934):myplot.cpp: undefined reference to<br><code>vtable for MyPlot&#39;\ntmpobjrelease_sharedmyplot.o(.text+0x93b):myplot.cpp: undefined reference to</code>vtable for MyPlot’<br>collect2: ld returned 1 exit status你 MyPlot 是不是声明了什么 virtual 的 方法， 但在实现（cpp）文件里没有实现。<br>看了一下， 现在推测一下。 MyPlot 继承了 QwtPlot， 现在报的这个错， 应该是这个意思，<br>1. QwtPlot 里含有 vritual 方法， 所以你的继承类需要一个 virtual 的析构函数<br>2. QwtPlot 里含有 纯虚的方法， 你没有继承， 而这个可能性比较小</p>\n<p>所以， 你可以：<br>在MyPlot里声明一下一个虚的析构函数<br>virtual ~MyPlot() {}</p>\n<p>我们来看一个简单些的例子吧：</p>\n<p>#include</p>\n<p>#include</p>\n<p>class myWidget :public QWidget<br>{<br>Q_OBJECT<br>public:<br>myWidget(QWidget <em>parent = 0);<br>public slots:<br>void shutDown();<br>private:<br>QPushButton </em>exit;<br>};</p>\n<p>myWidget::myWidget(QWidget *parent):QWidget(parent)<br>{<br>setMinimumSize(120, 180);<br>setMaximumSize(120, 180);<br>exit = new QPushButton(“ShutDown!”,this);<br>connect(exit,SIGNAL(clicked()),this,SLOT(shutDown()));<br>}</p>\n<p>void myWidget::shutDown()<br>{<br>system(“halt”);<br>}</p>\n<p>int main(int argc, char <em>*argv)<br>{<br>QApplication app(argc, argv);<br>myWidget </em>w = new myWidget();<br>w-&gt;show();<br>app.exec();<br>}</p>\n<p>还是报错：</p>\n<p>shut.o(.text+0x21): In function <code>myWidget::myWidget[not-in-charge](QWidget*, char const*)&#39;:\n: undefined reference to</code>vtable for myWidget’<br>shut.o(.text+0x28): In function <code>myWidget::myWidget[not-in-charge](QWidget*, char const*)&#39;:\n: undefined reference to</code>vtable for myWidget’<br>shut.o(.text+0x141): In function <code>myWidget::myWidget[in-charge](QWidget*, char const*)&#39;:\n: undefined reference to</code>vtable for myWidget’<br>shut.o(.text+0x148): In function <code>myWidget::myWidget[in-charge](QWidget*, char const*)&#39;:\n: undefined reference to</code>vtable for myWidget’<br>collect2: ld returned 1 exit status这是我从l搜索引擎上搜到的例子，从代码中好像看不到明显的错误吧<br>我自己试了一下编译也是出错</p>\n<p>刚才那个简单的例子的原因可能是这样的：</p>\n<p>2.问题:某一个类中如果加入Q_OBJECT后,则link时提示:undefined reference to vtable for “xxx::xxx”.删掉它则没有任何问题.</p>\n<p>解决:尝试(1):把所有的obj文件和uic文件删除,重新编译.仍然失败.</p>\n<p>去trolltech的mail lists找到原因: 因为qmake生成Makefile的时候,这个类的头文件中并没有Q_OBJECT,所以在相应的Makefile里面并没有用moc xxx.h命令,最终导致链接失败.重新运行qmake,问题解决.</p>\n<p>在查找解决方法的时候,附带发现一点:</p>\n<p>qmake不会处理.cpp文件里的Q_OBJECT,所以,如果在.cpp文件中有它的话,也会产生undefined reference to vtable for “xxx::xxx”. 这时,需要先用moc xxxx.cpp生成相应的moc文件,再包含到.cpp里面去,才能解决这个问题.知道你的问题了， 上面的例子不好， 因为你这个把main和类放在一起了。 如果分开， 可能就没问题， 包括 h和 cpp 分开。</p>\n<p>要解决上面的问题， 在你main.cpp 最后加一行</p>\n<p>#include “main.moc”</p>\n<p>然后把除了 main.cpp 的其它文件都删了。重新来， 没问题的。</p>\n<p>所以， 我估计你前面提到的问题也是没有链接 moc 文件。 你在你的 myplot.cpp 文件最后加一行： #include “myplot.moc” 试试看。</p>\n<p>另外： 你main 没有返回值， 编译会警告， 而且程序最后一行不是只含有回车， 也会警告。</p>"},{"title":"QT增加程序图标","id":"929","date":"2012-03-06T08:08:50.000Z","_content":"\n首先准备个ICO图标。例如：A.ico，网上有很多图标文件。\n用记事本新建个txt\n里面就写一行：\nIDI_ICON1 ICON DISCARDABLE \"A.ico\"\n保存，修改后缀为.rc，例如： myapp.rc\n把它和图标A.ico一起复制到你的QT工程项目的目录。\n打开你的QT工程文件.pro（例如 \"myapp.pro\" ），\n在里面最后新添一行\nRC_FILE = myapp.rc\n保存，重新编译你的工程。\n如果想换图标，就重换一个图标，重命名为A.ico替换原来的，重新编译就可以了。","source":"_posts/qt-e5-a2-9e-e5-8a-a0-e7-a8-8b-e5-ba-8f-e5-9b-be-e6-a0-87.md","raw":"---\ntitle: QT增加程序图标\ntags:\n  - Qt\nid: 929\ncategories:\n  - Qt\ndate: 2012-03-06 16:08:50\n---\n\n首先准备个ICO图标。例如：A.ico，网上有很多图标文件。\n用记事本新建个txt\n里面就写一行：\nIDI_ICON1 ICON DISCARDABLE \"A.ico\"\n保存，修改后缀为.rc，例如： myapp.rc\n把它和图标A.ico一起复制到你的QT工程项目的目录。\n打开你的QT工程文件.pro（例如 \"myapp.pro\" ），\n在里面最后新添一行\nRC_FILE = myapp.rc\n保存，重新编译你的工程。\n如果想换图标，就重换一个图标，重命名为A.ico替换原来的，重新编译就可以了。","slug":"qt-e5-a2-9e-e5-8a-a0-e7-a8-8b-e5-ba-8f-e5-9b-be-e6-a0-87","published":1,"updated":"2018-01-13T05:07:00.485Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjccw7xd100a0aqcrxvqmtkhk","content":"<p>首先准备个ICO图标。例如：A.ico，网上有很多图标文件。<br>用记事本新建个txt<br>里面就写一行：<br>IDI_ICON1 ICON DISCARDABLE “A.ico”<br>保存，修改后缀为.rc，例如： myapp.rc<br>把它和图标A.ico一起复制到你的QT工程项目的目录。<br>打开你的QT工程文件.pro（例如 “myapp.pro” ），<br>在里面最后新添一行<br>RC_FILE = myapp.rc<br>保存，重新编译你的工程。<br>如果想换图标，就重换一个图标，重命名为A.ico替换原来的，重新编译就可以了。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>首先准备个ICO图标。例如：A.ico，网上有很多图标文件。<br>用记事本新建个txt<br>里面就写一行：<br>IDI_ICON1 ICON DISCARDABLE “A.ico”<br>保存，修改后缀为.rc，例如： myapp.rc<br>把它和图标A.ico一起复制到你的QT工程项目的目录。<br>打开你的QT工程文件.pro（例如 “myapp.pro” ），<br>在里面最后新添一行<br>RC_FILE = myapp.rc<br>保存，重新编译你的工程。<br>如果想换图标，就重换一个图标，重命名为A.ico替换原来的，重新编译就可以了。</p>\n"},{"title":"Qt 弹出对话框方法","id":"923","date":"2012-03-01T12:09:35.000Z","_content":"\n1：用Qtcreator创建一个工程命名为Widget,创建.ui文件并添加相关控件，以添加pushButton为例\n\n2：新创建一个Dialog文件，在dialog.ui文件中创建对话框。\n\n3：实现点击pushButton弹出dialog对话框，在widget工程下添加dialog.h,dialog.cpp,dialog.ui,ui_dialog.h，并在widget.h文件中添加#include “dialog.h”。\n\n4：在widget.h文件中添加private slots： void  on_pushButton_clicked（）;    在private中声明： Dialog  *clickPushButton 。\n\n5：在widget.cpp文件中添加如下代码：\n\n     void  Widget：：on_pushButton_clicked（）    {\n            clickPushButton  = new Dialog（this）；\n            clickPushButton->show();\n  }\n\n实现结果：点击pushButton按钮，弹出Dialog对话框。","source":"_posts/qt-e5-bc-b9-e5-87-ba-e5-af-b9-e8-af-9d-e6-a1-86-e6-96-b9-e6-b3-95.md","raw":"---\ntitle: Qt 弹出对话框方法\ntags:\n  - Qt\nid: 923\ncategories:\n  - Qt\ndate: 2012-03-01 20:09:35\n---\n\n1：用Qtcreator创建一个工程命名为Widget,创建.ui文件并添加相关控件，以添加pushButton为例\n\n2：新创建一个Dialog文件，在dialog.ui文件中创建对话框。\n\n3：实现点击pushButton弹出dialog对话框，在widget工程下添加dialog.h,dialog.cpp,dialog.ui,ui_dialog.h，并在widget.h文件中添加#include “dialog.h”。\n\n4：在widget.h文件中添加private slots： void  on_pushButton_clicked（）;    在private中声明： Dialog  *clickPushButton 。\n\n5：在widget.cpp文件中添加如下代码：\n\n     void  Widget：：on_pushButton_clicked（）    {\n            clickPushButton  = new Dialog（this）；\n            clickPushButton->show();\n  }\n\n实现结果：点击pushButton按钮，弹出Dialog对话框。","slug":"qt-e5-bc-b9-e5-87-ba-e5-af-b9-e8-af-9d-e6-a1-86-e6-96-b9-e6-b3-95","published":1,"updated":"2018-01-13T05:07:00.463Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjccw7xd300a3aqcrurnlxmct","content":"<p>1：用Qtcreator创建一个工程命名为Widget,创建.ui文件并添加相关控件，以添加pushButton为例</p>\n<p>2：新创建一个Dialog文件，在dialog.ui文件中创建对话框。</p>\n<p>3：实现点击pushButton弹出dialog对话框，在widget工程下添加dialog.h,dialog.cpp,dialog.ui,ui_dialog.h，并在widget.h文件中添加#include “dialog.h”。</p>\n<p>4：在widget.h文件中添加private slots： void  on_pushButton_clicked（）;    在private中声明： Dialog  *clickPushButton 。</p>\n<p>5：在widget.cpp文件中添加如下代码：</p>\n<pre><code>void  Widget：：on_pushButton_clicked（）    {\n       clickPushButton  = new Dialog（this）；\n       clickPushButton-&gt;show();\n</code></pre><p>  }</p>\n<p>实现结果：点击pushButton按钮，弹出Dialog对话框。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>1：用Qtcreator创建一个工程命名为Widget,创建.ui文件并添加相关控件，以添加pushButton为例</p>\n<p>2：新创建一个Dialog文件，在dialog.ui文件中创建对话框。</p>\n<p>3：实现点击pushButton弹出dialog对话框，在widget工程下添加dialog.h,dialog.cpp,dialog.ui,ui_dialog.h，并在widget.h文件中添加#include “dialog.h”。</p>\n<p>4：在widget.h文件中添加private slots： void  on_pushButton_clicked（）;    在private中声明： Dialog  *clickPushButton 。</p>\n<p>5：在widget.cpp文件中添加如下代码：</p>\n<pre><code>void  Widget：：on_pushButton_clicked（）    {\n       clickPushButton  = new Dialog（this）；\n       clickPushButton-&gt;show();\n</code></pre><p>  }</p>\n<p>实现结果：点击pushButton按钮，弹出Dialog对话框。</p>\n"},{"title":"Qt setWindowFlags的使用","id":"921","date":"2012-03-01T03:44:28.000Z","_content":"\nsetWindowFlags(Qt::WindowCloseButtonHint);//哈哈窗口只有一个关闭按钮\n\n使用方法：1： clientMainWindow::clientMainWindow(QWidget *parent) : QMainWindow(parent,Qt::WindowCloseButtonHint) { }\n2\nclientMainWindow::clientMainWindow(QWidget *parent)\n: QMainWindow(parent ) {\nsetWindowFlags(Qt::WindowCloseButtonHint);\n}\n更多窗口样试：\nQt::WindowContextHelpButtonHint 像对话框一样，有个问号和关闭按钮\nQt::CustomizeWindowHint 标题栏也没有 按钮也没有 在那里出现就站在那里不到，也不能移动和拖到，任务栏右击什么也没有，任务栏窗口名也没有，做流氓软件很好，但是可惜可以从任务管理器里关闭 灰色\nQt::WindowTitleHint 也是窗口只有一个关闭按钮\nQt::WindowSystemMenuHint 还是一样只有一个关闭按钮<!--more-->\nQt::WindowCloseButtonHint 还是一样只有一个关闭按钮\nQt::WindowMaximizeButtonHint 一看就知道最小化按钮怎么了。。。原来不可用。。。。\nQt::WindowMinimizeButtonHint 还原按钮不可用。。\nQt::SubWindow 窗口没有按钮但是有标题栏 任务里什么也看不到\nQt::Desktop 没有显示在桌面也没在任务。但是任务管里器里还是有的。。。\nQt::SplashScreen 标题栏也没有 按钮也没有 在那里出现就站在那里不到，也不能移动和拖到，任务栏右击什么也没有，任务栏窗口名也没有， 但是可惜可以从任务管理器里关闭 白色\n\nQt::ToolTip 标题栏也没有 按钮也没有 在那里出现就站在那里不到，也不能移动和拖到，任务栏右击什么也没有，任务栏窗口名也没有， 但是可惜可以从任务管理器里关闭 白色 有个好外，顶层窗口 一直都是在最上面..\n\nQt::Tool 有一个小小的关闭按钮，但是好像不能真正的关闭。。。。","source":"_posts/qt-setwindowflags-e7-9a-84-e4-bd-bf-e7-94-a8.md","raw":"---\ntitle: Qt setWindowFlags的使用\ntags:\n  - Qt\nid: 921\ncategories:\n  - Qt\ndate: 2012-03-01 11:44:28\n---\n\nsetWindowFlags(Qt::WindowCloseButtonHint);//哈哈窗口只有一个关闭按钮\n\n使用方法：1： clientMainWindow::clientMainWindow(QWidget *parent) : QMainWindow(parent,Qt::WindowCloseButtonHint) { }\n2\nclientMainWindow::clientMainWindow(QWidget *parent)\n: QMainWindow(parent ) {\nsetWindowFlags(Qt::WindowCloseButtonHint);\n}\n更多窗口样试：\nQt::WindowContextHelpButtonHint 像对话框一样，有个问号和关闭按钮\nQt::CustomizeWindowHint 标题栏也没有 按钮也没有 在那里出现就站在那里不到，也不能移动和拖到，任务栏右击什么也没有，任务栏窗口名也没有，做流氓软件很好，但是可惜可以从任务管理器里关闭 灰色\nQt::WindowTitleHint 也是窗口只有一个关闭按钮\nQt::WindowSystemMenuHint 还是一样只有一个关闭按钮<!--more-->\nQt::WindowCloseButtonHint 还是一样只有一个关闭按钮\nQt::WindowMaximizeButtonHint 一看就知道最小化按钮怎么了。。。原来不可用。。。。\nQt::WindowMinimizeButtonHint 还原按钮不可用。。\nQt::SubWindow 窗口没有按钮但是有标题栏 任务里什么也看不到\nQt::Desktop 没有显示在桌面也没在任务。但是任务管里器里还是有的。。。\nQt::SplashScreen 标题栏也没有 按钮也没有 在那里出现就站在那里不到，也不能移动和拖到，任务栏右击什么也没有，任务栏窗口名也没有， 但是可惜可以从任务管理器里关闭 白色\n\nQt::ToolTip 标题栏也没有 按钮也没有 在那里出现就站在那里不到，也不能移动和拖到，任务栏右击什么也没有，任务栏窗口名也没有， 但是可惜可以从任务管理器里关闭 白色 有个好外，顶层窗口 一直都是在最上面..\n\nQt::Tool 有一个小小的关闭按钮，但是好像不能真正的关闭。。。。","slug":"qt-setwindowflags-e7-9a-84-e4-bd-bf-e7-94-a8","published":1,"updated":"2018-01-13T05:07:00.463Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjccw7xd500a7aqcrr5d39mqn","content":"<p>setWindowFlags(Qt::WindowCloseButtonHint);//哈哈窗口只有一个关闭按钮</p>\n<p>使用方法：1： clientMainWindow::clientMainWindow(QWidget <em>parent) : QMainWindow(parent,Qt::WindowCloseButtonHint) { }<br>2<br>clientMainWindow::clientMainWindow(QWidget </em>parent)<br>: QMainWindow(parent ) {<br>setWindowFlags(Qt::WindowCloseButtonHint);<br>}<br>更多窗口样试：<br>Qt::WindowContextHelpButtonHint 像对话框一样，有个问号和关闭按钮<br>Qt::CustomizeWindowHint 标题栏也没有 按钮也没有 在那里出现就站在那里不到，也不能移动和拖到，任务栏右击什么也没有，任务栏窗口名也没有，做流氓软件很好，但是可惜可以从任务管理器里关闭 灰色<br>Qt::WindowTitleHint 也是窗口只有一个关闭按钮<br>Qt::WindowSystemMenuHint 还是一样只有一个关闭按钮<a id=\"more\"></a><br>Qt::WindowCloseButtonHint 还是一样只有一个关闭按钮<br>Qt::WindowMaximizeButtonHint 一看就知道最小化按钮怎么了。。。原来不可用。。。。<br>Qt::WindowMinimizeButtonHint 还原按钮不可用。。<br>Qt::SubWindow 窗口没有按钮但是有标题栏 任务里什么也看不到<br>Qt::Desktop 没有显示在桌面也没在任务。但是任务管里器里还是有的。。。<br>Qt::SplashScreen 标题栏也没有 按钮也没有 在那里出现就站在那里不到，也不能移动和拖到，任务栏右击什么也没有，任务栏窗口名也没有， 但是可惜可以从任务管理器里关闭 白色</p>\n<p>Qt::ToolTip 标题栏也没有 按钮也没有 在那里出现就站在那里不到，也不能移动和拖到，任务栏右击什么也没有，任务栏窗口名也没有， 但是可惜可以从任务管理器里关闭 白色 有个好外，顶层窗口 一直都是在最上面..</p>\n<p>Qt::Tool 有一个小小的关闭按钮，但是好像不能真正的关闭。。。。</p>\n","site":{"data":{}},"excerpt":"<p>setWindowFlags(Qt::WindowCloseButtonHint);//哈哈窗口只有一个关闭按钮</p>\n<p>使用方法：1： clientMainWindow::clientMainWindow(QWidget <em>parent) : QMainWindow(parent,Qt::WindowCloseButtonHint) { }<br>2<br>clientMainWindow::clientMainWindow(QWidget </em>parent)<br>: QMainWindow(parent ) {<br>setWindowFlags(Qt::WindowCloseButtonHint);<br>}<br>更多窗口样试：<br>Qt::WindowContextHelpButtonHint 像对话框一样，有个问号和关闭按钮<br>Qt::CustomizeWindowHint 标题栏也没有 按钮也没有 在那里出现就站在那里不到，也不能移动和拖到，任务栏右击什么也没有，任务栏窗口名也没有，做流氓软件很好，但是可惜可以从任务管理器里关闭 灰色<br>Qt::WindowTitleHint 也是窗口只有一个关闭按钮<br>Qt::WindowSystemMenuHint 还是一样只有一个关闭按钮","more":"<br>Qt::WindowCloseButtonHint 还是一样只有一个关闭按钮<br>Qt::WindowMaximizeButtonHint 一看就知道最小化按钮怎么了。。。原来不可用。。。。<br>Qt::WindowMinimizeButtonHint 还原按钮不可用。。<br>Qt::SubWindow 窗口没有按钮但是有标题栏 任务里什么也看不到<br>Qt::Desktop 没有显示在桌面也没在任务。但是任务管里器里还是有的。。。<br>Qt::SplashScreen 标题栏也没有 按钮也没有 在那里出现就站在那里不到，也不能移动和拖到，任务栏右击什么也没有，任务栏窗口名也没有， 但是可惜可以从任务管理器里关闭 白色</p>\n<p>Qt::ToolTip 标题栏也没有 按钮也没有 在那里出现就站在那里不到，也不能移动和拖到，任务栏右击什么也没有，任务栏窗口名也没有， 但是可惜可以从任务管理器里关闭 白色 有个好外，顶层窗口 一直都是在最上面..</p>\n<p>Qt::Tool 有一个小小的关闭按钮，但是好像不能真正的关闭。。。。</p>"},{"title":"QT模态对话框及非模态对话框","id":"925","date":"2012-03-05T09:38:09.000Z","_content":"\n模态对话框（Modal Dialog）与非模态对话框（Modeless Dialog）的概念不是Qt所独有的，在各种不同的平台下都存在。又有叫法是称为模式对话框，无模式对话框等。所谓模态对话框就是在其没有被关闭之前，用户不能与同一个应用程序的其他窗口进行交互，直到该对话框关闭。对于非模态对话框，当被打开时，用户既可选择和该对话框进行交互，也可以选择同应用程序的其他窗口交互。\n\n 在Qt中，显示一个对话框一般有两种方式，一种是使用exec()方法，它总是以模态来显示对话框；另一种是使用show()方法，它使得对话框既可以模态显示，也可以非模态显示，决定它是模态还是非模态的是对话框的modal属性。\n\n 在Qt中，Qt的模态与非模态对话框选择是通过其属性modal来确定的。我们来看看modal属性，其定义如下：\n\n modal : bool默认情况下，对话框的该属性值是false，这时通过show()方法显示的对话框就是非模态的。而如果将该属性值设置为true，就设置成了模态对话框，其作用于把QWidget::windowModality属性设置为Qt::ApplicationModal。\n\n 而使用exec()方法显示对话框的话，将忽略modal属性值的设置并把对话框设置为模态对话框。\n\n 一般使用setModal()方法来设置对话框的modal属性。<!--more-->\n\n 我们总结一下设置对话框为模态的方法。\n\n ◆ 如果要设置为模态对话框，最简单的就是使用exec()方法，示例代码如下：\n\n MyDialog myDlg;    myDlg.exec();也可以使用show()方法，示例代码如下：\n\n MyDialog myDlg;    myDlg.setModal(true);    myDlg.show();\n\n ◆  如果要设置为非模态对话框，必须使用show()方法，示例代码如下：\n\n MyDialog myDlg;    myDlg.setModal(false);\n //或者\n myDlg.setModal();\n myDlg.show();\n 再次强调，目前有的朋友对于模态对话框和非模态对话框的认识有误解，认为使用show()方法显示的就是非模态对话框，这是不正确的。\n\n小贴士：有时候，我们需要一个对话框以非模态的形式显示，但又需要它总在所有窗口的最前面，这时可以通过如下代码设置：\n\nMyDialog myDlg;    myDlg.setModal(false);\n//或者\nmyDlg.setModal();    myDlg.show();\n//关键是下面这行\n myDlg.setWindowFlags(Qt::WindowStaysOnTopHint);\n 在Qt中创建模态对话框，主要用到了QDialog的exec函数：\n SonDialog dlg(this);\n int res = dlg.exec();\n if (res == QDialog::Accepted)\n {\n QMessageBox::information(this, “INFORMATION”, “You clicked OK button!”);\n }\n if (res == QDialog::Rejected)\n {\n QMessageBox::information(this, “INFORMATION”, “You clicked CANCEL button!”);\n }\n 正如上面代码所显示的，可以通过exec函数的返回值来判断用户点击了哪个按钮使得模态对话框退出的，这可以使得我们能够根据用户的不同行为在退出模态对话框之后采取不同的处理方法。","source":"_posts/qt-e6-a8-a1-e6-80-81-e5-af-b9-e8-af-9d-e6-a1-86-e5-8f-8a-e9-9d-9e-e6-a8-a1-e6-80-81-e5-af-b9-e8-af-9d-e6-a1-86.md","raw":"---\ntitle: QT模态对话框及非模态对话框\ntags:\n  - Qt\nid: 925\ncategories:\n  - Qt\ndate: 2012-03-05 17:38:09\n---\n\n模态对话框（Modal Dialog）与非模态对话框（Modeless Dialog）的概念不是Qt所独有的，在各种不同的平台下都存在。又有叫法是称为模式对话框，无模式对话框等。所谓模态对话框就是在其没有被关闭之前，用户不能与同一个应用程序的其他窗口进行交互，直到该对话框关闭。对于非模态对话框，当被打开时，用户既可选择和该对话框进行交互，也可以选择同应用程序的其他窗口交互。\n\n 在Qt中，显示一个对话框一般有两种方式，一种是使用exec()方法，它总是以模态来显示对话框；另一种是使用show()方法，它使得对话框既可以模态显示，也可以非模态显示，决定它是模态还是非模态的是对话框的modal属性。\n\n 在Qt中，Qt的模态与非模态对话框选择是通过其属性modal来确定的。我们来看看modal属性，其定义如下：\n\n modal : bool默认情况下，对话框的该属性值是false，这时通过show()方法显示的对话框就是非模态的。而如果将该属性值设置为true，就设置成了模态对话框，其作用于把QWidget::windowModality属性设置为Qt::ApplicationModal。\n\n 而使用exec()方法显示对话框的话，将忽略modal属性值的设置并把对话框设置为模态对话框。\n\n 一般使用setModal()方法来设置对话框的modal属性。<!--more-->\n\n 我们总结一下设置对话框为模态的方法。\n\n ◆ 如果要设置为模态对话框，最简单的就是使用exec()方法，示例代码如下：\n\n MyDialog myDlg;    myDlg.exec();也可以使用show()方法，示例代码如下：\n\n MyDialog myDlg;    myDlg.setModal(true);    myDlg.show();\n\n ◆  如果要设置为非模态对话框，必须使用show()方法，示例代码如下：\n\n MyDialog myDlg;    myDlg.setModal(false);\n //或者\n myDlg.setModal();\n myDlg.show();\n 再次强调，目前有的朋友对于模态对话框和非模态对话框的认识有误解，认为使用show()方法显示的就是非模态对话框，这是不正确的。\n\n小贴士：有时候，我们需要一个对话框以非模态的形式显示，但又需要它总在所有窗口的最前面，这时可以通过如下代码设置：\n\nMyDialog myDlg;    myDlg.setModal(false);\n//或者\nmyDlg.setModal();    myDlg.show();\n//关键是下面这行\n myDlg.setWindowFlags(Qt::WindowStaysOnTopHint);\n 在Qt中创建模态对话框，主要用到了QDialog的exec函数：\n SonDialog dlg(this);\n int res = dlg.exec();\n if (res == QDialog::Accepted)\n {\n QMessageBox::information(this, “INFORMATION”, “You clicked OK button!”);\n }\n if (res == QDialog::Rejected)\n {\n QMessageBox::information(this, “INFORMATION”, “You clicked CANCEL button!”);\n }\n 正如上面代码所显示的，可以通过exec函数的返回值来判断用户点击了哪个按钮使得模态对话框退出的，这可以使得我们能够根据用户的不同行为在退出模态对话框之后采取不同的处理方法。","slug":"qt-e6-a8-a1-e6-80-81-e5-af-b9-e8-af-9d-e6-a1-86-e5-8f-8a-e9-9d-9e-e6-a8-a1-e6-80-81-e5-af-b9-e8-af-9d-e6-a1-86","published":1,"updated":"2018-01-13T05:07:00.469Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjccw7xd700aaaqcrno8c7jb6","content":"<p>模态对话框（Modal Dialog）与非模态对话框（Modeless Dialog）的概念不是Qt所独有的，在各种不同的平台下都存在。又有叫法是称为模式对话框，无模式对话框等。所谓模态对话框就是在其没有被关闭之前，用户不能与同一个应用程序的其他窗口进行交互，直到该对话框关闭。对于非模态对话框，当被打开时，用户既可选择和该对话框进行交互，也可以选择同应用程序的其他窗口交互。</p>\n<p> 在Qt中，显示一个对话框一般有两种方式，一种是使用exec()方法，它总是以模态来显示对话框；另一种是使用show()方法，它使得对话框既可以模态显示，也可以非模态显示，决定它是模态还是非模态的是对话框的modal属性。</p>\n<p> 在Qt中，Qt的模态与非模态对话框选择是通过其属性modal来确定的。我们来看看modal属性，其定义如下：</p>\n<p> modal : bool默认情况下，对话框的该属性值是false，这时通过show()方法显示的对话框就是非模态的。而如果将该属性值设置为true，就设置成了模态对话框，其作用于把QWidget::windowModality属性设置为Qt::ApplicationModal。</p>\n<p> 而使用exec()方法显示对话框的话，将忽略modal属性值的设置并把对话框设置为模态对话框。</p>\n<p> 一般使用setModal()方法来设置对话框的modal属性。<a id=\"more\"></a></p>\n<p> 我们总结一下设置对话框为模态的方法。</p>\n<p> ◆ 如果要设置为模态对话框，最简单的就是使用exec()方法，示例代码如下：</p>\n<p> MyDialog myDlg;    myDlg.exec();也可以使用show()方法，示例代码如下：</p>\n<p> MyDialog myDlg;    myDlg.setModal(true);    myDlg.show();</p>\n<p> ◆  如果要设置为非模态对话框，必须使用show()方法，示例代码如下：</p>\n<p> MyDialog myDlg;    myDlg.setModal(false);<br> //或者<br> myDlg.setModal();<br> myDlg.show();<br> 再次强调，目前有的朋友对于模态对话框和非模态对话框的认识有误解，认为使用show()方法显示的就是非模态对话框，这是不正确的。</p>\n<p>小贴士：有时候，我们需要一个对话框以非模态的形式显示，但又需要它总在所有窗口的最前面，这时可以通过如下代码设置：</p>\n<p>MyDialog myDlg;    myDlg.setModal(false);<br>//或者<br>myDlg.setModal();    myDlg.show();<br>//关键是下面这行<br> myDlg.setWindowFlags(Qt::WindowStaysOnTopHint);<br> 在Qt中创建模态对话框，主要用到了QDialog的exec函数：<br> SonDialog dlg(this);<br> int res = dlg.exec();<br> if (res == QDialog::Accepted)<br> {<br> QMessageBox::information(this, “INFORMATION”, “You clicked OK button!”);<br> }<br> if (res == QDialog::Rejected)<br> {<br> QMessageBox::information(this, “INFORMATION”, “You clicked CANCEL button!”);<br> }<br> 正如上面代码所显示的，可以通过exec函数的返回值来判断用户点击了哪个按钮使得模态对话框退出的，这可以使得我们能够根据用户的不同行为在退出模态对话框之后采取不同的处理方法。</p>\n","site":{"data":{}},"excerpt":"<p>模态对话框（Modal Dialog）与非模态对话框（Modeless Dialog）的概念不是Qt所独有的，在各种不同的平台下都存在。又有叫法是称为模式对话框，无模式对话框等。所谓模态对话框就是在其没有被关闭之前，用户不能与同一个应用程序的其他窗口进行交互，直到该对话框关闭。对于非模态对话框，当被打开时，用户既可选择和该对话框进行交互，也可以选择同应用程序的其他窗口交互。</p>\n<p> 在Qt中，显示一个对话框一般有两种方式，一种是使用exec()方法，它总是以模态来显示对话框；另一种是使用show()方法，它使得对话框既可以模态显示，也可以非模态显示，决定它是模态还是非模态的是对话框的modal属性。</p>\n<p> 在Qt中，Qt的模态与非模态对话框选择是通过其属性modal来确定的。我们来看看modal属性，其定义如下：</p>\n<p> modal : bool默认情况下，对话框的该属性值是false，这时通过show()方法显示的对话框就是非模态的。而如果将该属性值设置为true，就设置成了模态对话框，其作用于把QWidget::windowModality属性设置为Qt::ApplicationModal。</p>\n<p> 而使用exec()方法显示对话框的话，将忽略modal属性值的设置并把对话框设置为模态对话框。</p>\n<p> 一般使用setModal()方法来设置对话框的modal属性。","more":"</p>\n<p> 我们总结一下设置对话框为模态的方法。</p>\n<p> ◆ 如果要设置为模态对话框，最简单的就是使用exec()方法，示例代码如下：</p>\n<p> MyDialog myDlg;    myDlg.exec();也可以使用show()方法，示例代码如下：</p>\n<p> MyDialog myDlg;    myDlg.setModal(true);    myDlg.show();</p>\n<p> ◆  如果要设置为非模态对话框，必须使用show()方法，示例代码如下：</p>\n<p> MyDialog myDlg;    myDlg.setModal(false);<br> //或者<br> myDlg.setModal();<br> myDlg.show();<br> 再次强调，目前有的朋友对于模态对话框和非模态对话框的认识有误解，认为使用show()方法显示的就是非模态对话框，这是不正确的。</p>\n<p>小贴士：有时候，我们需要一个对话框以非模态的形式显示，但又需要它总在所有窗口的最前面，这时可以通过如下代码设置：</p>\n<p>MyDialog myDlg;    myDlg.setModal(false);<br>//或者<br>myDlg.setModal();    myDlg.show();<br>//关键是下面这行<br> myDlg.setWindowFlags(Qt::WindowStaysOnTopHint);<br> 在Qt中创建模态对话框，主要用到了QDialog的exec函数：<br> SonDialog dlg(this);<br> int res = dlg.exec();<br> if (res == QDialog::Accepted)<br> {<br> QMessageBox::information(this, “INFORMATION”, “You clicked OK button!”);<br> }<br> if (res == QDialog::Rejected)<br> {<br> QMessageBox::information(this, “INFORMATION”, “You clicked CANCEL button!”);<br> }<br> 正如上面代码所显示的，可以通过exec函数的返回值来判断用户点击了哪个按钮使得模态对话框退出的，这可以使得我们能够根据用户的不同行为在退出模态对话框之后采取不同的处理方法。</p>"},{"title":"React Native : Mac 下 Android 环境及IDE配置","id":"2584","date":"2016-06-09T06:13:46.000Z","_content":"\n一时感兴趣，想玩一把React Native，花了好几个时间搭环境，主要坑在网速上，简单做下总结。\n\n### 基本工具\n\nMac开发的话首先要有Homebrew和Node.js环境，这个安装教程很多就不多说了。\n`brew install watchman\nbrew install Flow\n`\n*针对iOS开发，我们只需要安装Xcode 7.0或者7.0以后版本，该可以通过App Store进行下载安装\n\n### For Android\n\n安装最新版的JDK 1.8 javac -version\n安装Genymotion android模拟器，https://www.genymotion.com/\n\n安装Android SDK: 当然也可以安装Android Studio来进行安装，不过Android Studio不是必须的。http://www.androiddevtools.cn/这个地方下载现成的包也行。\n`brew install android-sdk`\n\nAndroid SDK在线更新镜像服务器更换源，不然各种慢\n南阳理工学院镜像服务器地址:mirror.nyist.edu.cn 端口：80\n腾讯Bugly 镜像:android-mirror.bugly.qq.com 端口：8080\n\n![](http://www.androiddevtools.cn/static/image/sdk-manager-proxy-settings.png)\n<!--more-->\n\n安装SDK\nAndroid SDK Build-tools version 23.0.1 版本严格匹配23.0.1\nAndroid 6.0 (API 23)\nLocal Maven repository for Support Libraries(之前叫做Android Support Repository)\n\n![QQ20160609-1@2x](https://awezome.net/wp-content/uploads/2016/06/QQ20160609-1@2x.png)\n\n添加环境变量\n~/.bashrc, ~/.bash_profile 或者 ~/.zshrc\n`PATH=\"/usr/local/Cellar/android-sdk/24.4.1_1/tools:/usr/local/Cellar/android-sdk/24.4.1_1/platform-tools:${PATH}\"\nexport ANDROID_HOME=/usr/local/Cellar/android-sdk/24.4.1_1/`\n\n### React Native安装\n\nvim ~/.npmrc 加入下面内容,不然各种慢\n`registry = https://registry.npm.taobao.org`\n\nReact Native安装\n`npm install -g react-native-cli`\n\n建立工程\n`react-native init AwesomeProject`\n\n### IDE\n\n开发工具有sublime,webstorm以及官网推荐的Nuclide，不过我喜欢Jetbrains系统，平时也用PHPStrom，这个和webstorm一样。打开AwesomeProject工程后改下JavaScript版本\n` Languages&Frameworks -> JavaScript -> JavaScript language version -> Harmony `\n同时也可装个提示插件\nhttps://github.com/virtoolswebplayer/ReactNative-LiveTemplate\n如果用sublime的话推荐安装几个插件：JSX、React Teamplate、react-native-snippets、ReactJS Snippets、SublimeLinter-jsxhint、Babel、Babel Snippets、Emmet、React ES6-Snippets，这几个插件可以支持React的JSX语法，并进行高亮提示，同时也可进行排版","source":"_posts/react-native-mac-e4-b8-8b-android-e7-8e-af-e5-a2-83-e5-8f-8aide-e9-85-8d-e7-bd-ae.md","raw":"---\ntitle: 'React Native : Mac 下 Android 环境及IDE配置'\ntags:\n  - react\n  - react-native\nid: 2584\ncategories:\n  - React\ndate: 2016-06-09 14:13:46\n---\n\n一时感兴趣，想玩一把React Native，花了好几个时间搭环境，主要坑在网速上，简单做下总结。\n\n### 基本工具\n\nMac开发的话首先要有Homebrew和Node.js环境，这个安装教程很多就不多说了。\n`brew install watchman\nbrew install Flow\n`\n*针对iOS开发，我们只需要安装Xcode 7.0或者7.0以后版本，该可以通过App Store进行下载安装\n\n### For Android\n\n安装最新版的JDK 1.8 javac -version\n安装Genymotion android模拟器，https://www.genymotion.com/\n\n安装Android SDK: 当然也可以安装Android Studio来进行安装，不过Android Studio不是必须的。http://www.androiddevtools.cn/这个地方下载现成的包也行。\n`brew install android-sdk`\n\nAndroid SDK在线更新镜像服务器更换源，不然各种慢\n南阳理工学院镜像服务器地址:mirror.nyist.edu.cn 端口：80\n腾讯Bugly 镜像:android-mirror.bugly.qq.com 端口：8080\n\n![](http://www.androiddevtools.cn/static/image/sdk-manager-proxy-settings.png)\n<!--more-->\n\n安装SDK\nAndroid SDK Build-tools version 23.0.1 版本严格匹配23.0.1\nAndroid 6.0 (API 23)\nLocal Maven repository for Support Libraries(之前叫做Android Support Repository)\n\n![QQ20160609-1@2x](https://awezome.net/wp-content/uploads/2016/06/QQ20160609-1@2x.png)\n\n添加环境变量\n~/.bashrc, ~/.bash_profile 或者 ~/.zshrc\n`PATH=\"/usr/local/Cellar/android-sdk/24.4.1_1/tools:/usr/local/Cellar/android-sdk/24.4.1_1/platform-tools:${PATH}\"\nexport ANDROID_HOME=/usr/local/Cellar/android-sdk/24.4.1_1/`\n\n### React Native安装\n\nvim ~/.npmrc 加入下面内容,不然各种慢\n`registry = https://registry.npm.taobao.org`\n\nReact Native安装\n`npm install -g react-native-cli`\n\n建立工程\n`react-native init AwesomeProject`\n\n### IDE\n\n开发工具有sublime,webstorm以及官网推荐的Nuclide，不过我喜欢Jetbrains系统，平时也用PHPStrom，这个和webstorm一样。打开AwesomeProject工程后改下JavaScript版本\n` Languages&Frameworks -> JavaScript -> JavaScript language version -> Harmony `\n同时也可装个提示插件\nhttps://github.com/virtoolswebplayer/ReactNative-LiveTemplate\n如果用sublime的话推荐安装几个插件：JSX、React Teamplate、react-native-snippets、ReactJS Snippets、SublimeLinter-jsxhint、Babel、Babel Snippets、Emmet、React ES6-Snippets，这几个插件可以支持React的JSX语法，并进行高亮提示，同时也可进行排版","slug":"react-native-mac-e4-b8-8b-android-e7-8e-af-e5-a2-83-e5-8f-8aide-e9-85-8d-e7-bd-ae","published":1,"updated":"2018-01-13T05:07:00.488Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjccw7xd900aeaqcreretaeje","content":"<p>一时感兴趣，想玩一把React Native，花了好几个时间搭环境，主要坑在网速上，简单做下总结。</p>\n<h3 id=\"基本工具\"><a href=\"#基本工具\" class=\"headerlink\" title=\"基本工具\"></a>基本工具</h3><p>Mac开发的话首先要有Homebrew和Node.js环境，这个安装教程很多就不多说了。<br><code>brew install watchman\nbrew install Flow</code><br>*针对iOS开发，我们只需要安装Xcode 7.0或者7.0以后版本，该可以通过App Store进行下载安装</p>\n<h3 id=\"For-Android\"><a href=\"#For-Android\" class=\"headerlink\" title=\"For Android\"></a>For Android</h3><p>安装最新版的JDK 1.8 javac -version<br>安装Genymotion android模拟器，<a href=\"https://www.genymotion.com/\" target=\"_blank\" rel=\"noopener\">https://www.genymotion.com/</a></p>\n<p>安装Android SDK: 当然也可以安装Android Studio来进行安装，不过Android Studio不是必须的。<a href=\"http://www.androiddevtools.cn/这个地方下载现成的包也行。\" target=\"_blank\" rel=\"noopener\">http://www.androiddevtools.cn/这个地方下载现成的包也行。</a><br><code>brew install android-sdk</code></p>\n<p>Android SDK在线更新镜像服务器更换源，不然各种慢<br>南阳理工学院镜像服务器地址:mirror.nyist.edu.cn 端口：80<br>腾讯Bugly 镜像:android-mirror.bugly.qq.com 端口：8080</p>\n<p><img src=\"http://www.androiddevtools.cn/static/image/sdk-manager-proxy-settings.png\" alt=\"\"><br><a id=\"more\"></a></p>\n<p>安装SDK<br>Android SDK Build-tools version 23.0.1 版本严格匹配23.0.1<br>Android 6.0 (API 23)<br>Local Maven repository for Support Libraries(之前叫做Android Support Repository)</p>\n<p><img src=\"https://awezome.net/wp-content/uploads/2016/06/QQ20160609-1@2x.png\" alt=\"QQ20160609-1@2x\"></p>\n<p>添加环境变量<br>~/.bashrc, ~/.bash_profile 或者 ~/.zshrc<br><code>PATH=&quot;/usr/local/Cellar/android-sdk/24.4.1_1/tools:/usr/local/Cellar/android-sdk/24.4.1_1/platform-tools:${PATH}&quot;\nexport ANDROID_HOME=/usr/local/Cellar/android-sdk/24.4.1_1/</code></p>\n<h3 id=\"React-Native安装\"><a href=\"#React-Native安装\" class=\"headerlink\" title=\"React Native安装\"></a>React Native安装</h3><p>vim ~/.npmrc 加入下面内容,不然各种慢<br><code>registry = https://registry.npm.taobao.org</code></p>\n<p>React Native安装<br><code>npm install -g react-native-cli</code></p>\n<p>建立工程<br><code>react-native init AwesomeProject</code></p>\n<h3 id=\"IDE\"><a href=\"#IDE\" class=\"headerlink\" title=\"IDE\"></a>IDE</h3><p>开发工具有sublime,webstorm以及官网推荐的Nuclide，不过我喜欢Jetbrains系统，平时也用PHPStrom，这个和webstorm一样。打开AwesomeProject工程后改下JavaScript版本<br><code>Languages&amp;Frameworks -&gt; JavaScript -&gt; JavaScript language version -&gt; Harmony</code><br>同时也可装个提示插件<br><a href=\"https://github.com/virtoolswebplayer/ReactNative-LiveTemplate\" target=\"_blank\" rel=\"noopener\">https://github.com/virtoolswebplayer/ReactNative-LiveTemplate</a><br>如果用sublime的话推荐安装几个插件：JSX、React Teamplate、react-native-snippets、ReactJS Snippets、SublimeLinter-jsxhint、Babel、Babel Snippets、Emmet、React ES6-Snippets，这几个插件可以支持React的JSX语法，并进行高亮提示，同时也可进行排版</p>\n","site":{"data":{}},"excerpt":"<p>一时感兴趣，想玩一把React Native，花了好几个时间搭环境，主要坑在网速上，简单做下总结。</p>\n<h3 id=\"基本工具\"><a href=\"#基本工具\" class=\"headerlink\" title=\"基本工具\"></a>基本工具</h3><p>Mac开发的话首先要有Homebrew和Node.js环境，这个安装教程很多就不多说了。<br><code>brew install watchman\nbrew install Flow</code><br>*针对iOS开发，我们只需要安装Xcode 7.0或者7.0以后版本，该可以通过App Store进行下载安装</p>\n<h3 id=\"For-Android\"><a href=\"#For-Android\" class=\"headerlink\" title=\"For Android\"></a>For Android</h3><p>安装最新版的JDK 1.8 javac -version<br>安装Genymotion android模拟器，<a href=\"https://www.genymotion.com/\" target=\"_blank\" rel=\"noopener\">https://www.genymotion.com/</a></p>\n<p>安装Android SDK: 当然也可以安装Android Studio来进行安装，不过Android Studio不是必须的。<a href=\"http://www.androiddevtools.cn/这个地方下载现成的包也行。\" target=\"_blank\" rel=\"noopener\">http://www.androiddevtools.cn/这个地方下载现成的包也行。</a><br><code>brew install android-sdk</code></p>\n<p>Android SDK在线更新镜像服务器更换源，不然各种慢<br>南阳理工学院镜像服务器地址:mirror.nyist.edu.cn 端口：80<br>腾讯Bugly 镜像:android-mirror.bugly.qq.com 端口：8080</p>\n<p><img src=\"http://www.androiddevtools.cn/static/image/sdk-manager-proxy-settings.png\" alt=\"\"><br>","more":"</p>\n<p>安装SDK<br>Android SDK Build-tools version 23.0.1 版本严格匹配23.0.1<br>Android 6.0 (API 23)<br>Local Maven repository for Support Libraries(之前叫做Android Support Repository)</p>\n<p><img src=\"https://awezome.net/wp-content/uploads/2016/06/QQ20160609-1@2x.png\" alt=\"QQ20160609-1@2x\"></p>\n<p>添加环境变量<br>~/.bashrc, ~/.bash_profile 或者 ~/.zshrc<br><code>PATH=&quot;/usr/local/Cellar/android-sdk/24.4.1_1/tools:/usr/local/Cellar/android-sdk/24.4.1_1/platform-tools:${PATH}&quot;\nexport ANDROID_HOME=/usr/local/Cellar/android-sdk/24.4.1_1/</code></p>\n<h3 id=\"React-Native安装\"><a href=\"#React-Native安装\" class=\"headerlink\" title=\"React Native安装\"></a>React Native安装</h3><p>vim ~/.npmrc 加入下面内容,不然各种慢<br><code>registry = https://registry.npm.taobao.org</code></p>\n<p>React Native安装<br><code>npm install -g react-native-cli</code></p>\n<p>建立工程<br><code>react-native init AwesomeProject</code></p>\n<h3 id=\"IDE\"><a href=\"#IDE\" class=\"headerlink\" title=\"IDE\"></a>IDE</h3><p>开发工具有sublime,webstorm以及官网推荐的Nuclide，不过我喜欢Jetbrains系统，平时也用PHPStrom，这个和webstorm一样。打开AwesomeProject工程后改下JavaScript版本<br><code>Languages&amp;Frameworks -&gt; JavaScript -&gt; JavaScript language version -&gt; Harmony</code><br>同时也可装个提示插件<br><a href=\"https://github.com/virtoolswebplayer/ReactNative-LiveTemplate\" target=\"_blank\" rel=\"noopener\">https://github.com/virtoolswebplayer/ReactNative-LiveTemplate</a><br>如果用sublime的话推荐安装几个插件：JSX、React Teamplate、react-native-snippets、ReactJS Snippets、SublimeLinter-jsxhint、Babel、Babel Snippets、Emmet、React ES6-Snippets，这几个插件可以支持React的JSX语法，并进行高亮提示，同时也可进行排版</p>"},{"title":"spring security 获取当前用户信息","id":"1124","date":"2013-03-10T02:35:45.000Z","_content":"\n如果只是想从页面上显示当前登陆的用户名，可以直接使用Spring Security提供的taglib。\n\n<%@ taglib prefix=\"sec\" uri=\"http://www.springframework.org/security/tags\" %>\n<div>username : <sec:authentication property=\"name\"/></div>\n\n如果想在程序中获得当前登陆用户对应的对象。\n\nUserDetails userDetails = (UserDetails) SecurityContextHolder.getContext()\n    .getAuthentication()\n    .getPrincipal();\n\n如果想获得当前登陆用户所拥有的所有权限。\n\nGrantedAuthority[] authorities = userDetails.getAuthorities();","source":"_posts/spring-security-e8-8e-b7-e5-8f-96-e5-bd-93-e5-89-8d-e7-94-a8-e6-88-b7-e4-bf-a1-e6-81-af.md","raw":"---\ntitle: spring security 获取当前用户信息\nid: 1124\ncategories:\n  - Java\ndate: 2013-03-10 10:35:45\ntags:\n---\n\n如果只是想从页面上显示当前登陆的用户名，可以直接使用Spring Security提供的taglib。\n\n<%@ taglib prefix=\"sec\" uri=\"http://www.springframework.org/security/tags\" %>\n<div>username : <sec:authentication property=\"name\"/></div>\n\n如果想在程序中获得当前登陆用户对应的对象。\n\nUserDetails userDetails = (UserDetails) SecurityContextHolder.getContext()\n    .getAuthentication()\n    .getPrincipal();\n\n如果想获得当前登陆用户所拥有的所有权限。\n\nGrantedAuthority[] authorities = userDetails.getAuthorities();","slug":"spring-security-e8-8e-b7-e5-8f-96-e5-bd-93-e5-89-8d-e7-94-a8-e6-88-b7-e4-bf-a1-e6-81-af","published":1,"updated":"2018-01-13T05:07:00.442Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjccw7xdc00ahaqcr5xy0n2yi","content":"<p>如果只是想从页面上显示当前登陆的用户名，可以直接使用Spring Security提供的taglib。</p>\n<p>&lt;%@ taglib prefix=”sec” uri=”<a href=\"http://www.springframework.org/security/tags\" target=\"_blank\" rel=\"noopener\">http://www.springframework.org/security/tags</a>“ %&gt;</p>\n<div>username : <sec:authentication property=\"name\"></sec:authentication></div>\n\n<p>如果想在程序中获得当前登陆用户对应的对象。</p>\n<p>UserDetails userDetails = (UserDetails) SecurityContextHolder.getContext()<br>    .getAuthentication()<br>    .getPrincipal();</p>\n<p>如果想获得当前登陆用户所拥有的所有权限。</p>\n<p>GrantedAuthority[] authorities = userDetails.getAuthorities();</p>\n","site":{"data":{}},"excerpt":"","more":"<p>如果只是想从页面上显示当前登陆的用户名，可以直接使用Spring Security提供的taglib。</p>\n<p>&lt;%@ taglib prefix=”sec” uri=”<a href=\"http://www.springframework.org/security/tags\" target=\"_blank\" rel=\"noopener\">http://www.springframework.org/security/tags</a>“ %&gt;</p>\n<div>username : <sec:authentication property=\"name\"></sec:authentication></div>\n\n<p>如果想在程序中获得当前登陆用户对应的对象。</p>\n<p>UserDetails userDetails = (UserDetails) SecurityContextHolder.getContext()<br>    .getAuthentication()<br>    .getPrincipal();</p>\n<p>如果想获得当前登陆用户所拥有的所有权限。</p>\n<p>GrantedAuthority[] authorities = userDetails.getAuthorities();</p>\n"},{"title":"Review Board MySQL 中文 utf8 支持","id":"1638","date":"2014-04-07T10:36:04.000Z","_content":"\n默认 Review Board 的安装数据库编码可能会是  Latin1 ，这样就不能存中文，会出现问号或乱码。如果安装完才发现这个问题，可以这样来修改成utf8.\n\n数据库编码转换\n在mysql命令行下输入：alter database reviewboard default character set utf8;\n\n数据表的编码转换\n命令行下使用 mysqldump 导出数据语句，然后打开 sql 文件，替换其中的 Latin1 为 utf8 , 再重建或清空原数据库，再导入就行，注意这时如果重建的话编码要是 utf8","source":"_posts/review-board-mysql-e4-b8-ad-e6-96-87-utf8-e6-94-af-e6-8c-81.md","raw":"---\ntitle: Review Board MySQL 中文 utf8 支持\ntags:\n  - MySQL\n  - reviewboard\nid: 1638\ncategories:\n  - MySQL\ndate: 2014-04-07 18:36:04\n---\n\n默认 Review Board 的安装数据库编码可能会是  Latin1 ，这样就不能存中文，会出现问号或乱码。如果安装完才发现这个问题，可以这样来修改成utf8.\n\n数据库编码转换\n在mysql命令行下输入：alter database reviewboard default character set utf8;\n\n数据表的编码转换\n命令行下使用 mysqldump 导出数据语句，然后打开 sql 文件，替换其中的 Latin1 为 utf8 , 再重建或清空原数据库，再导入就行，注意这时如果重建的话编码要是 utf8","slug":"review-board-mysql-e4-b8-ad-e6-96-87-utf8-e6-94-af-e6-8c-81","published":1,"updated":"2018-01-13T05:07:00.475Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjccw7xde00alaqcrnw58anht","content":"<p>默认 Review Board 的安装数据库编码可能会是  Latin1 ，这样就不能存中文，会出现问号或乱码。如果安装完才发现这个问题，可以这样来修改成utf8.</p>\n<p>数据库编码转换<br>在mysql命令行下输入：alter database reviewboard default character set utf8;</p>\n<p>数据表的编码转换<br>命令行下使用 mysqldump 导出数据语句，然后打开 sql 文件，替换其中的 Latin1 为 utf8 , 再重建或清空原数据库，再导入就行，注意这时如果重建的话编码要是 utf8</p>\n","site":{"data":{}},"excerpt":"","more":"<p>默认 Review Board 的安装数据库编码可能会是  Latin1 ，这样就不能存中文，会出现问号或乱码。如果安装完才发现这个问题，可以这样来修改成utf8.</p>\n<p>数据库编码转换<br>在mysql命令行下输入：alter database reviewboard default character set utf8;</p>\n<p>数据表的编码转换<br>命令行下使用 mysqldump 导出数据语句，然后打开 sql 文件，替换其中的 Latin1 为 utf8 , 再重建或清空原数据库，再导入就行，注意这时如果重建的话编码要是 utf8</p>\n"},{"title":"rsync 用法总结","id":"1515","date":"2014-03-25T07:08:21.000Z","_content":"\n语法：\n`rsync options source destination\n-z is to enable compression\n-v verbose\n-r indicates recursive\n-W transfer the whole files\n-a\tRecursive mode\n\tPreserves symbolic links\n\tPreserves permissions\n\tPreserves timestamp\n\tPreserves owner and group\n--progress show progress\n--delete delete the unuseful files\n--include\n--exclude\n--max-size='100K'  no large files`\n<!--more-->\n1.同步两个本地目录\n`rsync -zvr /var/opt/installation/inventory/ /root/temp`\n2.同步一个文件\n`rsync -v /var/lib/rpm/Pubkeys /root/temp/`\n3.从本地同步到服务器\n`rsync -avz /root/temp/ thegeekstuff@192.168.200.10:/home/thegeekstuff/temp/`\n4.从服务器同步到本地\n`rsync -avz thegeekstuff@192.168.200.10:/var/lib/rpm /root/temp`\n5.仅同步目录结构\n`rsync -v -d thegeekstuff@192.168.200.10:/var/lib/ .`\n6.查看改变的文件\n`rsync -avzi thegeekstuff@192.168.200.10:/var/lib/rpm/ /root/temp/`\n\n实例\n`rsync -r --del --exclude=\"abc/config\" --exclude=\".idea/*\"  rsync://192.168.1.5/all /opt/web/htdocs/`\n\n[http://www.thegeekstuff.com/2010/09/rsync-command-examples/]","source":"_posts/rsync-e7-94-a8-e6-b3-95-e6-80-bb-e7-bb-93.md","raw":"---\ntitle: rsync 用法总结\ntags:\n  - rsync\nid: 1515\ncategories:\n  - Linux\ndate: 2014-03-25 15:08:21\n---\n\n语法：\n`rsync options source destination\n-z is to enable compression\n-v verbose\n-r indicates recursive\n-W transfer the whole files\n-a\tRecursive mode\n\tPreserves symbolic links\n\tPreserves permissions\n\tPreserves timestamp\n\tPreserves owner and group\n--progress show progress\n--delete delete the unuseful files\n--include\n--exclude\n--max-size='100K'  no large files`\n<!--more-->\n1.同步两个本地目录\n`rsync -zvr /var/opt/installation/inventory/ /root/temp`\n2.同步一个文件\n`rsync -v /var/lib/rpm/Pubkeys /root/temp/`\n3.从本地同步到服务器\n`rsync -avz /root/temp/ thegeekstuff@192.168.200.10:/home/thegeekstuff/temp/`\n4.从服务器同步到本地\n`rsync -avz thegeekstuff@192.168.200.10:/var/lib/rpm /root/temp`\n5.仅同步目录结构\n`rsync -v -d thegeekstuff@192.168.200.10:/var/lib/ .`\n6.查看改变的文件\n`rsync -avzi thegeekstuff@192.168.200.10:/var/lib/rpm/ /root/temp/`\n\n实例\n`rsync -r --del --exclude=\"abc/config\" --exclude=\".idea/*\"  rsync://192.168.1.5/all /opt/web/htdocs/`\n\n[http://www.thegeekstuff.com/2010/09/rsync-command-examples/]","slug":"rsync-e7-94-a8-e6-b3-95-e6-80-bb-e7-bb-93","published":1,"updated":"2018-01-13T05:07:00.483Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjccw7xdf00aoaqcrbrftzeyz","content":"<p>语法：<br><code>rsync options source destination\n-z is to enable compression\n-v verbose\n-r indicates recursive\n-W transfer the whole files\n-a    Recursive mode\n    Preserves symbolic links\n    Preserves permissions\n    Preserves timestamp\n    Preserves owner and group\n--progress show progress\n--delete delete the unuseful files\n--include\n--exclude\n--max-size=&#39;100K&#39;  no large files</code><br><a id=\"more\"></a><br>1.同步两个本地目录<br><code>rsync -zvr /var/opt/installation/inventory/ /root/temp</code><br>2.同步一个文件<br><code>rsync -v /var/lib/rpm/Pubkeys /root/temp/</code><br>3.从本地同步到服务器<br><code>rsync -avz /root/temp/ thegeekstuff@192.168.200.10:/home/thegeekstuff/temp/</code><br>4.从服务器同步到本地<br><code>rsync -avz thegeekstuff@192.168.200.10:/var/lib/rpm /root/temp</code><br>5.仅同步目录结构<br><code>rsync -v -d thegeekstuff@192.168.200.10:/var/lib/ .</code><br>6.查看改变的文件<br><code>rsync -avzi thegeekstuff@192.168.200.10:/var/lib/rpm/ /root/temp/</code></p>\n<p>实例<br><code>rsync -r --del --exclude=&quot;abc/config&quot; --exclude=&quot;.idea/*&quot;  rsync://192.168.1.5/all /opt/web/htdocs/</code></p>\n<p>[<a href=\"http://www.thegeekstuff.com/2010/09/rsync-command-examples/\" target=\"_blank\" rel=\"noopener\">http://www.thegeekstuff.com/2010/09/rsync-command-examples/</a>]</p>\n","site":{"data":{}},"excerpt":"<p>语法：<br><code>rsync options source destination\n-z is to enable compression\n-v verbose\n-r indicates recursive\n-W transfer the whole files\n-a    Recursive mode\n    Preserves symbolic links\n    Preserves permissions\n    Preserves timestamp\n    Preserves owner and group\n--progress show progress\n--delete delete the unuseful files\n--include\n--exclude\n--max-size=&#39;100K&#39;  no large files</code><br>","more":"<br>1.同步两个本地目录<br><code>rsync -zvr /var/opt/installation/inventory/ /root/temp</code><br>2.同步一个文件<br><code>rsync -v /var/lib/rpm/Pubkeys /root/temp/</code><br>3.从本地同步到服务器<br><code>rsync -avz /root/temp/ thegeekstuff@192.168.200.10:/home/thegeekstuff/temp/</code><br>4.从服务器同步到本地<br><code>rsync -avz thegeekstuff@192.168.200.10:/var/lib/rpm /root/temp</code><br>5.仅同步目录结构<br><code>rsync -v -d thegeekstuff@192.168.200.10:/var/lib/ .</code><br>6.查看改变的文件<br><code>rsync -avzi thegeekstuff@192.168.200.10:/var/lib/rpm/ /root/temp/</code></p>\n<p>实例<br><code>rsync -r --del --exclude=&quot;abc/config&quot; --exclude=&quot;.idea/*&quot;  rsync://192.168.1.5/all /opt/web/htdocs/</code></p>\n<p>[<a href=\"http://www.thegeekstuff.com/2010/09/rsync-command-examples/\" target=\"_blank\" rel=\"noopener\">http://www.thegeekstuff.com/2010/09/rsync-command-examples/</a>]</p>"},{"title":"SQL Joins 图解","id":"2156","date":"2014-05-28T04:21:22.000Z","_content":"\n> 网上搞来的，以前要是有这图，学起来得有多简单。\n![sqljoins2](/wp-content/uploads/2014/05/47470dac9f3a6f5554e83f213da982af.png)","source":"_posts/sql-joins-e5-9b-be-e8-a7-a3.md","raw":"---\ntitle: SQL Joins 图解\ntags:\n  - MySQL\nid: 2156\ncategories:\n  - MySQL\ndate: 2014-05-28 12:21:22\n---\n\n> 网上搞来的，以前要是有这图，学起来得有多简单。\n![sqljoins2](/wp-content/uploads/2014/05/47470dac9f3a6f5554e83f213da982af.png)","slug":"sql-joins-e5-9b-be-e8-a7-a3","published":1,"updated":"2018-01-13T05:07:00.471Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjccw7xdi00asaqcrznm1hjd0","content":"<blockquote>\n<p>网上搞来的，以前要是有这图，学起来得有多简单。<br><img src=\"/wp-content/uploads/2014/05/47470dac9f3a6f5554e83f213da982af.png\" alt=\"sqljoins2\"></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>网上搞来的，以前要是有这图，学起来得有多简单。<br><img src=\"/wp-content/uploads/2014/05/47470dac9f3a6f5554e83f213da982af.png\" alt=\"sqljoins2\"></p>\n</blockquote>\n"},{"title":"struts2验证失败后返回input，select中list数据丢失问题","id":"1122","date":"2013-02-14T02:34:49.000Z","_content":"\n【转】很多人都在问，struts2验证失败后select中list数据丢失的问题\ncould not be resolved as a collection/array/map/enumeration/iterator type. Example: people or people.{name}。\n 其实这个问题很简单，大多数人，是通过action跳转到数据编辑页面的，这样做的目的是方便把数据库里的数据，反显到页面。同时也可以通过该action 将select中的列表数据从数据库中取出，传递给页面。但是，这里出现一个问题，那就是在struts2验证失败后返回input的时候，页面不是通过该action的该方法传递回去的（实际上是通过DefaultWorkflowInterceptor拦截器拦截回去的），所以这个时候页面就找不到sleect的数据集合，从而报错。有的人也许会问，修改input的type为redirect，直接掉转到那个action上去，呵呵，这种方法虽然可以保证得到select的数据集合，因为redirect的性质，我们丢失了之前验证的错误信息。所以还是不能解决问题，那么有的人可能说了，那么改用chain就可以了吧，如果改用chain，我们知道，chain是action链的掉转，执行action还是要经过拦截器，所以因为你带有验证错误信息，你还是会被DefaultWorkflowInterceptor拦截器拦截，还是会报错，而且是chain链错。\n     其实，可以反一种思路，既然走跳转不成功，我们可不可以在页面上下功夫呢。其实我们的select的list能不能不经过action而直接得到数据呢，是可以的，我们的ognl可以访问某个对象的某个方法，也可以访问某个静态类的静态属性，静态方法。所以我们可以将这些数据通过对象方法访问，也可以通过静态类的静态方法去访问，具体怎么做，根据需要写就可以了。代码就不在这里写了，因为非常简单。","source":"_posts/struts2-e9-aa-8c-e8-af-81-e5-a4-b1-e8-b4-a5-e5-90-8e-e8-bf-94-e5-9b-9einput-ef-bc-8cselect-e4-b8-adlist-e6-95-b0-e6-8d-ae-e4-b8-a2-e5-a4-b1-e9-97-ae-e9-a2-98.md","raw":"---\ntitle: struts2验证失败后返回input，select中list数据丢失问题\nid: 1122\ncategories:\n  - Java\ndate: 2013-02-14 10:34:49\ntags:\n---\n\n【转】很多人都在问，struts2验证失败后select中list数据丢失的问题\ncould not be resolved as a collection/array/map/enumeration/iterator type. Example: people or people.{name}。\n 其实这个问题很简单，大多数人，是通过action跳转到数据编辑页面的，这样做的目的是方便把数据库里的数据，反显到页面。同时也可以通过该action 将select中的列表数据从数据库中取出，传递给页面。但是，这里出现一个问题，那就是在struts2验证失败后返回input的时候，页面不是通过该action的该方法传递回去的（实际上是通过DefaultWorkflowInterceptor拦截器拦截回去的），所以这个时候页面就找不到sleect的数据集合，从而报错。有的人也许会问，修改input的type为redirect，直接掉转到那个action上去，呵呵，这种方法虽然可以保证得到select的数据集合，因为redirect的性质，我们丢失了之前验证的错误信息。所以还是不能解决问题，那么有的人可能说了，那么改用chain就可以了吧，如果改用chain，我们知道，chain是action链的掉转，执行action还是要经过拦截器，所以因为你带有验证错误信息，你还是会被DefaultWorkflowInterceptor拦截器拦截，还是会报错，而且是chain链错。\n     其实，可以反一种思路，既然走跳转不成功，我们可不可以在页面上下功夫呢。其实我们的select的list能不能不经过action而直接得到数据呢，是可以的，我们的ognl可以访问某个对象的某个方法，也可以访问某个静态类的静态属性，静态方法。所以我们可以将这些数据通过对象方法访问，也可以通过静态类的静态方法去访问，具体怎么做，根据需要写就可以了。代码就不在这里写了，因为非常简单。","slug":"struts2-e9-aa-8c-e8-af-81-e5-a4-b1-e8-b4-a5-e5-90-8e-e8-bf-94-e5-9b-9einput-ef-bc-8cselect-e4-b8-adlist-e6-95-b0-e6-8d-ae-e4-b8-a2-e5-a4-b1-e9-97-ae-e9-a2-98","published":1,"updated":"2018-01-13T05:07:00.470Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjccw7xdk00avaqcr79mro4xy","content":"<p>【转】很多人都在问，struts2验证失败后select中list数据丢失的问题<br>could not be resolved as a collection/array/map/enumeration/iterator type. Example: people or people.{name}。<br> 其实这个问题很简单，大多数人，是通过action跳转到数据编辑页面的，这样做的目的是方便把数据库里的数据，反显到页面。同时也可以通过该action 将select中的列表数据从数据库中取出，传递给页面。但是，这里出现一个问题，那就是在struts2验证失败后返回input的时候，页面不是通过该action的该方法传递回去的（实际上是通过DefaultWorkflowInterceptor拦截器拦截回去的），所以这个时候页面就找不到sleect的数据集合，从而报错。有的人也许会问，修改input的type为redirect，直接掉转到那个action上去，呵呵，这种方法虽然可以保证得到select的数据集合，因为redirect的性质，我们丢失了之前验证的错误信息。所以还是不能解决问题，那么有的人可能说了，那么改用chain就可以了吧，如果改用chain，我们知道，chain是action链的掉转，执行action还是要经过拦截器，所以因为你带有验证错误信息，你还是会被DefaultWorkflowInterceptor拦截器拦截，还是会报错，而且是chain链错。<br>     其实，可以反一种思路，既然走跳转不成功，我们可不可以在页面上下功夫呢。其实我们的select的list能不能不经过action而直接得到数据呢，是可以的，我们的ognl可以访问某个对象的某个方法，也可以访问某个静态类的静态属性，静态方法。所以我们可以将这些数据通过对象方法访问，也可以通过静态类的静态方法去访问，具体怎么做，根据需要写就可以了。代码就不在这里写了，因为非常简单。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>【转】很多人都在问，struts2验证失败后select中list数据丢失的问题<br>could not be resolved as a collection/array/map/enumeration/iterator type. Example: people or people.{name}。<br> 其实这个问题很简单，大多数人，是通过action跳转到数据编辑页面的，这样做的目的是方便把数据库里的数据，反显到页面。同时也可以通过该action 将select中的列表数据从数据库中取出，传递给页面。但是，这里出现一个问题，那就是在struts2验证失败后返回input的时候，页面不是通过该action的该方法传递回去的（实际上是通过DefaultWorkflowInterceptor拦截器拦截回去的），所以这个时候页面就找不到sleect的数据集合，从而报错。有的人也许会问，修改input的type为redirect，直接掉转到那个action上去，呵呵，这种方法虽然可以保证得到select的数据集合，因为redirect的性质，我们丢失了之前验证的错误信息。所以还是不能解决问题，那么有的人可能说了，那么改用chain就可以了吧，如果改用chain，我们知道，chain是action链的掉转，执行action还是要经过拦截器，所以因为你带有验证错误信息，你还是会被DefaultWorkflowInterceptor拦截器拦截，还是会报错，而且是chain链错。<br>     其实，可以反一种思路，既然走跳转不成功，我们可不可以在页面上下功夫呢。其实我们的select的list能不能不经过action而直接得到数据呢，是可以的，我们的ognl可以访问某个对象的某个方法，也可以访问某个静态类的静态属性，静态方法。所以我们可以将这些数据通过对象方法访问，也可以通过静态类的静态方法去访问，具体怎么做，根据需要写就可以了。代码就不在这里写了，因为非常简单。</p>\n"},{"title":"struts2 json jquery ajax实现用户登陆及业面跳转","id":"1119","date":"2013-02-15T02:33:42.000Z","_content":"\n实现的功能是在登陆页面输入用户名\n\n   错误用户名,页面返回错误信息,页面不刷新.\n\n   输入正确的用户名(scott tiger),页面部刷新返回用户的详细信息,提示登陆成功,并且提示页面3秒钟后自动跳转到welcome.jsp页面。\n\n   贴图太麻烦，这里直接贴代码了，方便大家copy,调试，呵呵。\n\n1.配置strut2这里就不说了，网上很多。\n\n  lib包如下：\n\n  commons-beanutils-1.7.0.jar  commons-collections-3.2.jar    commons-lang-2.4.jar\n\n  commons-logging-1.0.4.jar     commons-logging-api-1.1.jar   *ezmorph-1.0.4.jar\n\n  freemarker-2.3.8.jar               *json-lib-2.3-jdk15.jar             * jsonplugin-0.32.jar\n\n  ognl-2.6.11.jar                       struts2-core-2.0.14.jar             xwork-2.0.7.jar\n\n  Jquery:jquery-1.3.2.js   放在目录: WebContent/js/jquery-1.3.2.js\n\n2\\. loginJqueryAjax.jsp 代码：(根WebContent/下)\n\n --------------------------------------------\n\n   <%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\"\n   pageEncoding=\"UTF-8\"%>\n <%@taglib prefix=\"s\" uri=\"/struts-tags\"%>\n <!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\n <html>\n <head>\n <meta http-equiv=\"Content-Type\" content=\"text/html; charset=ISO-8859-1\">\n <title>Login Ajax Page</title>\n <script type=\"text/javascript\" src=\"js/jquery-1.3.2.js\"></script>\n <script type=\"text/javascript\" src=\"js/index.js\"></script>\n <s:head theme=\"ajax\" />\n </head>\n <body>\n <center><s:form>\n\n   <s:textfield id=\"username\" label=\"User Name\" name=\"user.username\" />\n   <s:textfield id=\"password\" label=\"User Password\" name=\"user.password\" />\n\n   <input type=\"button\" id=\"submit\" value=\"login\">\n   <s:div id=\"msg\"></s:div>\n\n   <div id=\"quartz\" style=\"display: none\">3s end ,the page will\n   redirect <span id=\"num\">3</span>s</div>\n\n </s:form>\n\n <table border=\"0\" width=\"360\">\n   <caption>Person information</caption>\n   <tr>\n     <td>userName:</td>\n     <td>\n     <div id=\"personname\"></div>\n     </td>\n   </tr>\n\n   <tr>\n     <td>age:</td>\n     <td>\n     <div id=\"personage\"></div>\n     </td>\n   </tr>\n\n   <tr>\n     <td>email:</td>\n     <td>\n     <div id=\"personemail\"></div>\n     </td>\n   </tr>\n\n   <tr>\n     <td>birth:</td>\n     <td>\n     <div id=\"personbirth\"></div>\n     </td>\n   </tr>\n </table>\n </center>\n </body>\n </html>\n\n3\\. index.js   /WebContent/js/index.js\n\n------------------------------------------------\n\n$(document).ready(function() {\n     $(\"#submit\").click(function() {\n       var params = $(\"input\").serialize();\n         $.ajax( {\n           // 后台处理程序\n           url : \"login.action\",\n           // 数据发送方式\n           type : \"post\",\n           // 接收数据格式\n           dataType : \"json\",\n\n           data : params,\n           // 要传递的数据\n           // 回传函数\n           timeout : 20000,// 设置请求超时时间（毫秒）。\n\n           success : function(data) { // 请求成功后回调函数。\n\n             //3秒后自动跳转，下面是相对路径\n             if (data.nextPageFlag == true) {\n               $(\"#msg\").css(\"color\",\"green\");\n               $(\"#msg\").html(data.result+\" password:\"+data.user.password+\" age:\"+data.user.age);\n               $(\"#quartz\").css(\"background\",\"#cccccc\");\n               $(\"#quartz\").show();\n\n               $(\"#personname\").html(data.user.username);\n               $(\"#personage\").html(data.user.age);\n               $(\"#personemail\").html(data.user.email);\n               $(\"#personbirth\").html(data.user.birth);\n\n               function jump(count) {\n                 window.setTimeout(function() {\n                   count--;\n                   if (count > 0) {\n                     $('#num').attr('innerHTML', count);\n                     jump(count);\n                   } else {\n                     location.href = \"pages/welcome.jsp\";\n                   }\n                 }, 1000);\n               }\n               jump(3);\n\n             }else{\n               $(\"#msg\").css(\"color\",\"red\");\n               $(\"#msg\").html(data.result);\n             }\n\n           }\n         });\n       });\n   });\n\n4\\. JsonAction.java 代码:\n\n-------------------------------\n\npackage action;\n\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.Date;\n\nimport net.sf.json.JSONObject;\n\nimport com.opensymphony.xwork2.Action;\nimport com.opensymphony.xwork2.ActionContext;\nimport model.User;\n\npublic class JsonAction implements Action {\n   private User user;\n   private String username;\n   private String result;\n   private boolean nextPageFlag;\n\n   @SuppressWarnings(\"unchecked\")\n   @Override\n   public String execute() throws Exception {\n     // TODO Auto-generated method stub\n     // System.out.println(user);\n     JSONObject jo = JSONObject.fromObject(this.getUser());\n     System.out.println(jo);\n\n     ActionContext.getContext().getSession().put(\"username\", user.getUsername());\n\n     if (\"scott\".equals(user.getUsername()) && \"tiger\".equals(\"tiger\")) {\n       user = this.getUserDetail();\n       JSONObject jouserdetail = JSONObject.fromObject(this.getUser());\n       System.out.println(jouserdetail);\n       result = \"login success, login name: \" + user.getUsername();\n       ActionContext.getContext().getSession().put(\"person\", user);\n       nextPageFlag = true;\n     } else {\n       result = \"username/password is wrong\";\n       nextPageFlag = false;\n     }\n\n     return SUCCESS;\n   }\n\n   public User getUser() {\n     return user;\n   }\n\n   public void setUser(User user) {\n     this.user = user;\n   }\n\n   public String getResult() {\n     return result;\n   }\n\n   public void setResult(String result) {\n     this.result = result;\n   }\n\n   public String getUsername() {\n     return username;\n   }\n\n   public void setUsername(String username) {\n     this.username = username;\n   }\n\n   public boolean isNextPageFlag() {\n     return nextPageFlag;\n   }\n\n   public void setNextPageFlag(boolean nextPageFlag) {\n     this.nextPageFlag = nextPageFlag;\n   }\n\n   public User getUserDetail() {\n     User userDetail = new User();\n     userDetail.setUsername(\"jack.tian\");\n     userDetail.setPassword(\"jack.tian\");\n     userDetail.setAge(25);\n\n     SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd\");\n     Date date = null;\n     try {\n       date = sdf.parse(\"2010-01-01\");\n     } catch (ParseException e) {\n       // TODO Auto-generated catch block\n       e.printStackTrace();\n     }\n     userDetail.setBirth(date);\n\n     userDetail.setEmail(\"XX@xx.com\");\n     return userDetail;\n   }\n }\n\n5.User.java\n\n---------------------------\n\npackage model;\n\nimport java.util.Date;\n\npublic class User{\n   /**\n    *\n    */\n   private static final long serialVersionUID = 4861789569977171659L;\n   private String username;\n   private String password;\n   private Integer age;\n   private String email;\n   private Date birth;\n\n   public User(){}\n\n   public User(String username, String password){\n     this.username = username;\n     this.password = password;\n   }\n  ....get set method.\n\n }\n\n6.struts.xml\n\n------------------------------\n\n<struts>\n\n   <package name=\"struts2_login\" extends=\"json-default\">\n\n     <action name=\"login\" class=\"action.JsonAction\">\n       <result type=\"json\"></result>\n     </action>\n\n   </package>\n </struts>\n\n7.welcom.jsp /pages/welcome.jsp\n\n-------------------------------------------\n\n<%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\"\n     pageEncoding=\"UTF-8\"%>\n <!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\n <html>\n <head>\n <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n <title>welcome</title>\n </head>\n <body>\n\nUser:${sessionScope.username},\nlogin successfully.\n\n</body>\n </html>","source":"_posts/struts2-json-jquery-ajax-e5-ae-9e-e7-8e-b0-e7-94-a8-e6-88-b7-e7-99-bb-e9-99-86-e5-8f-8a-e4-b8-9a-e9-9d-a2-e8-b7-b3-e8-bd-ac.md","raw":"---\ntitle: struts2 json jquery ajax实现用户登陆及业面跳转\nid: 1119\ncategories:\n  - Java\ndate: 2013-02-15 10:33:42\ntags:\n---\n\n实现的功能是在登陆页面输入用户名\n\n   错误用户名,页面返回错误信息,页面不刷新.\n\n   输入正确的用户名(scott tiger),页面部刷新返回用户的详细信息,提示登陆成功,并且提示页面3秒钟后自动跳转到welcome.jsp页面。\n\n   贴图太麻烦，这里直接贴代码了，方便大家copy,调试，呵呵。\n\n1.配置strut2这里就不说了，网上很多。\n\n  lib包如下：\n\n  commons-beanutils-1.7.0.jar  commons-collections-3.2.jar    commons-lang-2.4.jar\n\n  commons-logging-1.0.4.jar     commons-logging-api-1.1.jar   *ezmorph-1.0.4.jar\n\n  freemarker-2.3.8.jar               *json-lib-2.3-jdk15.jar             * jsonplugin-0.32.jar\n\n  ognl-2.6.11.jar                       struts2-core-2.0.14.jar             xwork-2.0.7.jar\n\n  Jquery:jquery-1.3.2.js   放在目录: WebContent/js/jquery-1.3.2.js\n\n2\\. loginJqueryAjax.jsp 代码：(根WebContent/下)\n\n --------------------------------------------\n\n   <%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\"\n   pageEncoding=\"UTF-8\"%>\n <%@taglib prefix=\"s\" uri=\"/struts-tags\"%>\n <!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\n <html>\n <head>\n <meta http-equiv=\"Content-Type\" content=\"text/html; charset=ISO-8859-1\">\n <title>Login Ajax Page</title>\n <script type=\"text/javascript\" src=\"js/jquery-1.3.2.js\"></script>\n <script type=\"text/javascript\" src=\"js/index.js\"></script>\n <s:head theme=\"ajax\" />\n </head>\n <body>\n <center><s:form>\n\n   <s:textfield id=\"username\" label=\"User Name\" name=\"user.username\" />\n   <s:textfield id=\"password\" label=\"User Password\" name=\"user.password\" />\n\n   <input type=\"button\" id=\"submit\" value=\"login\">\n   <s:div id=\"msg\"></s:div>\n\n   <div id=\"quartz\" style=\"display: none\">3s end ,the page will\n   redirect <span id=\"num\">3</span>s</div>\n\n </s:form>\n\n <table border=\"0\" width=\"360\">\n   <caption>Person information</caption>\n   <tr>\n     <td>userName:</td>\n     <td>\n     <div id=\"personname\"></div>\n     </td>\n   </tr>\n\n   <tr>\n     <td>age:</td>\n     <td>\n     <div id=\"personage\"></div>\n     </td>\n   </tr>\n\n   <tr>\n     <td>email:</td>\n     <td>\n     <div id=\"personemail\"></div>\n     </td>\n   </tr>\n\n   <tr>\n     <td>birth:</td>\n     <td>\n     <div id=\"personbirth\"></div>\n     </td>\n   </tr>\n </table>\n </center>\n </body>\n </html>\n\n3\\. index.js   /WebContent/js/index.js\n\n------------------------------------------------\n\n$(document).ready(function() {\n     $(\"#submit\").click(function() {\n       var params = $(\"input\").serialize();\n         $.ajax( {\n           // 后台处理程序\n           url : \"login.action\",\n           // 数据发送方式\n           type : \"post\",\n           // 接收数据格式\n           dataType : \"json\",\n\n           data : params,\n           // 要传递的数据\n           // 回传函数\n           timeout : 20000,// 设置请求超时时间（毫秒）。\n\n           success : function(data) { // 请求成功后回调函数。\n\n             //3秒后自动跳转，下面是相对路径\n             if (data.nextPageFlag == true) {\n               $(\"#msg\").css(\"color\",\"green\");\n               $(\"#msg\").html(data.result+\" password:\"+data.user.password+\" age:\"+data.user.age);\n               $(\"#quartz\").css(\"background\",\"#cccccc\");\n               $(\"#quartz\").show();\n\n               $(\"#personname\").html(data.user.username);\n               $(\"#personage\").html(data.user.age);\n               $(\"#personemail\").html(data.user.email);\n               $(\"#personbirth\").html(data.user.birth);\n\n               function jump(count) {\n                 window.setTimeout(function() {\n                   count--;\n                   if (count > 0) {\n                     $('#num').attr('innerHTML', count);\n                     jump(count);\n                   } else {\n                     location.href = \"pages/welcome.jsp\";\n                   }\n                 }, 1000);\n               }\n               jump(3);\n\n             }else{\n               $(\"#msg\").css(\"color\",\"red\");\n               $(\"#msg\").html(data.result);\n             }\n\n           }\n         });\n       });\n   });\n\n4\\. JsonAction.java 代码:\n\n-------------------------------\n\npackage action;\n\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.Date;\n\nimport net.sf.json.JSONObject;\n\nimport com.opensymphony.xwork2.Action;\nimport com.opensymphony.xwork2.ActionContext;\nimport model.User;\n\npublic class JsonAction implements Action {\n   private User user;\n   private String username;\n   private String result;\n   private boolean nextPageFlag;\n\n   @SuppressWarnings(\"unchecked\")\n   @Override\n   public String execute() throws Exception {\n     // TODO Auto-generated method stub\n     // System.out.println(user);\n     JSONObject jo = JSONObject.fromObject(this.getUser());\n     System.out.println(jo);\n\n     ActionContext.getContext().getSession().put(\"username\", user.getUsername());\n\n     if (\"scott\".equals(user.getUsername()) && \"tiger\".equals(\"tiger\")) {\n       user = this.getUserDetail();\n       JSONObject jouserdetail = JSONObject.fromObject(this.getUser());\n       System.out.println(jouserdetail);\n       result = \"login success, login name: \" + user.getUsername();\n       ActionContext.getContext().getSession().put(\"person\", user);\n       nextPageFlag = true;\n     } else {\n       result = \"username/password is wrong\";\n       nextPageFlag = false;\n     }\n\n     return SUCCESS;\n   }\n\n   public User getUser() {\n     return user;\n   }\n\n   public void setUser(User user) {\n     this.user = user;\n   }\n\n   public String getResult() {\n     return result;\n   }\n\n   public void setResult(String result) {\n     this.result = result;\n   }\n\n   public String getUsername() {\n     return username;\n   }\n\n   public void setUsername(String username) {\n     this.username = username;\n   }\n\n   public boolean isNextPageFlag() {\n     return nextPageFlag;\n   }\n\n   public void setNextPageFlag(boolean nextPageFlag) {\n     this.nextPageFlag = nextPageFlag;\n   }\n\n   public User getUserDetail() {\n     User userDetail = new User();\n     userDetail.setUsername(\"jack.tian\");\n     userDetail.setPassword(\"jack.tian\");\n     userDetail.setAge(25);\n\n     SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd\");\n     Date date = null;\n     try {\n       date = sdf.parse(\"2010-01-01\");\n     } catch (ParseException e) {\n       // TODO Auto-generated catch block\n       e.printStackTrace();\n     }\n     userDetail.setBirth(date);\n\n     userDetail.setEmail(\"XX@xx.com\");\n     return userDetail;\n   }\n }\n\n5.User.java\n\n---------------------------\n\npackage model;\n\nimport java.util.Date;\n\npublic class User{\n   /**\n    *\n    */\n   private static final long serialVersionUID = 4861789569977171659L;\n   private String username;\n   private String password;\n   private Integer age;\n   private String email;\n   private Date birth;\n\n   public User(){}\n\n   public User(String username, String password){\n     this.username = username;\n     this.password = password;\n   }\n  ....get set method.\n\n }\n\n6.struts.xml\n\n------------------------------\n\n<struts>\n\n   <package name=\"struts2_login\" extends=\"json-default\">\n\n     <action name=\"login\" class=\"action.JsonAction\">\n       <result type=\"json\"></result>\n     </action>\n\n   </package>\n </struts>\n\n7.welcom.jsp /pages/welcome.jsp\n\n-------------------------------------------\n\n<%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\"\n     pageEncoding=\"UTF-8\"%>\n <!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\n <html>\n <head>\n <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n <title>welcome</title>\n </head>\n <body>\n\nUser:${sessionScope.username},\nlogin successfully.\n\n</body>\n </html>","slug":"struts2-json-jquery-ajax-e5-ae-9e-e7-8e-b0-e7-94-a8-e6-88-b7-e7-99-bb-e9-99-86-e5-8f-8a-e4-b8-9a-e9-9d-a2-e8-b7-b3-e8-bd-ac","published":1,"updated":"2018-01-13T05:07:00.450Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjccw7xdm00azaqcro6k7pryz","content":"<p>实现的功能是在登陆页面输入用户名</p>\n<p>   错误用户名,页面返回错误信息,页面不刷新.</p>\n<p>   输入正确的用户名(scott tiger),页面部刷新返回用户的详细信息,提示登陆成功,并且提示页面3秒钟后自动跳转到welcome.jsp页面。</p>\n<p>   贴图太麻烦，这里直接贴代码了，方便大家copy,调试，呵呵。</p>\n<p>1.配置strut2这里就不说了，网上很多。</p>\n<p>  lib包如下：</p>\n<p>  commons-beanutils-1.7.0.jar  commons-collections-3.2.jar    commons-lang-2.4.jar</p>\n<p>  commons-logging-1.0.4.jar     commons-logging-api-1.1.jar   *ezmorph-1.0.4.jar</p>\n<p>  freemarker-2.3.8.jar               <em>json-lib-2.3-jdk15.jar             </em> jsonplugin-0.32.jar</p>\n<p>  ognl-2.6.11.jar                       struts2-core-2.0.14.jar             xwork-2.0.7.jar</p>\n<p>  Jquery:jquery-1.3.2.js   放在目录: WebContent/js/jquery-1.3.2.js</p>\n<p>2. loginJqueryAjax.jsp 代码：(根WebContent/下)</p>\n<hr>\n<p>   &lt;%@ page language=”java” contentType=”text/html; charset=UTF-8”<br>   pageEncoding=”UTF-8”%&gt;<br> &lt;%@taglib prefix=”s” uri=”/struts-tags”%&gt;<br> &lt;!DOCTYPE html PUBLIC “-//W3C//DTD HTML 4.01 Transitional//EN” “<a href=\"http://www.w3.org/TR/html4/loose.dtd&quot;&gt;\" target=\"_blank\" rel=\"noopener\">http://www.w3.org/TR/html4/loose.dtd&quot;&gt;</a><br> <html><br> <head><br> <meta http-equiv=\"Content-Type\" content=\"text/html; charset=ISO-8859-1\"><br> <title>Login Ajax Page</title><br> <script type=\"text/javascript\" src=\"js/jquery-1.3.2.js\"></script><br> <script type=\"text/javascript\" src=\"js/index.js\"></script><br> <s:head theme=\"ajax\"><br> </s:head></head><br> <body><br> <center><s:form></s:form></center></body></html></p>\n<p>   <s:textfield id=\"username\" label=\"User Name\" name=\"user.username\"><br>   <s:textfield id=\"password\" label=\"User Password\" name=\"user.password\"></s:textfield></s:textfield></p>\n<p>   <input type=\"button\" id=\"submit\" value=\"login\"><br>   <s:div id=\"msg\"></s:div></p>\n   <div id=\"quartz\" style=\"display: none\">3s end ,the page will<br>   redirect <span id=\"num\">3</span>s</div>\n\n<p> </p>\n<p> <table border=\"0\" width=\"360\"><br>   <caption>Person information</caption><br>   <tr><br>     <td>userName:</td><br>     <td><br>     <div id=\"personname\"></div><br>     </td><br>   </tr></table></p>\n   <tr><br>     <td>age:</td><br>     <td><br>     <div id=\"personage\"></div><br>     </td><br>   </tr>\n\n   <tr><br>     <td>email:</td><br>     <td><br>     <div id=\"personemail\"></div><br>     </td><br>   </tr>\n\n<p>   <tr><br>     <td>birth:</td><br>     <td><br>     <div id=\"personbirth\"></div><br>     </td><br>   </tr><br> <br> <br> <br> </p>\n<p>3. index.js   /WebContent/js/index.js</p>\n<hr>\n<p>$(document).ready(function() {<br>     $(“#submit”).click(function() {<br>       var params = $(“input”).serialize();<br>         $.ajax( {<br>           // 后台处理程序<br>           url : “login.action”,<br>           // 数据发送方式<br>           type : “post”,<br>           // 接收数据格式<br>           dataType : “json”,</p>\n<pre><code>    data : params,\n    // 要传递的数据\n    // 回传函数\n    timeout : 20000,// 设置请求超时时间（毫秒）。\n\n    success : function(data) { // 请求成功后回调函数。\n\n      //3秒后自动跳转，下面是相对路径\n      if (data.nextPageFlag == true) {\n        $(&quot;#msg&quot;).css(&quot;color&quot;,&quot;green&quot;);\n        $(&quot;#msg&quot;).html(data.result+&quot; password:&quot;+data.user.password+&quot; age:&quot;+data.user.age);\n        $(&quot;#quartz&quot;).css(&quot;background&quot;,&quot;#cccccc&quot;);\n        $(&quot;#quartz&quot;).show();\n\n        $(&quot;#personname&quot;).html(data.user.username);\n        $(&quot;#personage&quot;).html(data.user.age);\n        $(&quot;#personemail&quot;).html(data.user.email);\n        $(&quot;#personbirth&quot;).html(data.user.birth);\n\n        function jump(count) {\n          window.setTimeout(function() {\n            count--;\n            if (count &gt; 0) {\n              $(&apos;#num&apos;).attr(&apos;innerHTML&apos;, count);\n              jump(count);\n            } else {\n              location.href = &quot;pages/welcome.jsp&quot;;\n            }\n          }, 1000);\n        }\n        jump(3);\n\n      }else{\n        $(&quot;#msg&quot;).css(&quot;color&quot;,&quot;red&quot;);\n        $(&quot;#msg&quot;).html(data.result);\n      }\n\n    }\n  });\n});\n</code></pre><p>   });</p>\n<p>4. JsonAction.java 代码:</p>\n<hr>\n<p>package action;</p>\n<p>import java.text.ParseException;<br>import java.text.SimpleDateFormat;<br>import java.util.Date;</p>\n<p>import net.sf.json.JSONObject;</p>\n<p>import com.opensymphony.xwork2.Action;<br>import com.opensymphony.xwork2.ActionContext;<br>import model.User;</p>\n<p>public class JsonAction implements Action {<br>   private User user;<br>   private String username;<br>   private String result;<br>   private boolean nextPageFlag;</p>\n<p>   @SuppressWarnings(“unchecked”)<br>   @Override<br>   public String execute() throws Exception {<br>     // TODO Auto-generated method stub<br>     // System.out.println(user);<br>     JSONObject jo = JSONObject.fromObject(this.getUser());<br>     System.out.println(jo);</p>\n<pre><code>ActionContext.getContext().getSession().put(&quot;username&quot;, user.getUsername());\n\nif (&quot;scott&quot;.equals(user.getUsername()) &amp;&amp; &quot;tiger&quot;.equals(&quot;tiger&quot;)) {\n  user = this.getUserDetail();\n  JSONObject jouserdetail = JSONObject.fromObject(this.getUser());\n  System.out.println(jouserdetail);\n  result = &quot;login success, login name: &quot; + user.getUsername();\n  ActionContext.getContext().getSession().put(&quot;person&quot;, user);\n  nextPageFlag = true;\n} else {\n  result = &quot;username/password is wrong&quot;;\n  nextPageFlag = false;\n}\n\nreturn SUCCESS;\n</code></pre><p>   }</p>\n<p>   public User getUser() {<br>     return user;<br>   }</p>\n<p>   public void setUser(User user) {<br>     this.user = user;<br>   }</p>\n<p>   public String getResult() {<br>     return result;<br>   }</p>\n<p>   public void setResult(String result) {<br>     this.result = result;<br>   }</p>\n<p>   public String getUsername() {<br>     return username;<br>   }</p>\n<p>   public void setUsername(String username) {<br>     this.username = username;<br>   }</p>\n<p>   public boolean isNextPageFlag() {<br>     return nextPageFlag;<br>   }</p>\n<p>   public void setNextPageFlag(boolean nextPageFlag) {<br>     this.nextPageFlag = nextPageFlag;<br>   }</p>\n<p>   public User getUserDetail() {<br>     User userDetail = new User();<br>     userDetail.setUsername(“jack.tian”);<br>     userDetail.setPassword(“jack.tian”);<br>     userDetail.setAge(25);</p>\n<pre><code>SimpleDateFormat sdf = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);\nDate date = null;\ntry {\n  date = sdf.parse(&quot;2010-01-01&quot;);\n} catch (ParseException e) {\n  // TODO Auto-generated catch block\n  e.printStackTrace();\n}\nuserDetail.setBirth(date);\n\nuserDetail.setEmail(&quot;XX@xx.com&quot;);\nreturn userDetail;\n</code></pre><p>   }<br> }</p>\n<p>5.User.java</p>\n<hr>\n<p>package model;</p>\n<p>import java.util.Date;</p>\n<p>public class User{<br>   /<em>*\n    </em><br>    */<br>   private static final long serialVersionUID = 4861789569977171659L;<br>   private String username;<br>   private String password;<br>   private Integer age;<br>   private String email;<br>   private Date birth;</p>\n<p>   public User(){}</p>\n<p>   public User(String username, String password){<br>     this.username = username;<br>     this.password = password;<br>   }<br>  ….get set method.</p>\n<p> }</p>\n<p>6.struts.xml</p>\n<hr>\n<struts><br><br>   <package name=\"struts2_login\" extends=\"json-default\"><br><br>     <action name=\"login\" class=\"action.JsonAction\"><br>       <result type=\"json\"></result><br>     </action><br><br>   </package><br> </struts>\n\n<p>7.welcom.jsp /pages/welcome.jsp</p>\n<hr>\n<p>&lt;%@ page language=”java” contentType=”text/html; charset=UTF-8”<br>     pageEncoding=”UTF-8”%&gt;<br> &lt;!DOCTYPE html PUBLIC “-//W3C//DTD HTML 4.01 Transitional//EN” “<a href=\"http://www.w3.org/TR/html4/loose.dtd&quot;&gt;\" target=\"_blank\" rel=\"noopener\">http://www.w3.org/TR/html4/loose.dtd&quot;&gt;</a><br> <html><br> <head><br> <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"><br> <title>welcome</title><br> </head><br> <body></body></html></p>\n<p>User:${sessionScope.username},<br>login successfully.</p>\n<p><br> </p>\n","site":{"data":{}},"excerpt":"","more":"<p>实现的功能是在登陆页面输入用户名</p>\n<p>   错误用户名,页面返回错误信息,页面不刷新.</p>\n<p>   输入正确的用户名(scott tiger),页面部刷新返回用户的详细信息,提示登陆成功,并且提示页面3秒钟后自动跳转到welcome.jsp页面。</p>\n<p>   贴图太麻烦，这里直接贴代码了，方便大家copy,调试，呵呵。</p>\n<p>1.配置strut2这里就不说了，网上很多。</p>\n<p>  lib包如下：</p>\n<p>  commons-beanutils-1.7.0.jar  commons-collections-3.2.jar    commons-lang-2.4.jar</p>\n<p>  commons-logging-1.0.4.jar     commons-logging-api-1.1.jar   *ezmorph-1.0.4.jar</p>\n<p>  freemarker-2.3.8.jar               <em>json-lib-2.3-jdk15.jar             </em> jsonplugin-0.32.jar</p>\n<p>  ognl-2.6.11.jar                       struts2-core-2.0.14.jar             xwork-2.0.7.jar</p>\n<p>  Jquery:jquery-1.3.2.js   放在目录: WebContent/js/jquery-1.3.2.js</p>\n<p>2. loginJqueryAjax.jsp 代码：(根WebContent/下)</p>\n<hr>\n<p>   &lt;%@ page language=”java” contentType=”text/html; charset=UTF-8”<br>   pageEncoding=”UTF-8”%&gt;<br> &lt;%@taglib prefix=”s” uri=”/struts-tags”%&gt;<br> &lt;!DOCTYPE html PUBLIC “-//W3C//DTD HTML 4.01 Transitional//EN” “<a href=\"http://www.w3.org/TR/html4/loose.dtd&quot;&gt;\" target=\"_blank\" rel=\"noopener\">http://www.w3.org/TR/html4/loose.dtd&quot;&gt;</a><br> <html><br> <head><br> <meta http-equiv=\"Content-Type\" content=\"text/html; charset=ISO-8859-1\"><br> <title>Login Ajax Page</title><br> <script type=\"text/javascript\" src=\"js/jquery-1.3.2.js\"></script><br> <script type=\"text/javascript\" src=\"js/index.js\"></script><br> <s:head theme=\"ajax\"><br> </s:head></head><br> <body><br> <center><s:form></s:form></center></body></html></p>\n<p>   <s:textfield id=\"username\" label=\"User Name\" name=\"user.username\"><br>   <s:textfield id=\"password\" label=\"User Password\" name=\"user.password\"></s:textfield></s:textfield></p>\n<p>   <input type=\"button\" id=\"submit\" value=\"login\"><br>   <s:div id=\"msg\"></s:div></p>\n   <div id=\"quartz\" style=\"display: none\">3s end ,the page will<br>   redirect <span id=\"num\">3</span>s</div>\n\n<p> </p>\n<p> <table border=\"0\" width=\"360\"><br>   <caption>Person information</caption><br>   <tr><br>     <td>userName:</td><br>     <td><br>     <div id=\"personname\"></div><br>     </td><br>   </tr></table></p>\n   <tr><br>     <td>age:</td><br>     <td><br>     <div id=\"personage\"></div><br>     </td><br>   </tr>\n\n   <tr><br>     <td>email:</td><br>     <td><br>     <div id=\"personemail\"></div><br>     </td><br>   </tr>\n\n<p>   <tr><br>     <td>birth:</td><br>     <td><br>     <div id=\"personbirth\"></div><br>     </td><br>   </tr><br> <br> <br> <br> </p>\n<p>3. index.js   /WebContent/js/index.js</p>\n<hr>\n<p>$(document).ready(function() {<br>     $(“#submit”).click(function() {<br>       var params = $(“input”).serialize();<br>         $.ajax( {<br>           // 后台处理程序<br>           url : “login.action”,<br>           // 数据发送方式<br>           type : “post”,<br>           // 接收数据格式<br>           dataType : “json”,</p>\n<pre><code>    data : params,\n    // 要传递的数据\n    // 回传函数\n    timeout : 20000,// 设置请求超时时间（毫秒）。\n\n    success : function(data) { // 请求成功后回调函数。\n\n      //3秒后自动跳转，下面是相对路径\n      if (data.nextPageFlag == true) {\n        $(&quot;#msg&quot;).css(&quot;color&quot;,&quot;green&quot;);\n        $(&quot;#msg&quot;).html(data.result+&quot; password:&quot;+data.user.password+&quot; age:&quot;+data.user.age);\n        $(&quot;#quartz&quot;).css(&quot;background&quot;,&quot;#cccccc&quot;);\n        $(&quot;#quartz&quot;).show();\n\n        $(&quot;#personname&quot;).html(data.user.username);\n        $(&quot;#personage&quot;).html(data.user.age);\n        $(&quot;#personemail&quot;).html(data.user.email);\n        $(&quot;#personbirth&quot;).html(data.user.birth);\n\n        function jump(count) {\n          window.setTimeout(function() {\n            count--;\n            if (count &gt; 0) {\n              $(&apos;#num&apos;).attr(&apos;innerHTML&apos;, count);\n              jump(count);\n            } else {\n              location.href = &quot;pages/welcome.jsp&quot;;\n            }\n          }, 1000);\n        }\n        jump(3);\n\n      }else{\n        $(&quot;#msg&quot;).css(&quot;color&quot;,&quot;red&quot;);\n        $(&quot;#msg&quot;).html(data.result);\n      }\n\n    }\n  });\n});\n</code></pre><p>   });</p>\n<p>4. JsonAction.java 代码:</p>\n<hr>\n<p>package action;</p>\n<p>import java.text.ParseException;<br>import java.text.SimpleDateFormat;<br>import java.util.Date;</p>\n<p>import net.sf.json.JSONObject;</p>\n<p>import com.opensymphony.xwork2.Action;<br>import com.opensymphony.xwork2.ActionContext;<br>import model.User;</p>\n<p>public class JsonAction implements Action {<br>   private User user;<br>   private String username;<br>   private String result;<br>   private boolean nextPageFlag;</p>\n<p>   @SuppressWarnings(“unchecked”)<br>   @Override<br>   public String execute() throws Exception {<br>     // TODO Auto-generated method stub<br>     // System.out.println(user);<br>     JSONObject jo = JSONObject.fromObject(this.getUser());<br>     System.out.println(jo);</p>\n<pre><code>ActionContext.getContext().getSession().put(&quot;username&quot;, user.getUsername());\n\nif (&quot;scott&quot;.equals(user.getUsername()) &amp;&amp; &quot;tiger&quot;.equals(&quot;tiger&quot;)) {\n  user = this.getUserDetail();\n  JSONObject jouserdetail = JSONObject.fromObject(this.getUser());\n  System.out.println(jouserdetail);\n  result = &quot;login success, login name: &quot; + user.getUsername();\n  ActionContext.getContext().getSession().put(&quot;person&quot;, user);\n  nextPageFlag = true;\n} else {\n  result = &quot;username/password is wrong&quot;;\n  nextPageFlag = false;\n}\n\nreturn SUCCESS;\n</code></pre><p>   }</p>\n<p>   public User getUser() {<br>     return user;<br>   }</p>\n<p>   public void setUser(User user) {<br>     this.user = user;<br>   }</p>\n<p>   public String getResult() {<br>     return result;<br>   }</p>\n<p>   public void setResult(String result) {<br>     this.result = result;<br>   }</p>\n<p>   public String getUsername() {<br>     return username;<br>   }</p>\n<p>   public void setUsername(String username) {<br>     this.username = username;<br>   }</p>\n<p>   public boolean isNextPageFlag() {<br>     return nextPageFlag;<br>   }</p>\n<p>   public void setNextPageFlag(boolean nextPageFlag) {<br>     this.nextPageFlag = nextPageFlag;<br>   }</p>\n<p>   public User getUserDetail() {<br>     User userDetail = new User();<br>     userDetail.setUsername(“jack.tian”);<br>     userDetail.setPassword(“jack.tian”);<br>     userDetail.setAge(25);</p>\n<pre><code>SimpleDateFormat sdf = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);\nDate date = null;\ntry {\n  date = sdf.parse(&quot;2010-01-01&quot;);\n} catch (ParseException e) {\n  // TODO Auto-generated catch block\n  e.printStackTrace();\n}\nuserDetail.setBirth(date);\n\nuserDetail.setEmail(&quot;XX@xx.com&quot;);\nreturn userDetail;\n</code></pre><p>   }<br> }</p>\n<p>5.User.java</p>\n<hr>\n<p>package model;</p>\n<p>import java.util.Date;</p>\n<p>public class User{<br>   /<em>*\n    </em><br>    */<br>   private static final long serialVersionUID = 4861789569977171659L;<br>   private String username;<br>   private String password;<br>   private Integer age;<br>   private String email;<br>   private Date birth;</p>\n<p>   public User(){}</p>\n<p>   public User(String username, String password){<br>     this.username = username;<br>     this.password = password;<br>   }<br>  ….get set method.</p>\n<p> }</p>\n<p>6.struts.xml</p>\n<hr>\n<struts><br><br>   <package name=\"struts2_login\" extends=\"json-default\"><br><br>     <action name=\"login\" class=\"action.JsonAction\"><br>       <result type=\"json\"></result><br>     </action><br><br>   </package><br> </struts>\n\n<p>7.welcom.jsp /pages/welcome.jsp</p>\n<hr>\n<p>&lt;%@ page language=”java” contentType=”text/html; charset=UTF-8”<br>     pageEncoding=”UTF-8”%&gt;<br> &lt;!DOCTYPE html PUBLIC “-//W3C//DTD HTML 4.01 Transitional//EN” “<a href=\"http://www.w3.org/TR/html4/loose.dtd&quot;&gt;\" target=\"_blank\" rel=\"noopener\">http://www.w3.org/TR/html4/loose.dtd&quot;&gt;</a><br> <html><br> <head><br> <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"><br> <title>welcome</title><br> </head><br> <body></body></html></p>\n<p>User:${sessionScope.username},<br>login successfully.</p>\n<p><br> </p>\n"},{"title":"SQLite 到 MySQL 一键迁移","id":"2034","date":"2014-05-13T09:02:14.000Z","_content":"\n像SQLite 到 MySQL 一键迁移这么智能化的功能肯定离不开好的工具，这里用到了 Navicat Premium ，操作也很简单，直接把要想迁移的表拖到目的表里就行，当然也可以通过 tools -&gt; data transfer 打开迁移窗口。另外，别忘了编码一致。\n\n[![datatranser](/wp-content/uploads/2014/05/a01c64d358a16c6bcccf8360a0ed2ff4.png)](/wp-content/uploads/2014/05/a01c64d358a16c6bcccf8360a0ed2ff4.png)","source":"_posts/sqlite-e5-88-b0-mysql-e4-b8-80-e9-94-ae-e8-bf-81-e7-a7-bb.md","raw":"---\ntitle: SQLite 到 MySQL 一键迁移\ntags:\n  - MySQL\nid: 2034\ncategories:\n  - MySQL\ndate: 2014-05-13 17:02:14\n---\n\n像SQLite 到 MySQL 一键迁移这么智能化的功能肯定离不开好的工具，这里用到了 Navicat Premium ，操作也很简单，直接把要想迁移的表拖到目的表里就行，当然也可以通过 tools -&gt; data transfer 打开迁移窗口。另外，别忘了编码一致。\n\n[![datatranser](/wp-content/uploads/2014/05/a01c64d358a16c6bcccf8360a0ed2ff4.png)](/wp-content/uploads/2014/05/a01c64d358a16c6bcccf8360a0ed2ff4.png)","slug":"sqlite-e5-88-b0-mysql-e4-b8-80-e9-94-ae-e8-bf-81-e7-a7-bb","published":1,"updated":"2018-01-13T05:07:00.488Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjccw7xdn00b2aqcr8ffrrc3n","content":"<p>像SQLite 到 MySQL 一键迁移这么智能化的功能肯定离不开好的工具，这里用到了 Navicat Premium ，操作也很简单，直接把要想迁移的表拖到目的表里就行，当然也可以通过 tools -&gt; data transfer 打开迁移窗口。另外，别忘了编码一致。</p>\n<p><a href=\"/wp-content/uploads/2014/05/a01c64d358a16c6bcccf8360a0ed2ff4.png\"><img src=\"/wp-content/uploads/2014/05/a01c64d358a16c6bcccf8360a0ed2ff4.png\" alt=\"datatranser\"></a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>像SQLite 到 MySQL 一键迁移这么智能化的功能肯定离不开好的工具，这里用到了 Navicat Premium ，操作也很简单，直接把要想迁移的表拖到目的表里就行，当然也可以通过 tools -&gt; data transfer 打开迁移窗口。另外，别忘了编码一致。</p>\n<p><a href=\"/wp-content/uploads/2014/05/a01c64d358a16c6bcccf8360a0ed2ff4.png\"><img src=\"/wp-content/uploads/2014/05/a01c64d358a16c6bcccf8360a0ed2ff4.png\" alt=\"datatranser\"></a></p>\n"},{"title":"ubuntu 11.10 安装google earth 字体不清解决办法","id":"554","date":"2012-01-25T13:38:07.000Z","_content":"\n本文链接地址: http://canglangxuan.com/?p=1597\n\nubuntu早就想安装谷歌地球了，之前的还是.bin文件，现在都是deb文件了，不错！可是会出现中文乱码问题，之前找了很久，没找到比较好的解决办法，不过下面的方法倒是很给力，Jason在ubuntu11.04下测试通过！\n先到谷歌地球的官方网站下载：http://www.google.com/intl/zh-CN/earth/download/ge/\n下载deb包进行安装，安装完打开Google earth后你会发现中文无法显示出来，这时候需要做一些处理：\n替换文件,在终端运行下面代码：\ncd /opt/google/earth/free/\nsudo rm libQtCore.so.4 libQtGui.so.4 libQtNetwork.so.4 libQtWebKit.so.4\nsudo apt-get install libqt4-core libqt4-gui libqt4-network libqt4-webkit libfreeimage3\n修改文件：\nsudo gedit /opt/google/earth/free/googleearth\n在（最后一行）：\nLD_LIBRARY_PATH=.:$LD_LIBRARY_PATH ./googleearth-bin “$@”\n前面加上：\nexport LD_PRELOAD=/usr/lib/libfreeimage.so.3\n然后保存。\n接着从新打开谷歌地球就可以了。","source":"_posts/ubuntu-11-10-e5-ae-89-e8-a3-85google-earth-e5-ad-97-e4-bd-93-e4-b8-8d-e6-b8-85-e8-a7-a3-e5-86-b3-e5-8a-9e-e6-b3-95.md","raw":"---\ntitle: ubuntu 11.10 安装google earth 字体不清解决办法\ntags:\n  - Linux\nid: 554\ncategories:\n  - Linux\n  - Windows\ndate: 2012-01-25 21:38:07\n---\n\n本文链接地址: http://canglangxuan.com/?p=1597\n\nubuntu早就想安装谷歌地球了，之前的还是.bin文件，现在都是deb文件了，不错！可是会出现中文乱码问题，之前找了很久，没找到比较好的解决办法，不过下面的方法倒是很给力，Jason在ubuntu11.04下测试通过！\n先到谷歌地球的官方网站下载：http://www.google.com/intl/zh-CN/earth/download/ge/\n下载deb包进行安装，安装完打开Google earth后你会发现中文无法显示出来，这时候需要做一些处理：\n替换文件,在终端运行下面代码：\ncd /opt/google/earth/free/\nsudo rm libQtCore.so.4 libQtGui.so.4 libQtNetwork.so.4 libQtWebKit.so.4\nsudo apt-get install libqt4-core libqt4-gui libqt4-network libqt4-webkit libfreeimage3\n修改文件：\nsudo gedit /opt/google/earth/free/googleearth\n在（最后一行）：\nLD_LIBRARY_PATH=.:$LD_LIBRARY_PATH ./googleearth-bin “$@”\n前面加上：\nexport LD_PRELOAD=/usr/lib/libfreeimage.so.3\n然后保存。\n接着从新打开谷歌地球就可以了。","slug":"ubuntu-11-10-e5-ae-89-e8-a3-85google-earth-e5-ad-97-e4-bd-93-e4-b8-8d-e6-b8-85-e8-a7-a3-e5-86-b3-e5-8a-9e-e6-b3-95","published":1,"updated":"2018-01-13T05:07:00.497Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjccw7xdp00b5aqcr0gh114w2","content":"<p>本文链接地址: <a href=\"http://canglangxuan.com/?p=1597\" target=\"_blank\" rel=\"noopener\">http://canglangxuan.com/?p=1597</a></p>\n<p>ubuntu早就想安装谷歌地球了，之前的还是.bin文件，现在都是deb文件了，不错！可是会出现中文乱码问题，之前找了很久，没找到比较好的解决办法，不过下面的方法倒是很给力，Jason在ubuntu11.04下测试通过！<br>先到谷歌地球的官方网站下载：<a href=\"http://www.google.com/intl/zh-CN/earth/download/ge/\" target=\"_blank\" rel=\"noopener\">http://www.google.com/intl/zh-CN/earth/download/ge/</a><br>下载deb包进行安装，安装完打开Google earth后你会发现中文无法显示出来，这时候需要做一些处理：<br>替换文件,在终端运行下面代码：<br>cd /opt/google/earth/free/<br>sudo rm libQtCore.so.4 libQtGui.so.4 libQtNetwork.so.4 libQtWebKit.so.4<br>sudo apt-get install libqt4-core libqt4-gui libqt4-network libqt4-webkit libfreeimage3<br>修改文件：<br>sudo gedit /opt/google/earth/free/googleearth<br>在（最后一行）：<br>LD_LIBRARY_PATH=.:$LD_LIBRARY_PATH ./googleearth-bin “$@”<br>前面加上：<br>export LD_PRELOAD=/usr/lib/libfreeimage.so.3<br>然后保存。<br>接着从新打开谷歌地球就可以了。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>本文链接地址: <a href=\"http://canglangxuan.com/?p=1597\" target=\"_blank\" rel=\"noopener\">http://canglangxuan.com/?p=1597</a></p>\n<p>ubuntu早就想安装谷歌地球了，之前的还是.bin文件，现在都是deb文件了，不错！可是会出现中文乱码问题，之前找了很久，没找到比较好的解决办法，不过下面的方法倒是很给力，Jason在ubuntu11.04下测试通过！<br>先到谷歌地球的官方网站下载：<a href=\"http://www.google.com/intl/zh-CN/earth/download/ge/\" target=\"_blank\" rel=\"noopener\">http://www.google.com/intl/zh-CN/earth/download/ge/</a><br>下载deb包进行安装，安装完打开Google earth后你会发现中文无法显示出来，这时候需要做一些处理：<br>替换文件,在终端运行下面代码：<br>cd /opt/google/earth/free/<br>sudo rm libQtCore.so.4 libQtGui.so.4 libQtNetwork.so.4 libQtWebKit.so.4<br>sudo apt-get install libqt4-core libqt4-gui libqt4-network libqt4-webkit libfreeimage3<br>修改文件：<br>sudo gedit /opt/google/earth/free/googleearth<br>在（最后一行）：<br>LD_LIBRARY_PATH=.:$LD_LIBRARY_PATH ./googleearth-bin “$@”<br>前面加上：<br>export LD_PRELOAD=/usr/lib/libfreeimage.so.3<br>然后保存。<br>接着从新打开谷歌地球就可以了。</p>\n"},{"title":"ubuntu中文输入法Fcitx安装","id":"504","date":"2012-01-06T12:32:18.000Z","_content":"\n在ubuntu10.10系统安装成功后,系统默认的中文输入法是ibus,但是这个输入法给我们这些在windows下使用sougou用惯了的人是很不习惯的.特别是打词组的时侯,不能联想,词库不是很多.后来有了解到还有一款中文输入法Fcitx,所以换成这个之后,发现比较适合我使用,虽然存在很多不足.\n\n首先来认识下Fcitx,它是Free Chinese Input Toy for X的简称,中文名叫小企鹅输入法,包括拼音和双拼输入法.目前最新版本为4.0.1,相比之前的版本,新增很多功能包括新的皮肤、词库和详细设置界面。\n\n 之前这款输入法是个人所做(不过已经停止开发)，目前官方主页已经转移到google code上: http://code.google.com/p/fcitx/\n上面有最新的版本下载和皮肤，词库。<!--more-->\n 安装方法如下：\n sudo add-apt-repository ppa:wengxt/fcitx-nightly   增加ppa源\n sudo apt-get update   更新软件库\n sudo apt-get install fcitx fcitx-config-gtk fcitx-sunpinyin  安装fcitx和fcitx-sunpinyin输入法\n sudo apt-get install fcitx-table-all   安装码表\n 到目前为止输入法已经安装完成了.\n 接下来输入:im-switch -s fcitx -z default 把fcitx设置为默认输入法\n 或者通过:系统—系统管理—语言支持,打开语言和文本设置项,在语言分页中的键盘输入方式系统中选择fcitx.\n 另外,可以右击输入法进行配置,包括皮肤,快捷键等.","source":"_posts/ubuntu-e4-b8-ad-e6-96-87-e8-be-93-e5-85-a5-e6-b3-95fcitx-e5-ae-89-e8-a3-85.md","raw":"---\ntitle: ubuntu中文输入法Fcitx安装\ntags:\n  - Linux\nid: 504\ncategories:\n  - Windows\ndate: 2012-01-06 20:32:18\n---\n\n在ubuntu10.10系统安装成功后,系统默认的中文输入法是ibus,但是这个输入法给我们这些在windows下使用sougou用惯了的人是很不习惯的.特别是打词组的时侯,不能联想,词库不是很多.后来有了解到还有一款中文输入法Fcitx,所以换成这个之后,发现比较适合我使用,虽然存在很多不足.\n\n首先来认识下Fcitx,它是Free Chinese Input Toy for X的简称,中文名叫小企鹅输入法,包括拼音和双拼输入法.目前最新版本为4.0.1,相比之前的版本,新增很多功能包括新的皮肤、词库和详细设置界面。\n\n 之前这款输入法是个人所做(不过已经停止开发)，目前官方主页已经转移到google code上: http://code.google.com/p/fcitx/\n上面有最新的版本下载和皮肤，词库。<!--more-->\n 安装方法如下：\n sudo add-apt-repository ppa:wengxt/fcitx-nightly   增加ppa源\n sudo apt-get update   更新软件库\n sudo apt-get install fcitx fcitx-config-gtk fcitx-sunpinyin  安装fcitx和fcitx-sunpinyin输入法\n sudo apt-get install fcitx-table-all   安装码表\n 到目前为止输入法已经安装完成了.\n 接下来输入:im-switch -s fcitx -z default 把fcitx设置为默认输入法\n 或者通过:系统—系统管理—语言支持,打开语言和文本设置项,在语言分页中的键盘输入方式系统中选择fcitx.\n 另外,可以右击输入法进行配置,包括皮肤,快捷键等.","slug":"ubuntu-e4-b8-ad-e6-96-87-e8-be-93-e5-85-a5-e6-b3-95fcitx-e5-ae-89-e8-a3-85","published":1,"updated":"2018-01-13T05:07:00.460Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjccw7xdr00b9aqcrpxom2f9s","content":"<p>在ubuntu10.10系统安装成功后,系统默认的中文输入法是ibus,但是这个输入法给我们这些在windows下使用sougou用惯了的人是很不习惯的.特别是打词组的时侯,不能联想,词库不是很多.后来有了解到还有一款中文输入法Fcitx,所以换成这个之后,发现比较适合我使用,虽然存在很多不足.</p>\n<p>首先来认识下Fcitx,它是Free Chinese Input Toy for X的简称,中文名叫小企鹅输入法,包括拼音和双拼输入法.目前最新版本为4.0.1,相比之前的版本,新增很多功能包括新的皮肤、词库和详细设置界面。</p>\n<p> 之前这款输入法是个人所做(不过已经停止开发)，目前官方主页已经转移到google code上: <a href=\"http://code.google.com/p/fcitx/\" target=\"_blank\" rel=\"noopener\">http://code.google.com/p/fcitx/</a><br>上面有最新的版本下载和皮肤，词库。<a id=\"more\"></a><br> 安装方法如下：<br> sudo add-apt-repository ppa:wengxt/fcitx-nightly   增加ppa源<br> sudo apt-get update   更新软件库<br> sudo apt-get install fcitx fcitx-config-gtk fcitx-sunpinyin  安装fcitx和fcitx-sunpinyin输入法<br> sudo apt-get install fcitx-table-all   安装码表<br> 到目前为止输入法已经安装完成了.<br> 接下来输入:im-switch -s fcitx -z default 把fcitx设置为默认输入法<br> 或者通过:系统—系统管理—语言支持,打开语言和文本设置项,在语言分页中的键盘输入方式系统中选择fcitx.<br> 另外,可以右击输入法进行配置,包括皮肤,快捷键等.</p>\n","site":{"data":{}},"excerpt":"<p>在ubuntu10.10系统安装成功后,系统默认的中文输入法是ibus,但是这个输入法给我们这些在windows下使用sougou用惯了的人是很不习惯的.特别是打词组的时侯,不能联想,词库不是很多.后来有了解到还有一款中文输入法Fcitx,所以换成这个之后,发现比较适合我使用,虽然存在很多不足.</p>\n<p>首先来认识下Fcitx,它是Free Chinese Input Toy for X的简称,中文名叫小企鹅输入法,包括拼音和双拼输入法.目前最新版本为4.0.1,相比之前的版本,新增很多功能包括新的皮肤、词库和详细设置界面。</p>\n<p> 之前这款输入法是个人所做(不过已经停止开发)，目前官方主页已经转移到google code上: <a href=\"http://code.google.com/p/fcitx/\" target=\"_blank\" rel=\"noopener\">http://code.google.com/p/fcitx/</a><br>上面有最新的版本下载和皮肤，词库。","more":"<br> 安装方法如下：<br> sudo add-apt-repository ppa:wengxt/fcitx-nightly   增加ppa源<br> sudo apt-get update   更新软件库<br> sudo apt-get install fcitx fcitx-config-gtk fcitx-sunpinyin  安装fcitx和fcitx-sunpinyin输入法<br> sudo apt-get install fcitx-table-all   安装码表<br> 到目前为止输入法已经安装完成了.<br> 接下来输入:im-switch -s fcitx -z default 把fcitx设置为默认输入法<br> 或者通过:系统—系统管理—语言支持,打开语言和文本设置项,在语言分页中的键盘输入方式系统中选择fcitx.<br> 另外,可以右击输入法进行配置,包括皮肤,快捷键等.</p>"},{"title":"ubuntu升级导致显示混乱及A卡安装卸载","id":"515","date":"2012-01-08T13:30:48.000Z","_content":"\n如果由于升级内核导致显示混乱，需要先用旧内核启动，执行下面的命令删除已经安装的驱动，再进入新内核安装。我的感觉是进入(recovery mode)模式，然后选择第三行 root，比较好操作。\n\ncd /usr/share/ati/\n sudo ./fglrx-uninstall.sh\n\n一、下载驱动和必要的文件\n\n1、下载驱动。你最好到 ati.amd.com 下载适合你的最新的显卡驱动。\n\nhttp://ati.amd.com/support/driver.html\n https://www2.ati.com/drivers/linux/ati-driver-installer-8-11-x86.x86_64.run\n\n2、下载 linux-headers 文件和 非开源模块，这是安装驱动所必须的。我的内核版本是 2.6.24-22，你可以根据启动时候 grub 显示的内核版本号来下载适合自己的头文件。\n\nsudo apt-get install linux-headers-2.6.24-22 linux-headers-2.6.24-22-generic linux-restricted-modules-generic\n\n二、删除以前的 ATI 驱动和 Mesa 驱动。也许你没有安装，但如果不删除现有的显卡驱动，可能造成安装后加载模块和驱动错误，不能正常驱动。\n 如果以前手工安装过驱动需要执行下面两行，如果没有，跳过。\n\ncd /usr/share/ati/\n sudo ./fglrx-uninstall.sh<!--more-->\n\nsudo apt-get remove xorg-driver-fglrx xserver-xorg-video-ati xserver-xgl\n\n三、安装驱动，不要在删除步骤前安装，不然会被卸载掉的。没有什么难的，基本上下一步就行了。\n\nsudo sh ./ati-driver-installer-8-11-x86.x86_64.run\n\n安装完毕后，把配置文件初始化一下，执行\n\nsudo aticonfig –initial -f\n\n四、生成 modules.dep 和 map 文件，保证模块和驱动的正常加载。\n\nsudo depmod -a\n\n五、安装完毕，如果杀面几个步骤没有出什么问题的话，重新启动机器即可。\n\n六、检查安装效果\n 1、首先看看驱动信息是否正确，执行\n\nfglrxinfo\n\n下面的是我结果\n\ndisplay: :0.0 screen: 0\n OpenGL vendor string: ATI Technologies Inc.\n OpenGL renderer string: ATI Radeon HD 2600 XT\n OpenGL version string: 2.1.8201 Release\n\n关键是要有 ATI，不能是其它的，如果不是的话，说明驱动模块没有正确加载，需要根据显示的内容，把对应的驱动删除。\n\n2、看看自己的显卡是否工作在Xv模式下，执行\n\nxvinfo\n\n如果显示的结果很多很多，那就是工作在xv模式下了。如果像下面这样的显示，那还需要再设置\n\nX-Video Extension version 2.2\n screen #0\n no adaptors present\n\n手工设置xv模式\n\nsudo aticonfig –overlay-type=xv\n\n3、看看其它信息\n\nglxinfo | grep direct\n\n我的结果是\n\ndirect rendering: Yes\n\n4、测试一下速度和工作是否正常，程序会显示转动的齿轮和一些数值。\n\nglxgears\n fgl_glxgears","source":"_posts/ubuntu-e5-8d-87-e7-ba-a7-e5-af-bc-e8-87-b4-e6-98-be-e7-a4-ba-e6-b7-b7-e4-b9-b1-e5-8f-8aa-e5-8d-a1-e5-ae-89-e8-a3-85-e5-8d-b8-e8-bd-bd.md","raw":"---\ntitle: ubuntu升级导致显示混乱及A卡安装卸载\ntags:\n  - Linux\nid: 515\ncategories:\n  - Linux\ndate: 2012-01-08 21:30:48\n---\n\n如果由于升级内核导致显示混乱，需要先用旧内核启动，执行下面的命令删除已经安装的驱动，再进入新内核安装。我的感觉是进入(recovery mode)模式，然后选择第三行 root，比较好操作。\n\ncd /usr/share/ati/\n sudo ./fglrx-uninstall.sh\n\n一、下载驱动和必要的文件\n\n1、下载驱动。你最好到 ati.amd.com 下载适合你的最新的显卡驱动。\n\nhttp://ati.amd.com/support/driver.html\n https://www2.ati.com/drivers/linux/ati-driver-installer-8-11-x86.x86_64.run\n\n2、下载 linux-headers 文件和 非开源模块，这是安装驱动所必须的。我的内核版本是 2.6.24-22，你可以根据启动时候 grub 显示的内核版本号来下载适合自己的头文件。\n\nsudo apt-get install linux-headers-2.6.24-22 linux-headers-2.6.24-22-generic linux-restricted-modules-generic\n\n二、删除以前的 ATI 驱动和 Mesa 驱动。也许你没有安装，但如果不删除现有的显卡驱动，可能造成安装后加载模块和驱动错误，不能正常驱动。\n 如果以前手工安装过驱动需要执行下面两行，如果没有，跳过。\n\ncd /usr/share/ati/\n sudo ./fglrx-uninstall.sh<!--more-->\n\nsudo apt-get remove xorg-driver-fglrx xserver-xorg-video-ati xserver-xgl\n\n三、安装驱动，不要在删除步骤前安装，不然会被卸载掉的。没有什么难的，基本上下一步就行了。\n\nsudo sh ./ati-driver-installer-8-11-x86.x86_64.run\n\n安装完毕后，把配置文件初始化一下，执行\n\nsudo aticonfig –initial -f\n\n四、生成 modules.dep 和 map 文件，保证模块和驱动的正常加载。\n\nsudo depmod -a\n\n五、安装完毕，如果杀面几个步骤没有出什么问题的话，重新启动机器即可。\n\n六、检查安装效果\n 1、首先看看驱动信息是否正确，执行\n\nfglrxinfo\n\n下面的是我结果\n\ndisplay: :0.0 screen: 0\n OpenGL vendor string: ATI Technologies Inc.\n OpenGL renderer string: ATI Radeon HD 2600 XT\n OpenGL version string: 2.1.8201 Release\n\n关键是要有 ATI，不能是其它的，如果不是的话，说明驱动模块没有正确加载，需要根据显示的内容，把对应的驱动删除。\n\n2、看看自己的显卡是否工作在Xv模式下，执行\n\nxvinfo\n\n如果显示的结果很多很多，那就是工作在xv模式下了。如果像下面这样的显示，那还需要再设置\n\nX-Video Extension version 2.2\n screen #0\n no adaptors present\n\n手工设置xv模式\n\nsudo aticonfig –overlay-type=xv\n\n3、看看其它信息\n\nglxinfo | grep direct\n\n我的结果是\n\ndirect rendering: Yes\n\n4、测试一下速度和工作是否正常，程序会显示转动的齿轮和一些数值。\n\nglxgears\n fgl_glxgears","slug":"ubuntu-e5-8d-87-e7-ba-a7-e5-af-bc-e8-87-b4-e6-98-be-e7-a4-ba-e6-b7-b7-e4-b9-b1-e5-8f-8aa-e5-8d-a1-e5-ae-89-e8-a3-85-e5-8d-b8-e8-bd-bd","published":1,"updated":"2018-01-13T05:07:00.460Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjccw7xdt00bcaqcrln1z5op4","content":"<p>如果由于升级内核导致显示混乱，需要先用旧内核启动，执行下面的命令删除已经安装的驱动，再进入新内核安装。我的感觉是进入(recovery mode)模式，然后选择第三行 root，比较好操作。</p>\n<p>cd /usr/share/ati/<br> sudo ./fglrx-uninstall.sh</p>\n<p>一、下载驱动和必要的文件</p>\n<p>1、下载驱动。你最好到 ati.amd.com 下载适合你的最新的显卡驱动。</p>\n<p><a href=\"http://ati.amd.com/support/driver.html\" target=\"_blank\" rel=\"noopener\">http://ati.amd.com/support/driver.html</a><br> <a href=\"https://www2.ati.com/drivers/linux/ati-driver-installer-8-11-x86.x86_64.run\" target=\"_blank\" rel=\"noopener\">https://www2.ati.com/drivers/linux/ati-driver-installer-8-11-x86.x86_64.run</a></p>\n<p>2、下载 linux-headers 文件和 非开源模块，这是安装驱动所必须的。我的内核版本是 2.6.24-22，你可以根据启动时候 grub 显示的内核版本号来下载适合自己的头文件。</p>\n<p>sudo apt-get install linux-headers-2.6.24-22 linux-headers-2.6.24-22-generic linux-restricted-modules-generic</p>\n<p>二、删除以前的 ATI 驱动和 Mesa 驱动。也许你没有安装，但如果不删除现有的显卡驱动，可能造成安装后加载模块和驱动错误，不能正常驱动。<br> 如果以前手工安装过驱动需要执行下面两行，如果没有，跳过。</p>\n<p>cd /usr/share/ati/<br> sudo ./fglrx-uninstall.sh<a id=\"more\"></a></p>\n<p>sudo apt-get remove xorg-driver-fglrx xserver-xorg-video-ati xserver-xgl</p>\n<p>三、安装驱动，不要在删除步骤前安装，不然会被卸载掉的。没有什么难的，基本上下一步就行了。</p>\n<p>sudo sh ./ati-driver-installer-8-11-x86.x86_64.run</p>\n<p>安装完毕后，把配置文件初始化一下，执行</p>\n<p>sudo aticonfig –initial -f</p>\n<p>四、生成 modules.dep 和 map 文件，保证模块和驱动的正常加载。</p>\n<p>sudo depmod -a</p>\n<p>五、安装完毕，如果杀面几个步骤没有出什么问题的话，重新启动机器即可。</p>\n<p>六、检查安装效果<br> 1、首先看看驱动信息是否正确，执行</p>\n<p>fglrxinfo</p>\n<p>下面的是我结果</p>\n<p>display: :0.0 screen: 0<br> OpenGL vendor string: ATI Technologies Inc.<br> OpenGL renderer string: ATI Radeon HD 2600 XT<br> OpenGL version string: 2.1.8201 Release</p>\n<p>关键是要有 ATI，不能是其它的，如果不是的话，说明驱动模块没有正确加载，需要根据显示的内容，把对应的驱动删除。</p>\n<p>2、看看自己的显卡是否工作在Xv模式下，执行</p>\n<p>xvinfo</p>\n<p>如果显示的结果很多很多，那就是工作在xv模式下了。如果像下面这样的显示，那还需要再设置</p>\n<p>X-Video Extension version 2.2<br> screen #0<br> no adaptors present</p>\n<p>手工设置xv模式</p>\n<p>sudo aticonfig –overlay-type=xv</p>\n<p>3、看看其它信息</p>\n<p>glxinfo | grep direct</p>\n<p>我的结果是</p>\n<p>direct rendering: Yes</p>\n<p>4、测试一下速度和工作是否正常，程序会显示转动的齿轮和一些数值。</p>\n<p>glxgears<br> fgl_glxgears</p>\n","site":{"data":{}},"excerpt":"<p>如果由于升级内核导致显示混乱，需要先用旧内核启动，执行下面的命令删除已经安装的驱动，再进入新内核安装。我的感觉是进入(recovery mode)模式，然后选择第三行 root，比较好操作。</p>\n<p>cd /usr/share/ati/<br> sudo ./fglrx-uninstall.sh</p>\n<p>一、下载驱动和必要的文件</p>\n<p>1、下载驱动。你最好到 ati.amd.com 下载适合你的最新的显卡驱动。</p>\n<p><a href=\"http://ati.amd.com/support/driver.html\" target=\"_blank\" rel=\"noopener\">http://ati.amd.com/support/driver.html</a><br> <a href=\"https://www2.ati.com/drivers/linux/ati-driver-installer-8-11-x86.x86_64.run\" target=\"_blank\" rel=\"noopener\">https://www2.ati.com/drivers/linux/ati-driver-installer-8-11-x86.x86_64.run</a></p>\n<p>2、下载 linux-headers 文件和 非开源模块，这是安装驱动所必须的。我的内核版本是 2.6.24-22，你可以根据启动时候 grub 显示的内核版本号来下载适合自己的头文件。</p>\n<p>sudo apt-get install linux-headers-2.6.24-22 linux-headers-2.6.24-22-generic linux-restricted-modules-generic</p>\n<p>二、删除以前的 ATI 驱动和 Mesa 驱动。也许你没有安装，但如果不删除现有的显卡驱动，可能造成安装后加载模块和驱动错误，不能正常驱动。<br> 如果以前手工安装过驱动需要执行下面两行，如果没有，跳过。</p>\n<p>cd /usr/share/ati/<br> sudo ./fglrx-uninstall.sh","more":"</p>\n<p>sudo apt-get remove xorg-driver-fglrx xserver-xorg-video-ati xserver-xgl</p>\n<p>三、安装驱动，不要在删除步骤前安装，不然会被卸载掉的。没有什么难的，基本上下一步就行了。</p>\n<p>sudo sh ./ati-driver-installer-8-11-x86.x86_64.run</p>\n<p>安装完毕后，把配置文件初始化一下，执行</p>\n<p>sudo aticonfig –initial -f</p>\n<p>四、生成 modules.dep 和 map 文件，保证模块和驱动的正常加载。</p>\n<p>sudo depmod -a</p>\n<p>五、安装完毕，如果杀面几个步骤没有出什么问题的话，重新启动机器即可。</p>\n<p>六、检查安装效果<br> 1、首先看看驱动信息是否正确，执行</p>\n<p>fglrxinfo</p>\n<p>下面的是我结果</p>\n<p>display: :0.0 screen: 0<br> OpenGL vendor string: ATI Technologies Inc.<br> OpenGL renderer string: ATI Radeon HD 2600 XT<br> OpenGL version string: 2.1.8201 Release</p>\n<p>关键是要有 ATI，不能是其它的，如果不是的话，说明驱动模块没有正确加载，需要根据显示的内容，把对应的驱动删除。</p>\n<p>2、看看自己的显卡是否工作在Xv模式下，执行</p>\n<p>xvinfo</p>\n<p>如果显示的结果很多很多，那就是工作在xv模式下了。如果像下面这样的显示，那还需要再设置</p>\n<p>X-Video Extension version 2.2<br> screen #0<br> no adaptors present</p>\n<p>手工设置xv模式</p>\n<p>sudo aticonfig –overlay-type=xv</p>\n<p>3、看看其它信息</p>\n<p>glxinfo | grep direct</p>\n<p>我的结果是</p>\n<p>direct rendering: Yes</p>\n<p>4、测试一下速度和工作是否正常，程序会显示转动的齿轮和一些数值。</p>\n<p>glxgears<br> fgl_glxgears</p>"},{"title":"ubuntu开机启动项","id":"430","date":"2011-11-27T07:47:15.000Z","_content":"\n添加一个服务\n*\nsudo update-rc.d 服务名 defaults 99\n\n删除一个服务\n*\nsudo update-rc.d 服务名 remove\n\n临时重启一个服务\n*\n\n/etc/init.d/服务名 restart\n\n临时关闭一个服务\n\n*\n\n/etc/init.d/服务名 stop\n\n临时启动一个服务\n\n*\n\n/etc/init.d/服务名 start\n\n上面这种说法我试过了,是可以使用的,\n\n增加我这样子做的\n\nsudo update-rc.d 服务名 defaults\n\n后面的顺序让它自动得到.\n\n我试过在init.d中另外加了一个shellscript,直接加起服务里是可以的,但是如果要删除的时候需要用\n\nsudo update-rc.d -f 服务名 remove\n\n强制删除才可以.\n\n另外网上还流行下面这种做法.\n\n用来设置ubuntu启动选项的工具<!--more-->\n\nrcconf：\n\nsudo apt-get rcconf\n\nsudo apt-get install rcconf\n\nroot 下运行: rcconf\n\n功能更全的：sysv-rc-conf\n\nsudo apt-get update\n\nsudo apt-get install sysv-rc-conf\n\n运行：sudo sysv-rc-conf\n\n关于设置ubuntu sysv-rc-conf的文章：\n\nhttp://ubuntuforums.org/showthread.php?t=89491\n\n也可以直接修改\n\n直接改/etc/rc0.d ~ /etc/rc6.d和/etc/rcS.d下的东西，S开头的表示启动，K开头的表示不启动，\n\n例如：想关闭vsftpd的开机自动启动，只需sudo mv /etc/rc2.d/S20vsftpd /etc/rc2.d/K20vsftpd就可以了。\n\nrccconf和sysv-rc-conf我在ubuntu 6.01中,都无法直接安装,可能要下载吧,另外,那些rc*.d文件中,启动文件,一定要在init.d中存在才可以,里面的数字可能是启动的顺序吧,我看了下,最大是99,这个方法,自己没有试过,\n\nUbuntu开机服务详解\nFrom: http://www.ubuntuforums.org/showthread.php?t=89491\nI. 安装一个工具 - sysv-rc-conf。 它是一款基于perl的开机进程调整工具。\n代码:\nsudo apt-get update\nsudo apt-get install sysv-rc-conf\n它提供一种配置开机进程和运行等级的简单方法， 但是如果你想要通过链接/解除链接文件来手工操作的话，这不是必需的... 这由你决定\nII. Ok，一切就绪。现在让我们通过以下代码来运行它\n代码:\nsudo sysv-rc-conf\n并一个一个的分析每种服务。 **注意 ** 我有的一些服务或许你没有，完全可以。如果一些服务你有但是我没有， 你将需要独自研究或者在这里提问 ... 但是此HowTo 涵盖它们中的大多数 ...\n在我们开始搞乱它们之前，我要在这里引入一些运行等级知识 ....全部开机进程执行顺序如下：\n运行等级 S：开机进程中的第一个运行等级。/etc/init.d/rcS脚本将被调用到开启并且/etc/rcS.d目录下的所有进程将被执行。\n运行等级 1：单用户模式。/etc/rc1.d目录下的所有进程将被执行。\n运行等级 2，3，4，5：在debian系统里是多用户环境，可能不包含图形用户界面。同样的，在相应目录下的进程将被运行。\n**注意** 这和RedHat，SuSE， 以及其它基于RPM的系统不同。\n运行等级 0：关闭计算机\n运行等级 6：重起计算机\n好，让我们回到sysv-rc-conf:\n1\\. acpi-support - 你最好使其在S运行等级处于“X”状态。\n2\\. acpid - acpi守护程序.这两个用于电源管理，对于笔记本和台式电脑很重要，所以让它们开启。\n3\\. alsa - 如果你使用alsa声音子系统，是的，开启它。\n4\\. alsa-utils -在我系统里，此服务取代了alsa，所以我关闭了alsa并在S运行等级将此服务开启。**注意**，我所说的“关闭”是指在所有运行等级里面去除所有“X”。如果在你系统里没有它，没问题。让我们继续。\n5\\. anacron - 一个cron子系统，当时间到达时用于执行任何没有被执行的cron作业。当某种cron 作业时间准备好时，很可能你或许已经关闭了你的计算机。打个比方，updatedb被计划在每天2点执行，但是在那个时候，你的计算机是关闭的，然后如果 ananron服务如果是开启的话，它将设法抓起那个updatedb cron… 我将它关闭是因为我不经常关闭我的笔记本，但是否开启此服务完全取决于你。\n6\\. apmd - 这是十分困惑我的一个服务。我已经开启了acpid服务，那同时开启apmd有啥好处呢？如果你的计算机不是那么老，甚至不能支持acpi，然后你可以设法关闭它。无论如何，我是关闭它的。\n7\\. atd - 就像cron，一个作业调度程序。我把它关了\n8\\. binfmt-support - 核心支持其他二进制的文件格式。我让它开着\n9\\. bluez-utiles - 我把它关了因为我没有任何蓝牙设备\n10\\. bootlogd - 开启它\n11\\. cron – 开启它\n12\\. cupsys – 管理打印机的子系统。我没有打印机所以我关闭它了，如果你有打印机，开启他。\n13\\. dbus – 消息总线系统(message bus system)。非常重要，开启它。\n14\\. dns-clean – 当使用拨号连接，主要用于清除dns信息。我不用拨号，所以我关闭了它。\n15\\. evms – 企业卷管理系统（Enterprise Volumn Management system）. 我关闭了它。\n16\\. fetchmail – 一个邮件接受守护进程，我关闭了它。\n17\\. gdm – gnome桌面管理器。 无论如何我关闭它了，因为我将系统用终端引导。如果你想直接引导到图形用户界面，这取决于你。\n18\\. gdomap – 事实上我也不知道为什么此服务必需开启。我没有在其他系统见过这个守护程序，所以我将其关闭并且我没觉得我失去了什么。开启它对笔记本或者台式机有任何好处吗？\n19\\. gpm – 终端鼠标支持。如果你觉得你在终端使用鼠标更好，那么在运行等级 1 和2 开启它。那正是你所需要的。\n20\\. halt - 别更改它。\n21\\. hdparm – 调整硬盘的脚本。我在运行等级 2，3，4，5去除了它但是在S 运行等级添加了它。我觉得早点打开DMA，32bit I/O等等将对其余过程有益。我自己也将原来的脚本精简了一下。如果我知道我正做什么，我觉得做过多的检查没用。相应配置文件是 /etc/hdparm.conf。\n22\\. hibernate – 如果你的系统支持休眠，把它打开，否则它对你没用。\n23\\. hotkey-setup – 此守护进程为你的笔记本建立一些热键映射。支持的制造商包括： HP, Acer, ASUS, Sony, Dell, 和IBM。如果你有那些品牌的笔记本，你可以打开它，否则它或许对你没有任何好处。\n24\\. hotplug and hotplug-net #激活热插拔系统是费时的。我将考虑关掉它们。我在的/etc/network/interfaces文件作了很多修改，并将其设置为自动运行，而不是在 热插拔进程期间映射我的无线网卡。所以我可以将它们关掉。我已经测试过了，甚至我将它们关闭，ubuntu仍旧可以检测到我的usb驱动器，我的数码相 机，等等。所以我认为关掉它们是很安全的**注意**如果在关闭热插拔服务以后发现你的声卡部工作了，你可以将服务打开，或者编辑 /etc/modules文件并添加声卡驱动模块。经测试，后者比较快。\n25\\. hplip – HP打印机和图形子系统，我将其关闭了。\n26\\. ifrename – 网络接口重命名（network interface rename）脚本。听上去很酷但是我把它关掉了。主要用于管理多网络接口名称。虽然我有无线网卡和以太网卡，两者被内核标识为eth0和ath0，所以此服务对我不是很有用。\n27\\. ifupdown and ifupdown-clean – 打开它，它们是开机时网络及口激活脚本。\n28\\. inetd or inetd.real – 查看文件/etc/inetd.conf 注释掉所有你不需要的服务。如果该文件不包含任何服务，那关闭它是很安全的。\n29\\. klogd – 打开它。\n30\\. linux-restricted-modules-common – 你应该去查看下是否你的系统装载有任何受限制的模块。既然我需要madwifi ath_pci 模块，所以我将其开启。受限制的模块可以从/lib/linux-restricted-modules查看到。如果你发现你没有使用任何受限制的模块， 那关掉这个服务没事。\n31\\. lvm – 我没有使用逻辑卷所以我将此服务关闭。让它开启如果你 *确实* 有lvm（lvm是逻辑卷管理器在此不再扩充）.\n32\\. makedev – 打开它。\n33\\. mdamd – Raid管理工具。不使用Raid所以我将此服务关闭。\n34\\. module-init-tools – 从/etc/modules加载扩展模块。你可以研究/etc/modules文件查看是否有一些你不需要的模块。通常我们将此服务开启。\n35\\. networking – 在启动期间通过扫描/etc/network/interfaces文件增加网络接口和配置dns信息。让它开着。\n36\\. ntpdate – 通过ubuntu时间服务器同步时间 。在开机的时候我不需要它，故我关掉了此服务。\n37\\. nvidia-kernel – 我自己编译了nvidia驱动，所以此服务对我没用。如果你从受限制模块中使用nvidia驱动，那打开此服务。\n38\\. pcmcia – 激活pcmica设备。我将此服务打开在S运行等级而不是分别在2，3，4，5运行等级打开此服务，因为我觉得起先让硬件设备准备更好。如果你在使用没有pcmica卡的台式机的话，请关闭此服务。\n39\\. portmap – 管理像nis，nfs等等之类服务的守护程序。如果你的笔记本或台式机是纯粹的客户端，那么关闭此服务。\n40\\. powernowd – 管理CPU频率的客户端程序。主要用于支持CPU speed stepping技术的笔记本。通常如果你在配置一台笔记本，你应该开启此服务。如果是台式机，那此服务应该没有用。\n41\\. ppp and ppp-dns - 对我没用，我不使用拨号。\n42\\. readahead - **感谢 mr_pouit!** readahead似乎是一种“预加载程序”。在开机时它将一些库文件加载到内存，以便一些程序启动的更快。但是它给启动时间增加了3-4秒。所以，你可 以留着它…或者不。**更新**，经我测试我觉得加载程序没有什么不同。所以我决定关闭此服务。如果你有打开此服务的理由，那就打开它 。\n43\\. reboot - 别更改它。\n44\\. resolvconf – 按照你的网络状态自动配置DSN信息，我将它打开着。\n45\\. rmnologin – 如果发现nologin，那么去除它。此情况不会在笔记本上面发生，所以我摆脱它。\n46\\. rsync – rsync守护程序. 我不打算在我的笔记本上使用rsync协议，所以我将其关闭\n47\\. sendsigs – 在重启和关机期间发送信号。顺其自然。\n48\\. single – 激活单用户模式。顺其自然。\n49\\. ssh – ssh守护程序。 我需要ssh，所以我将此服务打开。\n50\\. stop-bootlogd – 从2，3，4，5运行等级停止bootlogd。顺其自然。\n51\\. sudo – 检查sudo 状态。我没在一台笔记本或者台式机客户端上看到任何使用sudo的好处，因此我关闭了它。\n52\\. sysklogd - 顺其自然。\n53\\. udev and udev-mab – 用户空间dev文件系统（userspace dev filesystem）。好东西，我将它们打开。\n54\\. umountfs - 顺其自然。\n55\\. urandom – 随机数生成器。可能没什么用处，但是我留着它。\n56\\. usplash - 嗯，如果你想看到漂亮的开机画面，顺其自然。 无论如何沃关闭此服务了。如果你想关闭它，你也可以编辑/boot/grub/menu.lst文件注释掉splashimage行，除去开机splash核心选项。\n57\\. vbesave – 显卡BIOS配置工具。它能保存你显卡的状态。我将其开启。\n58\\. xorg-common – 设置X服务ICE socket。我将其从在S运行等级开启移动到2，3，4，5，运行等级。如果我引导到单用户模式，那我不需要此服务。在最初引导期间这种方法将不占用时间。\n59\\. adjtimex – 这也是调整核心hw时钟的工具。通常你不会在开机列表中看见它。在非常少有的情况如果你确实在开机进程中看见它了，事出有因，因此最好顺其自然。在我的情况里，它是关闭的。\n60\\. dirmngr – 证书列表管理工具（certification lists management tool）。和gnupg一起工作。你必须看看你是否需要它。在我的情况里，我是关掉它的。\n61\\. hwtools – 一个优化irqs的工具。不确定打开它的好处。在我的情况里，我是关掉它的。\n62\\. libpam-devperm - 在系统崩溃之后用于修理设备文件许可的一个守护程序。听起来不错，因此我打开它了。\n63\\. lm-sensors – 如果你的主板内建一些传感芯片，通过用户空间（userspace）查看hw状态可能是有帮助的。我运行了它，但是它提示“没有发现传感器”，因此我关闭 了此服务。64\\. mdadm-raid – 作用和mdadm服务相同。用来管RAID设备。如果你没有此类设备，那尽管关掉它好了。\n65\\. screen-cleanup – 一个用来清除开机屏幕的脚本。嗯，是否关闭它有你决定。在我的情况里，我打开它了。\n66\\. xinetd – 用来管理其他守护进程的一个inetd超级守护程序。在我的系统里，xinetd管理chargen, daytime, echo和time (在 /etc/xinetd.d 目录找到的)，我不关系任何一个，因此我关掉了此服务。如果在xinetd下你确实有一些重要的服务，那打开它。\nIII.修改 /etc/inittab 文件\n代码:\nvi /etc/inittab\n然后注释掉tty4,tty5, 和tty6。只留下tty1, tty2,和 tty3.。对于笔记本或台式机用户3个终端应该足够了。保存文件。\nIV. Ok，好，我们可以重启计算机并看看它变的如何了。从我测试来看：在我停止大量服务之前，引导到终端整个过程大约花费了85到90秒。 (在那时，我也打开了我不需要的samba和nfs服务。 我也将它们关闭了)。之后，整个过程花费了50秒。我有一台 P4M 1.8G CPU的笔记本。一些高档台式机或者笔记本应该花费更少时间。\n**更新**: 加速/打扫系统重启或关机进程\n1\\. 通过以下代码运行sysv-rc-conf:\n代码:\nsudo sysv-rc-conf\n2\\. OK，睁开你的眼睛并仔细寻找那些在所有运行等级都没有“X”的服务。(所有运行等级包括 1,2,3,4,5,6, 和S), 一个一个的把它们写下来。在这里千万别出错。再你搞定以后再来一遍。\n3\\. 退出sysv-rc-conf。\n4.\n代码:\ncd /etc/rc0.d\n- 此目录关于系统关机进程。\n5\\. OK, 现在开始\n代码:\nls K*\n将列出所有以大写K开头的链接。比较你的列表，将你列表中每个包含服务名的文件名改为小写k开头。例如，在你列表中你有一个ppp服务(意思是说ppp将在所有运行等级关闭)，然后你可以这样做:\n代码:\nsudo mv K00ppp k00ppp\n你只要将大写K改成小写k就好了，保留其余的。将此举应用到你列表中存在的所有服务 。\n6.\n代码:\ncd ../rc6.d\n- 此目录关于系统重启进程。\n7\\. ok,你应该也看到了相似的东西了吧，因此在此做和rc0.d中同样的修改。\n8\\. 现在，你的重启和关机进程被清理了，你的重启和关机过程将变的更快。\n关于什么是你要做的已经相当明了了。在每个运行等级/etc/rc和/etc/rcS脚本通过扫描每个链接是否以大写S开头来决定开启与否，通过扫描每个 链接是否它是以大写K开头来决定停止与否。因此对于重启和关机运行等级，我们更关心的是大写K开头的链接，因为那写服务不运行在所有运行等级，不必停止他 们。它们更本没有运行。如果有一天你想重新开启其中的一些服务， 只要将小写的k改为大写的K即可。就这些了。\n无论如何，它不适用服务器，但是我确实在我的一台拥有2.7G P4 ,1.5G内存的服务器上测试过。它将整个启动过程缩短为31秒。我用我的手表计算的。而且，其中还包括了开启的ftp服务器和nft服务器。","source":"_posts/ubuntu-e5-bc-80-e6-9c-ba-e5-90-af-e5-8a-a8-e9-a1-b9.md","raw":"---\ntitle: ubuntu开机启动项\ntags:\n  - Linux\nid: 430\ncategories:\n  - Linux\ndate: 2011-11-27 15:47:15\n---\n\n添加一个服务\n*\nsudo update-rc.d 服务名 defaults 99\n\n删除一个服务\n*\nsudo update-rc.d 服务名 remove\n\n临时重启一个服务\n*\n\n/etc/init.d/服务名 restart\n\n临时关闭一个服务\n\n*\n\n/etc/init.d/服务名 stop\n\n临时启动一个服务\n\n*\n\n/etc/init.d/服务名 start\n\n上面这种说法我试过了,是可以使用的,\n\n增加我这样子做的\n\nsudo update-rc.d 服务名 defaults\n\n后面的顺序让它自动得到.\n\n我试过在init.d中另外加了一个shellscript,直接加起服务里是可以的,但是如果要删除的时候需要用\n\nsudo update-rc.d -f 服务名 remove\n\n强制删除才可以.\n\n另外网上还流行下面这种做法.\n\n用来设置ubuntu启动选项的工具<!--more-->\n\nrcconf：\n\nsudo apt-get rcconf\n\nsudo apt-get install rcconf\n\nroot 下运行: rcconf\n\n功能更全的：sysv-rc-conf\n\nsudo apt-get update\n\nsudo apt-get install sysv-rc-conf\n\n运行：sudo sysv-rc-conf\n\n关于设置ubuntu sysv-rc-conf的文章：\n\nhttp://ubuntuforums.org/showthread.php?t=89491\n\n也可以直接修改\n\n直接改/etc/rc0.d ~ /etc/rc6.d和/etc/rcS.d下的东西，S开头的表示启动，K开头的表示不启动，\n\n例如：想关闭vsftpd的开机自动启动，只需sudo mv /etc/rc2.d/S20vsftpd /etc/rc2.d/K20vsftpd就可以了。\n\nrccconf和sysv-rc-conf我在ubuntu 6.01中,都无法直接安装,可能要下载吧,另外,那些rc*.d文件中,启动文件,一定要在init.d中存在才可以,里面的数字可能是启动的顺序吧,我看了下,最大是99,这个方法,自己没有试过,\n\nUbuntu开机服务详解\nFrom: http://www.ubuntuforums.org/showthread.php?t=89491\nI. 安装一个工具 - sysv-rc-conf。 它是一款基于perl的开机进程调整工具。\n代码:\nsudo apt-get update\nsudo apt-get install sysv-rc-conf\n它提供一种配置开机进程和运行等级的简单方法， 但是如果你想要通过链接/解除链接文件来手工操作的话，这不是必需的... 这由你决定\nII. Ok，一切就绪。现在让我们通过以下代码来运行它\n代码:\nsudo sysv-rc-conf\n并一个一个的分析每种服务。 **注意 ** 我有的一些服务或许你没有，完全可以。如果一些服务你有但是我没有， 你将需要独自研究或者在这里提问 ... 但是此HowTo 涵盖它们中的大多数 ...\n在我们开始搞乱它们之前，我要在这里引入一些运行等级知识 ....全部开机进程执行顺序如下：\n运行等级 S：开机进程中的第一个运行等级。/etc/init.d/rcS脚本将被调用到开启并且/etc/rcS.d目录下的所有进程将被执行。\n运行等级 1：单用户模式。/etc/rc1.d目录下的所有进程将被执行。\n运行等级 2，3，4，5：在debian系统里是多用户环境，可能不包含图形用户界面。同样的，在相应目录下的进程将被运行。\n**注意** 这和RedHat，SuSE， 以及其它基于RPM的系统不同。\n运行等级 0：关闭计算机\n运行等级 6：重起计算机\n好，让我们回到sysv-rc-conf:\n1\\. acpi-support - 你最好使其在S运行等级处于“X”状态。\n2\\. acpid - acpi守护程序.这两个用于电源管理，对于笔记本和台式电脑很重要，所以让它们开启。\n3\\. alsa - 如果你使用alsa声音子系统，是的，开启它。\n4\\. alsa-utils -在我系统里，此服务取代了alsa，所以我关闭了alsa并在S运行等级将此服务开启。**注意**，我所说的“关闭”是指在所有运行等级里面去除所有“X”。如果在你系统里没有它，没问题。让我们继续。\n5\\. anacron - 一个cron子系统，当时间到达时用于执行任何没有被执行的cron作业。当某种cron 作业时间准备好时，很可能你或许已经关闭了你的计算机。打个比方，updatedb被计划在每天2点执行，但是在那个时候，你的计算机是关闭的，然后如果 ananron服务如果是开启的话，它将设法抓起那个updatedb cron… 我将它关闭是因为我不经常关闭我的笔记本，但是否开启此服务完全取决于你。\n6\\. apmd - 这是十分困惑我的一个服务。我已经开启了acpid服务，那同时开启apmd有啥好处呢？如果你的计算机不是那么老，甚至不能支持acpi，然后你可以设法关闭它。无论如何，我是关闭它的。\n7\\. atd - 就像cron，一个作业调度程序。我把它关了\n8\\. binfmt-support - 核心支持其他二进制的文件格式。我让它开着\n9\\. bluez-utiles - 我把它关了因为我没有任何蓝牙设备\n10\\. bootlogd - 开启它\n11\\. cron – 开启它\n12\\. cupsys – 管理打印机的子系统。我没有打印机所以我关闭它了，如果你有打印机，开启他。\n13\\. dbus – 消息总线系统(message bus system)。非常重要，开启它。\n14\\. dns-clean – 当使用拨号连接，主要用于清除dns信息。我不用拨号，所以我关闭了它。\n15\\. evms – 企业卷管理系统（Enterprise Volumn Management system）. 我关闭了它。\n16\\. fetchmail – 一个邮件接受守护进程，我关闭了它。\n17\\. gdm – gnome桌面管理器。 无论如何我关闭它了，因为我将系统用终端引导。如果你想直接引导到图形用户界面，这取决于你。\n18\\. gdomap – 事实上我也不知道为什么此服务必需开启。我没有在其他系统见过这个守护程序，所以我将其关闭并且我没觉得我失去了什么。开启它对笔记本或者台式机有任何好处吗？\n19\\. gpm – 终端鼠标支持。如果你觉得你在终端使用鼠标更好，那么在运行等级 1 和2 开启它。那正是你所需要的。\n20\\. halt - 别更改它。\n21\\. hdparm – 调整硬盘的脚本。我在运行等级 2，3，4，5去除了它但是在S 运行等级添加了它。我觉得早点打开DMA，32bit I/O等等将对其余过程有益。我自己也将原来的脚本精简了一下。如果我知道我正做什么，我觉得做过多的检查没用。相应配置文件是 /etc/hdparm.conf。\n22\\. hibernate – 如果你的系统支持休眠，把它打开，否则它对你没用。\n23\\. hotkey-setup – 此守护进程为你的笔记本建立一些热键映射。支持的制造商包括： HP, Acer, ASUS, Sony, Dell, 和IBM。如果你有那些品牌的笔记本，你可以打开它，否则它或许对你没有任何好处。\n24\\. hotplug and hotplug-net #激活热插拔系统是费时的。我将考虑关掉它们。我在的/etc/network/interfaces文件作了很多修改，并将其设置为自动运行，而不是在 热插拔进程期间映射我的无线网卡。所以我可以将它们关掉。我已经测试过了，甚至我将它们关闭，ubuntu仍旧可以检测到我的usb驱动器，我的数码相 机，等等。所以我认为关掉它们是很安全的**注意**如果在关闭热插拔服务以后发现你的声卡部工作了，你可以将服务打开，或者编辑 /etc/modules文件并添加声卡驱动模块。经测试，后者比较快。\n25\\. hplip – HP打印机和图形子系统，我将其关闭了。\n26\\. ifrename – 网络接口重命名（network interface rename）脚本。听上去很酷但是我把它关掉了。主要用于管理多网络接口名称。虽然我有无线网卡和以太网卡，两者被内核标识为eth0和ath0，所以此服务对我不是很有用。\n27\\. ifupdown and ifupdown-clean – 打开它，它们是开机时网络及口激活脚本。\n28\\. inetd or inetd.real – 查看文件/etc/inetd.conf 注释掉所有你不需要的服务。如果该文件不包含任何服务，那关闭它是很安全的。\n29\\. klogd – 打开它。\n30\\. linux-restricted-modules-common – 你应该去查看下是否你的系统装载有任何受限制的模块。既然我需要madwifi ath_pci 模块，所以我将其开启。受限制的模块可以从/lib/linux-restricted-modules查看到。如果你发现你没有使用任何受限制的模块， 那关掉这个服务没事。\n31\\. lvm – 我没有使用逻辑卷所以我将此服务关闭。让它开启如果你 *确实* 有lvm（lvm是逻辑卷管理器在此不再扩充）.\n32\\. makedev – 打开它。\n33\\. mdamd – Raid管理工具。不使用Raid所以我将此服务关闭。\n34\\. module-init-tools – 从/etc/modules加载扩展模块。你可以研究/etc/modules文件查看是否有一些你不需要的模块。通常我们将此服务开启。\n35\\. networking – 在启动期间通过扫描/etc/network/interfaces文件增加网络接口和配置dns信息。让它开着。\n36\\. ntpdate – 通过ubuntu时间服务器同步时间 。在开机的时候我不需要它，故我关掉了此服务。\n37\\. nvidia-kernel – 我自己编译了nvidia驱动，所以此服务对我没用。如果你从受限制模块中使用nvidia驱动，那打开此服务。\n38\\. pcmcia – 激活pcmica设备。我将此服务打开在S运行等级而不是分别在2，3，4，5运行等级打开此服务，因为我觉得起先让硬件设备准备更好。如果你在使用没有pcmica卡的台式机的话，请关闭此服务。\n39\\. portmap – 管理像nis，nfs等等之类服务的守护程序。如果你的笔记本或台式机是纯粹的客户端，那么关闭此服务。\n40\\. powernowd – 管理CPU频率的客户端程序。主要用于支持CPU speed stepping技术的笔记本。通常如果你在配置一台笔记本，你应该开启此服务。如果是台式机，那此服务应该没有用。\n41\\. ppp and ppp-dns - 对我没用，我不使用拨号。\n42\\. readahead - **感谢 mr_pouit!** readahead似乎是一种“预加载程序”。在开机时它将一些库文件加载到内存，以便一些程序启动的更快。但是它给启动时间增加了3-4秒。所以，你可 以留着它…或者不。**更新**，经我测试我觉得加载程序没有什么不同。所以我决定关闭此服务。如果你有打开此服务的理由，那就打开它 。\n43\\. reboot - 别更改它。\n44\\. resolvconf – 按照你的网络状态自动配置DSN信息，我将它打开着。\n45\\. rmnologin – 如果发现nologin，那么去除它。此情况不会在笔记本上面发生，所以我摆脱它。\n46\\. rsync – rsync守护程序. 我不打算在我的笔记本上使用rsync协议，所以我将其关闭\n47\\. sendsigs – 在重启和关机期间发送信号。顺其自然。\n48\\. single – 激活单用户模式。顺其自然。\n49\\. ssh – ssh守护程序。 我需要ssh，所以我将此服务打开。\n50\\. stop-bootlogd – 从2，3，4，5运行等级停止bootlogd。顺其自然。\n51\\. sudo – 检查sudo 状态。我没在一台笔记本或者台式机客户端上看到任何使用sudo的好处，因此我关闭了它。\n52\\. sysklogd - 顺其自然。\n53\\. udev and udev-mab – 用户空间dev文件系统（userspace dev filesystem）。好东西，我将它们打开。\n54\\. umountfs - 顺其自然。\n55\\. urandom – 随机数生成器。可能没什么用处，但是我留着它。\n56\\. usplash - 嗯，如果你想看到漂亮的开机画面，顺其自然。 无论如何沃关闭此服务了。如果你想关闭它，你也可以编辑/boot/grub/menu.lst文件注释掉splashimage行，除去开机splash核心选项。\n57\\. vbesave – 显卡BIOS配置工具。它能保存你显卡的状态。我将其开启。\n58\\. xorg-common – 设置X服务ICE socket。我将其从在S运行等级开启移动到2，3，4，5，运行等级。如果我引导到单用户模式，那我不需要此服务。在最初引导期间这种方法将不占用时间。\n59\\. adjtimex – 这也是调整核心hw时钟的工具。通常你不会在开机列表中看见它。在非常少有的情况如果你确实在开机进程中看见它了，事出有因，因此最好顺其自然。在我的情况里，它是关闭的。\n60\\. dirmngr – 证书列表管理工具（certification lists management tool）。和gnupg一起工作。你必须看看你是否需要它。在我的情况里，我是关掉它的。\n61\\. hwtools – 一个优化irqs的工具。不确定打开它的好处。在我的情况里，我是关掉它的。\n62\\. libpam-devperm - 在系统崩溃之后用于修理设备文件许可的一个守护程序。听起来不错，因此我打开它了。\n63\\. lm-sensors – 如果你的主板内建一些传感芯片，通过用户空间（userspace）查看hw状态可能是有帮助的。我运行了它，但是它提示“没有发现传感器”，因此我关闭 了此服务。64\\. mdadm-raid – 作用和mdadm服务相同。用来管RAID设备。如果你没有此类设备，那尽管关掉它好了。\n65\\. screen-cleanup – 一个用来清除开机屏幕的脚本。嗯，是否关闭它有你决定。在我的情况里，我打开它了。\n66\\. xinetd – 用来管理其他守护进程的一个inetd超级守护程序。在我的系统里，xinetd管理chargen, daytime, echo和time (在 /etc/xinetd.d 目录找到的)，我不关系任何一个，因此我关掉了此服务。如果在xinetd下你确实有一些重要的服务，那打开它。\nIII.修改 /etc/inittab 文件\n代码:\nvi /etc/inittab\n然后注释掉tty4,tty5, 和tty6。只留下tty1, tty2,和 tty3.。对于笔记本或台式机用户3个终端应该足够了。保存文件。\nIV. Ok，好，我们可以重启计算机并看看它变的如何了。从我测试来看：在我停止大量服务之前，引导到终端整个过程大约花费了85到90秒。 (在那时，我也打开了我不需要的samba和nfs服务。 我也将它们关闭了)。之后，整个过程花费了50秒。我有一台 P4M 1.8G CPU的笔记本。一些高档台式机或者笔记本应该花费更少时间。\n**更新**: 加速/打扫系统重启或关机进程\n1\\. 通过以下代码运行sysv-rc-conf:\n代码:\nsudo sysv-rc-conf\n2\\. OK，睁开你的眼睛并仔细寻找那些在所有运行等级都没有“X”的服务。(所有运行等级包括 1,2,3,4,5,6, 和S), 一个一个的把它们写下来。在这里千万别出错。再你搞定以后再来一遍。\n3\\. 退出sysv-rc-conf。\n4.\n代码:\ncd /etc/rc0.d\n- 此目录关于系统关机进程。\n5\\. OK, 现在开始\n代码:\nls K*\n将列出所有以大写K开头的链接。比较你的列表，将你列表中每个包含服务名的文件名改为小写k开头。例如，在你列表中你有一个ppp服务(意思是说ppp将在所有运行等级关闭)，然后你可以这样做:\n代码:\nsudo mv K00ppp k00ppp\n你只要将大写K改成小写k就好了，保留其余的。将此举应用到你列表中存在的所有服务 。\n6.\n代码:\ncd ../rc6.d\n- 此目录关于系统重启进程。\n7\\. ok,你应该也看到了相似的东西了吧，因此在此做和rc0.d中同样的修改。\n8\\. 现在，你的重启和关机进程被清理了，你的重启和关机过程将变的更快。\n关于什么是你要做的已经相当明了了。在每个运行等级/etc/rc和/etc/rcS脚本通过扫描每个链接是否以大写S开头来决定开启与否，通过扫描每个 链接是否它是以大写K开头来决定停止与否。因此对于重启和关机运行等级，我们更关心的是大写K开头的链接，因为那写服务不运行在所有运行等级，不必停止他 们。它们更本没有运行。如果有一天你想重新开启其中的一些服务， 只要将小写的k改为大写的K即可。就这些了。\n无论如何，它不适用服务器，但是我确实在我的一台拥有2.7G P4 ,1.5G内存的服务器上测试过。它将整个启动过程缩短为31秒。我用我的手表计算的。而且，其中还包括了开启的ftp服务器和nft服务器。","slug":"ubuntu-e5-bc-80-e6-9c-ba-e5-90-af-e5-8a-a8-e9-a1-b9","published":1,"updated":"2018-01-13T05:07:00.451Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjccw7xdv00bgaqcr5wwexmki","content":"<p>添加一个服务<br>*<br>sudo update-rc.d 服务名 defaults 99</p>\n<p>删除一个服务<br>*<br>sudo update-rc.d 服务名 remove</p>\n<p>临时重启一个服务<br>*</p>\n<p>/etc/init.d/服务名 restart</p>\n<p>临时关闭一个服务</p>\n<p>*</p>\n<p>/etc/init.d/服务名 stop</p>\n<p>临时启动一个服务</p>\n<p>*</p>\n<p>/etc/init.d/服务名 start</p>\n<p>上面这种说法我试过了,是可以使用的,</p>\n<p>增加我这样子做的</p>\n<p>sudo update-rc.d 服务名 defaults</p>\n<p>后面的顺序让它自动得到.</p>\n<p>我试过在init.d中另外加了一个shellscript,直接加起服务里是可以的,但是如果要删除的时候需要用</p>\n<p>sudo update-rc.d -f 服务名 remove</p>\n<p>强制删除才可以.</p>\n<p>另外网上还流行下面这种做法.</p>\n<p>用来设置ubuntu启动选项的工具<a id=\"more\"></a></p>\n<p>rcconf：</p>\n<p>sudo apt-get rcconf</p>\n<p>sudo apt-get install rcconf</p>\n<p>root 下运行: rcconf</p>\n<p>功能更全的：sysv-rc-conf</p>\n<p>sudo apt-get update</p>\n<p>sudo apt-get install sysv-rc-conf</p>\n<p>运行：sudo sysv-rc-conf</p>\n<p>关于设置ubuntu sysv-rc-conf的文章：</p>\n<p><a href=\"http://ubuntuforums.org/showthread.php?t=89491\" target=\"_blank\" rel=\"noopener\">http://ubuntuforums.org/showthread.php?t=89491</a></p>\n<p>也可以直接修改</p>\n<p>直接改/etc/rc0.d ~ /etc/rc6.d和/etc/rcS.d下的东西，S开头的表示启动，K开头的表示不启动，</p>\n<p>例如：想关闭vsftpd的开机自动启动，只需sudo mv /etc/rc2.d/S20vsftpd /etc/rc2.d/K20vsftpd就可以了。</p>\n<p>rccconf和sysv-rc-conf我在ubuntu 6.01中,都无法直接安装,可能要下载吧,另外,那些rc*.d文件中,启动文件,一定要在init.d中存在才可以,里面的数字可能是启动的顺序吧,我看了下,最大是99,这个方法,自己没有试过,</p>\n<p>Ubuntu开机服务详解<br>From: <a href=\"http://www.ubuntuforums.org/showthread.php?t=89491\" target=\"_blank\" rel=\"noopener\">http://www.ubuntuforums.org/showthread.php?t=89491</a><br>I. 安装一个工具 - sysv-rc-conf。 它是一款基于perl的开机进程调整工具。<br>代码:<br>sudo apt-get update<br>sudo apt-get install sysv-rc-conf<br>它提供一种配置开机进程和运行等级的简单方法， 但是如果你想要通过链接/解除链接文件来手工操作的话，这不是必需的… 这由你决定<br>II. Ok，一切就绪。现在让我们通过以下代码来运行它<br>代码:<br>sudo sysv-rc-conf<br>并一个一个的分析每种服务。 <strong>注意 </strong> 我有的一些服务或许你没有，完全可以。如果一些服务你有但是我没有， 你将需要独自研究或者在这里提问 … 但是此HowTo 涵盖它们中的大多数 …<br>在我们开始搞乱它们之前，我要在这里引入一些运行等级知识 ….全部开机进程执行顺序如下：<br>运行等级 S：开机进程中的第一个运行等级。/etc/init.d/rcS脚本将被调用到开启并且/etc/rcS.d目录下的所有进程将被执行。<br>运行等级 1：单用户模式。/etc/rc1.d目录下的所有进程将被执行。<br>运行等级 2，3，4，5：在debian系统里是多用户环境，可能不包含图形用户界面。同样的，在相应目录下的进程将被运行。<br><strong>注意</strong> 这和RedHat，SuSE， 以及其它基于RPM的系统不同。<br>运行等级 0：关闭计算机<br>运行等级 6：重起计算机<br>好，让我们回到sysv-rc-conf:<br>1. acpi-support - 你最好使其在S运行等级处于“X”状态。<br>2. acpid - acpi守护程序.这两个用于电源管理，对于笔记本和台式电脑很重要，所以让它们开启。<br>3. alsa - 如果你使用alsa声音子系统，是的，开启它。<br>4. alsa-utils -在我系统里，此服务取代了alsa，所以我关闭了alsa并在S运行等级将此服务开启。<strong>注意</strong>，我所说的“关闭”是指在所有运行等级里面去除所有“X”。如果在你系统里没有它，没问题。让我们继续。<br>5. anacron - 一个cron子系统，当时间到达时用于执行任何没有被执行的cron作业。当某种cron 作业时间准备好时，很可能你或许已经关闭了你的计算机。打个比方，updatedb被计划在每天2点执行，但是在那个时候，你的计算机是关闭的，然后如果 ananron服务如果是开启的话，它将设法抓起那个updatedb cron… 我将它关闭是因为我不经常关闭我的笔记本，但是否开启此服务完全取决于你。<br>6. apmd - 这是十分困惑我的一个服务。我已经开启了acpid服务，那同时开启apmd有啥好处呢？如果你的计算机不是那么老，甚至不能支持acpi，然后你可以设法关闭它。无论如何，我是关闭它的。<br>7. atd - 就像cron，一个作业调度程序。我把它关了<br>8. binfmt-support - 核心支持其他二进制的文件格式。我让它开着<br>9. bluez-utiles - 我把它关了因为我没有任何蓝牙设备<br>10. bootlogd - 开启它<br>11. cron – 开启它<br>12. cupsys – 管理打印机的子系统。我没有打印机所以我关闭它了，如果你有打印机，开启他。<br>13. dbus – 消息总线系统(message bus system)。非常重要，开启它。<br>14. dns-clean – 当使用拨号连接，主要用于清除dns信息。我不用拨号，所以我关闭了它。<br>15. evms – 企业卷管理系统（Enterprise Volumn Management system）. 我关闭了它。<br>16. fetchmail – 一个邮件接受守护进程，我关闭了它。<br>17. gdm – gnome桌面管理器。 无论如何我关闭它了，因为我将系统用终端引导。如果你想直接引导到图形用户界面，这取决于你。<br>18. gdomap – 事实上我也不知道为什么此服务必需开启。我没有在其他系统见过这个守护程序，所以我将其关闭并且我没觉得我失去了什么。开启它对笔记本或者台式机有任何好处吗？<br>19. gpm – 终端鼠标支持。如果你觉得你在终端使用鼠标更好，那么在运行等级 1 和2 开启它。那正是你所需要的。<br>20. halt - 别更改它。<br>21. hdparm – 调整硬盘的脚本。我在运行等级 2，3，4，5去除了它但是在S 运行等级添加了它。我觉得早点打开DMA，32bit I/O等等将对其余过程有益。我自己也将原来的脚本精简了一下。如果我知道我正做什么，我觉得做过多的检查没用。相应配置文件是 /etc/hdparm.conf。<br>22. hibernate – 如果你的系统支持休眠，把它打开，否则它对你没用。<br>23. hotkey-setup – 此守护进程为你的笔记本建立一些热键映射。支持的制造商包括： HP, Acer, ASUS, Sony, Dell, 和IBM。如果你有那些品牌的笔记本，你可以打开它，否则它或许对你没有任何好处。<br>24. hotplug and hotplug-net #激活热插拔系统是费时的。我将考虑关掉它们。我在的/etc/network/interfaces文件作了很多修改，并将其设置为自动运行，而不是在 热插拔进程期间映射我的无线网卡。所以我可以将它们关掉。我已经测试过了，甚至我将它们关闭，ubuntu仍旧可以检测到我的usb驱动器，我的数码相 机，等等。所以我认为关掉它们是很安全的<strong>注意</strong>如果在关闭热插拔服务以后发现你的声卡部工作了，你可以将服务打开，或者编辑 /etc/modules文件并添加声卡驱动模块。经测试，后者比较快。<br>25. hplip – HP打印机和图形子系统，我将其关闭了。<br>26. ifrename – 网络接口重命名（network interface rename）脚本。听上去很酷但是我把它关掉了。主要用于管理多网络接口名称。虽然我有无线网卡和以太网卡，两者被内核标识为eth0和ath0，所以此服务对我不是很有用。<br>27. ifupdown and ifupdown-clean – 打开它，它们是开机时网络及口激活脚本。<br>28. inetd or inetd.real – 查看文件/etc/inetd.conf 注释掉所有你不需要的服务。如果该文件不包含任何服务，那关闭它是很安全的。<br>29. klogd – 打开它。<br>30. linux-restricted-modules-common – 你应该去查看下是否你的系统装载有任何受限制的模块。既然我需要madwifi ath_pci 模块，所以我将其开启。受限制的模块可以从/lib/linux-restricted-modules查看到。如果你发现你没有使用任何受限制的模块， 那关掉这个服务没事。<br>31. lvm – 我没有使用逻辑卷所以我将此服务关闭。让它开启如果你 <em>确实</em> 有lvm（lvm是逻辑卷管理器在此不再扩充）.<br>32. makedev – 打开它。<br>33. mdamd – Raid管理工具。不使用Raid所以我将此服务关闭。<br>34. module-init-tools – 从/etc/modules加载扩展模块。你可以研究/etc/modules文件查看是否有一些你不需要的模块。通常我们将此服务开启。<br>35. networking – 在启动期间通过扫描/etc/network/interfaces文件增加网络接口和配置dns信息。让它开着。<br>36. ntpdate – 通过ubuntu时间服务器同步时间 。在开机的时候我不需要它，故我关掉了此服务。<br>37. nvidia-kernel – 我自己编译了nvidia驱动，所以此服务对我没用。如果你从受限制模块中使用nvidia驱动，那打开此服务。<br>38. pcmcia – 激活pcmica设备。我将此服务打开在S运行等级而不是分别在2，3，4，5运行等级打开此服务，因为我觉得起先让硬件设备准备更好。如果你在使用没有pcmica卡的台式机的话，请关闭此服务。<br>39. portmap – 管理像nis，nfs等等之类服务的守护程序。如果你的笔记本或台式机是纯粹的客户端，那么关闭此服务。<br>40. powernowd – 管理CPU频率的客户端程序。主要用于支持CPU speed stepping技术的笔记本。通常如果你在配置一台笔记本，你应该开启此服务。如果是台式机，那此服务应该没有用。<br>41. ppp and ppp-dns - 对我没用，我不使用拨号。<br>42. readahead - <strong>感谢 mr_pouit!</strong> readahead似乎是一种“预加载程序”。在开机时它将一些库文件加载到内存，以便一些程序启动的更快。但是它给启动时间增加了3-4秒。所以，你可 以留着它…或者不。<strong>更新</strong>，经我测试我觉得加载程序没有什么不同。所以我决定关闭此服务。如果你有打开此服务的理由，那就打开它 。<br>43. reboot - 别更改它。<br>44. resolvconf – 按照你的网络状态自动配置DSN信息，我将它打开着。<br>45. rmnologin – 如果发现nologin，那么去除它。此情况不会在笔记本上面发生，所以我摆脱它。<br>46. rsync – rsync守护程序. 我不打算在我的笔记本上使用rsync协议，所以我将其关闭<br>47. sendsigs – 在重启和关机期间发送信号。顺其自然。<br>48. single – 激活单用户模式。顺其自然。<br>49. ssh – ssh守护程序。 我需要ssh，所以我将此服务打开。<br>50. stop-bootlogd – 从2，3，4，5运行等级停止bootlogd。顺其自然。<br>51. sudo – 检查sudo 状态。我没在一台笔记本或者台式机客户端上看到任何使用sudo的好处，因此我关闭了它。<br>52. sysklogd - 顺其自然。<br>53. udev and udev-mab – 用户空间dev文件系统（userspace dev filesystem）。好东西，我将它们打开。<br>54. umountfs - 顺其自然。<br>55. urandom – 随机数生成器。可能没什么用处，但是我留着它。<br>56. usplash - 嗯，如果你想看到漂亮的开机画面，顺其自然。 无论如何沃关闭此服务了。如果你想关闭它，你也可以编辑/boot/grub/menu.lst文件注释掉splashimage行，除去开机splash核心选项。<br>57. vbesave – 显卡BIOS配置工具。它能保存你显卡的状态。我将其开启。<br>58. xorg-common – 设置X服务ICE socket。我将其从在S运行等级开启移动到2，3，4，5，运行等级。如果我引导到单用户模式，那我不需要此服务。在最初引导期间这种方法将不占用时间。<br>59. adjtimex – 这也是调整核心hw时钟的工具。通常你不会在开机列表中看见它。在非常少有的情况如果你确实在开机进程中看见它了，事出有因，因此最好顺其自然。在我的情况里，它是关闭的。<br>60. dirmngr – 证书列表管理工具（certification lists management tool）。和gnupg一起工作。你必须看看你是否需要它。在我的情况里，我是关掉它的。<br>61. hwtools – 一个优化irqs的工具。不确定打开它的好处。在我的情况里，我是关掉它的。<br>62. libpam-devperm - 在系统崩溃之后用于修理设备文件许可的一个守护程序。听起来不错，因此我打开它了。<br>63. lm-sensors – 如果你的主板内建一些传感芯片，通过用户空间（userspace）查看hw状态可能是有帮助的。我运行了它，但是它提示“没有发现传感器”，因此我关闭 了此服务。64. mdadm-raid – 作用和mdadm服务相同。用来管RAID设备。如果你没有此类设备，那尽管关掉它好了。<br>65. screen-cleanup – 一个用来清除开机屏幕的脚本。嗯，是否关闭它有你决定。在我的情况里，我打开它了。<br>66. xinetd – 用来管理其他守护进程的一个inetd超级守护程序。在我的系统里，xinetd管理chargen, daytime, echo和time (在 /etc/xinetd.d 目录找到的)，我不关系任何一个，因此我关掉了此服务。如果在xinetd下你确实有一些重要的服务，那打开它。<br>III.修改 /etc/inittab 文件<br>代码:<br>vi /etc/inittab<br>然后注释掉tty4,tty5, 和tty6。只留下tty1, tty2,和 tty3.。对于笔记本或台式机用户3个终端应该足够了。保存文件。<br>IV. Ok，好，我们可以重启计算机并看看它变的如何了。从我测试来看：在我停止大量服务之前，引导到终端整个过程大约花费了85到90秒。 (在那时，我也打开了我不需要的samba和nfs服务。 我也将它们关闭了)。之后，整个过程花费了50秒。我有一台 P4M 1.8G CPU的笔记本。一些高档台式机或者笔记本应该花费更少时间。<br><strong>更新</strong>: 加速/打扫系统重启或关机进程<br>1. 通过以下代码运行sysv-rc-conf:<br>代码:<br>sudo sysv-rc-conf<br>2. OK，睁开你的眼睛并仔细寻找那些在所有运行等级都没有“X”的服务。(所有运行等级包括 1,2,3,4,5,6, 和S), 一个一个的把它们写下来。在这里千万别出错。再你搞定以后再来一遍。<br>3. 退出sysv-rc-conf。<br>4.<br>代码:<br>cd /etc/rc0.d</p>\n<ul>\n<li>此目录关于系统关机进程。<br>5. OK, 现在开始<br>代码:<br>ls K*<br>将列出所有以大写K开头的链接。比较你的列表，将你列表中每个包含服务名的文件名改为小写k开头。例如，在你列表中你有一个ppp服务(意思是说ppp将在所有运行等级关闭)，然后你可以这样做:<br>代码:<br>sudo mv K00ppp k00ppp<br>你只要将大写K改成小写k就好了，保留其余的。将此举应用到你列表中存在的所有服务 。<br>6.<br>代码:<br>cd ../rc6.d</li>\n<li>此目录关于系统重启进程。<br>7. ok,你应该也看到了相似的东西了吧，因此在此做和rc0.d中同样的修改。<br>8. 现在，你的重启和关机进程被清理了，你的重启和关机过程将变的更快。<br>关于什么是你要做的已经相当明了了。在每个运行等级/etc/rc和/etc/rcS脚本通过扫描每个链接是否以大写S开头来决定开启与否，通过扫描每个 链接是否它是以大写K开头来决定停止与否。因此对于重启和关机运行等级，我们更关心的是大写K开头的链接，因为那写服务不运行在所有运行等级，不必停止他 们。它们更本没有运行。如果有一天你想重新开启其中的一些服务， 只要将小写的k改为大写的K即可。就这些了。<br>无论如何，它不适用服务器，但是我确实在我的一台拥有2.7G P4 ,1.5G内存的服务器上测试过。它将整个启动过程缩短为31秒。我用我的手表计算的。而且，其中还包括了开启的ftp服务器和nft服务器。</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>添加一个服务<br>*<br>sudo update-rc.d 服务名 defaults 99</p>\n<p>删除一个服务<br>*<br>sudo update-rc.d 服务名 remove</p>\n<p>临时重启一个服务<br>*</p>\n<p>/etc/init.d/服务名 restart</p>\n<p>临时关闭一个服务</p>\n<p>*</p>\n<p>/etc/init.d/服务名 stop</p>\n<p>临时启动一个服务</p>\n<p>*</p>\n<p>/etc/init.d/服务名 start</p>\n<p>上面这种说法我试过了,是可以使用的,</p>\n<p>增加我这样子做的</p>\n<p>sudo update-rc.d 服务名 defaults</p>\n<p>后面的顺序让它自动得到.</p>\n<p>我试过在init.d中另外加了一个shellscript,直接加起服务里是可以的,但是如果要删除的时候需要用</p>\n<p>sudo update-rc.d -f 服务名 remove</p>\n<p>强制删除才可以.</p>\n<p>另外网上还流行下面这种做法.</p>\n<p>用来设置ubuntu启动选项的工具","more":"</p>\n<p>rcconf：</p>\n<p>sudo apt-get rcconf</p>\n<p>sudo apt-get install rcconf</p>\n<p>root 下运行: rcconf</p>\n<p>功能更全的：sysv-rc-conf</p>\n<p>sudo apt-get update</p>\n<p>sudo apt-get install sysv-rc-conf</p>\n<p>运行：sudo sysv-rc-conf</p>\n<p>关于设置ubuntu sysv-rc-conf的文章：</p>\n<p><a href=\"http://ubuntuforums.org/showthread.php?t=89491\" target=\"_blank\" rel=\"noopener\">http://ubuntuforums.org/showthread.php?t=89491</a></p>\n<p>也可以直接修改</p>\n<p>直接改/etc/rc0.d ~ /etc/rc6.d和/etc/rcS.d下的东西，S开头的表示启动，K开头的表示不启动，</p>\n<p>例如：想关闭vsftpd的开机自动启动，只需sudo mv /etc/rc2.d/S20vsftpd /etc/rc2.d/K20vsftpd就可以了。</p>\n<p>rccconf和sysv-rc-conf我在ubuntu 6.01中,都无法直接安装,可能要下载吧,另外,那些rc*.d文件中,启动文件,一定要在init.d中存在才可以,里面的数字可能是启动的顺序吧,我看了下,最大是99,这个方法,自己没有试过,</p>\n<p>Ubuntu开机服务详解<br>From: <a href=\"http://www.ubuntuforums.org/showthread.php?t=89491\" target=\"_blank\" rel=\"noopener\">http://www.ubuntuforums.org/showthread.php?t=89491</a><br>I. 安装一个工具 - sysv-rc-conf。 它是一款基于perl的开机进程调整工具。<br>代码:<br>sudo apt-get update<br>sudo apt-get install sysv-rc-conf<br>它提供一种配置开机进程和运行等级的简单方法， 但是如果你想要通过链接/解除链接文件来手工操作的话，这不是必需的… 这由你决定<br>II. Ok，一切就绪。现在让我们通过以下代码来运行它<br>代码:<br>sudo sysv-rc-conf<br>并一个一个的分析每种服务。 <strong>注意 </strong> 我有的一些服务或许你没有，完全可以。如果一些服务你有但是我没有， 你将需要独自研究或者在这里提问 … 但是此HowTo 涵盖它们中的大多数 …<br>在我们开始搞乱它们之前，我要在这里引入一些运行等级知识 ….全部开机进程执行顺序如下：<br>运行等级 S：开机进程中的第一个运行等级。/etc/init.d/rcS脚本将被调用到开启并且/etc/rcS.d目录下的所有进程将被执行。<br>运行等级 1：单用户模式。/etc/rc1.d目录下的所有进程将被执行。<br>运行等级 2，3，4，5：在debian系统里是多用户环境，可能不包含图形用户界面。同样的，在相应目录下的进程将被运行。<br><strong>注意</strong> 这和RedHat，SuSE， 以及其它基于RPM的系统不同。<br>运行等级 0：关闭计算机<br>运行等级 6：重起计算机<br>好，让我们回到sysv-rc-conf:<br>1. acpi-support - 你最好使其在S运行等级处于“X”状态。<br>2. acpid - acpi守护程序.这两个用于电源管理，对于笔记本和台式电脑很重要，所以让它们开启。<br>3. alsa - 如果你使用alsa声音子系统，是的，开启它。<br>4. alsa-utils -在我系统里，此服务取代了alsa，所以我关闭了alsa并在S运行等级将此服务开启。<strong>注意</strong>，我所说的“关闭”是指在所有运行等级里面去除所有“X”。如果在你系统里没有它，没问题。让我们继续。<br>5. anacron - 一个cron子系统，当时间到达时用于执行任何没有被执行的cron作业。当某种cron 作业时间准备好时，很可能你或许已经关闭了你的计算机。打个比方，updatedb被计划在每天2点执行，但是在那个时候，你的计算机是关闭的，然后如果 ananron服务如果是开启的话，它将设法抓起那个updatedb cron… 我将它关闭是因为我不经常关闭我的笔记本，但是否开启此服务完全取决于你。<br>6. apmd - 这是十分困惑我的一个服务。我已经开启了acpid服务，那同时开启apmd有啥好处呢？如果你的计算机不是那么老，甚至不能支持acpi，然后你可以设法关闭它。无论如何，我是关闭它的。<br>7. atd - 就像cron，一个作业调度程序。我把它关了<br>8. binfmt-support - 核心支持其他二进制的文件格式。我让它开着<br>9. bluez-utiles - 我把它关了因为我没有任何蓝牙设备<br>10. bootlogd - 开启它<br>11. cron – 开启它<br>12. cupsys – 管理打印机的子系统。我没有打印机所以我关闭它了，如果你有打印机，开启他。<br>13. dbus – 消息总线系统(message bus system)。非常重要，开启它。<br>14. dns-clean – 当使用拨号连接，主要用于清除dns信息。我不用拨号，所以我关闭了它。<br>15. evms – 企业卷管理系统（Enterprise Volumn Management system）. 我关闭了它。<br>16. fetchmail – 一个邮件接受守护进程，我关闭了它。<br>17. gdm – gnome桌面管理器。 无论如何我关闭它了，因为我将系统用终端引导。如果你想直接引导到图形用户界面，这取决于你。<br>18. gdomap – 事实上我也不知道为什么此服务必需开启。我没有在其他系统见过这个守护程序，所以我将其关闭并且我没觉得我失去了什么。开启它对笔记本或者台式机有任何好处吗？<br>19. gpm – 终端鼠标支持。如果你觉得你在终端使用鼠标更好，那么在运行等级 1 和2 开启它。那正是你所需要的。<br>20. halt - 别更改它。<br>21. hdparm – 调整硬盘的脚本。我在运行等级 2，3，4，5去除了它但是在S 运行等级添加了它。我觉得早点打开DMA，32bit I/O等等将对其余过程有益。我自己也将原来的脚本精简了一下。如果我知道我正做什么，我觉得做过多的检查没用。相应配置文件是 /etc/hdparm.conf。<br>22. hibernate – 如果你的系统支持休眠，把它打开，否则它对你没用。<br>23. hotkey-setup – 此守护进程为你的笔记本建立一些热键映射。支持的制造商包括： HP, Acer, ASUS, Sony, Dell, 和IBM。如果你有那些品牌的笔记本，你可以打开它，否则它或许对你没有任何好处。<br>24. hotplug and hotplug-net #激活热插拔系统是费时的。我将考虑关掉它们。我在的/etc/network/interfaces文件作了很多修改，并将其设置为自动运行，而不是在 热插拔进程期间映射我的无线网卡。所以我可以将它们关掉。我已经测试过了，甚至我将它们关闭，ubuntu仍旧可以检测到我的usb驱动器，我的数码相 机，等等。所以我认为关掉它们是很安全的<strong>注意</strong>如果在关闭热插拔服务以后发现你的声卡部工作了，你可以将服务打开，或者编辑 /etc/modules文件并添加声卡驱动模块。经测试，后者比较快。<br>25. hplip – HP打印机和图形子系统，我将其关闭了。<br>26. ifrename – 网络接口重命名（network interface rename）脚本。听上去很酷但是我把它关掉了。主要用于管理多网络接口名称。虽然我有无线网卡和以太网卡，两者被内核标识为eth0和ath0，所以此服务对我不是很有用。<br>27. ifupdown and ifupdown-clean – 打开它，它们是开机时网络及口激活脚本。<br>28. inetd or inetd.real – 查看文件/etc/inetd.conf 注释掉所有你不需要的服务。如果该文件不包含任何服务，那关闭它是很安全的。<br>29. klogd – 打开它。<br>30. linux-restricted-modules-common – 你应该去查看下是否你的系统装载有任何受限制的模块。既然我需要madwifi ath_pci 模块，所以我将其开启。受限制的模块可以从/lib/linux-restricted-modules查看到。如果你发现你没有使用任何受限制的模块， 那关掉这个服务没事。<br>31. lvm – 我没有使用逻辑卷所以我将此服务关闭。让它开启如果你 <em>确实</em> 有lvm（lvm是逻辑卷管理器在此不再扩充）.<br>32. makedev – 打开它。<br>33. mdamd – Raid管理工具。不使用Raid所以我将此服务关闭。<br>34. module-init-tools – 从/etc/modules加载扩展模块。你可以研究/etc/modules文件查看是否有一些你不需要的模块。通常我们将此服务开启。<br>35. networking – 在启动期间通过扫描/etc/network/interfaces文件增加网络接口和配置dns信息。让它开着。<br>36. ntpdate – 通过ubuntu时间服务器同步时间 。在开机的时候我不需要它，故我关掉了此服务。<br>37. nvidia-kernel – 我自己编译了nvidia驱动，所以此服务对我没用。如果你从受限制模块中使用nvidia驱动，那打开此服务。<br>38. pcmcia – 激活pcmica设备。我将此服务打开在S运行等级而不是分别在2，3，4，5运行等级打开此服务，因为我觉得起先让硬件设备准备更好。如果你在使用没有pcmica卡的台式机的话，请关闭此服务。<br>39. portmap – 管理像nis，nfs等等之类服务的守护程序。如果你的笔记本或台式机是纯粹的客户端，那么关闭此服务。<br>40. powernowd – 管理CPU频率的客户端程序。主要用于支持CPU speed stepping技术的笔记本。通常如果你在配置一台笔记本，你应该开启此服务。如果是台式机，那此服务应该没有用。<br>41. ppp and ppp-dns - 对我没用，我不使用拨号。<br>42. readahead - <strong>感谢 mr_pouit!</strong> readahead似乎是一种“预加载程序”。在开机时它将一些库文件加载到内存，以便一些程序启动的更快。但是它给启动时间增加了3-4秒。所以，你可 以留着它…或者不。<strong>更新</strong>，经我测试我觉得加载程序没有什么不同。所以我决定关闭此服务。如果你有打开此服务的理由，那就打开它 。<br>43. reboot - 别更改它。<br>44. resolvconf – 按照你的网络状态自动配置DSN信息，我将它打开着。<br>45. rmnologin – 如果发现nologin，那么去除它。此情况不会在笔记本上面发生，所以我摆脱它。<br>46. rsync – rsync守护程序. 我不打算在我的笔记本上使用rsync协议，所以我将其关闭<br>47. sendsigs – 在重启和关机期间发送信号。顺其自然。<br>48. single – 激活单用户模式。顺其自然。<br>49. ssh – ssh守护程序。 我需要ssh，所以我将此服务打开。<br>50. stop-bootlogd – 从2，3，4，5运行等级停止bootlogd。顺其自然。<br>51. sudo – 检查sudo 状态。我没在一台笔记本或者台式机客户端上看到任何使用sudo的好处，因此我关闭了它。<br>52. sysklogd - 顺其自然。<br>53. udev and udev-mab – 用户空间dev文件系统（userspace dev filesystem）。好东西，我将它们打开。<br>54. umountfs - 顺其自然。<br>55. urandom – 随机数生成器。可能没什么用处，但是我留着它。<br>56. usplash - 嗯，如果你想看到漂亮的开机画面，顺其自然。 无论如何沃关闭此服务了。如果你想关闭它，你也可以编辑/boot/grub/menu.lst文件注释掉splashimage行，除去开机splash核心选项。<br>57. vbesave – 显卡BIOS配置工具。它能保存你显卡的状态。我将其开启。<br>58. xorg-common – 设置X服务ICE socket。我将其从在S运行等级开启移动到2，3，4，5，运行等级。如果我引导到单用户模式，那我不需要此服务。在最初引导期间这种方法将不占用时间。<br>59. adjtimex – 这也是调整核心hw时钟的工具。通常你不会在开机列表中看见它。在非常少有的情况如果你确实在开机进程中看见它了，事出有因，因此最好顺其自然。在我的情况里，它是关闭的。<br>60. dirmngr – 证书列表管理工具（certification lists management tool）。和gnupg一起工作。你必须看看你是否需要它。在我的情况里，我是关掉它的。<br>61. hwtools – 一个优化irqs的工具。不确定打开它的好处。在我的情况里，我是关掉它的。<br>62. libpam-devperm - 在系统崩溃之后用于修理设备文件许可的一个守护程序。听起来不错，因此我打开它了。<br>63. lm-sensors – 如果你的主板内建一些传感芯片，通过用户空间（userspace）查看hw状态可能是有帮助的。我运行了它，但是它提示“没有发现传感器”，因此我关闭 了此服务。64. mdadm-raid – 作用和mdadm服务相同。用来管RAID设备。如果你没有此类设备，那尽管关掉它好了。<br>65. screen-cleanup – 一个用来清除开机屏幕的脚本。嗯，是否关闭它有你决定。在我的情况里，我打开它了。<br>66. xinetd – 用来管理其他守护进程的一个inetd超级守护程序。在我的系统里，xinetd管理chargen, daytime, echo和time (在 /etc/xinetd.d 目录找到的)，我不关系任何一个，因此我关掉了此服务。如果在xinetd下你确实有一些重要的服务，那打开它。<br>III.修改 /etc/inittab 文件<br>代码:<br>vi /etc/inittab<br>然后注释掉tty4,tty5, 和tty6。只留下tty1, tty2,和 tty3.。对于笔记本或台式机用户3个终端应该足够了。保存文件。<br>IV. Ok，好，我们可以重启计算机并看看它变的如何了。从我测试来看：在我停止大量服务之前，引导到终端整个过程大约花费了85到90秒。 (在那时，我也打开了我不需要的samba和nfs服务。 我也将它们关闭了)。之后，整个过程花费了50秒。我有一台 P4M 1.8G CPU的笔记本。一些高档台式机或者笔记本应该花费更少时间。<br><strong>更新</strong>: 加速/打扫系统重启或关机进程<br>1. 通过以下代码运行sysv-rc-conf:<br>代码:<br>sudo sysv-rc-conf<br>2. OK，睁开你的眼睛并仔细寻找那些在所有运行等级都没有“X”的服务。(所有运行等级包括 1,2,3,4,5,6, 和S), 一个一个的把它们写下来。在这里千万别出错。再你搞定以后再来一遍。<br>3. 退出sysv-rc-conf。<br>4.<br>代码:<br>cd /etc/rc0.d</p>\n<ul>\n<li>此目录关于系统关机进程。<br>5. OK, 现在开始<br>代码:<br>ls K*<br>将列出所有以大写K开头的链接。比较你的列表，将你列表中每个包含服务名的文件名改为小写k开头。例如，在你列表中你有一个ppp服务(意思是说ppp将在所有运行等级关闭)，然后你可以这样做:<br>代码:<br>sudo mv K00ppp k00ppp<br>你只要将大写K改成小写k就好了，保留其余的。将此举应用到你列表中存在的所有服务 。<br>6.<br>代码:<br>cd ../rc6.d</li>\n<li>此目录关于系统重启进程。<br>7. ok,你应该也看到了相似的东西了吧，因此在此做和rc0.d中同样的修改。<br>8. 现在，你的重启和关机进程被清理了，你的重启和关机过程将变的更快。<br>关于什么是你要做的已经相当明了了。在每个运行等级/etc/rc和/etc/rcS脚本通过扫描每个链接是否以大写S开头来决定开启与否，通过扫描每个 链接是否它是以大写K开头来决定停止与否。因此对于重启和关机运行等级，我们更关心的是大写K开头的链接，因为那写服务不运行在所有运行等级，不必停止他 们。它们更本没有运行。如果有一天你想重新开启其中的一些服务， 只要将小写的k改为大写的K即可。就这些了。<br>无论如何，它不适用服务器，但是我确实在我的一台拥有2.7G P4 ,1.5G内存的服务器上测试过。它将整个启动过程缩短为31秒。我用我的手表计算的。而且，其中还包括了开启的ftp服务器和nft服务器。</li>\n</ul>"},{"title":"Ubuntu 无线密码破解利器aircrack-ng","id":"511","date":"2012-01-08T04:12:49.000Z","_content":"\n想必搞过破解的朋友们都会知道bt3 bt4等linux下的无线破解工具吧，在ubuntu系统下同样有着一款破解功能强大的工具，那就是aircrack-ng。放这篇文章出来只是做技术上的交流，奶牛可不希望谁用这个做坏事儿哦~~~嘿嘿，破解开始咯：\n\n测试平台 Y450 T6600 2.1G ubuntu 10.04 成功\n\n1.下载安装aircrack-ng，奶牛直接从源中安装的。\nsudo apt-get install aircrack-ng\n\n2.启动无线，这里奶牛需要说明一下，很多朋友的无线可能在windows系统中是禁用或者是系统自带的电源管理系统中未开启无线的，这种情况下需要先在win状态下开启之后才能在ubuntu中开启无线。开启完成后进入ubuntu ，开一个终端，ifconfig -a看看wlan是否开启，开启正常可进行下一步。\n\n3.准备工作完成，开始破解。开启终端①，\nsudo airmon-ng start wlan0\n\nsudo airodump-ng mon0<!--more-->\n\n这时会看到无线的地址出现在屏幕上，这里有显示它们的mac地址以及所在频道。ok，ctrl+c退出，在这里我们选择类型为wep的无线为破解对象。我们需要记录它所在的频道以及mac地址。\n\n4.开启终端②\nsudo airodump-ng --channel 频道 --bssid 目标主机mac地址 -w wep mon0\n\n这里的wep为默认的存包文件的名字，可以更改。\n\n5.开启终端③\nsudo aireplay-ng -1 0 -a 目标mac -h 本机MAC地址 mon0\n\n（本机的mac可以开启一个新的终端用ifconfig -a来查询）\n\n这时会有成功字样显示，如果没有显示可能就是目标不支持或者系统部稳定，需要更换目标了。显示成功后进行下步。\n\n6.继续输入\nsudo aireplay-ng -2 -F -p 0841 -c ff:ff:ff:ff:ff:ff -b 目标MAC地址 -h 本机MAC地址 mon0\n\n此时终端②中的数据会增长很快，当数据到达5000的时候就可以破解了。\n\n7.开启终端 ④\nsudo aircrack-ng wep*.cap\n\n这时就开始破解了，如果你进行过多组，可能会有多组结果，你可以用数字123进行选择，如果不出意外你已经破解出来这组无线的密码了。\n\n8.最后 结束监控过程\nsudo airmon-ng stop mon0\n\n( sudo airomon-ng check可以查看你开启了多少监控，如果运行多组的时候可以查看后选择关闭)。\n\n本文链接地址: Ubuntu 无线密码破解利器aircrack-ng","source":"_posts/ubuntu-e6-97-a0-e7-ba-bf-e5-af-86-e7-a0-81-e7-a0-b4-e8-a7-a3-e5-88-a9-e5-99-a8aircrack-ng.md","raw":"---\ntitle: Ubuntu 无线密码破解利器aircrack-ng\ntags:\n  - Linux\nid: 511\ncategories:\n  - Linux\ndate: 2012-01-08 12:12:49\n---\n\n想必搞过破解的朋友们都会知道bt3 bt4等linux下的无线破解工具吧，在ubuntu系统下同样有着一款破解功能强大的工具，那就是aircrack-ng。放这篇文章出来只是做技术上的交流，奶牛可不希望谁用这个做坏事儿哦~~~嘿嘿，破解开始咯：\n\n测试平台 Y450 T6600 2.1G ubuntu 10.04 成功\n\n1.下载安装aircrack-ng，奶牛直接从源中安装的。\nsudo apt-get install aircrack-ng\n\n2.启动无线，这里奶牛需要说明一下，很多朋友的无线可能在windows系统中是禁用或者是系统自带的电源管理系统中未开启无线的，这种情况下需要先在win状态下开启之后才能在ubuntu中开启无线。开启完成后进入ubuntu ，开一个终端，ifconfig -a看看wlan是否开启，开启正常可进行下一步。\n\n3.准备工作完成，开始破解。开启终端①，\nsudo airmon-ng start wlan0\n\nsudo airodump-ng mon0<!--more-->\n\n这时会看到无线的地址出现在屏幕上，这里有显示它们的mac地址以及所在频道。ok，ctrl+c退出，在这里我们选择类型为wep的无线为破解对象。我们需要记录它所在的频道以及mac地址。\n\n4.开启终端②\nsudo airodump-ng --channel 频道 --bssid 目标主机mac地址 -w wep mon0\n\n这里的wep为默认的存包文件的名字，可以更改。\n\n5.开启终端③\nsudo aireplay-ng -1 0 -a 目标mac -h 本机MAC地址 mon0\n\n（本机的mac可以开启一个新的终端用ifconfig -a来查询）\n\n这时会有成功字样显示，如果没有显示可能就是目标不支持或者系统部稳定，需要更换目标了。显示成功后进行下步。\n\n6.继续输入\nsudo aireplay-ng -2 -F -p 0841 -c ff:ff:ff:ff:ff:ff -b 目标MAC地址 -h 本机MAC地址 mon0\n\n此时终端②中的数据会增长很快，当数据到达5000的时候就可以破解了。\n\n7.开启终端 ④\nsudo aircrack-ng wep*.cap\n\n这时就开始破解了，如果你进行过多组，可能会有多组结果，你可以用数字123进行选择，如果不出意外你已经破解出来这组无线的密码了。\n\n8.最后 结束监控过程\nsudo airmon-ng stop mon0\n\n( sudo airomon-ng check可以查看你开启了多少监控，如果运行多组的时候可以查看后选择关闭)。\n\n本文链接地址: Ubuntu 无线密码破解利器aircrack-ng","slug":"ubuntu-e6-97-a0-e7-ba-bf-e5-af-86-e7-a0-81-e7-a0-b4-e8-a7-a3-e5-88-a9-e5-99-a8aircrack-ng","published":1,"updated":"2018-01-13T05:07:00.456Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjccw7xdx00bjaqcrv6dup522","content":"<p>想必搞过破解的朋友们都会知道bt3 bt4等linux下的无线破解工具吧，在ubuntu系统下同样有着一款破解功能强大的工具，那就是aircrack-ng。放这篇文章出来只是做技术上的交流，奶牛可不希望谁用这个做坏事儿哦~~~嘿嘿，破解开始咯：</p>\n<p>测试平台 Y450 T6600 2.1G ubuntu 10.04 成功</p>\n<p>1.下载安装aircrack-ng，奶牛直接从源中安装的。<br>sudo apt-get install aircrack-ng</p>\n<p>2.启动无线，这里奶牛需要说明一下，很多朋友的无线可能在windows系统中是禁用或者是系统自带的电源管理系统中未开启无线的，这种情况下需要先在win状态下开启之后才能在ubuntu中开启无线。开启完成后进入ubuntu ，开一个终端，ifconfig -a看看wlan是否开启，开启正常可进行下一步。</p>\n<p>3.准备工作完成，开始破解。开启终端①，<br>sudo airmon-ng start wlan0</p>\n<p>sudo airodump-ng mon0<a id=\"more\"></a></p>\n<p>这时会看到无线的地址出现在屏幕上，这里有显示它们的mac地址以及所在频道。ok，ctrl+c退出，在这里我们选择类型为wep的无线为破解对象。我们需要记录它所在的频道以及mac地址。</p>\n<p>4.开启终端②<br>sudo airodump-ng –channel 频道 –bssid 目标主机mac地址 -w wep mon0</p>\n<p>这里的wep为默认的存包文件的名字，可以更改。</p>\n<p>5.开启终端③<br>sudo aireplay-ng -1 0 -a 目标mac -h 本机MAC地址 mon0</p>\n<p>（本机的mac可以开启一个新的终端用ifconfig -a来查询）</p>\n<p>这时会有成功字样显示，如果没有显示可能就是目标不支持或者系统部稳定，需要更换目标了。显示成功后进行下步。</p>\n<p>6.继续输入<br>sudo aireplay-ng -2 -F -p 0841 -c ff:ff:ff:ff:ff:ff -b 目标MAC地址 -h 本机MAC地址 mon0</p>\n<p>此时终端②中的数据会增长很快，当数据到达5000的时候就可以破解了。</p>\n<p>7.开启终端 ④<br>sudo aircrack-ng wep*.cap</p>\n<p>这时就开始破解了，如果你进行过多组，可能会有多组结果，你可以用数字123进行选择，如果不出意外你已经破解出来这组无线的密码了。</p>\n<p>8.最后 结束监控过程<br>sudo airmon-ng stop mon0</p>\n<p>( sudo airomon-ng check可以查看你开启了多少监控，如果运行多组的时候可以查看后选择关闭)。</p>\n<p>本文链接地址: Ubuntu 无线密码破解利器aircrack-ng</p>\n","site":{"data":{}},"excerpt":"<p>想必搞过破解的朋友们都会知道bt3 bt4等linux下的无线破解工具吧，在ubuntu系统下同样有着一款破解功能强大的工具，那就是aircrack-ng。放这篇文章出来只是做技术上的交流，奶牛可不希望谁用这个做坏事儿哦~~~嘿嘿，破解开始咯：</p>\n<p>测试平台 Y450 T6600 2.1G ubuntu 10.04 成功</p>\n<p>1.下载安装aircrack-ng，奶牛直接从源中安装的。<br>sudo apt-get install aircrack-ng</p>\n<p>2.启动无线，这里奶牛需要说明一下，很多朋友的无线可能在windows系统中是禁用或者是系统自带的电源管理系统中未开启无线的，这种情况下需要先在win状态下开启之后才能在ubuntu中开启无线。开启完成后进入ubuntu ，开一个终端，ifconfig -a看看wlan是否开启，开启正常可进行下一步。</p>\n<p>3.准备工作完成，开始破解。开启终端①，<br>sudo airmon-ng start wlan0</p>\n<p>sudo airodump-ng mon0","more":"</p>\n<p>这时会看到无线的地址出现在屏幕上，这里有显示它们的mac地址以及所在频道。ok，ctrl+c退出，在这里我们选择类型为wep的无线为破解对象。我们需要记录它所在的频道以及mac地址。</p>\n<p>4.开启终端②<br>sudo airodump-ng –channel 频道 –bssid 目标主机mac地址 -w wep mon0</p>\n<p>这里的wep为默认的存包文件的名字，可以更改。</p>\n<p>5.开启终端③<br>sudo aireplay-ng -1 0 -a 目标mac -h 本机MAC地址 mon0</p>\n<p>（本机的mac可以开启一个新的终端用ifconfig -a来查询）</p>\n<p>这时会有成功字样显示，如果没有显示可能就是目标不支持或者系统部稳定，需要更换目标了。显示成功后进行下步。</p>\n<p>6.继续输入<br>sudo aireplay-ng -2 -F -p 0841 -c ff:ff:ff:ff:ff:ff -b 目标MAC地址 -h 本机MAC地址 mon0</p>\n<p>此时终端②中的数据会增长很快，当数据到达5000的时候就可以破解了。</p>\n<p>7.开启终端 ④<br>sudo aircrack-ng wep*.cap</p>\n<p>这时就开始破解了，如果你进行过多组，可能会有多组结果，你可以用数字123进行选择，如果不出意外你已经破解出来这组无线的密码了。</p>\n<p>8.最后 结束监控过程<br>sudo airmon-ng stop mon0</p>\n<p>( sudo airomon-ng check可以查看你开启了多少监控，如果运行多组的时候可以查看后选择关闭)。</p>\n<p>本文链接地址: Ubuntu 无线密码破解利器aircrack-ng</p>"},{"title":"Linux 安装 xampp及常见问题总结","id":"502","date":"2012-01-06T12:29:29.000Z","_content":"\n安装完要做的事情\n`ln -sf /opt/lampp/xampp /usr/bin\nln -sf /opt/lampp/bin/mysql /usr/bin\nln -sf /opt/lampp/bin/php /usr/bin\nxampp security `\n\n常用命令\n`xampp start\nxampp stop\nxampp restart\nxampp startapache\nxampp stopapache\nxampp startmysql\nxampp stopmysql\nxampp startftp\nxampp stopftp`<!--more-->\n\nXAMPP 重要的文件和目录\n`XAMPP 命令库\n/opt/lampp/bin/`\n\nApache 文档根目录\n/opt/lampp/htdocs/\n\nApache 配制文件\n/opt/lampp/etc/httpd.conf\n\nMySQL 配制文件\n/opt/lampp/etc/my.cnf\n\nPHP 配制文件\n/opt/lampp/etc/php.ini\n\nProFTPD 配制文件\n/opt/lampp/etc/proftpd.conf\n\nphpMyAdmin 配制文件\n/opt/lampp/phpmyadmin/config.inc.php\n\n随系统自动启动\nln -s /opt/lampp/xampp /etc/rc.d/rc3.d/S99lampp\nln -s /opt/lampp/xampp /etc/rc.d/rc4.d/S99lampp\nln -s /opt/lampp/xampp /etc/rc.d/rc5.d/S99lampp\n\n取消随系统自动运行\nln -s /opt/lampp/lampp K01lampp\n\n问题总结：\n\n如果想要普通用户能写htdocs目录，清修改目录权限。\nchmod －R a＋rw ／opt／lampp／htdocs\n\nXAMPP: Couldn’t start MySQL!解决方案 (启动不了mysql服务）\nchmod 777 -R /opt/lampp/var\n\n卸载 XAMPP，只需输入如下命令：sudo rm -rf /opt/lampp\n\n使用配置文件中定义的控制用户连接失败 解决方法\n1、在安装phpMyAdmin的根目录下找到config.inc.php配置文件（也有可能是config.sample.inc.php，先将其重命名为config.inc.php）并用记事本打开。\n\n2、在打开的配置文件里找到$cfg['Servers'][$i]['controlpass'] = ‘*******’;”这一段其中*******就是你的密码，默认为空，将它修改成你在phpMyAdmin上修改后的密码。\n\n3、如果你的用户名也修改过的话就找到$cfg['Servers'][$i]['controluser'] = ‘root’;这一段，其中root就是你的用户名，将它修改成你修改后的用户名。\n\n更改htdocs目录\n然后sudo cp -R /opt/lampp/htdocs /home/htdocs把整个htdocs目录复制一份放在/home下,\n然后sudo chmod -R 777 /home/htdocs\n最后sudo vim /opt/lampp/etc/httpd.conf修改Apache 配制文件，查找里面的/opt/lampp/htdocs全部替换改为我们刚才的htdocs目录地址/home/htdocs保存退出就可。","source":"_posts/ubuntu64-e4-bd-8d-e5-ae-89-e8-a3-85xampp-e5-8f-8a-e5-b8-b8-e8-a7-81-e9-97-ae-e9-a2-98.md","raw":"---\ntitle: Linux 安装 xampp及常见问题总结\ntags:\n  - apache\n  - Linux\n  - MySQL\n  - php\nid: 502\ncategories:\n  - Linux\ndate: 2012-01-06 20:29:29\n---\n\n安装完要做的事情\n`ln -sf /opt/lampp/xampp /usr/bin\nln -sf /opt/lampp/bin/mysql /usr/bin\nln -sf /opt/lampp/bin/php /usr/bin\nxampp security `\n\n常用命令\n`xampp start\nxampp stop\nxampp restart\nxampp startapache\nxampp stopapache\nxampp startmysql\nxampp stopmysql\nxampp startftp\nxampp stopftp`<!--more-->\n\nXAMPP 重要的文件和目录\n`XAMPP 命令库\n/opt/lampp/bin/`\n\nApache 文档根目录\n/opt/lampp/htdocs/\n\nApache 配制文件\n/opt/lampp/etc/httpd.conf\n\nMySQL 配制文件\n/opt/lampp/etc/my.cnf\n\nPHP 配制文件\n/opt/lampp/etc/php.ini\n\nProFTPD 配制文件\n/opt/lampp/etc/proftpd.conf\n\nphpMyAdmin 配制文件\n/opt/lampp/phpmyadmin/config.inc.php\n\n随系统自动启动\nln -s /opt/lampp/xampp /etc/rc.d/rc3.d/S99lampp\nln -s /opt/lampp/xampp /etc/rc.d/rc4.d/S99lampp\nln -s /opt/lampp/xampp /etc/rc.d/rc5.d/S99lampp\n\n取消随系统自动运行\nln -s /opt/lampp/lampp K01lampp\n\n问题总结：\n\n如果想要普通用户能写htdocs目录，清修改目录权限。\nchmod －R a＋rw ／opt／lampp／htdocs\n\nXAMPP: Couldn’t start MySQL!解决方案 (启动不了mysql服务）\nchmod 777 -R /opt/lampp/var\n\n卸载 XAMPP，只需输入如下命令：sudo rm -rf /opt/lampp\n\n使用配置文件中定义的控制用户连接失败 解决方法\n1、在安装phpMyAdmin的根目录下找到config.inc.php配置文件（也有可能是config.sample.inc.php，先将其重命名为config.inc.php）并用记事本打开。\n\n2、在打开的配置文件里找到$cfg['Servers'][$i]['controlpass'] = ‘*******’;”这一段其中*******就是你的密码，默认为空，将它修改成你在phpMyAdmin上修改后的密码。\n\n3、如果你的用户名也修改过的话就找到$cfg['Servers'][$i]['controluser'] = ‘root’;这一段，其中root就是你的用户名，将它修改成你修改后的用户名。\n\n更改htdocs目录\n然后sudo cp -R /opt/lampp/htdocs /home/htdocs把整个htdocs目录复制一份放在/home下,\n然后sudo chmod -R 777 /home/htdocs\n最后sudo vim /opt/lampp/etc/httpd.conf修改Apache 配制文件，查找里面的/opt/lampp/htdocs全部替换改为我们刚才的htdocs目录地址/home/htdocs保存退出就可。","slug":"ubuntu64-e4-bd-8d-e5-ae-89-e8-a3-85xampp-e5-8f-8a-e5-b8-b8-e8-a7-81-e9-97-ae-e9-a2-98","published":1,"updated":"2018-01-13T05:07:00.461Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjccw7xdy00bmaqcr1lia3omm","content":"<p>安装完要做的事情<br><code>ln -sf /opt/lampp/xampp /usr/bin\nln -sf /opt/lampp/bin/mysql /usr/bin\nln -sf /opt/lampp/bin/php /usr/bin\nxampp security</code></p>\n<p>常用命令<br><code>xampp start\nxampp stop\nxampp restart\nxampp startapache\nxampp stopapache\nxampp startmysql\nxampp stopmysql\nxampp startftp\nxampp stopftp</code><a id=\"more\"></a></p>\n<p>XAMPP 重要的文件和目录<br><code>XAMPP 命令库\n/opt/lampp/bin/</code></p>\n<p>Apache 文档根目录<br>/opt/lampp/htdocs/</p>\n<p>Apache 配制文件<br>/opt/lampp/etc/httpd.conf</p>\n<p>MySQL 配制文件<br>/opt/lampp/etc/my.cnf</p>\n<p>PHP 配制文件<br>/opt/lampp/etc/php.ini</p>\n<p>ProFTPD 配制文件<br>/opt/lampp/etc/proftpd.conf</p>\n<p>phpMyAdmin 配制文件<br>/opt/lampp/phpmyadmin/config.inc.php</p>\n<p>随系统自动启动<br>ln -s /opt/lampp/xampp /etc/rc.d/rc3.d/S99lampp<br>ln -s /opt/lampp/xampp /etc/rc.d/rc4.d/S99lampp<br>ln -s /opt/lampp/xampp /etc/rc.d/rc5.d/S99lampp</p>\n<p>取消随系统自动运行<br>ln -s /opt/lampp/lampp K01lampp</p>\n<p>问题总结：</p>\n<p>如果想要普通用户能写htdocs目录，清修改目录权限。<br>chmod －R a＋rw ／opt／lampp／htdocs</p>\n<p>XAMPP: Couldn’t start MySQL!解决方案 (启动不了mysql服务）<br>chmod 777 -R /opt/lampp/var</p>\n<p>卸载 XAMPP，只需输入如下命令：sudo rm -rf /opt/lampp</p>\n<p>使用配置文件中定义的控制用户连接失败 解决方法<br>1、在安装phpMyAdmin的根目录下找到config.inc.php配置文件（也有可能是config.sample.inc.php，先将其重命名为config.inc.php）并用记事本打开。</p>\n<p>2、在打开的配置文件里找到$cfg[‘Servers’][$i][‘controlpass’] = ‘<strong><em>*</em></strong>’;”这一段其中<strong><em>*</em></strong>就是你的密码，默认为空，将它修改成你在phpMyAdmin上修改后的密码。</p>\n<p>3、如果你的用户名也修改过的话就找到$cfg[‘Servers’][$i][‘controluser’] = ‘root’;这一段，其中root就是你的用户名，将它修改成你修改后的用户名。</p>\n<p>更改htdocs目录<br>然后sudo cp -R /opt/lampp/htdocs /home/htdocs把整个htdocs目录复制一份放在/home下,<br>然后sudo chmod -R 777 /home/htdocs<br>最后sudo vim /opt/lampp/etc/httpd.conf修改Apache 配制文件，查找里面的/opt/lampp/htdocs全部替换改为我们刚才的htdocs目录地址/home/htdocs保存退出就可。</p>\n","site":{"data":{}},"excerpt":"<p>安装完要做的事情<br><code>ln -sf /opt/lampp/xampp /usr/bin\nln -sf /opt/lampp/bin/mysql /usr/bin\nln -sf /opt/lampp/bin/php /usr/bin\nxampp security</code></p>\n<p>常用命令<br><code>xampp start\nxampp stop\nxampp restart\nxampp startapache\nxampp stopapache\nxampp startmysql\nxampp stopmysql\nxampp startftp\nxampp stopftp</code>","more":"</p>\n<p>XAMPP 重要的文件和目录<br><code>XAMPP 命令库\n/opt/lampp/bin/</code></p>\n<p>Apache 文档根目录<br>/opt/lampp/htdocs/</p>\n<p>Apache 配制文件<br>/opt/lampp/etc/httpd.conf</p>\n<p>MySQL 配制文件<br>/opt/lampp/etc/my.cnf</p>\n<p>PHP 配制文件<br>/opt/lampp/etc/php.ini</p>\n<p>ProFTPD 配制文件<br>/opt/lampp/etc/proftpd.conf</p>\n<p>phpMyAdmin 配制文件<br>/opt/lampp/phpmyadmin/config.inc.php</p>\n<p>随系统自动启动<br>ln -s /opt/lampp/xampp /etc/rc.d/rc3.d/S99lampp<br>ln -s /opt/lampp/xampp /etc/rc.d/rc4.d/S99lampp<br>ln -s /opt/lampp/xampp /etc/rc.d/rc5.d/S99lampp</p>\n<p>取消随系统自动运行<br>ln -s /opt/lampp/lampp K01lampp</p>\n<p>问题总结：</p>\n<p>如果想要普通用户能写htdocs目录，清修改目录权限。<br>chmod －R a＋rw ／opt／lampp／htdocs</p>\n<p>XAMPP: Couldn’t start MySQL!解决方案 (启动不了mysql服务）<br>chmod 777 -R /opt/lampp/var</p>\n<p>卸载 XAMPP，只需输入如下命令：sudo rm -rf /opt/lampp</p>\n<p>使用配置文件中定义的控制用户连接失败 解决方法<br>1、在安装phpMyAdmin的根目录下找到config.inc.php配置文件（也有可能是config.sample.inc.php，先将其重命名为config.inc.php）并用记事本打开。</p>\n<p>2、在打开的配置文件里找到$cfg[‘Servers’][$i][‘controlpass’] = ‘<strong><em>*</em></strong>’;”这一段其中<strong><em>*</em></strong>就是你的密码，默认为空，将它修改成你在phpMyAdmin上修改后的密码。</p>\n<p>3、如果你的用户名也修改过的话就找到$cfg[‘Servers’][$i][‘controluser’] = ‘root’;这一段，其中root就是你的用户名，将它修改成你修改后的用户名。</p>\n<p>更改htdocs目录<br>然后sudo cp -R /opt/lampp/htdocs /home/htdocs把整个htdocs目录复制一份放在/home下,<br>然后sudo chmod -R 777 /home/htdocs<br>最后sudo vim /opt/lampp/etc/httpd.conf修改Apache 配制文件，查找里面的/opt/lampp/htdocs全部替换改为我们刚才的htdocs目录地址/home/htdocs保存退出就可。</p>"},{"title":"utf-8与utf-8(无BOM)的区别","id":"1045","date":"2012-07-26T22:56:49.000Z","_content":"\nBOM——Byte Order Mark，就是字节序标记\n\n在UCS 编码中有一个叫做\"ZERO WIDTH NO-BREAK SPACE\"的字符，它的编码是FEFF。而FFFE在UCS中是不存在的字符，所以不应该出现在实际传输中。UCS规范建议我们在传输字节流前，先传输字符\"ZERO WIDTH NO-BREAK SPACE\"。这样如果接收者收到FEFF，就表明这个字节流是Big-Endian的；如果收到FFFE，就表明这个字节流是Little-Endian的。因此字符\"ZERO WIDTH NO-BREAK SPACE\"又被称作BOM。\n\nUTF-8不需要BOM来表明字节顺序，但可以用BOM来表明编码方式。字符\"ZERO WIDTH NO-BREAK SPACE\"的UTF-8编码是EF BB BF。所以如果接收者收到以EF BB BF开头的字节流，就知道这是UTF-8编码了。\n\nUTF-8编码的文件中，BOM占三个字节。如果用记事本把一个文本文件另存为UTF-8编码方式的话，用UE打开这个文件，切换到十六进制编辑状态就可以看到开头的FFFE了。这是个标识UTF-8编码文件的好办法，软件通过BOM来识别这个文件是否是UTF-8编码，很多软件还要求读入的文件必须带BOM。可是，还是有很多软件不能识别BOM。\n\n在Firefox早期的版本里，扩展是不能有BOM的，不过Firefox 1.5以后的版本已经开始支持BOM了。现在又发现，PHP也不支持BOM。PHP在设计时就没有考虑BOM的问题，也就是说他不会忽略UTF-8编码的文件开头BOM的那三个字符。<!--more-->\n\n由于必须在在Bo-Blog的wiki看到，同样使用PHP的Bo-Blog也一样受到BOM的困扰。其中有提到另一个麻烦：“受COOKIE送出机制的限制，在这些文件开头已经有BOM的文件中，COOKIE无法送出（因为在COOKIE送出前PHP已经送出了文件头），所以登入和登出功能失效。一切依赖COOKIE、SESSION实现的功能全部无效。”这个应该就是Wordpress后台出现空白页面的原因了，因为任何一个被执行的文件包含了BOM，这三个字符都将被送出，导致依赖cookies和session的功能失效。\n\n解决的办法嘛，如果只包含英文字符(或者说ASCII编码内的字符)，就把文件存成ASCII码方式吧。用UE等编辑器的话，点文件-&gt;转换-&gt;UTF-8转ASCII，或者在另存为里选择ASCII编码。如果是DOS格式的行尾符，可以用记事本打开，点另存为，选ASCII编码。如果包含中文字符的话，可以用UE的另存为功能，选择“UTF-8 无 BOM”即可。\n\nutf-8本来就不应该加bom，除了让编辑器知道它是个utf-8之外什么用处都没有。实际上编辑器完全有能力在不太多的几个编码格式之间根据特征来判断一个文件是什么编码，就算不能自动识别，编辑器也应该有设置编码的地方。所以我觉得BOM对于utf-8来说是多余的东西。\n\nutf-16才需要加bom。因为它是按unicode顺序编码，在BMP范围内是二字节，需要识别是大或小字节序。\n\n实际上，我觉得utf-8引入大小字节序的概念太愚蠢了，不知道那些标准委员会是怎么想的。大小字节序存在的意义，在于cpu的处理方式。如果cpu是大字节序处理，那么对于小字节序，就必须做一层转换，这带来了效率上的下降。但是在实际应用里，谁会去关心大小字节序？文本编码引起字节序的概念，只能说那些制定标准的人太死板了。对于utf-16，我认为只要全世界都遵循一种字节序方式，那就没什么必要用BOM来标注了。\n\n话说回来，PHP是不支持utf-16编码的文件的。因为例如$这个符号，在utf-8里也是两个字节，PHP解码器无法解析的。不知道PHP6内部处理引入unicode 的概念之后，对这个是否会有支持。\n\n编码问题是一个说起来简单，但是实际上很繁琐的东西。很多程序，都有分层编码的概念。像MySQL，就分为client-&gt;connection-&gt;storage和storage-&gt;connection-&gt;result这些概念。storage又分为system,database,table,column。我有时候在想，有必要搞这么复杂嘛，TNND。像MySQL，谁用利用它这些特性阿？除非允许两个client在不同的编码环境下运作，否则它把client编码分离出来根本没有什么必要。大多数情况下，直接binary in/binary out就好了","source":"_posts/utf-8-e4-b8-8eutf-8-e6-97-a0bom-e7-9a-84-e5-8c-ba-e5-88-ab.md","raw":"---\ntitle: utf-8与utf-8(无BOM)的区别\nid: 1045\ncategories:\n  - PHP\ndate: 2012-07-27 06:56:49\ntags:\n---\n\nBOM——Byte Order Mark，就是字节序标记\n\n在UCS 编码中有一个叫做\"ZERO WIDTH NO-BREAK SPACE\"的字符，它的编码是FEFF。而FFFE在UCS中是不存在的字符，所以不应该出现在实际传输中。UCS规范建议我们在传输字节流前，先传输字符\"ZERO WIDTH NO-BREAK SPACE\"。这样如果接收者收到FEFF，就表明这个字节流是Big-Endian的；如果收到FFFE，就表明这个字节流是Little-Endian的。因此字符\"ZERO WIDTH NO-BREAK SPACE\"又被称作BOM。\n\nUTF-8不需要BOM来表明字节顺序，但可以用BOM来表明编码方式。字符\"ZERO WIDTH NO-BREAK SPACE\"的UTF-8编码是EF BB BF。所以如果接收者收到以EF BB BF开头的字节流，就知道这是UTF-8编码了。\n\nUTF-8编码的文件中，BOM占三个字节。如果用记事本把一个文本文件另存为UTF-8编码方式的话，用UE打开这个文件，切换到十六进制编辑状态就可以看到开头的FFFE了。这是个标识UTF-8编码文件的好办法，软件通过BOM来识别这个文件是否是UTF-8编码，很多软件还要求读入的文件必须带BOM。可是，还是有很多软件不能识别BOM。\n\n在Firefox早期的版本里，扩展是不能有BOM的，不过Firefox 1.5以后的版本已经开始支持BOM了。现在又发现，PHP也不支持BOM。PHP在设计时就没有考虑BOM的问题，也就是说他不会忽略UTF-8编码的文件开头BOM的那三个字符。<!--more-->\n\n由于必须在在Bo-Blog的wiki看到，同样使用PHP的Bo-Blog也一样受到BOM的困扰。其中有提到另一个麻烦：“受COOKIE送出机制的限制，在这些文件开头已经有BOM的文件中，COOKIE无法送出（因为在COOKIE送出前PHP已经送出了文件头），所以登入和登出功能失效。一切依赖COOKIE、SESSION实现的功能全部无效。”这个应该就是Wordpress后台出现空白页面的原因了，因为任何一个被执行的文件包含了BOM，这三个字符都将被送出，导致依赖cookies和session的功能失效。\n\n解决的办法嘛，如果只包含英文字符(或者说ASCII编码内的字符)，就把文件存成ASCII码方式吧。用UE等编辑器的话，点文件-&gt;转换-&gt;UTF-8转ASCII，或者在另存为里选择ASCII编码。如果是DOS格式的行尾符，可以用记事本打开，点另存为，选ASCII编码。如果包含中文字符的话，可以用UE的另存为功能，选择“UTF-8 无 BOM”即可。\n\nutf-8本来就不应该加bom，除了让编辑器知道它是个utf-8之外什么用处都没有。实际上编辑器完全有能力在不太多的几个编码格式之间根据特征来判断一个文件是什么编码，就算不能自动识别，编辑器也应该有设置编码的地方。所以我觉得BOM对于utf-8来说是多余的东西。\n\nutf-16才需要加bom。因为它是按unicode顺序编码，在BMP范围内是二字节，需要识别是大或小字节序。\n\n实际上，我觉得utf-8引入大小字节序的概念太愚蠢了，不知道那些标准委员会是怎么想的。大小字节序存在的意义，在于cpu的处理方式。如果cpu是大字节序处理，那么对于小字节序，就必须做一层转换，这带来了效率上的下降。但是在实际应用里，谁会去关心大小字节序？文本编码引起字节序的概念，只能说那些制定标准的人太死板了。对于utf-16，我认为只要全世界都遵循一种字节序方式，那就没什么必要用BOM来标注了。\n\n话说回来，PHP是不支持utf-16编码的文件的。因为例如$这个符号，在utf-8里也是两个字节，PHP解码器无法解析的。不知道PHP6内部处理引入unicode 的概念之后，对这个是否会有支持。\n\n编码问题是一个说起来简单，但是实际上很繁琐的东西。很多程序，都有分层编码的概念。像MySQL，就分为client-&gt;connection-&gt;storage和storage-&gt;connection-&gt;result这些概念。storage又分为system,database,table,column。我有时候在想，有必要搞这么复杂嘛，TNND。像MySQL，谁用利用它这些特性阿？除非允许两个client在不同的编码环境下运作，否则它把client编码分离出来根本没有什么必要。大多数情况下，直接binary in/binary out就好了","slug":"utf-8-e4-b8-8eutf-8-e6-97-a0bom-e7-9a-84-e5-8c-ba-e5-88-ab","published":1,"updated":"2018-01-13T05:07:00.457Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjccw7xe100bpaqcrt6v6fhhb","content":"<p>BOM——Byte Order Mark，就是字节序标记</p>\n<p>在UCS 编码中有一个叫做”ZERO WIDTH NO-BREAK SPACE”的字符，它的编码是FEFF。而FFFE在UCS中是不存在的字符，所以不应该出现在实际传输中。UCS规范建议我们在传输字节流前，先传输字符”ZERO WIDTH NO-BREAK SPACE”。这样如果接收者收到FEFF，就表明这个字节流是Big-Endian的；如果收到FFFE，就表明这个字节流是Little-Endian的。因此字符”ZERO WIDTH NO-BREAK SPACE”又被称作BOM。</p>\n<p>UTF-8不需要BOM来表明字节顺序，但可以用BOM来表明编码方式。字符”ZERO WIDTH NO-BREAK SPACE”的UTF-8编码是EF BB BF。所以如果接收者收到以EF BB BF开头的字节流，就知道这是UTF-8编码了。</p>\n<p>UTF-8编码的文件中，BOM占三个字节。如果用记事本把一个文本文件另存为UTF-8编码方式的话，用UE打开这个文件，切换到十六进制编辑状态就可以看到开头的FFFE了。这是个标识UTF-8编码文件的好办法，软件通过BOM来识别这个文件是否是UTF-8编码，很多软件还要求读入的文件必须带BOM。可是，还是有很多软件不能识别BOM。</p>\n<p>在Firefox早期的版本里，扩展是不能有BOM的，不过Firefox 1.5以后的版本已经开始支持BOM了。现在又发现，PHP也不支持BOM。PHP在设计时就没有考虑BOM的问题，也就是说他不会忽略UTF-8编码的文件开头BOM的那三个字符。<a id=\"more\"></a></p>\n<p>由于必须在在Bo-Blog的wiki看到，同样使用PHP的Bo-Blog也一样受到BOM的困扰。其中有提到另一个麻烦：“受COOKIE送出机制的限制，在这些文件开头已经有BOM的文件中，COOKIE无法送出（因为在COOKIE送出前PHP已经送出了文件头），所以登入和登出功能失效。一切依赖COOKIE、SESSION实现的功能全部无效。”这个应该就是Wordpress后台出现空白页面的原因了，因为任何一个被执行的文件包含了BOM，这三个字符都将被送出，导致依赖cookies和session的功能失效。</p>\n<p>解决的办法嘛，如果只包含英文字符(或者说ASCII编码内的字符)，就把文件存成ASCII码方式吧。用UE等编辑器的话，点文件-&gt;转换-&gt;UTF-8转ASCII，或者在另存为里选择ASCII编码。如果是DOS格式的行尾符，可以用记事本打开，点另存为，选ASCII编码。如果包含中文字符的话，可以用UE的另存为功能，选择“UTF-8 无 BOM”即可。</p>\n<p>utf-8本来就不应该加bom，除了让编辑器知道它是个utf-8之外什么用处都没有。实际上编辑器完全有能力在不太多的几个编码格式之间根据特征来判断一个文件是什么编码，就算不能自动识别，编辑器也应该有设置编码的地方。所以我觉得BOM对于utf-8来说是多余的东西。</p>\n<p>utf-16才需要加bom。因为它是按unicode顺序编码，在BMP范围内是二字节，需要识别是大或小字节序。</p>\n<p>实际上，我觉得utf-8引入大小字节序的概念太愚蠢了，不知道那些标准委员会是怎么想的。大小字节序存在的意义，在于cpu的处理方式。如果cpu是大字节序处理，那么对于小字节序，就必须做一层转换，这带来了效率上的下降。但是在实际应用里，谁会去关心大小字节序？文本编码引起字节序的概念，只能说那些制定标准的人太死板了。对于utf-16，我认为只要全世界都遵循一种字节序方式，那就没什么必要用BOM来标注了。</p>\n<p>话说回来，PHP是不支持utf-16编码的文件的。因为例如$这个符号，在utf-8里也是两个字节，PHP解码器无法解析的。不知道PHP6内部处理引入unicode 的概念之后，对这个是否会有支持。</p>\n<p>编码问题是一个说起来简单，但是实际上很繁琐的东西。很多程序，都有分层编码的概念。像MySQL，就分为client-&gt;connection-&gt;storage和storage-&gt;connection-&gt;result这些概念。storage又分为system,database,table,column。我有时候在想，有必要搞这么复杂嘛，TNND。像MySQL，谁用利用它这些特性阿？除非允许两个client在不同的编码环境下运作，否则它把client编码分离出来根本没有什么必要。大多数情况下，直接binary in/binary out就好了</p>\n","site":{"data":{}},"excerpt":"<p>BOM——Byte Order Mark，就是字节序标记</p>\n<p>在UCS 编码中有一个叫做”ZERO WIDTH NO-BREAK SPACE”的字符，它的编码是FEFF。而FFFE在UCS中是不存在的字符，所以不应该出现在实际传输中。UCS规范建议我们在传输字节流前，先传输字符”ZERO WIDTH NO-BREAK SPACE”。这样如果接收者收到FEFF，就表明这个字节流是Big-Endian的；如果收到FFFE，就表明这个字节流是Little-Endian的。因此字符”ZERO WIDTH NO-BREAK SPACE”又被称作BOM。</p>\n<p>UTF-8不需要BOM来表明字节顺序，但可以用BOM来表明编码方式。字符”ZERO WIDTH NO-BREAK SPACE”的UTF-8编码是EF BB BF。所以如果接收者收到以EF BB BF开头的字节流，就知道这是UTF-8编码了。</p>\n<p>UTF-8编码的文件中，BOM占三个字节。如果用记事本把一个文本文件另存为UTF-8编码方式的话，用UE打开这个文件，切换到十六进制编辑状态就可以看到开头的FFFE了。这是个标识UTF-8编码文件的好办法，软件通过BOM来识别这个文件是否是UTF-8编码，很多软件还要求读入的文件必须带BOM。可是，还是有很多软件不能识别BOM。</p>\n<p>在Firefox早期的版本里，扩展是不能有BOM的，不过Firefox 1.5以后的版本已经开始支持BOM了。现在又发现，PHP也不支持BOM。PHP在设计时就没有考虑BOM的问题，也就是说他不会忽略UTF-8编码的文件开头BOM的那三个字符。","more":"</p>\n<p>由于必须在在Bo-Blog的wiki看到，同样使用PHP的Bo-Blog也一样受到BOM的困扰。其中有提到另一个麻烦：“受COOKIE送出机制的限制，在这些文件开头已经有BOM的文件中，COOKIE无法送出（因为在COOKIE送出前PHP已经送出了文件头），所以登入和登出功能失效。一切依赖COOKIE、SESSION实现的功能全部无效。”这个应该就是Wordpress后台出现空白页面的原因了，因为任何一个被执行的文件包含了BOM，这三个字符都将被送出，导致依赖cookies和session的功能失效。</p>\n<p>解决的办法嘛，如果只包含英文字符(或者说ASCII编码内的字符)，就把文件存成ASCII码方式吧。用UE等编辑器的话，点文件-&gt;转换-&gt;UTF-8转ASCII，或者在另存为里选择ASCII编码。如果是DOS格式的行尾符，可以用记事本打开，点另存为，选ASCII编码。如果包含中文字符的话，可以用UE的另存为功能，选择“UTF-8 无 BOM”即可。</p>\n<p>utf-8本来就不应该加bom，除了让编辑器知道它是个utf-8之外什么用处都没有。实际上编辑器完全有能力在不太多的几个编码格式之间根据特征来判断一个文件是什么编码，就算不能自动识别，编辑器也应该有设置编码的地方。所以我觉得BOM对于utf-8来说是多余的东西。</p>\n<p>utf-16才需要加bom。因为它是按unicode顺序编码，在BMP范围内是二字节，需要识别是大或小字节序。</p>\n<p>实际上，我觉得utf-8引入大小字节序的概念太愚蠢了，不知道那些标准委员会是怎么想的。大小字节序存在的意义，在于cpu的处理方式。如果cpu是大字节序处理，那么对于小字节序，就必须做一层转换，这带来了效率上的下降。但是在实际应用里，谁会去关心大小字节序？文本编码引起字节序的概念，只能说那些制定标准的人太死板了。对于utf-16，我认为只要全世界都遵循一种字节序方式，那就没什么必要用BOM来标注了。</p>\n<p>话说回来，PHP是不支持utf-16编码的文件的。因为例如$这个符号，在utf-8里也是两个字节，PHP解码器无法解析的。不知道PHP6内部处理引入unicode 的概念之后，对这个是否会有支持。</p>\n<p>编码问题是一个说起来简单，但是实际上很繁琐的东西。很多程序，都有分层编码的概念。像MySQL，就分为client-&gt;connection-&gt;storage和storage-&gt;connection-&gt;result这些概念。storage又分为system,database,table,column。我有时候在想，有必要搞这么复杂嘛，TNND。像MySQL，谁用利用它这些特性阿？除非允许两个client在不同的编码环境下运作，否则它把client编码分离出来根本没有什么必要。大多数情况下，直接binary in/binary out就好了</p>"},{"title":"Vagrant 与vmware vitualbox的配置与应用","id":"1723","date":"2014-04-21T01:26:06.000Z","_content":"\n> Vagrant 与 vmware vitualbox 命令都相同，只是在刚装完Vagrant 后要装一个vm的插件。用vmware的性能理论上会好一些，个人感觉差不多，我使用的是vitualbox。\n\n下载 vitualbox\nhttps://www.virtualbox.org/\n下载\nVagrant http://www.vagrantup.com/\n下载 box\n官方提供的范例：http://files.vagrantup.com/precise32.box\n(推荐) http://opscode.github.io/bento/\nhttp://www.vagrantbox.es/<!--more-->\n增加 vagrant box add {名称} {box的名字}.box\n如vagrant box add fedora fedora-32bit.box\n\n初始化`vagrant init fedora `\n\n启动`vagrant up`\n\n关闭虚拟机`vagrant halt`\n\n删除虚拟机`vagrant destroy`\n\n* * *\n\n下面是安装与卸载vmware插件的命令\nInstall Fusion Plugin\n`vagrant plugin install vagrant-vmware-fusion\nvagrant plugin license vagrant-vmware-fusion license.lic`\n\nInstall Workstation Plugin\n`vagrant plugin install vagrant-vmware-workstation\nvagrant plugin license vagrant-vmware-workstation license.lic`\n\nuninstall\n`vagrant plugin uninstall vagrant-vmware-fusion`","source":"_posts/vagrant-e4-b8-8evmware-vitualbox-e7-9a-84-e9-85-8d-e7-bd-ae-e4-b8-8e-e5-ba-94-e7-94-a8.md","raw":"---\ntitle: Vagrant 与vmware vitualbox的配置与应用\ntags:\n  - vagrant\nid: 1723\ncategories:\n  - Linux\ndate: 2014-04-21 09:26:06\n---\n\n> Vagrant 与 vmware vitualbox 命令都相同，只是在刚装完Vagrant 后要装一个vm的插件。用vmware的性能理论上会好一些，个人感觉差不多，我使用的是vitualbox。\n\n下载 vitualbox\nhttps://www.virtualbox.org/\n下载\nVagrant http://www.vagrantup.com/\n下载 box\n官方提供的范例：http://files.vagrantup.com/precise32.box\n(推荐) http://opscode.github.io/bento/\nhttp://www.vagrantbox.es/<!--more-->\n增加 vagrant box add {名称} {box的名字}.box\n如vagrant box add fedora fedora-32bit.box\n\n初始化`vagrant init fedora `\n\n启动`vagrant up`\n\n关闭虚拟机`vagrant halt`\n\n删除虚拟机`vagrant destroy`\n\n* * *\n\n下面是安装与卸载vmware插件的命令\nInstall Fusion Plugin\n`vagrant plugin install vagrant-vmware-fusion\nvagrant plugin license vagrant-vmware-fusion license.lic`\n\nInstall Workstation Plugin\n`vagrant plugin install vagrant-vmware-workstation\nvagrant plugin license vagrant-vmware-workstation license.lic`\n\nuninstall\n`vagrant plugin uninstall vagrant-vmware-fusion`","slug":"vagrant-e4-b8-8evmware-vitualbox-e7-9a-84-e9-85-8d-e7-bd-ae-e4-b8-8e-e5-ba-94-e7-94-a8","published":1,"updated":"2018-01-13T05:07:00.467Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjccw7xe300bsaqcrc4nj271h","content":"<blockquote>\n<p>Vagrant 与 vmware vitualbox 命令都相同，只是在刚装完Vagrant 后要装一个vm的插件。用vmware的性能理论上会好一些，个人感觉差不多，我使用的是vitualbox。</p>\n</blockquote>\n<p>下载 vitualbox<br><a href=\"https://www.virtualbox.org/\" target=\"_blank\" rel=\"noopener\">https://www.virtualbox.org/</a><br>下载<br>Vagrant <a href=\"http://www.vagrantup.com/\" target=\"_blank\" rel=\"noopener\">http://www.vagrantup.com/</a><br>下载 box<br>官方提供的范例：<a href=\"http://files.vagrantup.com/precise32.box\" target=\"_blank\" rel=\"noopener\">http://files.vagrantup.com/precise32.box</a><br>(推荐) <a href=\"http://opscode.github.io/bento/\" target=\"_blank\" rel=\"noopener\">http://opscode.github.io/bento/</a><br><a href=\"http://www.vagrantbox.es/\" target=\"_blank\" rel=\"noopener\">http://www.vagrantbox.es/</a><a id=\"more\"></a><br>增加 vagrant box add {名称} {box的名字}.box<br>如vagrant box add fedora fedora-32bit.box</p>\n<p>初始化<code>vagrant init fedora</code></p>\n<p>启动<code>vagrant up</code></p>\n<p>关闭虚拟机<code>vagrant halt</code></p>\n<p>删除虚拟机<code>vagrant destroy</code></p>\n<hr>\n<p>下面是安装与卸载vmware插件的命令<br>Install Fusion Plugin<br><code>vagrant plugin install vagrant-vmware-fusion\nvagrant plugin license vagrant-vmware-fusion license.lic</code></p>\n<p>Install Workstation Plugin<br><code>vagrant plugin install vagrant-vmware-workstation\nvagrant plugin license vagrant-vmware-workstation license.lic</code></p>\n<p>uninstall<br><code>vagrant plugin uninstall vagrant-vmware-fusion</code></p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>Vagrant 与 vmware vitualbox 命令都相同，只是在刚装完Vagrant 后要装一个vm的插件。用vmware的性能理论上会好一些，个人感觉差不多，我使用的是vitualbox。</p>\n</blockquote>\n<p>下载 vitualbox<br><a href=\"https://www.virtualbox.org/\" target=\"_blank\" rel=\"noopener\">https://www.virtualbox.org/</a><br>下载<br>Vagrant <a href=\"http://www.vagrantup.com/\" target=\"_blank\" rel=\"noopener\">http://www.vagrantup.com/</a><br>下载 box<br>官方提供的范例：<a href=\"http://files.vagrantup.com/precise32.box\" target=\"_blank\" rel=\"noopener\">http://files.vagrantup.com/precise32.box</a><br>(推荐) <a href=\"http://opscode.github.io/bento/\" target=\"_blank\" rel=\"noopener\">http://opscode.github.io/bento/</a><br><a href=\"http://www.vagrantbox.es/\" target=\"_blank\" rel=\"noopener\">http://www.vagrantbox.es/</a>","more":"<br>增加 vagrant box add {名称} {box的名字}.box<br>如vagrant box add fedora fedora-32bit.box</p>\n<p>初始化<code>vagrant init fedora</code></p>\n<p>启动<code>vagrant up</code></p>\n<p>关闭虚拟机<code>vagrant halt</code></p>\n<p>删除虚拟机<code>vagrant destroy</code></p>\n<hr>\n<p>下面是安装与卸载vmware插件的命令<br>Install Fusion Plugin<br><code>vagrant plugin install vagrant-vmware-fusion\nvagrant plugin license vagrant-vmware-fusion license.lic</code></p>\n<p>Install Workstation Plugin<br><code>vagrant plugin install vagrant-vmware-workstation\nvagrant plugin license vagrant-vmware-workstation license.lic</code></p>\n<p>uninstall<br><code>vagrant plugin uninstall vagrant-vmware-fusion</code></p>"},{"title":"win8使用分区助手4k对齐后，快速启动无效解决办法","id":"1172","date":"2013-08-30T02:59:17.000Z","_content":"\nHKEY_LOCAL_MACHINESYSTEMCurrentControlSetControlSession Manager\n\n将BootExecute  数值修改为 autocheck autochk *\n\n如果没有该选项 可以自己先新建一个多字符串值 然后将该选项的数值设置为\nautocheck（空格）autochk（空格）*","source":"_posts/win8-e4-bd-bf-e7-94-a8-e5-88-86-e5-8c-ba-e5-8a-a9-e6-89-8b4k-e5-af-b9-e9-bd-90-e5-90-8e-ef-bc-8c-e5-bf-ab-e9-80-9f-e5-90-af-e5-8a-a8-e6-97-a0-e6-95-88-e8-a7-a3-e5-86-b3-e5-8a-9e-e6-b3-95.md","raw":"---\ntitle: win8使用分区助手4k对齐后，快速启动无效解决办法\nid: 1172\ncategories:\n  - Windows\ndate: 2013-08-30 10:59:17\ntags:\n---\n\nHKEY_LOCAL_MACHINESYSTEMCurrentControlSetControlSession Manager\n\n将BootExecute  数值修改为 autocheck autochk *\n\n如果没有该选项 可以自己先新建一个多字符串值 然后将该选项的数值设置为\nautocheck（空格）autochk（空格）*","slug":"win8-e4-bd-bf-e7-94-a8-e5-88-86-e5-8c-ba-e5-8a-a9-e6-89-8b4k-e5-af-b9-e9-bd-90-e5-90-8e-ef-bc-8c-e5-bf-ab-e9-80-9f-e5-90-af-e5-8a-a8-e6-97-a0-e6-95-88-e8-a7-a3-e5-86-b3-e5-8a-9e-e6-b3-95","published":1,"updated":"2018-01-13T05:07:00.482Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjccw7xe400bvaqcrki5x1p5a","content":"<p>HKEY_LOCAL_MACHINESYSTEMCurrentControlSetControlSession Manager</p>\n<p>将BootExecute  数值修改为 autocheck autochk *</p>\n<p>如果没有该选项 可以自己先新建一个多字符串值 然后将该选项的数值设置为<br>autocheck（空格）autochk（空格）*</p>\n","site":{"data":{}},"excerpt":"","more":"<p>HKEY_LOCAL_MACHINESYSTEMCurrentControlSetControlSession Manager</p>\n<p>将BootExecute  数值修改为 autocheck autochk *</p>\n<p>如果没有该选项 可以自己先新建一个多字符串值 然后将该选项的数值设置为<br>autocheck（空格）autochk（空格）*</p>\n"},{"title":"Win8待机状态下风扇狂转的可能原因","id":"1184","date":"2013-12-04T03:13:37.000Z","_content":"\n可能的原因是:\n\n1\\. Win8的自动维护: 这个在操作中心里可以看到, 但是没找到怎么关的, 果断在计划任务里禁止掉. Microsoft/Windows/Task Scheduler中的\n\nIdle Maintenance和Regular Maintenance两个\n\n2\\. 数据完整性扫面: 同样在计划任务里面, Microsoft/Windows/Data Integrity Scan, 右边两项全部禁止。\n\n看了一下记录，我遇到的应该是自动维护这种情况，不过还是把两项都禁止掉了.","source":"_posts/win8-e5-be-85-e6-9c-ba-e7-8a-b6-e6-80-81-e4-b8-8b-e9-a3-8e-e6-89-87-e7-8b-82-e8-bd-ac-e7-9a-84-e5-8f-af-e8-83-bd-e5-8e-9f-e5-9b-a0.md","raw":"---\ntitle: Win8待机状态下风扇狂转的可能原因\nid: 1184\ncategories:\n  - Windows\ndate: 2013-12-04 11:13:37\ntags:\n---\n\n可能的原因是:\n\n1\\. Win8的自动维护: 这个在操作中心里可以看到, 但是没找到怎么关的, 果断在计划任务里禁止掉. Microsoft/Windows/Task Scheduler中的\n\nIdle Maintenance和Regular Maintenance两个\n\n2\\. 数据完整性扫面: 同样在计划任务里面, Microsoft/Windows/Data Integrity Scan, 右边两项全部禁止。\n\n看了一下记录，我遇到的应该是自动维护这种情况，不过还是把两项都禁止掉了.","slug":"win8-e5-be-85-e6-9c-ba-e7-8a-b6-e6-80-81-e4-b8-8b-e9-a3-8e-e6-89-87-e7-8b-82-e8-bd-ac-e7-9a-84-e5-8f-af-e8-83-bd-e5-8e-9f-e5-9b-a0","published":1,"updated":"2018-01-13T05:07:00.467Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjccw7xe500byaqcrkqheewiz","content":"<p>可能的原因是:</p>\n<p>1. Win8的自动维护: 这个在操作中心里可以看到, 但是没找到怎么关的, 果断在计划任务里禁止掉. Microsoft/Windows/Task Scheduler中的</p>\n<p>Idle Maintenance和Regular Maintenance两个</p>\n<p>2. 数据完整性扫面: 同样在计划任务里面, Microsoft/Windows/Data Integrity Scan, 右边两项全部禁止。</p>\n<p>看了一下记录，我遇到的应该是自动维护这种情况，不过还是把两项都禁止掉了.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>可能的原因是:</p>\n<p>1. Win8的自动维护: 这个在操作中心里可以看到, 但是没找到怎么关的, 果断在计划任务里禁止掉. Microsoft/Windows/Task Scheduler中的</p>\n<p>Idle Maintenance和Regular Maintenance两个</p>\n<p>2. 数据完整性扫面: 同样在计划任务里面, Microsoft/Windows/Data Integrity Scan, 右边两项全部禁止。</p>\n<p>看了一下记录，我遇到的应该是自动维护这种情况，不过还是把两项都禁止掉了.</p>\n"},{"title":"Win8添加局域网打印机的简单方法","id":"1667","date":"2014-04-10T01:18:44.000Z","_content":"\n找到添加打印机的地方，在控制面板里\n在弹出的“添加打印机”窗口中直接点“下一步”\n选择第四项，“通过手动设置添加本地打印机和网络打印机”\n在下一步的窗口中，选择“创建新端口”——“local port”，再下一步\n弹出“端口名”对话框，输入打印机完整的路径(IP地址和打印机的共享名)，比如 \\\\192.168.1.1\\p2035\n点确定手动找驱动，（我自动找太慢）\nok","source":"_posts/win8-e6-b7-bb-e5-8a-a0-e5-b1-80-e5-9f-9f-e7-bd-91-e6-89-93-e5-8d-b0-e6-9c-ba-e7-9a-84-e7-ae-80-e5-8d-95-e6-96-b9-e6-b3-95.md","raw":"---\ntitle: Win8添加局域网打印机的简单方法\ntags:\n  - windows8\n  - 局域网\n  - 打印机\nid: 1667\ncategories:\n  - Windows\ndate: 2014-04-10 09:18:44\n---\n\n找到添加打印机的地方，在控制面板里\n在弹出的“添加打印机”窗口中直接点“下一步”\n选择第四项，“通过手动设置添加本地打印机和网络打印机”\n在下一步的窗口中，选择“创建新端口”——“local port”，再下一步\n弹出“端口名”对话框，输入打印机完整的路径(IP地址和打印机的共享名)，比如 \\\\192.168.1.1\\p2035\n点确定手动找驱动，（我自动找太慢）\nok","slug":"win8-e6-b7-bb-e5-8a-a0-e5-b1-80-e5-9f-9f-e7-bd-91-e6-89-93-e5-8d-b0-e6-9c-ba-e7-9a-84-e7-ae-80-e5-8d-95-e6-96-b9-e6-b3-95","published":1,"updated":"2018-01-13T05:07:00.474Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjccw7xe700c1aqcrysa4zor1","content":"<p>找到添加打印机的地方，在控制面板里<br>在弹出的“添加打印机”窗口中直接点“下一步”<br>选择第四项，“通过手动设置添加本地打印机和网络打印机”<br>在下一步的窗口中，选择“创建新端口”——“local port”，再下一步<br>弹出“端口名”对话框，输入打印机完整的路径(IP地址和打印机的共享名)，比如 \\192.168.1.1\\p2035<br>点确定手动找驱动，（我自动找太慢）<br>ok</p>\n","site":{"data":{}},"excerpt":"","more":"<p>找到添加打印机的地方，在控制面板里<br>在弹出的“添加打印机”窗口中直接点“下一步”<br>选择第四项，“通过手动设置添加本地打印机和网络打印机”<br>在下一步的窗口中，选择“创建新端口”——“local port”，再下一步<br>弹出“端口名”对话框，输入打印机完整的路径(IP地址和打印机的共享名)，比如 \\192.168.1.1\\p2035<br>点确定手动找驱动，（我自动找太慢）<br>ok</p>\n"},{"title":"windows 下 Nginx + PHP 配置文件","id":"2191","date":"2014-09-13T09:18:35.000Z","_content":"\n`server {\n        listen       9999;\n        server_name  localhost;\n        #charset koi8-r;\n        #access_log  logs/host.access.log  main;\n\n        location / {\n            root   C:/www/cms/;\n            index  index.php index.html index.htm;\n        }\n\n        #error_page  404              /404.html;\n        error_page   500 502 503 504  /50x.html;\n        location = /50x.html {\n            root   html;\n        }\n        location ~ \\.php$ {\n\t\t\troot           C:/www/cms/;\n\t\t\tfastcgi_pass   127.0.0.1:9000;\n\t\t\tfastcgi_index  index.php;\n\t\t\tfastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;\n\t\t\tinclude        fastcgi_params;\n        }\n    }`\n<!--more-->\n\n`@echo off\nREM Windows 下无效\nREM set PHP_FCGI_CHILDREN=5\n\nREM 每个进程处理的最大请求数，或设置为 Windows 环境变量\nset PHP_FCGI_MAX_REQUESTS=1000\n\necho Starting PHP FastCGI...\nRunHiddenConsole D:/xampp/php/php-cgi.exe -b 127.0.0.1:9000 -c D:/xampp/php/php.ini\n\necho Starting nginx..\nRunHiddenConsole D:/nginx/nginx.exe -p D:/nginx/`\n\n`@echo off\necho Stopping nginx...  \ntaskkill /F /IM nginx.exe > nul\necho Stopping PHP FastCGI...\ntaskkill /F /IM php-cgi.exe > nul\nexit`","source":"_posts/windows-e4-b8-8b-nginx-php-e9-85-8d-e7-bd-ae-e6-96-87-e4-bb-b6.md","raw":"---\ntitle: windows 下 Nginx + PHP 配置文件\ntags:\n  - nginx\n  - php\nid: 2191\ncategories:\n  - PHP\ndate: 2014-09-13 17:18:35\n---\n\n`server {\n        listen       9999;\n        server_name  localhost;\n        #charset koi8-r;\n        #access_log  logs/host.access.log  main;\n\n        location / {\n            root   C:/www/cms/;\n            index  index.php index.html index.htm;\n        }\n\n        #error_page  404              /404.html;\n        error_page   500 502 503 504  /50x.html;\n        location = /50x.html {\n            root   html;\n        }\n        location ~ \\.php$ {\n\t\t\troot           C:/www/cms/;\n\t\t\tfastcgi_pass   127.0.0.1:9000;\n\t\t\tfastcgi_index  index.php;\n\t\t\tfastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;\n\t\t\tinclude        fastcgi_params;\n        }\n    }`\n<!--more-->\n\n`@echo off\nREM Windows 下无效\nREM set PHP_FCGI_CHILDREN=5\n\nREM 每个进程处理的最大请求数，或设置为 Windows 环境变量\nset PHP_FCGI_MAX_REQUESTS=1000\n\necho Starting PHP FastCGI...\nRunHiddenConsole D:/xampp/php/php-cgi.exe -b 127.0.0.1:9000 -c D:/xampp/php/php.ini\n\necho Starting nginx..\nRunHiddenConsole D:/nginx/nginx.exe -p D:/nginx/`\n\n`@echo off\necho Stopping nginx...  \ntaskkill /F /IM nginx.exe > nul\necho Stopping PHP FastCGI...\ntaskkill /F /IM php-cgi.exe > nul\nexit`","slug":"windows-e4-b8-8b-nginx-php-e9-85-8d-e7-bd-ae-e6-96-87-e4-bb-b6","published":1,"updated":"2018-01-13T05:07:00.447Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjccw7xe900c4aqcrr4nfcglq","content":"<p>`server {<br>        listen       9999;<br>        server_name  localhost;</p>\n<pre><code>    #charset koi8-r;\n    #access_log  logs/host.access.log  main;\n\n    location / {\n        root   C:/www/cms/;\n        index  index.php index.html index.htm;\n    }\n\n    #error_page  404              /404.html;\n    error_page   500 502 503 504  /50x.html;\n    location = /50x.html {\n        root   html;\n    }\n    location ~ \\.php$ {\n        root           C:/www/cms/;\n        fastcgi_pass   127.0.0.1:9000;\n        fastcgi_index  index.php;\n        fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;\n        include        fastcgi_params;\n    }\n}`\n</code></pre><a id=\"more\"></a>\n<p>`@echo off<br>REM Windows 下无效<br>REM set PHP_FCGI_CHILDREN=5</p>\n<p>REM 每个进程处理的最大请求数，或设置为 Windows 环境变量<br>set PHP_FCGI_MAX_REQUESTS=1000</p>\n<p>echo Starting PHP FastCGI…<br>RunHiddenConsole D:/xampp/php/php-cgi.exe -b 127.0.0.1:9000 -c D:/xampp/php/php.ini</p>\n<p>echo Starting nginx..<br>RunHiddenConsole D:/nginx/nginx.exe -p D:/nginx/`</p>\n<p><code>@echo off\necho Stopping nginx...  \ntaskkill /F /IM nginx.exe &gt; nul\necho Stopping PHP FastCGI...\ntaskkill /F /IM php-cgi.exe &gt; nul\nexit</code></p>\n","site":{"data":{}},"excerpt":"<p>`server {<br>        listen       9999;<br>        server_name  localhost;</p>\n<pre><code>    #charset koi8-r;\n    #access_log  logs/host.access.log  main;\n\n    location / {\n        root   C:/www/cms/;\n        index  index.php index.html index.htm;\n    }\n\n    #error_page  404              /404.html;\n    error_page   500 502 503 504  /50x.html;\n    location = /50x.html {\n        root   html;\n    }\n    location ~ \\.php$ {\n        root           C:/www/cms/;\n        fastcgi_pass   127.0.0.1:9000;\n        fastcgi_index  index.php;\n        fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;\n        include        fastcgi_params;\n    }\n}`\n</code></pre>","more":"<p>`@echo off<br>REM Windows 下无效<br>REM set PHP_FCGI_CHILDREN=5</p>\n<p>REM 每个进程处理的最大请求数，或设置为 Windows 环境变量<br>set PHP_FCGI_MAX_REQUESTS=1000</p>\n<p>echo Starting PHP FastCGI…<br>RunHiddenConsole D:/xampp/php/php-cgi.exe -b 127.0.0.1:9000 -c D:/xampp/php/php.ini</p>\n<p>echo Starting nginx..<br>RunHiddenConsole D:/nginx/nginx.exe -p D:/nginx/`</p>\n<p><code>@echo off\necho Stopping nginx...  \ntaskkill /F /IM nginx.exe &gt; nul\necho Stopping PHP FastCGI...\ntaskkill /F /IM php-cgi.exe &gt; nul\nexit</code></p>"},{"title":"wordpress使用七牛CDN,图片存储站","id":"1205","date":"2014-03-15T02:41:22.000Z","_content":"\n> 听说不错，试试效果。目前cdn上的有jquery相关的js和图片存储。可以安装“WPJAM 七牛镜像存储”这个插件。使用方法：http://www.imzimu.com/website/406.html\r> \n> \n> 广告一下（包含我的邀请码）：https://portal.qiniu.com/signup?code=3ljfub0euyqtu","source":"_posts/wordpress-e4-bd-bf-e7-94-a8-e4-b8-83-e7-89-9bcdn.md","raw":"---\ntitle: 'wordpress使用七牛CDN,图片存储站'\nid: 1205\ncategories:\n  - Other\ndate: 2014-03-15 10:41:22\ntags:\n---\n\n> 听说不错，试试效果。目前cdn上的有jquery相关的js和图片存储。可以安装“WPJAM 七牛镜像存储”这个插件。使用方法：http://www.imzimu.com/website/406.html\r> \n> \n> 广告一下（包含我的邀请码）：https://portal.qiniu.com/signup?code=3ljfub0euyqtu","slug":"wordpress-e4-bd-bf-e7-94-a8-e4-b8-83-e7-89-9bcdn","published":1,"updated":"2018-01-13T05:07:00.443Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjccw7xeb00c8aqcrspgj0mwr","content":"<blockquote>\n<p>听说不错，试试效果。目前cdn上的有jquery相关的js和图片存储。可以安装“WPJAM 七牛镜像存储”这个插件。使用方法：<a href=\"http://www.imzimu.com/website/406.html\" target=\"_blank\" rel=\"noopener\">http://www.imzimu.com/website/406.html</a></p>\n<p>广告一下（包含我的邀请码）：<a href=\"https://portal.qiniu.com/signup?code=3ljfub0euyqtu\" target=\"_blank\" rel=\"noopener\">https://portal.qiniu.com/signup?code=3ljfub0euyqtu</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>听说不错，试试效果。目前cdn上的有jquery相关的js和图片存储。可以安装“WPJAM 七牛镜像存储”这个插件。使用方法：<a href=\"http://www.imzimu.com/website/406.html\" target=\"_blank\" rel=\"noopener\">http://www.imzimu.com/website/406.html</a></p>\n<p>广告一下（包含我的邀请码）：<a href=\"https://portal.qiniu.com/signup?code=3ljfub0euyqtu\" target=\"_blank\" rel=\"noopener\">https://portal.qiniu.com/signup?code=3ljfub0euyqtu</a></p>\n</blockquote>\n"},{"title":"WordPress 编译安装 PHP 7.0.4 及优化配置","id":"2506","date":"2016-03-20T09:18:45.000Z","_content":"\n好长时间没有理自己的博客了，今天正好有时间，把PHP升级到最新版本PHP 7.0.4。\n\n还是选择编译安装，PHP7 推荐 gcc 4.8以上，gcc -v 看了一下VPS才4.4，所以第一步先升级一下 gcc，这个过程比较长，可以先下部电影等着~~\n\n因为VPS配置太low，所以先准备一些，搞个临时swap \n\n`$ SWAP=/tmp/swap\n$ dd if=/dev/zero of=$SWAP bs=1M count=1000\n$ mkswap $SWAP\n$ swapon $SWAP\n#最后记得关上\n$ swapoff -a`\n\nok , 开始······\n`\n$ wget http://ftp.tsukuba.wide.ad.jp/software/gcc/releases/gcc-5.3.0/gcc-5.3.0.tar.gz\n$ tar -xf gcc-5.3.0.tar.gz\n$ cd gcc-5.3.0\n$ ./contrib/download_prerequisites\n$ mkdir gcc_temp  && cd gcc_temp\n$ ../configure --enable-checking=release --enable-languages=c,c++ --disable-multilib\n$ make && make install`\n\n当然再装gcc时有一些小问题，大多可以google到，这里记一点,如果出现 *** [stage1-bubble] 错误 2 \n`$ export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/lib64\n$ source /etc/profile`\n\ngcc -v 看一下，好了的话就开始PHP\n<!--more-->\n`$ wget http://cn2.php.net/get/php-7.0.4.tar.bz2/from/this/mirror\n$ tar xzvf mirror\n$ cd php-7.0.4/\n$ ./configure --prefix=/data/app/php7 --with-curl --with-freetype-dir --with-gd --with-gettext --with-iconv-dir --with-kerberos --with-libdir=lib64 --with-libxml-dir --with-mysqli --with-openssl --with-pcre-regex --with-pdo-mysql --with-pdo-sqlite --with-pear --with-png-dir --with-xmlrpc --with-xsl --with-zlib --enable-fpm --enable-bcmath --enable-libxml --enable-inline-optimization --enable-gd-native-ttf --enable-mbregex --enable-mbstring --enable-opcache --enable-pcntl --enable-shmop --enable-soap --enable-sockets --enable-sysvsem --enable-xml --enable-zip\n$ make && make install\n`\n\n完成后再做下配置\n`$ cp php.ini-product /data/app/php7/lib/php.ini\n$ cp /usr/local/php/etc/php-fpm.conf.default /data/app/php7/etc/php-fpm.conf\n$ cp /usr/local/php/etc/php-fpm.d/www.conf.default /data/app/php7/etc/php-fpm.d/www.conf\n$ cp -R ./sapi/fpm/init.d.php-fpm /etc/init.d/php7-fpm\n$ ln -s /data/app/php7/bin/php /usr/local/bin/php7\n$ service php-fpm stop\n$ service php7-fpm start\n`\n\n到这就完成了安装，如果启用PHP7后发现博客无法打开，那就把DEBUG打开吧，问题很好解决。再进行一些配置。\n\n启用Opcache, 在php.ini中加入:\n`zend_extension=opcache.so\nopcache.enable=1\nopcache.enable_cli=1\nopcache.file_cache=/tmp`\n\n最后，又换了一款Cache插件，这个比之前用的WP-cache , Hyper-cache 都好用，叫CometCache，使页面静态化，进一步提高页面打开速度。","source":"_posts/wordpress-e7-bc-96-e8-af-91-e5-ae-89-e8-a3-85-php-7-0-4.md","raw":"---\ntitle: WordPress 编译安装 PHP 7.0.4 及优化配置\ntags:\n  - php\nid: 2506\ncategories:\n  - PHP\ndate: 2016-03-20 17:18:45\n---\n\n好长时间没有理自己的博客了，今天正好有时间，把PHP升级到最新版本PHP 7.0.4。\n\n还是选择编译安装，PHP7 推荐 gcc 4.8以上，gcc -v 看了一下VPS才4.4，所以第一步先升级一下 gcc，这个过程比较长，可以先下部电影等着~~\n\n因为VPS配置太low，所以先准备一些，搞个临时swap \n\n`$ SWAP=/tmp/swap\n$ dd if=/dev/zero of=$SWAP bs=1M count=1000\n$ mkswap $SWAP\n$ swapon $SWAP\n#最后记得关上\n$ swapoff -a`\n\nok , 开始······\n`\n$ wget http://ftp.tsukuba.wide.ad.jp/software/gcc/releases/gcc-5.3.0/gcc-5.3.0.tar.gz\n$ tar -xf gcc-5.3.0.tar.gz\n$ cd gcc-5.3.0\n$ ./contrib/download_prerequisites\n$ mkdir gcc_temp  && cd gcc_temp\n$ ../configure --enable-checking=release --enable-languages=c,c++ --disable-multilib\n$ make && make install`\n\n当然再装gcc时有一些小问题，大多可以google到，这里记一点,如果出现 *** [stage1-bubble] 错误 2 \n`$ export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/lib64\n$ source /etc/profile`\n\ngcc -v 看一下，好了的话就开始PHP\n<!--more-->\n`$ wget http://cn2.php.net/get/php-7.0.4.tar.bz2/from/this/mirror\n$ tar xzvf mirror\n$ cd php-7.0.4/\n$ ./configure --prefix=/data/app/php7 --with-curl --with-freetype-dir --with-gd --with-gettext --with-iconv-dir --with-kerberos --with-libdir=lib64 --with-libxml-dir --with-mysqli --with-openssl --with-pcre-regex --with-pdo-mysql --with-pdo-sqlite --with-pear --with-png-dir --with-xmlrpc --with-xsl --with-zlib --enable-fpm --enable-bcmath --enable-libxml --enable-inline-optimization --enable-gd-native-ttf --enable-mbregex --enable-mbstring --enable-opcache --enable-pcntl --enable-shmop --enable-soap --enable-sockets --enable-sysvsem --enable-xml --enable-zip\n$ make && make install\n`\n\n完成后再做下配置\n`$ cp php.ini-product /data/app/php7/lib/php.ini\n$ cp /usr/local/php/etc/php-fpm.conf.default /data/app/php7/etc/php-fpm.conf\n$ cp /usr/local/php/etc/php-fpm.d/www.conf.default /data/app/php7/etc/php-fpm.d/www.conf\n$ cp -R ./sapi/fpm/init.d.php-fpm /etc/init.d/php7-fpm\n$ ln -s /data/app/php7/bin/php /usr/local/bin/php7\n$ service php-fpm stop\n$ service php7-fpm start\n`\n\n到这就完成了安装，如果启用PHP7后发现博客无法打开，那就把DEBUG打开吧，问题很好解决。再进行一些配置。\n\n启用Opcache, 在php.ini中加入:\n`zend_extension=opcache.so\nopcache.enable=1\nopcache.enable_cli=1\nopcache.file_cache=/tmp`\n\n最后，又换了一款Cache插件，这个比之前用的WP-cache , Hyper-cache 都好用，叫CometCache，使页面静态化，进一步提高页面打开速度。","slug":"wordpress-e7-bc-96-e8-af-91-e5-ae-89-e8-a3-85-php-7-0-4","published":1,"updated":"2018-01-13T05:07:00.448Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjccw7xeg00cbaqcrkmqd9yzn","content":"<p>好长时间没有理自己的博客了，今天正好有时间，把PHP升级到最新版本PHP 7.0.4。</p>\n<p>还是选择编译安装，PHP7 推荐 gcc 4.8以上，gcc -v 看了一下VPS才4.4，所以第一步先升级一下 gcc，这个过程比较长，可以先下部电影等着~~</p>\n<p>因为VPS配置太low，所以先准备一些，搞个临时swap </p>\n<p>`$ SWAP=/tmp/swap<br>$ dd if=/dev/zero of=$SWAP bs=1M count=1000<br>$ mkswap $SWAP<br>$ swapon $SWAP</p>\n<p>#最后记得关上<br>$ swapoff -a`</p>\n<p>ok , 开始······<br><code>$ wget http://ftp.tsukuba.wide.ad.jp/software/gcc/releases/gcc-5.3.0/gcc-5.3.0.tar.gz\n$ tar -xf gcc-5.3.0.tar.gz\n$ cd gcc-5.3.0\n$ ./contrib/download_prerequisites\n$ mkdir gcc_temp  &amp;&amp; cd gcc_temp\n$ ../configure --enable-checking=release --enable-languages=c,c++ --disable-multilib\n$ make &amp;&amp; make install</code></p>\n<p>当然再装gcc时有一些小问题，大多可以google到，这里记一点,如果出现 <em>*</em> [stage1-bubble] 错误 2<br><code>$ export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/lib64\n$ source /etc/profile</code></p>\n<p>gcc -v 看一下，好了的话就开始PHP<br><a id=\"more\"></a><br><code>$ wget http://cn2.php.net/get/php-7.0.4.tar.bz2/from/this/mirror\n$ tar xzvf mirror\n$ cd php-7.0.4/\n$ ./configure --prefix=/data/app/php7 --with-curl --with-freetype-dir --with-gd --with-gettext --with-iconv-dir --with-kerberos --with-libdir=lib64 --with-libxml-dir --with-mysqli --with-openssl --with-pcre-regex --with-pdo-mysql --with-pdo-sqlite --with-pear --with-png-dir --with-xmlrpc --with-xsl --with-zlib --enable-fpm --enable-bcmath --enable-libxml --enable-inline-optimization --enable-gd-native-ttf --enable-mbregex --enable-mbstring --enable-opcache --enable-pcntl --enable-shmop --enable-soap --enable-sockets --enable-sysvsem --enable-xml --enable-zip\n$ make &amp;&amp; make install</code></p>\n<p>完成后再做下配置<br><code>$ cp php.ini-product /data/app/php7/lib/php.ini\n$ cp /usr/local/php/etc/php-fpm.conf.default /data/app/php7/etc/php-fpm.conf\n$ cp /usr/local/php/etc/php-fpm.d/www.conf.default /data/app/php7/etc/php-fpm.d/www.conf\n$ cp -R ./sapi/fpm/init.d.php-fpm /etc/init.d/php7-fpm\n$ ln -s /data/app/php7/bin/php /usr/local/bin/php7\n$ service php-fpm stop\n$ service php7-fpm start</code></p>\n<p>到这就完成了安装，如果启用PHP7后发现博客无法打开，那就把DEBUG打开吧，问题很好解决。再进行一些配置。</p>\n<p>启用Opcache, 在php.ini中加入:<br><code>zend_extension=opcache.so\nopcache.enable=1\nopcache.enable_cli=1\nopcache.file_cache=/tmp</code></p>\n<p>最后，又换了一款Cache插件，这个比之前用的WP-cache , Hyper-cache 都好用，叫CometCache，使页面静态化，进一步提高页面打开速度。</p>\n","site":{"data":{}},"excerpt":"<p>好长时间没有理自己的博客了，今天正好有时间，把PHP升级到最新版本PHP 7.0.4。</p>\n<p>还是选择编译安装，PHP7 推荐 gcc 4.8以上，gcc -v 看了一下VPS才4.4，所以第一步先升级一下 gcc，这个过程比较长，可以先下部电影等着~~</p>\n<p>因为VPS配置太low，所以先准备一些，搞个临时swap </p>\n<p>`$ SWAP=/tmp/swap<br>$ dd if=/dev/zero of=$SWAP bs=1M count=1000<br>$ mkswap $SWAP<br>$ swapon $SWAP</p>\n<p>#最后记得关上<br>$ swapoff -a`</p>\n<p>ok , 开始······<br><code>$ wget http://ftp.tsukuba.wide.ad.jp/software/gcc/releases/gcc-5.3.0/gcc-5.3.0.tar.gz\n$ tar -xf gcc-5.3.0.tar.gz\n$ cd gcc-5.3.0\n$ ./contrib/download_prerequisites\n$ mkdir gcc_temp  &amp;&amp; cd gcc_temp\n$ ../configure --enable-checking=release --enable-languages=c,c++ --disable-multilib\n$ make &amp;&amp; make install</code></p>\n<p>当然再装gcc时有一些小问题，大多可以google到，这里记一点,如果出现 <em>*</em> [stage1-bubble] 错误 2<br><code>$ export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/lib64\n$ source /etc/profile</code></p>\n<p>gcc -v 看一下，好了的话就开始PHP<br>","more":"<br><code>$ wget http://cn2.php.net/get/php-7.0.4.tar.bz2/from/this/mirror\n$ tar xzvf mirror\n$ cd php-7.0.4/\n$ ./configure --prefix=/data/app/php7 --with-curl --with-freetype-dir --with-gd --with-gettext --with-iconv-dir --with-kerberos --with-libdir=lib64 --with-libxml-dir --with-mysqli --with-openssl --with-pcre-regex --with-pdo-mysql --with-pdo-sqlite --with-pear --with-png-dir --with-xmlrpc --with-xsl --with-zlib --enable-fpm --enable-bcmath --enable-libxml --enable-inline-optimization --enable-gd-native-ttf --enable-mbregex --enable-mbstring --enable-opcache --enable-pcntl --enable-shmop --enable-soap --enable-sockets --enable-sysvsem --enable-xml --enable-zip\n$ make &amp;&amp; make install</code></p>\n<p>完成后再做下配置<br><code>$ cp php.ini-product /data/app/php7/lib/php.ini\n$ cp /usr/local/php/etc/php-fpm.conf.default /data/app/php7/etc/php-fpm.conf\n$ cp /usr/local/php/etc/php-fpm.d/www.conf.default /data/app/php7/etc/php-fpm.d/www.conf\n$ cp -R ./sapi/fpm/init.d.php-fpm /etc/init.d/php7-fpm\n$ ln -s /data/app/php7/bin/php /usr/local/bin/php7\n$ service php-fpm stop\n$ service php7-fpm start</code></p>\n<p>到这就完成了安装，如果启用PHP7后发现博客无法打开，那就把DEBUG打开吧，问题很好解决。再进行一些配置。</p>\n<p>启用Opcache, 在php.ini中加入:<br><code>zend_extension=opcache.so\nopcache.enable=1\nopcache.enable_cli=1\nopcache.file_cache=/tmp</code></p>\n<p>最后，又换了一款Cache插件，这个比之前用的WP-cache , Hyper-cache 都好用，叫CometCache，使页面静态化，进一步提高页面打开速度。</p>"},{"title":"xampp 1.8 打开慢的解决方法","id":"1073","date":"2012-08-30T12:51:02.000Z","_content":"\n1.打开C:WindowsSystem32driversetchosts\n\n加入\n\n`127.0.0.1 127.0.0.1\n127.0.0.1 localhost`\n\n注释\n\n`# ::1 localhost`","source":"_posts/xampp-1-8-e6-89-93-e5-bc-80-e6-85-a2-e7-9a-84-e8-a7-a3-e5-86-b3-e6-96-b9-e6-b3-95.md","raw":"---\ntitle: xampp 1.8 打开慢的解决方法\nid: 1073\ncategories:\n  - PHP\ndate: 2012-08-30 20:51:02\ntags:\n---\n\n1.打开C:WindowsSystem32driversetchosts\n\n加入\n\n`127.0.0.1 127.0.0.1\n127.0.0.1 localhost`\n\n注释\n\n`# ::1 localhost`","slug":"xampp-1-8-e6-89-93-e5-bc-80-e6-85-a2-e7-9a-84-e8-a7-a3-e5-86-b3-e6-96-b9-e6-b3-95","published":1,"updated":"2018-01-13T05:07:00.456Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjccw7xei00ceaqcreyid6fcr","content":"<p>1.打开C:WindowsSystem32driversetchosts</p>\n<p>加入</p>\n<p><code>127.0.0.1 127.0.0.1\n127.0.0.1 localhost</code></p>\n<p>注释</p>\n<p><code># ::1 localhost</code></p>\n","site":{"data":{}},"excerpt":"","more":"<p>1.打开C:WindowsSystem32driversetchosts</p>\n<p>加入</p>\n<p><code>127.0.0.1 127.0.0.1\n127.0.0.1 localhost</code></p>\n<p>注释</p>\n<p><code># ::1 localhost</code></p>\n"},{"title":"xampp 访问出现New XAMPP security concept","id":"298","date":"2011-09-21T08:21:53.000Z","_content":"\n> New XAMPP security concept:\n> Access to the requested directory is only available from the local network.\n> This setting can be configured in the file “httpd-xampp.conf”.\n解决办法：\n\n打开httpd-xampp.conf(/xampp/apache/conf/extra/httpd-xampp.conf)\n\n将Deny from all这一行注释掉，即\n> #Deny from all\n需要重启apache","source":"_posts/xampp-e8-ae-bf-e9-97-ae-e5-87-ba-e7-8e-b0new-xampp-security-concept.md","raw":"---\ntitle: xampp 访问出现New XAMPP security concept\ntags:\n  - phpmyadmin\nid: 298\ncategories:\n  - PHP\ndate: 2011-09-21 16:21:53\n---\n\n> New XAMPP security concept:\n> Access to the requested directory is only available from the local network.\n> This setting can be configured in the file “httpd-xampp.conf”.\n解决办法：\n\n打开httpd-xampp.conf(/xampp/apache/conf/extra/httpd-xampp.conf)\n\n将Deny from all这一行注释掉，即\n> #Deny from all\n需要重启apache","slug":"xampp-e8-ae-bf-e9-97-ae-e5-87-ba-e7-8e-b0new-xampp-security-concept","published":1,"updated":"2018-01-13T05:07:00.481Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjccw7xek00ciaqcrs5533qfj","content":"<blockquote>\n<p>New XAMPP security concept:<br>Access to the requested directory is only available from the local network.<br>This setting can be configured in the file “httpd-xampp.conf”.<br>解决办法：</p>\n</blockquote>\n<p>打开httpd-xampp.conf(/xampp/apache/conf/extra/httpd-xampp.conf)</p>\n<p>将Deny from all这一行注释掉，即</p>\n<blockquote>\n<p>#Deny from all<br>需要重启apache</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>New XAMPP security concept:<br>Access to the requested directory is only available from the local network.<br>This setting can be configured in the file “httpd-xampp.conf”.<br>解决办法：</p>\n</blockquote>\n<p>打开httpd-xampp.conf(/xampp/apache/conf/extra/httpd-xampp.conf)</p>\n<p>将Deny from all这一行注释掉，即</p>\n<blockquote>\n<p>#Deny from all<br>需要重启apache</p>\n</blockquote>\n"},{"title":"xshell Solarized Dark配色","id":"1680","date":"2014-04-10T07:31:12.000Z","_content":"\nSolarized Dark Plus.xcs 注意每行末尾不要有空格\n`[Solarized Dark]\ntext=ffffff\ncyan(bold)=93a1a1\ntext(bold)=ffffff\nmagenta=dd3682\ngreen=2aa198\ngreen(bold)=859900\nbackground=002b36\ncyan=2aa198\nred(bold)=cb4b16\nyellow=b58900\nmagenta(bold)=6c71c4\nyellow(bold)=657b83\nred=dc322f\nwhite=eee8d5\nblue(bold)=268bd2\nwhite(bold)=fdf6e3\nblack=002b36\nblue=ffce3c\nblack(bold)=073642\n[Names]\nname0=Solarized Dark\ncount=1\n`","source":"_posts/xshell-solarized-darkk-e9-85-8d-e8-89-b2.md","raw":"---\ntitle: xshell Solarized Dark配色\ntags:\n  - xshell\nid: 1680\ncategories:\n  - Other\ndate: 2014-04-10 15:31:12\n---\n\nSolarized Dark Plus.xcs 注意每行末尾不要有空格\n`[Solarized Dark]\ntext=ffffff\ncyan(bold)=93a1a1\ntext(bold)=ffffff\nmagenta=dd3682\ngreen=2aa198\ngreen(bold)=859900\nbackground=002b36\ncyan=2aa198\nred(bold)=cb4b16\nyellow=b58900\nmagenta(bold)=6c71c4\nyellow(bold)=657b83\nred=dc322f\nwhite=eee8d5\nblue(bold)=268bd2\nwhite(bold)=fdf6e3\nblack=002b36\nblue=ffce3c\nblack(bold)=073642\n[Names]\nname0=Solarized Dark\ncount=1\n`","slug":"xshell-solarized-darkk-e9-85-8d-e8-89-b2","published":1,"updated":"2018-01-13T05:07:00.474Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjccw7xem00claqcr84nmc0op","content":"<p>Solarized Dark Plus.xcs 注意每行末尾不要有空格<br><code>[Solarized Dark]\ntext=ffffff\ncyan(bold)=93a1a1\ntext(bold)=ffffff\nmagenta=dd3682\ngreen=2aa198\ngreen(bold)=859900\nbackground=002b36\ncyan=2aa198\nred(bold)=cb4b16\nyellow=b58900\nmagenta(bold)=6c71c4\nyellow(bold)=657b83\nred=dc322f\nwhite=eee8d5\nblue(bold)=268bd2\nwhite(bold)=fdf6e3\nblack=002b36\nblue=ffce3c\nblack(bold)=073642\n[Names]\nname0=Solarized Dark\ncount=1</code></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Solarized Dark Plus.xcs 注意每行末尾不要有空格<br><code>[Solarized Dark]\ntext=ffffff\ncyan(bold)=93a1a1\ntext(bold)=ffffff\nmagenta=dd3682\ngreen=2aa198\ngreen(bold)=859900\nbackground=002b36\ncyan=2aa198\nred(bold)=cb4b16\nyellow=b58900\nmagenta(bold)=6c71c4\nyellow(bold)=657b83\nred=dc322f\nwhite=eee8d5\nblue(bold)=268bd2\nwhite(bold)=fdf6e3\nblack=002b36\nblue=ffce3c\nblack(bold)=073642\n[Names]\nname0=Solarized Dark\ncount=1</code></p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cjccw7x6o0000aqcr65w0yoh5","category_id":"cjccw7x6w0002aqcr5ukdbupe","_id":"cjccw7x7a0009aqcrm4yu3bvk"},{"post_id":"cjccw7x6u0001aqcrjf4v7imx","category_id":"cjccw7x740006aqcrjqxpdp3l","_id":"cjccw7x7e000eaqcru0wnr7j4"},{"post_id":"cjccw7x7a000baqcrxg0x4osh","category_id":"cjccw7x740006aqcrjqxpdp3l","_id":"cjccw7x7j000iaqcr833itws5"},{"post_id":"cjccw7x6z0003aqcrtqdwgqoc","category_id":"cjccw7x7a000aaqcr8ngxtdo6","_id":"cjccw7x7l000maqcroybpk8m8"},{"post_id":"cjccw7x7d000daqcrbciywkqy","category_id":"cjccw7x6w0002aqcr5ukdbupe","_id":"cjccw7x7p000oaqcroc9s500b"},{"post_id":"cjccw7x720004aqcr5023gkib","category_id":"cjccw7x7e000faqcrivy2l9dv","_id":"cjccw7x7r000saqcrc3ih01l5"},{"post_id":"cjccw7x7h000haqcrn55f5okq","category_id":"cjccw7x740006aqcrjqxpdp3l","_id":"cjccw7x7s000vaqcrjxf7nrfv"},{"post_id":"cjccw7x7k000laqcr14aylzu5","category_id":"cjccw7x740006aqcrjqxpdp3l","_id":"cjccw7x7u0010aqcrzcaby8cy"},{"post_id":"cjccw7x730005aqcrwlc8f1ub","category_id":"cjccw7x740006aqcrjqxpdp3l","_id":"cjccw7x7x0013aqcr639kblp0"},{"post_id":"cjccw7x7n000naqcr92r993t3","category_id":"cjccw7x740006aqcrjqxpdp3l","_id":"cjccw7x7z0017aqcrriiiharh"},{"post_id":"cjccw7x750007aqcre8mznrys","category_id":"cjccw7x7a000aaqcr8ngxtdo6","_id":"cjccw7x800019aqcrgrx8yn0o"},{"post_id":"cjccw7x7r000uaqcrcjvmygoj","category_id":"cjccw7x7a000aaqcr8ngxtdo6","_id":"cjccw7x81001baqcrsnqfm3bl"},{"post_id":"cjccw7x780008aqcrbt7asjma","category_id":"cjccw7x7e000faqcrivy2l9dv","_id":"cjccw7x83001gaqcr2bczbb7l"},{"post_id":"cjccw7x7v0012aqcren6dkx7i","category_id":"cjccw7x740006aqcrjqxpdp3l","_id":"cjccw7x85001jaqcredwulbdw"},{"post_id":"cjccw7x7z0018aqcrv1xdbo7t","category_id":"cjccw7x7a000aaqcr8ngxtdo6","_id":"cjccw7x87001naqcrula411ed"},{"post_id":"cjccw7x7e000gaqcrfthpcxra","category_id":"cjccw7x7x0015aqcrlrnwp8ot","_id":"cjccw7x88001qaqcro3e6nnp2"},{"post_id":"cjccw7x82001faqcr1ny6qptp","category_id":"cjccw7x740006aqcrjqxpdp3l","_id":"cjccw7x8a001uaqcrzqa447lh"},{"post_id":"cjccw7x7q000raqcrzclpi985","category_id":"cjccw7x81001daqcranhddtuc","_id":"cjccw7x8d001waqcrc7e5pnmo"},{"post_id":"cjccw7x84001iaqcrwl7rbg08","category_id":"cjccw7x740006aqcrjqxpdp3l","_id":"cjccw7x8g0020aqcrg45i174a"},{"post_id":"cjccw7x86001maqcr8nne83fo","category_id":"cjccw7x740006aqcrjqxpdp3l","_id":"cjccw7x8i0023aqcrzy7fayzq"},{"post_id":"cjccw7x7t000zaqcrzj3hr7x8","category_id":"cjccw7x86001laqcrex1xxtni","_id":"cjccw7x8j0026aqcr3twcgu0l"},{"post_id":"cjccw7x87001paqcre5m05dtt","category_id":"cjccw7x740006aqcrjqxpdp3l","_id":"cjccw7x8n002aaqcrafe3e2mo"},{"post_id":"cjccw7x89001taqcrt5ezgmpz","category_id":"cjccw7x6w0002aqcr5ukdbupe","_id":"cjccw7x8p002daqcr45h203ii"},{"post_id":"cjccw7x7x0016aqcrza7ajtv4","category_id":"cjccw7x89001saqcrhdja3b5x","_id":"cjccw7x8r002haqcr7tdbbdfs"},{"post_id":"cjccw7x8b001vaqcrnctfrmic","category_id":"cjccw7x6w0002aqcr5ukdbupe","_id":"cjccw7x8u002laqcra3nqw85h"},{"post_id":"cjccw7x8d001zaqcrzh6t3fv1","category_id":"cjccw7x740006aqcrjqxpdp3l","_id":"cjccw7x8w002oaqcrh6mcb1er"},{"post_id":"cjccw7x80001aaqcrj1ca1tcg","category_id":"cjccw7x89001saqcrhdja3b5x","_id":"cjccw7x8y002raqcrv2hkgy8t"},{"post_id":"cjccw7x8h0022aqcrquohcgl8","category_id":"cjccw7x6w0002aqcr5ukdbupe","_id":"cjccw7x90002uaqcr5iuj8oib"},{"post_id":"cjccw7x8i0025aqcr9hrj4i9k","category_id":"cjccw7x7a000aaqcr8ngxtdo6","_id":"cjccw7x92002waqcrhm5w1w59"},{"post_id":"cjccw7x8l0029aqcr9ckf7vmb","category_id":"cjccw7x89001saqcrhdja3b5x","_id":"cjccw7x94002zaqcrd4rtrpnx"},{"post_id":"cjccw7x8q002gaqcr2m5ujxqz","category_id":"cjccw7x86001laqcrex1xxtni","_id":"cjccw7x960033aqcrm8uzotva"},{"post_id":"cjccw7x8t002kaqcrnlpiqyr8","category_id":"cjccw7x7a000aaqcr8ngxtdo6","_id":"cjccw7x990036aqcr2cn5gxgq"},{"post_id":"cjccw7x8v002naqcrdmsktotk","category_id":"cjccw7x89001saqcrhdja3b5x","_id":"cjccw7x9b0039aqcrjphkokb4"},{"post_id":"cjccw7x8o002caqcr08uuijzl","category_id":"cjccw7x8r002jaqcr32j6xehr","_id":"cjccw7x9d003caqcrwbejlq9b"},{"post_id":"cjccw7x8x002qaqcrejss57yl","category_id":"cjccw7x6w0002aqcr5ukdbupe","_id":"cjccw7x9e003faqcr4i15k2c1"},{"post_id":"cjccw7x91002vaqcry7a9o8xk","category_id":"cjccw7x7a000aaqcr8ngxtdo6","_id":"cjccw7x9g003haqcrvs2baua5"},{"post_id":"cjccw7x92002yaqcrmfxrg0lm","category_id":"cjccw7x7a000aaqcr8ngxtdo6","_id":"cjccw7x9i003kaqcrv8se2bw8"},{"post_id":"cjccw7x950032aqcr6opipp92","category_id":"cjccw7x740006aqcrjqxpdp3l","_id":"cjccw7x9k003naqcrify888xm"},{"post_id":"cjccw7x8z002taqcr0fuarx3b","category_id":"cjccw7x92002xaqcradokyk92","_id":"cjccw7x9m003qaqcr737zgc9y"},{"post_id":"cjccw7x980035aqcrni2figst","category_id":"cjccw7x7e000faqcrivy2l9dv","_id":"cjccw7x9n003uaqcrehqwub3o"},{"post_id":"cjccw7x9a0038aqcr5yc4o05u","category_id":"cjccw7x92002xaqcradokyk92","_id":"cjccw7x9o003xaqcrjde6zry8"},{"post_id":"cjccw7x9c003baqcrnrf3hwzy","category_id":"cjccw7x86001laqcrex1xxtni","_id":"cjccw7x9r0041aqcrw4e03e1i"},{"post_id":"cjccw7x9e003eaqcr77s4d5fx","category_id":"cjccw7x81001daqcranhddtuc","_id":"cjccw7x9t0044aqcrfnjd9o7l"},{"post_id":"cjccw7x9f003gaqcrgzmb1c38","category_id":"cjccw7x740006aqcrjqxpdp3l","_id":"cjccw7x9w0048aqcry24lqki6"},{"post_id":"cjccw7x9h003jaqcrstjm5nvp","category_id":"cjccw7x7a000aaqcr8ngxtdo6","_id":"cjccw7x9y004baqcrmhlke29u"},{"post_id":"cjccw7x9j003maqcr5qzc7rta","category_id":"cjccw7x740006aqcrjqxpdp3l","_id":"cjccw7xa0004eaqcrdarn1gpl"},{"post_id":"cjccw7x9l003paqcr6ozvgimh","category_id":"cjccw7x81001daqcranhddtuc","_id":"cjccw7xa2004haqcr57yhhbb5"},{"post_id":"cjccw7x9m003taqcr8vrn920y","category_id":"cjccw7x6w0002aqcr5ukdbupe","_id":"cjccw7xa4004laqcr5u9c7q4a"},{"post_id":"cjccw7x9n003waqcr1zyc58ez","category_id":"cjccw7x89001saqcrhdja3b5x","_id":"cjccw7xab004oaqcr2db188uu"},{"post_id":"cjccw7x9q0040aqcrw6gk6akt","category_id":"cjccw7x6w0002aqcr5ukdbupe","_id":"cjccw7xae004qaqcre04s7043"},{"post_id":"cjccw7x9s0043aqcrqek5o0tc","category_id":"cjccw7x740006aqcrjqxpdp3l","_id":"cjccw7xag004vaqcrorg6khfo"},{"post_id":"cjccw7x9u0047aqcrzdqvmlb7","category_id":"cjccw7x740006aqcrjqxpdp3l","_id":"cjccw7xah004xaqcrnkwiog3t"},{"post_id":"cjccw7x9w004aaqcr9xhcn72s","category_id":"cjccw7x7e000faqcrivy2l9dv","_id":"cjccw7xai0050aqcrm2nxjiif"},{"post_id":"cjccw7x9z004daqcrsr3rxrhe","category_id":"cjccw7x6w0002aqcr5ukdbupe","_id":"cjccw7xaj0052aqcr7ff1le8r"},{"post_id":"cjccw7xa1004gaqcrl8ft32nm","category_id":"cjccw7x7a000aaqcr8ngxtdo6","_id":"cjccw7xal0055aqcr4w4eyeqi"},{"post_id":"cjccw7xa3004kaqcrh3lwglel","category_id":"cjccw7x7a000aaqcr8ngxtdo6","_id":"cjccw7xan0057aqcrnikk4vst"},{"post_id":"cjccw7xad004paqcrtxy7vxx0","category_id":"cjccw7x7a000aaqcr8ngxtdo6","_id":"cjccw7xao005aaqcrzhz417vp"},{"post_id":"cjccw7xaf004uaqcrhep7zsp5","category_id":"cjccw7x7e000faqcrivy2l9dv","_id":"cjccw7xap005daqcrvc6yjftg"},{"post_id":"cjccw7xag004waqcr9xg0km7p","category_id":"cjccw7x740006aqcrjqxpdp3l","_id":"cjccw7xaq005gaqcrly0cysnz"},{"post_id":"cjccw7xa5004naqcrmwdn20pt","category_id":"cjccw7xaf004saqcr7mwmjiyy","_id":"cjccw7xar005laqcr624y27uk"},{"post_id":"cjccw7xah004zaqcr5ll2u3i6","category_id":"cjccw7x740006aqcrjqxpdp3l","_id":"cjccw7xas005oaqcrmxo1c4oe"},{"post_id":"cjccw7xaj0051aqcrqssu69th","category_id":"cjccw7x7e000faqcrivy2l9dv","_id":"cjccw7xaw005raqcrtd8vq15o"},{"post_id":"cjccw7xak0054aqcrrkme5kw0","category_id":"cjccw7x740006aqcrjqxpdp3l","_id":"cjccw7xax005uaqcrewibd72a"},{"post_id":"cjccw7xam0056aqcr0wbhqahl","category_id":"cjccw7x7e000faqcrivy2l9dv","_id":"cjccw7xay005xaqcrvdqsdu5d"},{"post_id":"cjccw7xan0059aqcreqn0orxq","category_id":"cjccw7x7e000faqcrivy2l9dv","_id":"cjccw7xaz0060aqcrhqj911mm"},{"post_id":"cjccw7xap005faqcrpc6ncamb","category_id":"cjccw7x740006aqcrjqxpdp3l","_id":"cjccw7xb00063aqcredmgodcs"},{"post_id":"cjccw7xar005kaqcr0ewjp6il","category_id":"cjccw7x7e000faqcrivy2l9dv","_id":"cjccw7xb20066aqcrcqweicbp"},{"post_id":"cjccw7xas005naqcrjxfzqxj0","category_id":"cjccw7x740006aqcrjqxpdp3l","_id":"cjccw7xb30069aqcrnkaopjv1"},{"post_id":"cjccw7xao005caqcrottoqg89","category_id":"cjccw7xar005jaqcrd9wlll31","_id":"cjccw7xb5006baqcr53ezwu19"},{"post_id":"cjccw7xaw005taqcrerp55rj2","category_id":"cjccw7x7a000aaqcr8ngxtdo6","_id":"cjccw7xb6006eaqcrcwuug472"},{"post_id":"cjccw7xax005waqcrxcek1uxx","category_id":"cjccw7xar005jaqcrd9wlll31","_id":"cjccw7xb7006iaqcr7arv4qql"},{"post_id":"cjccw7xay005zaqcrwy1wgmz2","category_id":"cjccw7x740006aqcrjqxpdp3l","_id":"cjccw7xb8006laqcre3kql4dy"},{"post_id":"cjccw7xaz0062aqcreorbezx9","category_id":"cjccw7x7e000faqcrivy2l9dv","_id":"cjccw7xb9006paqcroqxz0fxl"},{"post_id":"cjccw7xb10065aqcr17ksr198","category_id":"cjccw7x7x0015aqcrlrnwp8ot","_id":"cjccw7xbb006raqcr3fren1ik"},{"post_id":"cjccw7xb30068aqcr0zudbwrb","category_id":"cjccw7x92002xaqcradokyk92","_id":"cjccw7xbc006uaqcrwwflzb5j"},{"post_id":"cjccw7xb4006aaqcrk953ayxw","category_id":"cjccw7x7a000aaqcr8ngxtdo6","_id":"cjccw7xbd006xaqcrba8eykuq"},{"post_id":"cjccw7xb5006daqcrao3lvzt8","category_id":"cjccw7x81001daqcranhddtuc","_id":"cjccw7xbf0071aqcry62w1mc9"},{"post_id":"cjccw7xb6006haqcrborhs8qh","category_id":"cjccw7x81001daqcranhddtuc","_id":"cjccw7xbg0074aqcrbjq3rn3l"},{"post_id":"cjccw7xb7006kaqcrcnxvjetq","category_id":"cjccw7x81001daqcranhddtuc","_id":"cjccw7xbi0076aqcrlmz9t8lf"},{"post_id":"cjccw7xb9006oaqcrpgf8x1b2","category_id":"cjccw7x7x0015aqcrlrnwp8ot","_id":"cjccw7xbk0079aqcri5vuayav"},{"post_id":"cjccw7xba006qaqcrdv1qap96","category_id":"cjccw7x81001daqcranhddtuc","_id":"cjccw7xbl007baqcrldix6r0k"},{"post_id":"cjccw7xbc006taqcrg3dq46rk","category_id":"cjccw7x7x0015aqcrlrnwp8ot","_id":"cjccw7xbm007eaqcrw66tugsu"},{"post_id":"cjccw7xbd006waqcro245shu6","category_id":"cjccw7x92002xaqcradokyk92","_id":"cjccw7xbn007gaqcrxkwel9gf"},{"post_id":"cjccw7xbe0070aqcrr1rxyjx2","category_id":"cjccw7x7a000aaqcr8ngxtdo6","_id":"cjccw7xbp007jaqcrgkbksobu"},{"post_id":"cjccw7xbg0073aqcrwv4qm8pn","category_id":"cjccw7x7e000faqcrivy2l9dv","_id":"cjccw7xbs007maqcrgnt3p0e5"},{"post_id":"cjccw7xbh0075aqcrdo3el7ry","category_id":"cjccw7x7a000aaqcr8ngxtdo6","_id":"cjccw7xbt007qaqcrha9xmcm8"},{"post_id":"cjccw7xbj0078aqcrr2qdya58","category_id":"cjccw7x7a000aaqcr8ngxtdo6","_id":"cjccw7xbu007taqcrz34vdany"},{"post_id":"cjccw7xbk007aaqcr8r123qw9","category_id":"cjccw7x7e000faqcrivy2l9dv","_id":"cjccw7xbw007waqcrqukp0omy"},{"post_id":"cjccw7xbl007daqcrgrnlpa2q","category_id":"cjccw7x7e000faqcrivy2l9dv","_id":"cjccw7xbx0080aqcrxi23isze"},{"post_id":"cjccw7xbm007faqcr3lfkkdgf","category_id":"cjccw7x7a000aaqcr8ngxtdo6","_id":"cjccw7xbz0083aqcr34fmjtxs"},{"post_id":"cjccw7xbo007iaqcrcjff7gts","category_id":"cjccw7x7a000aaqcr8ngxtdo6","_id":"cjccw7xc10087aqcr7ogycyjp"},{"post_id":"cjccw7xbr007laqcrvo2l1vtg","category_id":"cjccw7x7a000aaqcr8ngxtdo6","_id":"cjccw7xc3008aaqcrbo78y7ba"},{"post_id":"cjccw7xbs007paqcrwmpe9bp0","category_id":"cjccw7x8r002jaqcr32j6xehr","_id":"cjccw7xc4008eaqcresxo2vb9"},{"post_id":"cjccw7xbu007saqcr0larodl6","category_id":"cjccw7x8r002jaqcr32j6xehr","_id":"cjccw7xc6008haqcrrxhbkvn5"},{"post_id":"cjccw7xbv007vaqcrfwcjiv0p","category_id":"cjccw7x8r002jaqcr32j6xehr","_id":"cjccw7xc8008laqcr77sba2jc"},{"post_id":"cjccw7xbw007zaqcrwxk6m01g","category_id":"cjccw7x8r002jaqcr32j6xehr","_id":"cjccw7xca008oaqcr0z9gx06b"},{"post_id":"cjccw7xby0082aqcrl2dhkpbe","category_id":"cjccw7x8r002jaqcr32j6xehr","_id":"cjccw7xcc008saqcrb6znitvt"},{"post_id":"cjccw7xc00086aqcrb9i0vtad","category_id":"cjccw7x7a000aaqcr8ngxtdo6","_id":"cjccw7xcf008vaqcryg2u1mgc"},{"post_id":"cjccw7xc20089aqcrxcjlu8vf","category_id":"cjccw7x81001daqcranhddtuc","_id":"cjccw7xch008zaqcr16tdxcef"},{"post_id":"cjccw7xc3008daqcrl0dxukj9","category_id":"cjccw7x81001daqcranhddtuc","_id":"cjccw7xcj0092aqcrkx5rz2tk"},{"post_id":"cjccw7xc5008gaqcrqhhj43pl","category_id":"cjccw7x7e000faqcrivy2l9dv","_id":"cjccw7xcl0096aqcrgpt7unww"},{"post_id":"cjccw7xc7008kaqcr8jtb25sm","category_id":"cjccw7x740006aqcrjqxpdp3l","_id":"cjccw7xcm0099aqcru7fzqsgv"},{"post_id":"cjccw7xc9008naqcrxzkbapij","category_id":"cjccw7x740006aqcrjqxpdp3l","_id":"cjccw7xcp009daqcr30plgy9v"},{"post_id":"cjccw7xcb008raqcr7blwyenl","category_id":"cjccw7x8r002jaqcr32j6xehr","_id":"cjccw7xcr009gaqcrf3elz6np"},{"post_id":"cjccw7xcd008uaqcrjgmrr91w","category_id":"cjccw7x7a000aaqcr8ngxtdo6","_id":"cjccw7xcs009kaqcr3f9dxerv"},{"post_id":"cjccw7xcg008yaqcr80d5hqzd","category_id":"cjccw7x7a000aaqcr8ngxtdo6","_id":"cjccw7xcu009naqcrzxbpdud0"},{"post_id":"cjccw7xci0091aqcrjtmhdqpy","category_id":"cjccw7x7a000aaqcr8ngxtdo6","_id":"cjccw7xcw009raqcrtskn0xig"},{"post_id":"cjccw7xck0095aqcr3t88pf9h","category_id":"cjccw7x7a000aaqcr8ngxtdo6","_id":"cjccw7xcy009uaqcr5yimgki4"},{"post_id":"cjccw7xcl0098aqcrcnz8zi9i","category_id":"cjccw7x7a000aaqcr8ngxtdo6","_id":"cjccw7xd0009xaqcrcvs5p67a"},{"post_id":"cjccw7xco009caqcrnwm3d1e9","category_id":"cjccw7x740006aqcrjqxpdp3l","_id":"cjccw7xd200a1aqcrpvhnhru6"},{"post_id":"cjccw7xcq009faqcrad7xoj1k","category_id":"cjccw7x7a000aaqcr8ngxtdo6","_id":"cjccw7xd400a4aqcrdm0xpt7u"},{"post_id":"cjccw7xcr009jaqcr8aondnyi","category_id":"cjccw7x7a000aaqcr8ngxtdo6","_id":"cjccw7xd600a8aqcrruh1i6gv"},{"post_id":"cjccw7xct009maqcrjmg62my0","category_id":"cjccw7x89001saqcrhdja3b5x","_id":"cjccw7xd800abaqcrxosbyi4d"},{"post_id":"cjccw7xcv009qaqcr1i8ox0n3","category_id":"cjccw7x89001saqcrhdja3b5x","_id":"cjccw7xda00afaqcrktg5gc4k"},{"post_id":"cjccw7xcx009taqcrq34zko2k","category_id":"cjccw7x89001saqcrhdja3b5x","_id":"cjccw7xdd00aiaqcrpm0f1odo"},{"post_id":"cjccw7xcz009waqcruja69r8v","category_id":"cjccw7x89001saqcrhdja3b5x","_id":"cjccw7xdf00amaqcr3rkfbtf6"},{"post_id":"cjccw7xd100a0aqcrxvqmtkhk","category_id":"cjccw7x89001saqcrhdja3b5x","_id":"cjccw7xdg00apaqcrs8mymr40"},{"post_id":"cjccw7xd300a3aqcrurnlxmct","category_id":"cjccw7x89001saqcrhdja3b5x","_id":"cjccw7xdj00ataqcr69our4ri"},{"post_id":"cjccw7xd500a7aqcrr5d39mqn","category_id":"cjccw7x89001saqcrhdja3b5x","_id":"cjccw7xdl00awaqcrypomminj"},{"post_id":"cjccw7xd700aaaqcrno8c7jb6","category_id":"cjccw7x89001saqcrhdja3b5x","_id":"cjccw7xdn00b0aqcr85t1025d"},{"post_id":"cjccw7xd900aeaqcreretaeje","category_id":"cjccw7xaf004saqcr7mwmjiyy","_id":"cjccw7xdo00b3aqcr8uy90iwm"},{"post_id":"cjccw7xdc00ahaqcr5xy0n2yi","category_id":"cjccw7x81001daqcranhddtuc","_id":"cjccw7xdq00b6aqcrvh8wm8ng"},{"post_id":"cjccw7xde00alaqcrnw58anht","category_id":"cjccw7x8r002jaqcr32j6xehr","_id":"cjccw7xdt00baaqcrrfqphaog"},{"post_id":"cjccw7xdf00aoaqcrbrftzeyz","category_id":"cjccw7x7e000faqcrivy2l9dv","_id":"cjccw7xdv00beaqcr6p9ywuyt"},{"post_id":"cjccw7xdi00asaqcrznm1hjd0","category_id":"cjccw7x8r002jaqcr32j6xehr","_id":"cjccw7xdw00bhaqcrevhygyjh"},{"post_id":"cjccw7xdk00avaqcr79mro4xy","category_id":"cjccw7x81001daqcranhddtuc","_id":"cjccw7xdy00bkaqcrtdds7qpz"},{"post_id":"cjccw7xdm00azaqcro6k7pryz","category_id":"cjccw7x81001daqcranhddtuc","_id":"cjccw7xe000bnaqcr5wwsltxq"},{"post_id":"cjccw7xdn00b2aqcr8ffrrc3n","category_id":"cjccw7x8r002jaqcr32j6xehr","_id":"cjccw7xe200bqaqcr3s7o9deh"},{"post_id":"cjccw7xdr00b9aqcrpxom2f9s","category_id":"cjccw7x86001laqcrex1xxtni","_id":"cjccw7xe400btaqcrupu2zfrl"},{"post_id":"cjccw7xdt00bcaqcrln1z5op4","category_id":"cjccw7x7e000faqcrivy2l9dv","_id":"cjccw7xe500bwaqcr4cxk0tj9"},{"post_id":"cjccw7xdv00bgaqcr5wwexmki","category_id":"cjccw7x7e000faqcrivy2l9dv","_id":"cjccw7xe600bzaqcr68tz2nin"},{"post_id":"cjccw7xdp00b5aqcr0gh114w2","category_id":"cjccw7x7e000faqcrivy2l9dv","_id":"cjccw7xe900c2aqcrkjchq0fc"},{"post_id":"cjccw7xdp00b5aqcr0gh114w2","category_id":"cjccw7xdu00bdaqcrinyb0kqr","_id":"cjccw7xea00c5aqcr3pnzfilr"},{"post_id":"cjccw7xdx00bjaqcrv6dup522","category_id":"cjccw7x7e000faqcrivy2l9dv","_id":"cjccw7xec00c9aqcrbvqri84b"},{"post_id":"cjccw7xdy00bmaqcr1lia3omm","category_id":"cjccw7x7e000faqcrivy2l9dv","_id":"cjccw7xeh00ccaqcryn1w7kpt"},{"post_id":"cjccw7xe100bpaqcrt6v6fhhb","category_id":"cjccw7x7a000aaqcr8ngxtdo6","_id":"cjccw7xej00cgaqcriihar72f"},{"post_id":"cjccw7xe300bsaqcrc4nj271h","category_id":"cjccw7x7e000faqcrivy2l9dv","_id":"cjccw7xel00cjaqcrl2ud1crw"},{"post_id":"cjccw7xe400bvaqcrki5x1p5a","category_id":"cjccw7x86001laqcrex1xxtni","_id":"cjccw7xem00cmaqcr6t2pujae"},{"post_id":"cjccw7xe500byaqcrkqheewiz","category_id":"cjccw7x86001laqcrex1xxtni","_id":"cjccw7xen00cpaqcrj1bkqi82"},{"post_id":"cjccw7xe700c1aqcrysa4zor1","category_id":"cjccw7x86001laqcrex1xxtni","_id":"cjccw7xeo00craqcr1xabsiau"},{"post_id":"cjccw7xe900c4aqcrr4nfcglq","category_id":"cjccw7x7a000aaqcr8ngxtdo6","_id":"cjccw7xep00cuaqcrqtnm4nbl"},{"post_id":"cjccw7xeb00c8aqcrspgj0mwr","category_id":"cjccw7x740006aqcrjqxpdp3l","_id":"cjccw7xep00cwaqcruea2v5ue"},{"post_id":"cjccw7xeg00cbaqcrkmqd9yzn","category_id":"cjccw7x7a000aaqcr8ngxtdo6","_id":"cjccw7xeq00czaqcr12957a45"},{"post_id":"cjccw7xei00ceaqcreyid6fcr","category_id":"cjccw7x7a000aaqcr8ngxtdo6","_id":"cjccw7xeq00d1aqcraxvaswi2"},{"post_id":"cjccw7xek00ciaqcrs5533qfj","category_id":"cjccw7x7a000aaqcr8ngxtdo6","_id":"cjccw7xeq00d3aqcrzs4kf3z2"},{"post_id":"cjccw7xem00claqcr84nmc0op","category_id":"cjccw7x740006aqcrjqxpdp3l","_id":"cjccw7xeq00d5aqcre9w3r6no"}],"PostTag":[{"post_id":"cjccw7x780008aqcrbt7asjma","tag_id":"cjccw7x7c000caqcrepcdq1eb","_id":"cjccw7x7r000taqcrmku9408k"},{"post_id":"cjccw7x780008aqcrbt7asjma","tag_id":"cjccw7x7j000jaqcrlcdluvix","_id":"cjccw7x7s000waqcrdbpo0nra"},{"post_id":"cjccw7x7d000daqcrbciywkqy","tag_id":"cjccw7x7p000paqcr6jer292u","_id":"cjccw7x7u0011aqcr95qwzwa7"},{"post_id":"cjccw7x7e000gaqcrfthpcxra","tag_id":"cjccw7x7t000xaqcrr7ta0jzk","_id":"cjccw7x82001eaqcrv3p3qbhj"},{"post_id":"cjccw7x7e000gaqcrfthpcxra","tag_id":"cjccw7x7x0014aqcrhcnvq772","_id":"cjccw7x84001haqcrq5rpxy7j"},{"post_id":"cjccw7x7k000laqcr14aylzu5","tag_id":"cjccw7x81001caqcrnfgbr6xy","_id":"cjccw7x87001oaqcrus5srfgk"},{"post_id":"cjccw7x7q000raqcrzclpi985","tag_id":"cjccw7x86001kaqcrnceyybaa","_id":"cjccw7x8g0021aqcrpfq3p07b"},{"post_id":"cjccw7x7q000raqcrzclpi985","tag_id":"cjccw7x89001raqcrb80qtb98","_id":"cjccw7x8i0024aqcrd97z2xkt"},{"post_id":"cjccw7x8b001vaqcrnctfrmic","tag_id":"cjccw7x7p000paqcr6jer292u","_id":"cjccw7x8l0028aqcra2uyje7i"},{"post_id":"cjccw7x8h0022aqcrquohcgl8","tag_id":"cjccw7x7p000paqcr6jer292u","_id":"cjccw7x8n002baqcrwrirm3hb"},{"post_id":"cjccw7x84001iaqcrwl7rbg08","tag_id":"cjccw7x8d001xaqcrk1ldjdh4","_id":"cjccw7x8q002faqcrivdxsx8c"},{"post_id":"cjccw7x86001maqcr8nne83fo","tag_id":"cjccw7x8j0027aqcrbau2l1oj","_id":"cjccw7x8r002iaqcr8w27ro5l"},{"post_id":"cjccw7x8i0025aqcr9hrj4i9k","tag_id":"cjccw7x8p002eaqcrzxcte921","_id":"cjccw7x8w002paqcrroj69pgs"},{"post_id":"cjccw7x8o002caqcr08uuijzl","tag_id":"cjccw7x8u002maqcr5wuk8hvd","_id":"cjccw7x950031aqcrzffwrjtq"},{"post_id":"cjccw7x8o002caqcr08uuijzl","tag_id":"cjccw7x8z002saqcr2pbgtbp0","_id":"cjccw7x980034aqcrikvi9i2n"},{"post_id":"cjccw7x8t002kaqcrnlpiqyr8","tag_id":"cjccw7x940030aqcrqxyjalxq","_id":"cjccw7x9c003aaqcretre6sj2"},{"post_id":"cjccw7x8x002qaqcrejss57yl","tag_id":"cjccw7x9a0037aqcrbekithu2","_id":"cjccw7x9j003laqcr5ubrzdlt"},{"post_id":"cjccw7x8x002qaqcrejss57yl","tag_id":"cjccw7x9d003daqcr91yltmej","_id":"cjccw7x9l003oaqcrept085as"},{"post_id":"cjccw7x8x002qaqcrejss57yl","tag_id":"cjccw7x7p000paqcr6jer292u","_id":"cjccw7x9m003saqcr1bwhrl5a"},{"post_id":"cjccw7x8z002taqcr0fuarx3b","tag_id":"cjccw7x9h003iaqcr0hinu0kl","_id":"cjccw7x9n003vaqcrtnpb2dpp"},{"post_id":"cjccw7x9m003taqcr8vrn920y","tag_id":"cjccw7x7p000paqcr6jer292u","_id":"cjccw7x9q003zaqcr28v6cnmk"},{"post_id":"cjccw7x92002yaqcrmfxrg0lm","tag_id":"cjccw7x9m003raqcreh1od8bz","_id":"cjccw7x9s0042aqcrd90bozhh"},{"post_id":"cjccw7x9q0040aqcrw6gk6akt","tag_id":"cjccw7x7p000paqcr6jer292u","_id":"cjccw7x9t0046aqcrihqihfob"},{"post_id":"cjccw7x950032aqcr6opipp92","tag_id":"cjccw7x9p003yaqcrag0z5ww0","_id":"cjccw7x9w0049aqcrbb7zdex9"},{"post_id":"cjccw7x980035aqcrni2figst","tag_id":"cjccw7x9t0045aqcr89821nph","_id":"cjccw7xa1004faqcrdnp83ijf"},{"post_id":"cjccw7x9z004daqcrsr3rxrhe","tag_id":"cjccw7x7p000paqcr6jer292u","_id":"cjccw7xa2004iaqcrihchjygp"},{"post_id":"cjccw7x9a0038aqcr5yc4o05u","tag_id":"cjccw7x9h003iaqcr0hinu0kl","_id":"cjccw7xa4004maqcrpxqxktjc"},{"post_id":"cjccw7x9f003gaqcrgzmb1c38","tag_id":"cjccw7xa2004jaqcr0dlpywx0","_id":"cjccw7xaf004taqcrbngjm0hc"},{"post_id":"cjccw7x9h003jaqcrstjm5nvp","tag_id":"cjccw7xae004raqcrrxl97n8w","_id":"cjccw7xao005baqcrbburyebj"},{"post_id":"cjccw7x9h003jaqcrstjm5nvp","tag_id":"cjccw7xah004yaqcriq7oefvn","_id":"cjccw7xap005eaqcrzy796f18"},{"post_id":"cjccw7x9h003jaqcrstjm5nvp","tag_id":"cjccw7xak0053aqcr4o46ay7n","_id":"cjccw7xar005iaqcrqeesksaq"},{"post_id":"cjccw7x9l003paqcr6ozvgimh","tag_id":"cjccw7xan0058aqcrve1iejmt","_id":"cjccw7xas005maqcrnt5w8i3j"},{"post_id":"cjccw7x9n003waqcr1zyc58ez","tag_id":"cjccw7xaq005haqcr0upu2wgv","_id":"cjccw7xaw005saqcr63vuoxio"},{"post_id":"cjccw7x9s0043aqcrqek5o0tc","tag_id":"cjccw7xau005paqcrfoaf4qt5","_id":"cjccw7xay005yaqcr685isy05"},{"post_id":"cjccw7x9w004aaqcr9xhcn72s","tag_id":"cjccw7xax005vaqcrnu5zcgdl","_id":"cjccw7xb00064aqcrpe1iec4d"},{"post_id":"cjccw7xb30068aqcr0zudbwrb","tag_id":"cjccw7xah004yaqcriq7oefvn","_id":"cjccw7xb5006caqcr8djprq4g"},{"post_id":"cjccw7xa1004gaqcrl8ft32nm","tag_id":"cjccw7xak0053aqcr4o46ay7n","_id":"cjccw7xb6006gaqcrgy4by0i1"},{"post_id":"cjccw7xa1004gaqcrl8ft32nm","tag_id":"cjccw7xb20067aqcr9jdzx49t","_id":"cjccw7xb7006jaqcr4rlm2gol"},{"post_id":"cjccw7xb5006daqcrao3lvzt8","tag_id":"cjccw7x89001raqcrb80qtb98","_id":"cjccw7xb9006naqcr0zv4fq6z"},{"post_id":"cjccw7xa5004naqcrmwdn20pt","tag_id":"cjccw7xb6006faqcr24d5i8f6","_id":"cjccw7xbc006vaqcrlibjthen"},{"post_id":"cjccw7xa5004naqcrmwdn20pt","tag_id":"cjccw7xb8006maqcrcf2zl6y4","_id":"cjccw7xbe006yaqcr8g3tb3kr"},{"post_id":"cjccw7xad004paqcrtxy7vxx0","tag_id":"cjccw7xbb006saqcrh8wqlvck","_id":"cjccw7xbf0072aqcri3ojsy4o"},{"post_id":"cjccw7xaf004uaqcrhep7zsp5","tag_id":"cjccw7xbe006zaqcr88f6pjh7","_id":"cjccw7xbq007kaqcrfl161d3h"},{"post_id":"cjccw7xaf004uaqcrhep7zsp5","tag_id":"cjccw7xbi0077aqcrezwd1g4h","_id":"cjccw7xbs007naqcr03hrv51q"},{"post_id":"cjccw7xaf004uaqcrhep7zsp5","tag_id":"cjccw7xbl007caqcrnakr50xl","_id":"cjccw7xbt007raqcrg57oktpu"},{"post_id":"cjccw7xbm007faqcr3lfkkdgf","tag_id":"cjccw7xak0053aqcr4o46ay7n","_id":"cjccw7xbv007uaqcrdqcnd4yf"},{"post_id":"cjccw7xbo007iaqcrcjff7gts","tag_id":"cjccw7xak0053aqcr4o46ay7n","_id":"cjccw7xbw007yaqcr8bsytxqm"},{"post_id":"cjccw7xag004waqcr9xg0km7p","tag_id":"cjccw7xbn007haqcreffrw3cy","_id":"cjccw7xbx0081aqcrb2kwifhy"},{"post_id":"cjccw7xag004waqcr9xg0km7p","tag_id":"cjccw7x8z002saqcr2pbgtbp0","_id":"cjccw7xc00085aqcr7fa0tm3c"},{"post_id":"cjccw7xbr007laqcrvo2l1vtg","tag_id":"cjccw7xak0053aqcr4o46ay7n","_id":"cjccw7xc10088aqcr6eitpzrw"},{"post_id":"cjccw7xbs007paqcrwmpe9bp0","tag_id":"cjccw7x8u002maqcr5wuk8hvd","_id":"cjccw7xc3008caqcra1otkpd2"},{"post_id":"cjccw7xbu007saqcr0larodl6","tag_id":"cjccw7x8u002maqcr5wuk8hvd","_id":"cjccw7xc5008faqcri0qiu317"},{"post_id":"cjccw7xaj0051aqcrqssu69th","tag_id":"cjccw7x7c000caqcrepcdq1eb","_id":"cjccw7xc7008jaqcr5ldsa22m"},{"post_id":"cjccw7xaj0051aqcrqssu69th","tag_id":"cjccw7xbs007oaqcrgoggdxg0","_id":"cjccw7xc9008maqcres5wx98w"},{"post_id":"cjccw7xbv007vaqcrfwcjiv0p","tag_id":"cjccw7x8u002maqcr5wuk8hvd","_id":"cjccw7xca008paqcrcoaa5anj"},{"post_id":"cjccw7xbw007zaqcrwxk6m01g","tag_id":"cjccw7x8u002maqcr5wuk8hvd","_id":"cjccw7xcc008taqcrmn08k38m"},{"post_id":"cjccw7xam0056aqcr0wbhqahl","tag_id":"cjccw7xbs007oaqcrgoggdxg0","_id":"cjccw7xcg008waqcrvmnyiff4"},{"post_id":"cjccw7xby0082aqcrl2dhkpbe","tag_id":"cjccw7x8u002maqcr5wuk8hvd","_id":"cjccw7xci0090aqcr5q4ip6au"},{"post_id":"cjccw7xc00086aqcrb9i0vtad","tag_id":"cjccw7x8u002maqcr5wuk8hvd","_id":"cjccw7xcj0093aqcr45n7q6be"},{"post_id":"cjccw7xc00086aqcrb9i0vtad","tag_id":"cjccw7xbb006saqcrh8wqlvck","_id":"cjccw7xcl0097aqcrhflkye8x"},{"post_id":"cjccw7xan0059aqcreqn0orxq","tag_id":"cjccw7x7c000caqcrepcdq1eb","_id":"cjccw7xcn009aaqcrnhtf01pw"},{"post_id":"cjccw7xan0059aqcreqn0orxq","tag_id":"cjccw7xbs007oaqcrgoggdxg0","_id":"cjccw7xcp009eaqcrem2gfoli"},{"post_id":"cjccw7xan0059aqcreqn0orxq","tag_id":"cjccw7x7j000jaqcrlcdluvix","_id":"cjccw7xcr009haqcrw5jc83ir"},{"post_id":"cjccw7xc5008gaqcrqhhj43pl","tag_id":"cjccw7xbi0077aqcrezwd1g4h","_id":"cjccw7xcs009laqcr5qcw4tuc"},{"post_id":"cjccw7xc5008gaqcrqhhj43pl","tag_id":"cjccw7x8u002maqcr5wuk8hvd","_id":"cjccw7xcu009oaqcrqy3q767w"},{"post_id":"cjccw7xao005caqcrottoqg89","tag_id":"cjccw7xc3008baqcrm9mja8cf","_id":"cjccw7xcx009saqcruqkrn5pf"},{"post_id":"cjccw7xao005caqcrottoqg89","tag_id":"cjccw7xc6008iaqcrq5nohydv","_id":"cjccw7xcz009vaqcru006wlzz"},{"post_id":"cjccw7xcb008raqcr7blwyenl","tag_id":"cjccw7x8u002maqcr5wuk8hvd","_id":"cjccw7xd1009zaqcrc9ypjawh"},{"post_id":"cjccw7xcd008uaqcrjgmrr91w","tag_id":"cjccw7xak0053aqcr4o46ay7n","_id":"cjccw7xd200a2aqcrr91jif67"},{"post_id":"cjccw7xcg008yaqcr80d5hqzd","tag_id":"cjccw7xak0053aqcr4o46ay7n","_id":"cjccw7xd500a6aqcrpkoz05hi"},{"post_id":"cjccw7xar005kaqcr0ewjp6il","tag_id":"cjccw7xbs007oaqcrgoggdxg0","_id":"cjccw7xd700a9aqcrvp5eqfpg"},{"post_id":"cjccw7xar005kaqcr0ewjp6il","tag_id":"cjccw7xbi0077aqcrezwd1g4h","_id":"cjccw7xd800adaqcronhs2h2c"},{"post_id":"cjccw7xci0091aqcrjtmhdqpy","tag_id":"cjccw7xak0053aqcr4o46ay7n","_id":"cjccw7xdb00agaqcrha6lvecg"},{"post_id":"cjccw7xci0091aqcrjtmhdqpy","tag_id":"cjccw7x9d003daqcr91yltmej","_id":"cjccw7xdd00akaqcrfiqzeaup"},{"post_id":"cjccw7xck0095aqcr3t88pf9h","tag_id":"cjccw7xak0053aqcr4o46ay7n","_id":"cjccw7xdf00anaqcri0w6tkxp"},{"post_id":"cjccw7xas005naqcrjxfzqxj0","tag_id":"cjccw7xcj0094aqcridkd7ubq","_id":"cjccw7xdh00aqaqcrkql6vaed"},{"post_id":"cjccw7xcl0098aqcrcnz8zi9i","tag_id":"cjccw7xak0053aqcr4o46ay7n","_id":"cjccw7xdj00auaqcr243afgud"},{"post_id":"cjccw7xcq009faqcrad7xoj1k","tag_id":"cjccw7xb20067aqcr9jdzx49t","_id":"cjccw7xdl00axaqcrrqxgbufz"},{"post_id":"cjccw7xax005waqcrxcek1uxx","tag_id":"cjccw7xc3008baqcrm9mja8cf","_id":"cjccw7xdn00b1aqcrowsr3ujb"},{"post_id":"cjccw7xax005waqcrxcek1uxx","tag_id":"cjccw7xc6008iaqcrq5nohydv","_id":"cjccw7xdp00b4aqcr76ikq3e3"},{"post_id":"cjccw7xct009maqcrjmg62my0","tag_id":"cjccw7xaq005haqcr0upu2wgv","_id":"cjccw7xdq00b8aqcrwiw1xac9"},{"post_id":"cjccw7xcx009taqcrq34zko2k","tag_id":"cjccw7xaq005haqcr0upu2wgv","_id":"cjccw7xdt00bbaqcrxymqygtm"},{"post_id":"cjccw7xaz0062aqcreorbezx9","tag_id":"cjccw7xcu009paqcr118l7278","_id":"cjccw7xdv00bfaqcrdubppwb1"},{"post_id":"cjccw7xd100a0aqcrxvqmtkhk","tag_id":"cjccw7xaq005haqcr0upu2wgv","_id":"cjccw7xdw00biaqcr2iixpepl"},{"post_id":"cjccw7xb4006aaqcrk953ayxw","tag_id":"cjccw7xbb006saqcrh8wqlvck","_id":"cjccw7xdy00blaqcr09f9xrqf"},{"post_id":"cjccw7xd300a3aqcrurnlxmct","tag_id":"cjccw7xaq005haqcr0upu2wgv","_id":"cjccw7xe000boaqcr0s75vwp8"},{"post_id":"cjccw7xd500a7aqcrr5d39mqn","tag_id":"cjccw7xaq005haqcr0upu2wgv","_id":"cjccw7xe200braqcrmqqvx9p8"},{"post_id":"cjccw7xbc006taqcrg3dq46rk","tag_id":"cjccw7xd400a5aqcrvs6xpzj1","_id":"cjccw7xe400buaqcrosxx9epl"},{"post_id":"cjccw7xd700aaaqcrno8c7jb6","tag_id":"cjccw7xaq005haqcr0upu2wgv","_id":"cjccw7xe500bxaqcrn898vfjx"},{"post_id":"cjccw7xd900aeaqcreretaeje","tag_id":"cjccw7xb6006faqcr24d5i8f6","_id":"cjccw7xe600c0aqcrvljlh8bi"},{"post_id":"cjccw7xd900aeaqcreretaeje","tag_id":"cjccw7xb8006maqcrcf2zl6y4","_id":"cjccw7xe900c3aqcrqxa0gtd8"},{"post_id":"cjccw7xbg0073aqcrwv4qm8pn","tag_id":"cjccw7xbi0077aqcrezwd1g4h","_id":"cjccw7xea00c6aqcr02gtb5vd"},{"post_id":"cjccw7xbg0073aqcrwv4qm8pn","tag_id":"cjccw7x8z002saqcr2pbgtbp0","_id":"cjccw7xec00caaqcrmpf8w7cm"},{"post_id":"cjccw7xde00alaqcrnw58anht","tag_id":"cjccw7x8u002maqcr5wuk8hvd","_id":"cjccw7xeh00cdaqcrslmk8fet"},{"post_id":"cjccw7xde00alaqcrnw58anht","tag_id":"cjccw7xbl007caqcrnakr50xl","_id":"cjccw7xek00chaqcrrbpxfku0"},{"post_id":"cjccw7xbj0078aqcrr2qdya58","tag_id":"cjccw7xdd00ajaqcrmr6s26hm","_id":"cjccw7xel00ckaqcryou2w09i"},{"post_id":"cjccw7xdi00asaqcrznm1hjd0","tag_id":"cjccw7x8u002maqcr5wuk8hvd","_id":"cjccw7xen00coaqcrleqf7uxr"},{"post_id":"cjccw7xbk007aaqcr8r123qw9","tag_id":"cjccw7xbi0077aqcrezwd1g4h","_id":"cjccw7xen00cqaqcr4r9z7fmn"},{"post_id":"cjccw7xbk007aaqcr8r123qw9","tag_id":"cjccw7xdh00araqcrwu47a736","_id":"cjccw7xeo00csaqcrallrt47r"},{"post_id":"cjccw7xdn00b2aqcr8ffrrc3n","tag_id":"cjccw7x8u002maqcr5wuk8hvd","_id":"cjccw7xep00cvaqcre7a0g88d"},{"post_id":"cjccw7xbl007daqcrgrnlpa2q","tag_id":"cjccw7xbi0077aqcrezwd1g4h","_id":"cjccw7xep00cxaqcrzqwjfiuu"},{"post_id":"cjccw7xbl007daqcrgrnlpa2q","tag_id":"cjccw7xdm00ayaqcr64ncj9ic","_id":"cjccw7xeq00d0aqcruxrg93pm"},{"post_id":"cjccw7xbl007daqcrgrnlpa2q","tag_id":"cjccw7x8z002saqcr2pbgtbp0","_id":"cjccw7xeq00d2aqcr9liqk27t"},{"post_id":"cjccw7xdp00b5aqcr0gh114w2","tag_id":"cjccw7xcu009paqcr118l7278","_id":"cjccw7xeq00d4aqcrxc186t88"},{"post_id":"cjccw7xdr00b9aqcrpxom2f9s","tag_id":"cjccw7xcu009paqcr118l7278","_id":"cjccw7xeq00d6aqcrq7z97qge"},{"post_id":"cjccw7xdf00aoaqcrbrftzeyz","tag_id":"cjccw7xdq00b7aqcr7llv1yow","_id":"cjccw7xeq00d7aqcrho4ump4g"},{"post_id":"cjccw7xdt00bcaqcrln1z5op4","tag_id":"cjccw7xcu009paqcr118l7278","_id":"cjccw7xeq00d8aqcrn1hqzluo"},{"post_id":"cjccw7xdv00bgaqcr5wwexmki","tag_id":"cjccw7xcu009paqcr118l7278","_id":"cjccw7xeq00d9aqcryckdjkja"},{"post_id":"cjccw7xdx00bjaqcrv6dup522","tag_id":"cjccw7xcu009paqcr118l7278","_id":"cjccw7xer00daaqcr1mllwajy"},{"post_id":"cjccw7xdy00bmaqcr1lia3omm","tag_id":"cjccw7x7c000caqcrepcdq1eb","_id":"cjccw7xer00dbaqcrqh6cj764"},{"post_id":"cjccw7xdy00bmaqcr1lia3omm","tag_id":"cjccw7xcu009paqcr118l7278","_id":"cjccw7xer00dcaqcr037qjzcj"},{"post_id":"cjccw7xdy00bmaqcr1lia3omm","tag_id":"cjccw7x8u002maqcr5wuk8hvd","_id":"cjccw7xer00ddaqcrr9t3n49p"},{"post_id":"cjccw7xdy00bmaqcr1lia3omm","tag_id":"cjccw7xak0053aqcr4o46ay7n","_id":"cjccw7xer00deaqcrg6ij7eby"},{"post_id":"cjccw7xe300bsaqcrc4nj271h","tag_id":"cjccw7x9t0045aqcr89821nph","_id":"cjccw7xer00dfaqcr4droll0v"},{"post_id":"cjccw7xeg00cbaqcrkmqd9yzn","tag_id":"cjccw7xak0053aqcr4o46ay7n","_id":"cjccw7xer00dgaqcrwmam4i6b"},{"post_id":"cjccw7xek00ciaqcrs5533qfj","tag_id":"cjccw7xbb006saqcrh8wqlvck","_id":"cjccw7xer00dhaqcrw90p5v19"},{"post_id":"cjccw7xe700c1aqcrysa4zor1","tag_id":"cjccw7xea00c7aqcrcmgvreas","_id":"cjccw7xer00diaqcrq7qq3wwh"},{"post_id":"cjccw7xe700c1aqcrysa4zor1","tag_id":"cjccw7xej00cfaqcr0enwtcq1","_id":"cjccw7xer00djaqcrcpdv1smv"},{"post_id":"cjccw7xe700c1aqcrysa4zor1","tag_id":"cjccw7xen00cnaqcrj0f74wuj","_id":"cjccw7xer00dkaqcrtojcsik2"},{"post_id":"cjccw7xe900c4aqcrr4nfcglq","tag_id":"cjccw7xep00ctaqcre5highkb","_id":"cjccw7xer00dlaqcrimylcwtn"},{"post_id":"cjccw7xe900c4aqcrr4nfcglq","tag_id":"cjccw7xak0053aqcr4o46ay7n","_id":"cjccw7xer00dmaqcrjpui1x32"},{"post_id":"cjccw7xem00claqcr84nmc0op","tag_id":"cjccw7xep00cyaqcrxbb2oetk","_id":"cjccw7xer00dnaqcrkxgznsox"}],"Tag":[{"name":"apache","_id":"cjccw7x7c000caqcrepcdq1eb"},{"name":"mod_wsgi","_id":"cjccw7x7j000jaqcrlcdluvix"},{"name":"算法","_id":"cjccw7x7p000paqcr6jer292u"},{"name":"ajax","_id":"cjccw7x7t000xaqcrr7ta0jzk"},{"name":"bootstrap","_id":"cjccw7x7x0014aqcrhcnvq772"},{"name":"C/C++","_id":"cjccw7x81001caqcrnfgbr6xy"},{"name":"dex2jar","_id":"cjccw7x86001kaqcrnceyybaa"},{"name":"java","_id":"cjccw7x89001raqcrb80qtb98"},{"name":"redis","_id":"cjccw7x8d001xaqcrk1ldjdh4"},{"name":"sublime","_id":"cjccw7x8j0027aqcrbau2l1oj"},{"name":"composer","_id":"cjccw7x8p002eaqcrzxcte921"},{"name":"MySQL","_id":"cjccw7x8u002maqcr5wuk8hvd"},{"name":"Python","_id":"cjccw7x8z002saqcr2pbgtbp0"},{"name":"内存","_id":"cjccw7x940030aqcrqxyjalxq"},{"name":"大数据","_id":"cjccw7x9a0037aqcrbekithu2"},{"name":"大文件","_id":"cjccw7x9d003daqcr91yltmej"},{"name":"ie","_id":"cjccw7x9h003iaqcr0hinu0kl"},{"name":"排序","_id":"cjccw7x9m003raqcreh1od8bz"},{"name":"键盘","_id":"cjccw7x9p003yaqcrag0z5ww0"},{"name":"vagrant","_id":"cjccw7x9t0045aqcr89821nph"},{"name":"正则表达式","_id":"cjccw7xa2004jaqcr0dlpywx0"},{"name":"css","_id":"cjccw7xae004raqcrrxl97n8w"},{"name":"html","_id":"cjccw7xah004yaqcriq7oefvn"},{"name":"php","_id":"cjccw7xak0053aqcr4o46ay7n"},{"name":"设计模式","_id":"cjccw7xan0058aqcrve1iejmt"},{"name":"Qt","_id":"cjccw7xaq005haqcr0upu2wgv"},{"name":"https","_id":"cjccw7xau005paqcrfoaf4qt5"},{"name":"vps","_id":"cjccw7xax005vaqcrnu5zcgdl"},{"name":"phpstorm","_id":"cjccw7xb20067aqcr9jdzx49t"},{"name":"react","_id":"cjccw7xb6006faqcr24d5i8f6"},{"name":"react-native","_id":"cjccw7xb8006maqcrcf2zl6y4"},{"name":"phpmyadmin","_id":"cjccw7xbb006saqcrh8wqlvck"},{"name":"fedora","_id":"cjccw7xbe006zaqcr88f6pjh7"},{"name":"Linux &amp; Fedora","_id":"cjccw7xbi0077aqcrezwd1g4h"},{"name":"reviewboard","_id":"cjccw7xbl007caqcrnakr50xl"},{"name":"easy_install","_id":"cjccw7xbn007haqcreffrw3cy"},{"name":"gentoo","_id":"cjccw7xbs007oaqcrgoggdxg0"},{"name":"hadoop","_id":"cjccw7xc3008baqcrm9mja8cf"},{"name":"hive","_id":"cjccw7xc6008iaqcrq5nohydv"},{"name":"git","_id":"cjccw7xcj0094aqcridkd7ubq"},{"name":"Linux","_id":"cjccw7xcu009paqcr118l7278"},{"name":"js","_id":"cjccw7xd400a5aqcrvs6xpzj1"},{"name":"lavarel","_id":"cjccw7xdd00ajaqcrmr6s26hm"},{"name":"memcached","_id":"cjccw7xdh00araqcrwu47a736"},{"name":"pysvn","_id":"cjccw7xdm00ayaqcr64ncj9ic"},{"name":"rsync","_id":"cjccw7xdq00b7aqcr7llv1yow"},{"name":"windows8","_id":"cjccw7xea00c7aqcrcmgvreas"},{"name":"局域网","_id":"cjccw7xej00cfaqcr0enwtcq1"},{"name":"打印机","_id":"cjccw7xen00cnaqcrj0f74wuj"},{"name":"nginx","_id":"cjccw7xep00ctaqcre5highkb"},{"name":"xshell","_id":"cjccw7xep00cyaqcrxbb2oetk"}]}}